Buffer overflow in SetLogLevel when string provided has length > 256

### Problem
DBX_DBNAME::SetLogLevel() allocates a buffer of 256 bytes for the log level.

If the string provided through JS exceeds this length, we get a Segmentation Fault.

### Steps to Reproduce

1. Create a file named test.js with the following content:
```
var dbx = require('mg-dbx').dbx
var db = new dbx();
y = 'a'.repeat(512)
db.setloglevel(y)
```

2. Build from source with the following env. variables set:
    - `export CXXFLAGS='-fsanitize=address'`
    - `export LDFLAGS='-fsanitize=address'`
    - `node-gyp rebuild`

3. Find location of `libasan.so` (the location on your system may differ)
```
$ gcc -print-file-name=libasan.so

/usr/lib/gcc/x86_64-linux-gnu/12/libasan.so
```
4. Run
```
LD_PRELOAD=/usr/lib/gcc/x86_64-linux-gnu/12/libasan.so node test.js
```
5. Output is:
```
==1505634==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffef26c2090 at pc 0x7f6d05273061 bp 0x7ffef26c1c90 sp 0x7ffef26c1440
WRITE of size 512 at 0x7ffef26c2090 thread T0
#0 0x7f6d05273060 in __interceptor_memcpy ../../../../src/libsanitizer/             sanitizer_common/sanitizer_common_interceptors.inc:827
#1 0x559d8456067b in WriteUtf8Impl<unsigned char> ../deps/v8/src/api/api.cc:5862
#2 0x559d8456067b in v8::String::WriteUtf8(v8::Isolate*, char*, int, int*, int)     const ../deps/v8/src/api/api.cc:5957
#3 0x7f6d00a0f99b in dbx::SetLogLevel(v8::FunctionCallbackInfo<v8::Value>           const&) ../src/mg-dbx.cpp:712
```

### Proposed Fix

Ensure provided string fits in buffer
