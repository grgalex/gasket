ckmeans-native: Null-pointer deref when malloc fails in ckmeans()

### Problem
When the product of nValues * nClusters is sufficiently large, the calls to malloc [1] can fail, returning NULL.

Then, when accessing the first element of the resulting matrix, we get a Segmentation Fault as we're deref'ing a NULL pointer [2].

### How to Reproduce

Run the following program under GDB:

```
var ckmeans = require('./ckmeans.js')

// var arr = new Array(2 ** 32 - 1)
var arr = new Array(2 ** 20)
console.log(arr.length)
var nclusters = 2 ** 20

var result = ckmeans(arr, nclusters);
```

Output is:
```
Thread 1 "node_g" received signal SIGSEGV, Segmentation fault.
0x00007fab9c53dd0d in ckmeans (data=0x7fab967fd010, nValues=1048576, output=0x559055fab690, nClusters=1048576) at ../src/native/./ckmeans.c:152
152             matrix[i] = 0;
(gdb) bt
#0  0x00007fab9c53dd0d in ckmeans (data=0x7fab967fd010, nValues=1048576, output=0x559055fab690, nClusters=1048576) at ../src/native/./ckmeans.c:152
#1  0x00007fab9c53e5f5 in MyFunction (env=0x559055f2fa80, info=0x7ffca2edf900) at ../src/native/napi_ckmeans.c:58
#2  0x000055904665f5fe in operator() (__closure=0x7ffca2edf8b0, env=0x559055f2fa80) at ../src/js_native_api_v8.cc:503
#3  0x000055904666e093 in napi_env__::CallIntoModule<v8impl::(anonymous namespace)::FunctionCallbackWrapper::InvokeCallback()::<lambda(napi_env)>, v8impl::(an
onymous namespace)::FunctionCallbackWrapper::InvokeCallback()::<lambda(napi_env, v8::Local<v8::Value>)> >(struct {...} &&, struct {...} &&) (
    this=0x559055f2fa80, call=..., handle_exception=...) at ../src/js_native_api_v8.h:93
#4  0x000055904665f6c8 in v8impl::(anonymous namespace)::FunctionCallbackWrapper::InvokeCallback (this=0x7ffca2edf900) at ../src/js_native_api_v8.cc:503
#5  0x000055904665f229 in v8impl::(anonymous namespace)::FunctionCallbackWrapper::Invoke (info=...) at ../src/js_native_api_v8.cc:425
```

### Proposed Solution

Check the return values of malloc. If NULL, return early with appropriate error.



[1] https://github.com/schnerd/ckmeans/blob/5432eec9ab8585d636542c2c630863e4cf289994/packages/ckmeans-native/src/native/ckmeans.c#L147
[2] https://github.com/schnerd/ckmeans/blob/5432eec9ab8585d636542c2c630863e4cf289994/packages/ckmeans-native/src/native/ckmeans.c#L152
