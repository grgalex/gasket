{
  "pkgs_charon_no_bridges_file": [
    "0x-monorepo-development",
    "@2048k~evm-node",
    "@2060.io~ffi-napi",
    "abletonlink",
    "abletonlink-addon",
    "aerospike",
    "ailoy-node",
    "@antimatterhq~antimatter",
    "@ashok_gujjar92~symbology_18",
    "async-ioctl",
    "bglobal-signal",
    "bigint-buffer",
    "@calculux~connector",
    "canvas-mirror",
    "canvas-termuc",
    "canvas-zj-node-v1",
    "casclib",
    "@cbrewster~luna",
    "@cdktf~node-pty-prebuilt-multiarch",
    "chacent",
    "classic-level",
    "@cloudpss~zstd",
    "@codspeed~core",
    "@confluentinc~kafka-javascript",
    "confusablematcher-js-interop",
    "@contrast~agent-lib",
    "@contrast~distringuish",
    "@contrast~distringuish-prebuilt",
    "@contrast~stash",
    "@corbinu~couchbase",
    "corona-school-matching",
    "cozo-node",
    "cryptian",
    "@cryptlex~lexactivator",
    "@cryptlex~lexfloatclient",
    "cypher.js",
    "darknet-bindings",
    "data-ann-native-addon-test",
    "@datadog~native-iast-taint-tracking",
    "@datadog~native-metrics",
    "@datadog~pprof",
    "deasync",
    "deltachat-node",
    "@desktop.vision~libnut-linux",
    "dicom-dimse-native",
    "@dooub~rocksdb-nodejs",
    "@duck4i~llama",
    "duckdb",
    "@ecervo~canvas",
    "@eosrio~node-abieos",
    "@epaperjs~rpi-2in13-bc",
    "@episensor~bluetooth-hci-socket",
    "eris-sleep",
    "@evolvingriley~file-upload",
    "@faressoft~node-pty-prebuilt",
    "fast-uuidv4",
    "ffi-napi-v22",
    "fixed-node-canvas",
    "@flat~lame",
    "flock-rs",
    "flocon-new",
    "floweejs",
    "flush-all",
    "frankda-newrelic-native-metrics",
    "gc-watch",
    "gdal-async",
    "@glaced~glfw",
    "gl-client",
    "@gnaudio~jabra-node-sdk",
    "@goblinalchemist~nodejieba",
    "gpt4all",
    "@graphprotocol~indexer-native",
    "grpc",
    "grpc-patch",
    "grpc-zjl",
    "hikopenapi-node",
    "@homebridge~node-pty-prebuilt-multiarch",
    "hs-miner",
    "hybrixd",
    "@ibsolution~hana-client-promise",
    "@ices~node-addons-callbacks",
    "@ices~node-addons-hello",
    "@ionic~node-pty-prebuilt",
    "@ipshipyard~node-datachannel",
    "isolated-vm",
    "@jamesernator~weakref",
    "@jsxt~weakref",
    "koru",
    "kuzu",
    "lame-private-no-maintainence-shrug2",
    "leo-test-cpp-module",
    "@lgeiger~napi-prebuild-starter",
    "libraw.js",
    "libtidy",
    "libtidy-updated",
    "@lifbi_tbt~win-audio",
    "live-elements-js-compiler",
    "lp_solve",
    "luckzhiwei-lib",
    "malgo",
    "matrix-seshat-prebuild",
    "mcrypt",
    "@meza~curseforge-fingerprint",
    "mishiro-core",
    "mker",
    "mongodb-client-encryption",
    "mp4decrypt-buffer",
    "mp4decryptjs",
    "msoconv",
    "nan-hello-world",
    "nanosecond-timer",
    "napi-addon-fdtd",
    "napi-oniguruma",
    "native-cypher",
    "native-fork",
    "native-hello-world",
    "@nmarks~dd-trace",
    "node-crfpp",
    "node-datachannel",
    "node-gdx",
    "node-gpgpu",
    "node-hdiffpatch",
    "node-jvt",
    "node-libtidy",
    "node-pty",
    "node-pty-binaries",
    "node-pty-prebuilt-multiarch",
    "node-rdkafka",
    "node-tree-sitter-electron-arraybuffer",
    "@nordicsemiconductor~nrf-device-lib-js",
    "nuv",
    "nvcodec",
    "nvidia-codec",
    "nwework-sdk",
    "@nxtedition~rocksdb",
    "oniguruma",
    "oniguruma-prebuilt",
    "@paulcbetts~gc",
    "@pg-nano~pg-parser",
    "pkg-meta",
    "playcap",
    "prebuilt-example",
    "primo-app-example",
    "profoundjs-node-pty",
    "promise-await",
    "querymimedb",
    "raknet-native",
    "rdtsc",
    "re2",
    "reliance-dicom-dimse-native",
    "rpi-led-matrix",
    "rusage2",
    "sample-nodejs-function",
    "@savearray2~py.js",
    "@savoirfairelinux~node-server-example",
    "scrollbar-style",
    "sharp-lite",
    "sigignore",
    "@sirherobrine23~cppzst",
    "sodium",
    "@soruly~opencv4nodejs-prebuilt",
    "sq-native",
    "@suldashi~lame",
    "@swimm~tree-sitter-ruby",
    "symbology",
    "system-time",
    "tdlib-native",
    "@tensorflow~tfjs-node",
    "@tensorflow~tfjs-node-gpu",
    "@terminus-term~node-pty",
    "@theia~node-pty",
    "@three-em~node",
    "transparent-titlebar",
    "@trbll~nodeimu",
    "tree-sitter",
    "tree-sitter-4dm",
    "tree-sitter-agda",
    "tree-sitter-elm",
    "tree-sitter-hacklang",
    "tree-sitter-hla-assembly",
    "tree-sitter-howl",
    "tree-sitter-kpl",
    "tree-sitter-pascalabcnet",
    "tree-sitter-pts",
    "tree-sitter-regent",
    "tree-sitter-regex-unicode-js",
    "tree-sitter-spiral",
    "tree-sitter-start",
    "tree-sitter-v",
    "tree-sitter-verilog",
    "tree-sitter-wake",
    "tree-sitter-zig",
    "@turtlecoin~crypto",
    "udx-native-nodejs-mobile",
    "u-framework",
    "@unrest~form",
    "wdeasync",
    "xd-synchttp",
    "@xiaobaidadada~node-pty-prebuilt",
    "@xiaobaidadada~node-tuntap2-wintun",
    "xprofiler",
    "@yaguara~dd-trace",
    "@yang8guang~npm-test100",
    "zucc"
  ],
  "all_bridges": {
    "0x-monorepo-development": {
      "Gasket": [
        "(publicKeyCreate,PublicKeyCreate)",
        "(publicKeyTweakAdd,PublicKeyTweakAdd)",
        "(signatureNormalize,SignatureNormalize)",
        "(Secp256k1,Secp256k1Addon)",
        "(privateKeyNegate,PrivateKeyNegate)",
        "(squeeze,Squeeze)",
        "(publicKeyVerify,PublicKeyVerify)",
        "(ecdh,ECDH)",
        "(ecdsaRecover,ECDSARecover)",
        "(publicKeyTweakMul,PublicKeyTweakMul)",
        "(ecdsaSign,ECDSASign)",
        "(initialize,Initialize)",
        "(signatureExport,SignatureExport)",
        "(absorbLastFewBits,AbsorbLastFewBits)",
        "(privateKeyVerify,PrivateKeyVerify)",
        "(signatureImport,SignatureImport)",
        "(contextRandomize,ContextRandomize)",
        "(privateKeyTweakAdd,PrivateKeyTweakAdd)",
        "(copy,Copy)",
        "(publicKeyCombine,PublicKeyCombine)",
        "(publicKeyConvert,PublicKeyConvert)",
        "(publicKeyNegate,PublicKeyNegate)",
        "(ecdsaVerify,ECDSAVerify)",
        "(privateKeyTweakMul,PrivateKeyTweakMul)",
        "(glibc,KeccakWrapper)",
        "(absorb,Absorb)"
      ],
      "Charon": []
    },
    "@131/sqlite3": {
      "Gasket": [
        "(exec,Exec)",
        "(each,Each)",
        "(reset,Reset)",
        "(Database,New)",
        "(get,Get)",
        "(run,Run)",
        "(Backup,New)",
        "(all,All)",
        "(close,Close)",
        "(parallelize,Parallelize)",
        "(interrupt,Interrupt)",
        "(loadExtension,LoadExtension)",
        "(serialize,Serialize)",
        "(step,Step)",
        "(wait,Wait)",
        "(bind,Bind)",
        "(finalize,Finalize)",
        "(configure,Configure)",
        "(finish,Finish)",
        "(Statement,New)"
      ],
      "Charon": [
        "(step,Step)",
        "(finish,Finish)",
        "(idle,IdleGetter)",
        "(completed,CompletedGetter)",
        "(failed,FailedGetter)",
        "(remaining,RemainingGetter)",
        "(pageCount,PageCountGetter)",
        "(close,Close)",
        "(exec,Exec)",
        "(wait,Wait)",
        "(loadExtension,LoadExtension)",
        "(serialize,Serialize)",
        "(parallelize,Parallelize)",
        "(configure,Configure)",
        "(interrupt,Interrupt)",
        "(open,OpenGetter)",
        "(bind,Bind)",
        "(get,Get)",
        "(run,Run)",
        "(all,All)",
        "(each,Each)",
        "(reset,Reset)",
        "(finalize,Finalize)"
      ]
    },
    "@2048k/evm-node": {
      "Gasket": [
        "(run,h1e379b98904665d0)"
      ],
      "Charon": []
    },
    "@2060.io/ffi-napi": {
      "Gasket": [
        "(initializeBindings,InitializeBindings)"
      ],
      "Charon": []
    },
    "@3xpo/argon2": {
      "Gasket": [
        "(hash,Hash)"
      ],
      "Charon": []
    },
    "64": {
      "Gasket": [
        "(decode,Decode)",
        "(encode,Encode)"
      ],
      "Charon": [
        "(encode,Encode)",
        "(decode,Decode)"
      ]
    },
    "@6river/sqlite3": {
      "Gasket": [
        "(exec,Exec)",
        "(each,Each)",
        "(reset,Reset)",
        "(Database,New)",
        "(get,Get)",
        "(run,Run)",
        "(Backup,New)",
        "(all,All)",
        "(close,Close)",
        "(parallelize,Parallelize)",
        "(interrupt,Interrupt)",
        "(loadExtension,LoadExtension)",
        "(serialize,Serialize)",
        "(step,Step)",
        "(wait,Wait)",
        "(bind,Bind)",
        "(finalize,Finalize)",
        "(configure,Configure)",
        "(finish,Finish)",
        "(Statement,New)"
      ],
      "Charon": [
        "(step,Step)",
        "(finish,Finish)",
        "(idle,IdleGetter)",
        "(completed,CompletedGetter)",
        "(failed,FailedGetter)",
        "(remaining,RemainingGetter)",
        "(pageCount,PageCountGetter)",
        "(close,Close)",
        "(exec,Exec)",
        "(wait,Wait)",
        "(loadExtension,LoadExtension)",
        "(serialize,Serialize)",
        "(parallelize,Parallelize)",
        "(configure,Configure)",
        "(interrupt,Interrupt)",
        "(open,OpenGetter)",
        "(bind,Bind)",
        "(get,Get)",
        "(run,Run)",
        "(all,All)",
        "(each,Each)",
        "(reset,Reset)",
        "(finalize,Finalize)"
      ]
    },
    "@aabuhijleh/forcefocus": {
      "Gasket": [
        "(focusWindow,FocusWindowExport)"
      ],
      "Charon": [
        "(focusWindow,FocusWindowExport)"
      ]
    },
    "@abandonware/bluetooth-hci-socket": {
      "Gasket": [
        "(start,Start)",
        "(stop,Stop)",
        "(write,Write)",
        "(bindControl,BindControl)",
        "(cleanup,Cleanup)",
        "(isDevUp,IsDevUp)",
        "(bindRaw,BindRaw)",
        "(getDeviceList,GetDeviceList)",
        "(BluetoothHciSocket,New)",
        "(bindUser,BindUser)",
        "(setFilter,SetFilter)"
      ],
      "Charon": [
        "(start,Start)",
        "(bindRaw,BindRaw)",
        "(bindUser,BindUser)",
        "(bindControl,BindControl)",
        "(isDevUp,IsDevUp)",
        "(getDeviceList,GetDeviceList)",
        "(setFilter,SetFilter)",
        "(stop,Stop)",
        "(write,Write)",
        "(cleanup,Cleanup)"
      ]
    },
    "abletonlink": {
      "Gasket": [
        "(setIsPlayStateSync,setIsPlayStateSync)",
        "(disablePlayStateSync,disablePlayStateSync)",
        "(AbletonLinkAudio,true)",
        "(getIsPlaying,getIsPlaying)",
        "(enable,enable)",
        "(onNumPeersChanged,onNumPeersChanged)",
        "(AbletonLink,false)",
        "(stop,stop)",
        "(getPhase,getPhase)",
        "(onTempoChanged,onTempoChanged)",
        "(getIsPlayStateSync,getIsPlayStateSync)",
        "(getQuantum,getQuantum)",
        "(update,update)",
        "(getBeat,getBeat)",
        "(enablePlayStateSync,enablePlayStateSync)",
        "(setBpm,setBpm)",
        "(off,off)",
        "(getLinkEnable,getLinkEnable)",
        "(getBpm,getBpm)",
        "(setBeat,setBeat)",
        "(setBeatForce,setBeatForce)",
        "(onPlayStateChanged,onPlayStateChanged)",
        "(setQuantum,setQuantum)",
        "(setLinkEnable,setLinkEnable)",
        "(disable,disable)",
        "(setIsPlaying,setIsPlaying)",
        "(play,play)",
        "(on,on)",
        "(getNumPeers,getNumPeers)"
      ],
      "Charon": []
    },
    "abletonlink-addon": {
      "Gasket": [
        "(forceBeat,forceBeat)",
        "(enableStartStopSync,enableStartStopSync)",
        "(MyLink,MyLink)",
        "(getTempo,getTempo)",
        "(enable,enable)",
        "(stop,stop)",
        "(isPlaying,isPlaying)",
        "(getPhase,getPhase)",
        "(requestBeat,requestBeat)",
        "(setAudioThread,setAudioThread)",
        "(getQuantum,getQuantum)",
        "(setTempo,setTempo)",
        "(getBeat,getBeat)",
        "(setStartStopCallback,setStartStopCallback)",
        "(isStartStopSyncEnabled,isStartStopSyncEnabled)",
        "(setTempoCallback,setTempoCallback)",
        "(isEnabled,isEnabled)",
        "(setQuantum,setQuantum)",
        "(disable,disable)",
        "(disableStartStopSync,disableStartStopSync)",
        "(play,play)",
        "(setNumPeersCallback,setNumPeersCallback)",
        "(setAppThread,setAppThread)",
        "(getNumPeers,getNumPeers)",
        "(isAudioThread,isAudioThread)"
      ],
      "Charon": []
    },
    "abstract-socket": {
      "Gasket": [
        "(socket,Socket)",
        "(close,Close)",
        "(connect,Connect)",
        "(bind,Bind)"
      ],
      "Charon": [
        "(socket,Socket)",
        "(bind,Bind)",
        "(connect,Connect)",
        "(close,Close)"
      ]
    },
    "ac-syslogh": {
      "Gasket": [
        "(syslog,syslog)",
        "(openlog,openlog)",
        "(closelog,closelog)"
      ],
      "Charon": [
        "(openlog,openlog)",
        "(syslog,syslog)",
        "(closelog,closelog)"
      ]
    },
    "actual-crash": {
      "Gasket": [
        "(crash,Crash)"
      ],
      "Charon": [
        "(crash,Crash)"
      ]
    },
    "addlib": {
      "Gasket": [
        "(add,Add)"
      ],
      "Charon": [
        "(add,Add)"
      ]
    },
    "addonie": {
      "Gasket": [
        "(ClassExample,ClassExample)",
        "(add,AddWrapped)",
        "(hello,HelloWrapped)",
        "(getValue,GetValue)",
        "(add,Add)"
      ],
      "Charon": []
    },
    "@adeperio/forcefocus": {
      "Gasket": [
        "(focusWindow,FocusWindowExport)"
      ],
      "Charon": [
        "(focusWindow,FocusWindowExport)"
      ]
    },
    "ads-kerberos": {
      "Gasket": [
        "(initializeClient,InitializeClient)",
        "(step,Step)",
        "(initializeServer,InitializeServer)",
        "(wrap,WrapData)",
        "(_testMethod,TestMethod)",
        "(principalDetails,PrincipalDetails)",
        "(unwrap,UnwrapData)",
        "(checkPassword,CheckPassword)"
      ],
      "Charon": [
        "(step,Step)",
        "(wrap,WrapData)",
        "(unwrap,UnwrapData)",
        "(username,KerberosClient)",
        "(response,KerberosClient)",
        "(responseConf,KerberosClient)",
        "(contextComplete,KerberosClient)",
        "(username,KerberosServer)",
        "(response,KerberosServer)",
        "(targetName,KerberosServer)",
        "(contextComplete,KerberosServer)",
        "(initializeClient,InitializeClient)",
        "(initializeServer,InitializeServer)",
        "(principalDetails,PrincipalDetails)",
        "(checkPassword,CheckPassword)",
        "(_testMethod,TestMethod)"
      ]
    },
    "ads-kerberos2": {
      "Gasket": [
        "(initializeClient,InitializeClient)",
        "(step,Step)",
        "(initializeServer,InitializeServer)",
        "(wrap,WrapData)",
        "(_testMethod,TestMethod)",
        "(principalDetails,PrincipalDetails)",
        "(unwrap,UnwrapData)",
        "(checkPassword,CheckPassword)"
      ],
      "Charon": [
        "(step,Step)",
        "(wrap,WrapData)",
        "(unwrap,UnwrapData)",
        "(username,KerberosClient)",
        "(response,KerberosClient)",
        "(responseConf,KerberosClient)",
        "(contextComplete,KerberosClient)",
        "(username,KerberosServer)",
        "(response,KerberosServer)",
        "(targetName,KerberosServer)",
        "(contextComplete,KerberosServer)",
        "(initializeClient,InitializeClient)",
        "(initializeServer,InitializeServer)",
        "(principalDetails,PrincipalDetails)",
        "(checkPassword,CheckPassword)",
        "(_testMethod,TestMethod)"
      ]
    },
    "aerospike": {
      "Gasket": [
        "(register_as_event_loop,register_as_event_loop)",
        "(transaction,transaction)",
        "(get_cluster_count,get_cluster_count)",
        "(unref_as_event_loop,unref_as_event_loop)",
        "(release_as_event_loop,release_as_event_loop)",
        "(client,client)",
        "(ref_as_event_loop,ref_as_event_loop)",
        "(setDefaultLogging,setDefaultLogging)"
      ],
      "Charon": []
    },
    "aes-ccm": {
      "Gasket": [
        "(encrypt,CcmEncrypt)",
        "(decrypt,CcmDecrypt)"
      ],
      "Charon": [
        "(encrypt,CcmEncrypt)",
        "(decrypt,CcmDecrypt)"
      ]
    },
    "ailoy-node": {
      "Gasket": [
        "(stopThreads,stop_threads)",
        "(getShape,get_shape)",
        "(generateUUID,generate_uuid)",
        "(startThreads,start_threads)",
        "(BrokerClient,js_broker_client_t)",
        "(getDtype,get_dtype)",
        "(getData,get_data)",
        "(send_type3,send_type3)",
        "(send_type1,send_type1)",
        "(send_type2,send_type2)",
        "(listen,listen)",
        "(NDArray,js_ndarray_t)"
      ],
      "Charon": []
    },
    "@aimelo/lua": {
      "Gasket": [
        "(close,Close)",
        "(PomeloLua,PomeloLua)",
        "(doString,DoString)"
      ],
      "Charon": [
        "(result,Number)"
      ]
    },
    "@airbnb/node-memwatch": {
      "Gasket": [
        "(HeapDiff,New)",
        "(end,End)",
        "(gc,trigger_gc)",
        "(upon_gc,upon_gc)"
      ],
      "Charon": [
        "(end,End)"
      ]
    },
    "@aitsys/sharp": {
      "Gasket": [
        "(counters,counters)",
        "(format,format)",
        "(pipeline,pipeline)",
        "(_maxColourDistance,_maxColourDistance)",
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(libvipsVersion,libvipsVersion)",
        "(cache,cache)",
        "(stats,stats)",
        "(concurrency,concurrency)",
        "(simd,simd)",
        "(metadata,metadata)"
      ],
      "Charon": [
        "(metadata,metadata)",
        "(pipeline,pipeline)",
        "(cache,cache)",
        "(concurrency,concurrency)",
        "(counters,counters)",
        "(simd,simd)",
        "(libvipsVersion,libvipsVersion)",
        "(format,format)",
        "(_maxColourDistance,_maxColourDistance)",
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(stats,stats)"
      ]
    },
    "@akikowo/chemical-balancer": {
      "Gasket": [
        "(balance,Balance)"
      ],
      "Charon": [
        "(balance,Balance)"
      ]
    },
    "@akimasa/vscode-sqlite3": {
      "Gasket": [
        "(wait,Wait)",
        "(all,All)",
        "(finish,Finish)",
        "(Database,New)",
        "(finalize,Finalize)",
        "(get,Get)",
        "(parallelize,Parallelize)",
        "(serialize,Serialize)",
        "(Backup,New)",
        "(loadExtension,LoadExtension)",
        "(reset,Reset)",
        "(close,Close)",
        "(each,Each)",
        "(configure,Configure)",
        "(run,Run)",
        "(Statement,New)",
        "(step,Step)",
        "(exec,Exec)",
        "(bind,Bind)",
        "(interrupt,Interrupt)"
      ],
      "Charon": [
        "(step,Step)",
        "(finish,Finish)",
        "(idle,IdleGetter)",
        "(completed,CompletedGetter)",
        "(failed,FailedGetter)",
        "(remaining,RemainingGetter)",
        "(pageCount,PageCountGetter)",
        "(close,Close)",
        "(exec,Exec)",
        "(wait,Wait)",
        "(loadExtension,LoadExtension)",
        "(serialize,Serialize)",
        "(parallelize,Parallelize)",
        "(configure,Configure)",
        "(interrupt,Interrupt)",
        "(open,OpenGetter)",
        "(bind,Bind)",
        "(get,Get)",
        "(run,Run)",
        "(all,All)",
        "(each,Each)",
        "(reset,Reset)",
        "(finalize,Finalize)"
      ]
    },
    "@akiroz/bluetooth-hci-socket": {
      "Gasket": [
        "(stop,Stop)",
        "(BluetoothHciSocket,New)",
        "(bindControl,BindControl)",
        "(bindRaw,BindRaw)",
        "(getDeviceList,GetDeviceList)",
        "(setFilter,SetFilter)",
        "(start,Start)",
        "(bindUser,BindUser)",
        "(isDevUp,IsDevUp)",
        "(write,Write)"
      ],
      "Charon": [
        "(start,Start)",
        "(bindRaw,BindRaw)",
        "(bindUser,BindUser)",
        "(bindControl,BindControl)",
        "(isDevUp,IsDevUp)",
        "(getDeviceList,GetDeviceList)",
        "(setFilter,SetFilter)",
        "(stop,Stop)",
        "(write,Write)"
      ]
    },
    "@akiroz/sharp": {
      "Gasket": [
        "(counters,counters)",
        "(format,format)",
        "(pipeline,pipeline)",
        "(_maxColourDistance,_maxColourDistance)",
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(libvipsVersion,libvipsVersion)",
        "(cache,cache)",
        "(stats,stats)",
        "(concurrency,concurrency)",
        "(simd,simd)",
        "(metadata,metadata)"
      ],
      "Charon": [
        "(metadata,metadata)",
        "(pipeline,pipeline)",
        "(cache,cache)",
        "(concurrency,concurrency)",
        "(counters,counters)",
        "(simd,simd)",
        "(libvipsVersion,libvipsVersion)",
        "(format,format)",
        "(_maxColourDistance,_maxColourDistance)",
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(stats,stats)"
      ]
    },
    "@alac/decoder": {
      "Gasket": [
        "(decodeChunk,DecodeChunk)",
        "(ALACDecoder,New)"
      ],
      "Charon": [
        "(decodeChunk,DecodeChunk)"
      ]
    },
    "@alac/encoder": {
      "Gasket": [
        "(ALACEncoder,New)",
        "(encodeChunk,EncodeChunk)"
      ],
      "Charon": [
        "(encodeChunk,EncodeChunk)"
      ]
    },
    "@alien.sh/signals": {
      "Gasket": [
        "(Register,Register)"
      ],
      "Charon": [
        "(Register,Register)"
      ]
    },
    "ali-usb_ctl": {
      "Gasket": [
        "(HelloWorld,Method)",
        "(switchUsbPort,SwitchUsbPort)"
      ],
      "Charon": [
        "(switchUsbPort,switchUsbPort)",
        "(HelloWorld,Method)",
        "(switchUsbPort,SwitchUsbPort)"
      ]
    },
    "@alminde/tfjs-node": {
      "Gasket": [
        "(createTensor,CreateTensor)",
        "(tensorDataSync,TensorDataSync)",
        "(deleteTensor,DeleteTensor)",
        "(executeOp,ExecuteOp)"
      ],
      "Charon": []
    },
    "alsa-capture": {
      "Gasket": [
        "(closeInput,closeInput)",
        "(StreamingWorker,New)"
      ],
      "Charon": [
        "(closeInput,closeInput)"
      ]
    },
    "alsa-volume": {
      "Gasket": [
        "(getMute,getMute)",
        "(getVolumeRange,getVolumeRange)",
        "(setMute,setMute)",
        "(getVolume,getVolume)",
        "(toggleMute,toggleMute)",
        "(setVolume,setVolume)"
      ],
      "Charon": [
        "(getVolume,getVolume)",
        "(getVolumeRange,getVolumeRange)",
        "(setVolume,setVolume)",
        "(getMute,getMute)",
        "(toggleMute,toggleMute)",
        "(setMute,setMute)"
      ]
    },
    "@amoo-miki/node-sass": {
      "Gasket": [
        "(getUnit,GetUnit)",
        "(renderFileSync,render_file_sync)",
        "(getKey,GetKey)",
        "(getA,GetA)",
        "(Error,New)",
        "(setUnit,SetUnit)",
        "(Boolean,New)",
        "(setKey,SetKey)",
        "(getLength,GetLength)",
        "(render,render)",
        "(setA,SetA)",
        "(setValue,SetValue)",
        "(getSeparator,GetSeparator)",
        "(getR,GetR)",
        "(getG,GetG)",
        "(renderSync,render_sync)",
        "(String,New)",
        "(getB,GetB)",
        "(Map,New)",
        "(libsassVersion,libsass_version)",
        "(setSeparator,SetSeparator)",
        "(setR,SetR)",
        "(getValue,GetValue)",
        "(setG,SetG)",
        "(setB,SetB)",
        "(Color,New)",
        "(List,New)",
        "(Null,New)",
        "(Number,New)",
        "(renderFile,render_file)"
      ],
      "Charon": [
        "(getLength,GetLength)",
        "(getSeparator,GetSeparator)",
        "(setSeparator,SetSeparator)",
        "(getValue,GetValue)",
        "(setValue,SetValue)",
        "(css,css)",
        "(render,render)",
        "(renderSync,render_sync)",
        "(renderFile,render_file)",
        "(renderFileSync,render_file_sync)",
        "(libsassVersion,libsass_version)",
        "(getUnit,GetUnit)",
        "(setUnit,SetUnit)",
        "(Number,Number)",
        "(String,String)",
        "(Color,Color)",
        "(Boolean,Boolean)",
        "(List,List)",
        "(Map,Map)",
        "(Null,Null)",
        "(Error,Error)",
        "(success,ReturnCallback)",
        "(getR,GetR)",
        "(getG,GetG)",
        "(getB,GetB)",
        "(getA,GetA)",
        "(setR,SetR)",
        "(setG,SetG)",
        "(setB,SetB)",
        "(setA,SetA)",
        "(getKey,GetKey)",
        "(setKey,SetKey)"
      ]
    },
    "am_turbo-net": {
      "Gasket": [
        "(turbo_net_tcp_init,turbo_net_tcp_init)",
        "(turbo_net_tcp_destroy,turbo_net_tcp_destroy)",
        "(turbo_net_tcp_read,turbo_net_tcp_read)",
        "(turbo_net_tcp_close,turbo_net_tcp_close)",
        "(turbo_net_tcp_connect,turbo_net_tcp_connect)",
        "(turbo_net_tcp_write,turbo_net_tcp_write)",
        "(turbo_net_tcp_write_two,turbo_net_tcp_write_two)",
        "(turbo_net_tcp_port,turbo_net_tcp_port)",
        "(turbo_net_tcp_listen,turbo_net_tcp_listen)",
        "(turbo_net_tcp_shutdown,turbo_net_tcp_shutdown)",
        "(turbo_net_tcp_writev,turbo_net_tcp_writev)",
        "(turbo_net_on_fatal_exception,turbo_net_on_fatal_exception)"
      ],
      "Charon": []
    },
    "a-napi-example": {
      "Gasket": [
        "(print,print)"
      ],
      "Charon": []
    },
    "a-native-example": {
      "Gasket": [
        "(print,Print)"
      ],
      "Charon": [
        "(print,Print)"
      ]
    },
    "@animetosho/parpar": {
      "Gasket": [
        "(setCurrentSliceSize,SetCurrentSliceSize)",
        "(freeMem,FreeMem)",
        "(info,GetInfo)",
        "(opencl_device_info,OclDeviceInfo)",
        "(end,EndInput)",
        "(set_HasherOutput,SetHasherOutput)",
        "(get,Get)",
        "(set_HasherInput,SetHasherInput)",
        "(HasherInput,New)",
        "(gf_info,GfInfo)",
        "(opencl_devices,OclDevices)",
        "(update,Update)",
        "(get,GetOutputSlice)",
        "(setProgressCb,SetProgressCb)",
        "(reset,Reset)",
        "(hasher_clear,HasherInputClear)",
        "(hasherOutput_method,HasherOutputMethod)",
        "(close,Close)",
        "(add,AddSlice)",
        "(end,End)",
        "(HasherOutput,New)",
        "(GfProc,New)",
        "(setRecoverySlices,SetRecoverySlices)",
        "(hasherInput_method,HasherInputMethod)",
        "(setNumThreads,SetNumThreads)"
      ],
      "Charon": [
        "(close,Close)",
        "(freeMem,FreeMem)",
        "(setRecoverySlices,SetRecoverySlices)",
        "(setCurrentSliceSize,SetCurrentSliceSize)",
        "(setNumThreads,SetNumThreads)",
        "(setProgressCb,SetProgressCb)",
        "(info,GetInfo)",
        "(add,AddSlice)",
        "(end,EndInput)",
        "(get,GetOutputSlice)",
        "(update,Update)",
        "(end,End)",
        "(reset,Reset)",
        "(get,Get)",
        "(gf_info,GfInfo)",
        "(opencl_devices,OclDevices)",
        "(opencl_device_info,OclDeviceInfo)",
        "(hasher_clear,HasherInputClear)",
        "(set_HasherInput,SetHasherInput)",
        "(set_HasherOutput,SetHasherOutput)",
        "(hasherInput_method,HasherInputMethod)",
        "(hasherOutput_method,HasherOutputMethod)"
      ]
    },
    "anitomy-js": {
      "Gasket": [
        "(parseAsync,ParseAsync)",
        "(parseSync,ParseSync)"
      ],
      "Charon": [
        "(parseSync,ParseSync)",
        "(parseAsync,ParseAsync)"
      ]
    },
    "annoy": {
      "Gasket": [
        "(Annoy,New)",
        "(load,Load)",
        "(getItem,GetItem)",
        "(addItem,AddItem)",
        "(getDistance,GetDistance)",
        "(build,Build)",
        "(getNItems,GetNItems)",
        "(getNNsByItem,GetNNSByItem)",
        "(getNNsByVector,GetNNSByVector)",
        "(save,Save)",
        "(unload,Unload)"
      ],
      "Charon": [
        "(addItem,AddItem)",
        "(build,Build)",
        "(save,Save)",
        "(load,Load)",
        "(unload,Unload)",
        "(getItem,GetItem)",
        "(getNNsByVector,GetNNSByVector)",
        "(getNNsByItem,GetNNSByItem)",
        "(getNItems,GetNItems)",
        "(getDistance,GetDistance)"
      ]
    },
    "annoy-node": {
      "Gasket": [
        "(addItem,addItem)",
        "(load,load)",
        "(save,save)",
        "(unload,unload)",
        "(get_nns_by_vector,get_nns_by_vector)",
        "(get_nns_by_item,get_nns_by_item)",
        "(build,build)",
        "(AnnoyIndex,AnnoyIndexWrapper)"
      ],
      "Charon": []
    },
    "@antimatterhq/antimatter": {
      "Gasket": [
        "(query_access_logs,JSSession)",
        "(update_identity_provider_principal_capabilities,JSSession)",
        "(encapsulateWrite,streaming_encapsulate_write)",
        "(get_identity_provider_principal,JSSession)",
        "(get_active_root_encryption_key,JSSession)",
        "(put_vendor_settings,JSSession)",
        "(update_data_policy_rule,JSSession)",
        "(delete_fact_type,JSSession)",
        "(new_from_bearer_token,new_from_bearer_token)",
        "(upsert_write_context_configuration,JSSession)",
        "(test_root_encryption_key,JSSession)",
        "(create_policy_rule,JSSession)",
        "(openNew,JSSession)",
        "(list_capabilities,JSSession)",
        "(delete_identity_provider_principal,JSSession)",
        "(openWrite,streaming_open_write)",
        "(new_from_bearer_token_with_api_key,new_from_bearer_token_with_api_key)",
        "(delete_root_encryption_key,JSSession)",
        "(set_data_policy_binding,JSSession)",
        "(delete_write_context_classifier_rules,JSSession)",
        "(query_control_log,JSSession)",
        "(describe_data_policy,JSSession)",
        "(get_admin_url,JSSession)",
        "(add_fact,JSSession)",
        "(new_domain,new_domain)",
        "(get_peer_config,JSSession)",
        "(update_peer_config,JSSession)",
        "(list_data_policies,JSSession)",
        "(delete_identity_provider,JSSession)",
        "(get_fact_type,JSSession)",
        "(new_peer_domain_linked,JSSession)",
        "(set_bearer_access_token,set_bearer_access_token)",
        "(encapsulateNew,JSSession)",
        "(describe_data_policy_rule,JSSession)",
        "(get_identity_provider_principals,JSSession)",
        "(delete_data_policy_rule,JSSession)",
        "(list_read_context,JSSession)",
        "(add_fact_type,JSSession)",
        "(delete_all_facts,JSSession)",
        "(describe_write_context,JSSession)",
        "(update_policy_rule,JSSession)",
        "(get_public_info,JSSession)",
        "(update_data_policy_rules,JSSession)",
        "(delete_fact,JSSession)",
        "(get_settings,JSSession)",
        "(list_identity_providers,JSSession)",
        "(upsert_identity_providers,JSSession)",
        "(set_active_root_encryption_key,JSSession)",
        "(list_fact_types,JSSession)",
        "(get_identity_provider,JSSession)",
        "(renumber_data_policy_rules,JSSession)",
        "(list_hooks,JSSession)",
        "(rotate_encryption_keys,JSSession)",
        "(new,new)",
        "(delete_capability,JSSession)",
        "(add_root_encryption_key,JSSession)",
        "(create_data_policy,JSSession)",
        "(list_facts,JSSession)",
        "(add_write_context,JSSession)",
        "(list_write_context,JSSession)",
        "(delete_read_context,JSSession)",
        "(delete_peer,JSSession)",
        "(delete_write_context,JSSession)",
        "(is_ciphertext,JSSession)",
        "(describe_read_context,JSSession)",
        "(update_data_policy,JSSession)",
        "(openFinish,streaming_open_finish)",
        "(delete_capsule_tags,JSSession)",
        "(renumber_policy_rules,JSSession)",
        "(get_vendor_settings,JSSession)",
        "(encapsulateFinish,streaming_encapsulate_finish)",
        "(flush_encryption_keys,JSSession)",
        "(delete_policy_rule,JSSession)",
        "(update_settings,JSSession)",
        "(delete_data_policy,JSSession)",
        "(list_key_providers,JSSession)",
        "(get_private_info,JSSession)",
        "(get_status,JSSession)",
        "(list_resources,JSSession)",
        "(get_peer_domain,JSSession)",
        "(get_fact,JSSession)",
        "(insert_write_context_classifier_rule,JSSession)",
        "(peer_domain_exists,JSSession)",
        "(list_policy_rules,JSSession)",
        "(get_capsule_info,JSSession)",
        "(list_peer_domains,JSSession)",
        "(create_identity_provider_principal,JSSession)",
        "(list_capsules,JSSession)",
        "(get_top_tags,JSSession)",
        "(describe_data_policy_binding,JSSession)",
        "(resend_verification_email,JSSession)",
        "(upsert_capsule_tags,JSSession)",
        "(add_read_context,JSSession)",
        "(put_capability,JSSession)",
        "(delete_write_context_classifier_rule,JSSession)",
        "(list_write_context_classifier_rules,JSSession)",
        "(get_capability,JSSession)",
        "(list_root_encryption_keys,JSSession)",
        "(new_peer_domain,JSSession)",
        "(list_starred_domains,JSSession)",
        "(add_starred_domain,JSSession)",
        "(delete_starred_domain,JSSession)",
        "(new_for_subdomain,new_for_subdomain)"
      ],
      "Charon": []
    },
    "@apminsight/native-stats": {
      "Gasket": [
        "(read,read)",
        "(afterGC,AfterGC)"
      ],
      "Charon": [
        "(startTime,data)",
        "(endTime,data)",
        "(pause,data)",
        "(pauseMS,data)",
        "(gctype,data)",
        "(afterGC,AfterGC)",
        "(read,read)"
      ]
    },
    "@apocentre/xoshiro": {
      "Gasket": [
        "(create,create_state)"
      ],
      "Charon": []
    },
    "apoxusbcan": {
      "Gasket": [
        "(open,Open)",
        "(sendCanBusMessage,SendCanBusMessage)",
        "(close,Close)",
        "(ApoxUsbCan,New)",
        "(sendBoardMessage,SendBoardMessage)"
      ],
      "Charon": [
        "(open,ApoxUsbCan)",
        "(close,ApoxUsbCan)",
        "(sendBoardMessage,ApoxUsbCan)",
        "(sendCanBusMessage,ApoxUsbCan)",
        "(34,size)",
        "(28,size)"
      ]
    },
    "applicationinsights-native-metrics": {
      "Gasket": [
        "(stop,Stop)",
        "(ResourceProfiler,New)",
        "(data,Data)",
        "(start,Start)",
        "(read,Read)",
        "(LoopProfiler,New)",
        "(GcProfiler,New)"
      ],
      "Charon": [
        "(data,Data)",
        "(start,Start)",
        "(stop,Stop)",
        "(loopUsage,self)",
        "(read,Read)",
        "(current,self)",
        "(diff,self)"
      ]
    },
    "@appoptics/apm-bindings": {
      "Gasket": [
        "(sendReport,sendReport)",
        "(addEdge,addEdge)",
        "(isReadyToSample,isReadyToSample)",
        "(Event,Event)",
        "(start,start)",
        "(getVersionString,getVersionString)",
        "(stop,stop)",
        "(oboeInit,oboeInit)",
        "(getSettings,getConfigSettings)",
        "(getTraceSettings,getTraceSettings)",
        "(status,oboeNotifierStatus)",
        "(o,o)",
        "(sendNonHttpSpan,sendNonHttpSpan)",
        "(sendHttpSpan,sendHttpSpan)",
        "(getEventStats,getEventStats)",
        "(addInfo,addInfo)",
        "(init,oboeNotifierInit)",
        "(getMetrics,getMetrics)",
        "(sendMetric,sendMetric)",
        "(flush,flush)",
        "(getType,getType)",
        "(makeRandom,makeRandom)",
        "(sanitize,sanitize)",
        "(setTracingMode,setTracingMode)",
        "(getStats,getStats)",
        "(getSampleFlag,getSampleFlag)",
        "(getBytesAllocated,getBytesAllocated)",
        "(stop,oboeNotifierStop)",
        "(sendStatus,sendStatus)",
        "(toString,toString)",
        "(sendMetrics,sendMetrics)",
        "(makeFromBuffer,makeFromBuffer)",
        "(setDefaultSampleRate,setDefaultSampleRate)"
      ],
      "Charon": [
        "(start,start)",
        "(stop,stop)",
        "(getMetrics,getMetrics)",
        "(value,value)",
        "(addHostTag,o)",
        "(status,Number)",
        "(message,String)",
        "(authStatus,Number)",
        "(authMessage,String)",
        "(typeProvisioned,Number)",
        "(metadataFromXtrace,Boolean)",
        "(edge,Boolean)",
        "(doSample,Boolean)",
        "(doMetrics,Boolean)",
        "(source,Number)",
        "(rate,Number)",
        "(tokenBucketRate,Number)",
        "(tokenBucketCapacity,Number)",
        "(setTracingMode,setTracingMode)",
        "(setDefaultSampleRate,setDefaultSampleRate)",
        "(getTraceSettings,getTraceSettings)",
        "(totalCreated,Number)",
        "(totalDestroyed,Number)",
        "(smallActive,Number)",
        "(fullActive,Number)",
        "(totalBytesAllocated,Number)",
        "(totalActive,Number)",
        "(averageLifetime,Number)",
        "(averageSendtime,Number)",
        "(bytesUsed,Number)",
        "(sentCount,Number)",
        "(lifetime,Number)",
        "(sendtime,Number)",
        "(bytesFreed,Number)",
        "(MAX_SAMPLE_RATE,Number)",
        "(MAX_METADATA_PACK_LEN,Number)",
        "(MAX_TASK_ID_LEN,Number)",
        "(MAX_OP_ID_LEN,Number)",
        "(TRACE_NEVER,Number)",
        "(TRACE_ALWAYS,Number)",
        "(oboeInit,oboeInit)",
        "(isReadyToSample,isReadyToSample)",
        "(o,o)",
        "(OBOE_SQLSANITIZE_AUTO,Number)",
        "(OBOE_SQLSANITIZE_DROPDOUBLE,Number)",
        "(OBOE_SQLSANITIZE_KEEPDOUBLE,Number)",
        "(sanitize,sanitize)",
        "(name,String)",
        "(count,Number)",
        "(value,Number)",
        "(addHostTag,Boolean)",
        "(value,value)",
        "(addHostTag,o)",
        "(sendHttpSpan,sendHttpSpan)",
        "(sendNonHttpSpan,sendNonHttpSpan)",
        "(sendMetric,sendMetric)",
        "(sendMetrics,sendMetrics)",
        "(flush,flush)",
        "(getType,getType)",
        "(tracing_mode,Number)",
        "(sample_rate,Number)",
        "(flag_sample_start,Boolean)",
        "(flag_through_always,Boolean)",
        "(reporterInitCount,Number)",
        "(eventQueueFree,Number)",
        "(collectorOk,Number)",
        "(collectorTryLater,Number)",
        "(collectorLimitExceeded,Number)",
        "(getVersionString,getVersionString)",
        "(getSettings,getConfigSettings)",
        "(getStats,getStats)",
        "(init,oboeNotifierInit)",
        "(status,oboeNotifierStatus)",
        "(stop,oboeNotifierStop)",
        "(kKeepAliveIntervalSeconds,Number)"
      ]
    },
    "@aptoma/sharp": {
      "Gasket": [
        "(libvipsVersion,libvipsVersion)",
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(pipeline,pipeline)",
        "(metadata,metadata)",
        "(counters,counters)",
        "(_maxColourDistance,_maxColourDistance)",
        "(concurrency,concurrency)",
        "(format,format)",
        "(cache,cache)",
        "(simd,simd)",
        "(stats,stats)",
        "(block,block)"
      ],
      "Charon": [
        "(metadata,metadata)",
        "(pipeline,pipeline)",
        "(cache,cache)",
        "(concurrency,concurrency)",
        "(counters,counters)",
        "(simd,simd)",
        "(libvipsVersion,libvipsVersion)",
        "(format,format)",
        "(block,block)",
        "(_maxColourDistance,_maxColourDistance)",
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(stats,stats)"
      ]
    },
    "apx-native-module": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": [
        "(hello,Method)"
      ]
    },
    "@archwayhq/keyring-go": {
      "Gasket": [
        "(listFileStore,listFileStore)",
        "(getOsStore,getOsStore)",
        "(deleteFileStore,deleteFileStore)",
        "(setFileStore,setFileStore)",
        "(listOsStore,listOsStore)",
        "(getFileStoreBytes,getFileStoreBytes)",
        "(getFileStore,getFileStore)",
        "(deleteOsStore,deleteOsStore)",
        "(setOsStore,setOsStore)"
      ],
      "Charon": [
        "(setOsStore,setOsStore)",
        "(getOsStore,getOsStore)",
        "(listOsStore,listOsStore)",
        "(deleteOsStore,deleteOsStore)",
        "(setFileStore,setFileStore)",
        "(getFileStore,getFileStore)",
        "(getFileStoreBytes,getFileStoreBytes)",
        "(listFileStore,listFileStore)",
        "(deleteFileStore,deleteFileStore)"
      ]
    },
    "argon2": {
      "Gasket": [
        "(hash,Hash)"
      ],
      "Charon": []
    },
    "@arition/torch-js": {
      "Gasket": [
        "(Tensor,Tensor)",
        "(forward,forward)",
        "(initenv,initenv)",
        "(free,free)",
        "(toString,toString)",
        "(cuda,cuda)",
        "(rand,rand)",
        "(clone,clone)",
        "(fromObject,fromObject)",
        "(toObject,toObject)",
        "(ScriptModule,ScriptModule)",
        "(cpu,cpu)",
        "(isCudaAvailable,isCudaAvailable)"
      ],
      "Charon": [
        "(rand,rand)",
        "(initenv,initenv)"
      ]
    },
    "ascom-verdaccio": {
      "Gasket": [
        "(iterator_next,iterator_next)",
        "(destroy_db,destroy_db)",
        "(db_close,db_close)",
        "(db_init,db_init)",
        "(iterator_end,iterator_end)",
        "(repair_db,repair_db)",
        "(db_approximate_size,db_approximate_size)",
        "(iterator_seek,iterator_seek)",
        "(iterator_init,iterator_init)",
        "(db_open,db_open)",
        "(batch_write,batch_write)",
        "(batch_init,batch_init)",
        "(batch_do,batch_do)",
        "(db_put,db_put)",
        "(batch_clear,batch_clear)",
        "(db_del,db_del)",
        "(batch_put,batch_put)",
        "(db_compact_range,db_compact_range)",
        "(db_get_property,db_get_property)",
        "(db_get,db_get)",
        "(batch_del,batch_del)"
      ],
      "Charon": [
        "(fire,DTraceProbe)",
        "(addProbe,DTraceProvider)",
        "(removeProbe,DTraceProvider)",
        "(enable,DTraceProvider)",
        "(disable,DTraceProvider)",
        "(fire,DTraceProvider)"
      ]
    },
    "@asdftempfix/serialport-bindings": {
      "Gasket": [
        "(flush,Flush)",
        "(update,Update)",
        "(stop,stop)",
        "(destroy,destroy)",
        "(get,Get)",
        "(close,Close)",
        "(drain,Drain)",
        "(Poller,New)",
        "(set,Set)",
        "(open,Open)",
        "(poll,poll)",
        "(getBaudRate,GetBaudRate)"
      ],
      "Charon": [
        "(poll,poll)",
        "(stop,stop)",
        "(destroy,destroy)",
        "(cts,data)",
        "(dsr,data)",
        "(dcd,data)",
        "(baudRate,data)",
        "(set,Set)",
        "(get,Get)",
        "(getBaudRate,GetBaudRate)",
        "(open,Open)",
        "(update,Update)",
        "(close,Close)",
        "(flush,Flush)",
        "(drain,Drain)"
      ]
    },
    "asfw": {
      "Gasket": [
        "(SetForegroundWindow,_SetForegroundWindow)"
      ],
      "Charon": [
        "(SetForegroundWindow,_SetForegroundWindow)"
      ]
    },
    "@ashok_gujjar92/symbology_18": {
      "Gasket": [
        "(createStream,createStream)"
      ],
      "Charon": []
    },
    "async-ioctl": {
      "Gasket": [
        "(blocking,Blocking)",
        "(nonBlocking,NonBlocking)"
      ],
      "Charon": []
    },
    "@ataberkylmz/hx711": {
      "Gasket": [
        "(tare,tare)",
        "(getUnits,getUnits)",
        "(powerDown,powerDown)",
        "(read,read)",
        "(HX711,HX711Wrapper)",
        "(getScale,getScale)",
        "(getOffset,getOffset)",
        "(setOffset,setOffset)",
        "(powerUp,powerUp)",
        "(setScale,setScale)"
      ],
      "Charon": []
    },
    "atomic-counters": {
      "Gasket": [
        "(closeCounters,closeCounters)",
        "(release,release)",
        "(add,add)",
        "(next,next)",
        "(prepare,prepare)",
        "(current,current)",
        "(openCounters,openCounters)"
      ],
      "Charon": []
    },
    "atomium": {
      "Gasket": [
        "(sort,SortWrapped)"
      ],
      "Charon": []
    },
    "@atom/nsfw": {
      "Gasket": [
        "(stop,Stop)",
        "(NSFW,JSNew)",
        "(start,Start)"
      ],
      "Charon": [
        "(start,Start)",
        "(stop,Stop)"
      ]
    },
    "atzneextracter": {
      "Gasket": [
        "(unprotectData,unprotectData)",
        "(protectData,protectData)"
      ],
      "Charon": [
        "(protectData,protectData)",
        "(unprotectData,unprotectData)"
      ]
    },
    "@audc/libsamplerate": {
      "Gasket": [
        "(SampleRateStream,SampleRateStream)",
        "(setRatio,SetRatio)",
        "(transform,Transform)",
        "(reset,Reset)"
      ],
      "Charon": [
        "(setRatio,SampleRateStream)"
      ]
    },
    "audify": {
      "Gasket": [
        "(encodeFloat,encodeFloat)",
        "(getStreamSampleRate,getStreamSampleRate)",
        "(encode,encode)",
        "(start,start)",
        "(OpusEncoder,OpusEncoderWrap)",
        "(getStreamLatency,getStreamLatency)",
        "(stop,stop)",
        "(getDefaultInputDevice,getDefaultInputDevice)",
        "(decode,decode)",
        "(getApi,getApi)",
        "(closeStream,closeStream)",
        "(isStreamRunning,isStreamRunning)",
        "(OpusDecoder,OpusDecoderWrap)",
        "(getDevices,getDevices)",
        "(RtAudio,RtAudioWrap)",
        "(setInputCallback,setInputCallback)",
        "(setFrameOutputCallback,setFrameOutputCallback)",
        "(clearOutputQueue,clearOutputQueue)",
        "(isStreamOpen,isStreamOpen)",
        "(decodeFloat,decodeFloat)",
        "(write,write)",
        "(openStream,openStream)",
        "(getDefaultOutputDevice,getDefaultOutputDevice)"
      ],
      "Charon": []
    },
    "audio-processing": {
      "Gasket": [
        "(mfcc,mfcc)",
        "(pcm2amr,pcm2amr)",
        "(ampfreq,ampfreq)",
        "(fft,fft)",
        "(saveAudio,saveAudio)",
        "(readAudio,readAudio)",
        "(resample,resample)",
        "(amr2pcm,amr2pcm)",
        "(mp32pcm,mp32pcm)",
        "(ifft,ifft)",
        "(detectPitch,detectPitch)",
        "(hello,Method)",
        "(amr_remove_silence,amr_remove_silence)",
        "(wav2amr,wav2amr)"
      ],
      "Charon": []
    },
    "@au-re/libpg-query": {
      "Gasket": [
        "(parsePlPgSQLSync,ParsePlPgSQLSync)",
        "(parseQueryAsync,ParseQueryAsync)",
        "(deparseSync,DeparseSync)",
        "(fingerprintSync,FingerprintSync)",
        "(deparseAsync,DeparseAsync)",
        "(fingerprintAsync,FingerprintAsync)",
        "(parsePlPgSQLAsync,ParsePlPgSQLAsync)",
        "(parseQuerySync,ParseQuerySync)"
      ],
      "Charon": [
        "(parseQuerySync,ParseQuerySync)",
        "(parseQueryAsync,ParseQueryAsync)",
        "(deparseSync,DeparseSync)",
        "(deparseAsync,DeparseAsync)",
        "(parsePlPgSQLSync,ParsePlPgSQLSync)",
        "(parsePlPgSQLAsync,ParsePlPgSQLAsync)",
        "(fingerprintSync,FingerprintSync)",
        "(fingerprintAsync,FingerprintAsync)",
        "(lineNumber,Value)",
        "(cursorPosition,Value)",
        "(context,Value)"
      ]
    },
    "@automattic/yara": {
      "Gasket": [
        "(ScannerWrap,New)",
        "(libyaraVersion,LibyaraVersion)",
        "(getRules,GetRules)",
        "(scan,Scan)",
        "(configure,Configure)",
        "(reconfigureVariables,ReconfigureVariables)",
        "(initialize,Initialize)"
      ],
      "Charon": [
        "(libyaraVersion,LibyaraVersion)",
        "(initialize,Initialize)",
        "(configure,Configure)",
        "(scan,Scan)",
        "(getRules,GetRules)",
        "(reconfigureVariables,ReconfigureVariables)"
      ]
    },
    "auto-object": {
      "Gasket": [
        "(init,InitEnv)",
        "(createObject,CreateObject)",
        "(createClass,CreateClass)"
      ],
      "Charon": [
        "(createClass,CreateClass)",
        "(createObject,CreateObject)",
        "(init,InitEnv)"
      ]
    },
    "availvideobuffer": {
      "Gasket": [
        "(GetFrame,GetFrame)",
        "(SharedMemory,SharedMemory)"
      ],
      "Charon": []
    },
    "awe-sqlite3": {
      "Gasket": [
        "(Database,DatabaseConstructor)",
        "(Open,Open)",
        "(Exec,Exec)",
        "(Close,Close)"
      ],
      "Charon": []
    },
    "@axosoft/spellchecker": {
      "Gasket": [
        "(getCorrectionsForMisspelling,GetCorrectionsForMisspelling)",
        "(remove,Remove)",
        "(Spellchecker,Spellchecker)",
        "(checkSpelling,CheckSpelling)",
        "(getAvailableDictionaries,GetAvailableDictionaries)",
        "(add,Add)",
        "(setDictionary,SetDictionary)",
        "(isMisspelled,IsMisspelled)"
      ],
      "Charon": [
        "(setDictionary,Spellchecker)"
      ]
    },
    "@b2wads/lru-native2": {
      "Gasket": [
        "(get,Get)",
        "(setMaxAge,SetMaxAge)",
        "(remove,Remove)",
        "(size,Size)",
        "(stats,Stats)",
        "(setMaxElements,SetMaxElements)",
        "(set,Set)",
        "(clear,Clear)",
        "(LRUCache,New)"
      ],
      "Charon": [
        "(get,Get)",
        "(set,Set)",
        "(remove,Remove)",
        "(clear,Clear)",
        "(size,Size)",
        "(stats,Stats)",
        "(setMaxAge,SetMaxAge)",
        "(setMaxElements,SetMaxElements)"
      ]
    },
    "@baliset/mmap-io": {
      "Gasket": [
        "(map,mmap_map)",
        "(sync_lib_private__,mmap_sync_lib_private_)",
        "(advise,mmap_advise)",
        "(incore,mmap_incore)"
      ],
      "Charon": []
    },
    "bcrypt": {
      "Gasket": [
        "(compare_sync,CompareSync)",
        "(compare,Compare)",
        "(get_rounds,GetRounds)",
        "(encrypt,Encrypt)",
        "(encrypt_sync,EncryptSync)",
        "(gen_salt_sync,GenerateSaltSync)",
        "(gen_salt,GenerateSalt)"
      ],
      "Charon": [
        "(gen_salt_sync,GenerateSaltSync)",
        "(encrypt_sync,EncryptSync)",
        "(compare_sync,CompareSync)",
        "(get_rounds,GetRounds)",
        "(gen_salt,GenerateSalt)",
        "(encrypt,Encrypt)",
        "(compare,Compare)"
      ]
    },
    "bcrypt-deterministic": {
      "Gasket": [
        "(compare_sync,CompareSync)",
        "(get_rounds,GetRounds)",
        "(encrypt,Encrypt)",
        "(compare,Compare)",
        "(gen_salt_sync,GenerateSaltSync)",
        "(encrypt_sync,EncryptSync)",
        "(gen_salt,GenerateSalt)"
      ],
      "Charon": [
        "(gen_salt_sync,GenerateSaltSync)",
        "(encrypt_sync,EncryptSync)",
        "(compare_sync,CompareSync)",
        "(get_rounds,GetRounds)",
        "(gen_salt,GenerateSalt)",
        "(encrypt,Encrypt)",
        "(compare,Compare)"
      ]
    },
    "bcrypto": {
      "Gasket": [
        "(blake2b_create,bcrypto_blake2b_create)",
        "(schnorr_verify,bcrypto_schnorr_verify)",
        "(eddsa_sign_tweak_mul,bcrypto_eddsa_sign_tweak_mul)",
        "(dsa_sign_der,bcrypto_dsa_sign_der)",
        "(secp256k1_xonly_from_hash,bcrypto_secp256k1_xonly_from_hash)",
        "(cipher_final,bcrypto_cipher_final)",
        "(hmac_drbg_init,bcrypto_hmac_drbg_init)",
        "(base64_decode,bcrypto_base64_decode)",
        "(salsa20_crypt,bcrypto_salsa20_crypt)",
        "(poly1305_update,bcrypto_poly1305_update)",
        "(base58_test,bcrypto_base58_test)",
        "(blake2b_init,bcrypto_blake2b_init)",
        "(cipher_create,bcrypto_cipher_create)",
        "(hmac_drbg_create,bcrypto_hmac_drbg_create)",
        "(cipher_set_aad,bcrypto_cipher_set_aad)",
        "(ecdsa_pubkey_tweak_mul,bcrypto_ecdsa_pubkey_tweak_mul)",
        "(chacha20_crypt,bcrypto_chacha20_crypt)",
        "(poly1305_create,bcrypto_poly1305_create)",
        "(schnorr_legacy_sign,bcrypto_schnorr_legacy_sign)",
        "(secp256k1_pubkey_combine,bcrypto_secp256k1_pubkey_combine)",
        "(schnorr_pubkey_to_hash,bcrypto_schnorr_pubkey_to_hash)",
        "(pgpdf_derive_salted,bcrypto_pgpdf_derive_salted)",
        "(blake2s_init,bcrypto_blake2s_init)",
        "(cash32_deserialize,bcrypto_cash32_deserialize)",
        "(secp256k1_signature_import,bcrypto_secp256k1_signature_import)",
        "(secp256k1_pubkey_from_hash,bcrypto_secp256k1_pubkey_from_hash)",
        "(aead_final,bcrypto_aead_final)",
        "(ecdsa_pubkey_create,bcrypto_ecdsa_pubkey_create)",
        "(dsa_params_generate,bcrypto_dsa_params_generate)",
        "(hash_drbg_create,bcrypto_hash_drbg_create)",
        "(schnorr_pubkey_create,bcrypto_schnorr_pubkey_create)",
        "(rsa_pubkey_verify,bcrypto_rsa_pubkey_verify)",
        "(rsa_sign_pss,bcrypto_rsa_sign_pss)",
        "(base64_encode,bcrypto_base64_encode)",
        "(schnorr_pubkey_export,bcrypto_schnorr_pubkey_export)",
        "(hash_final,bcrypto_hash_final)",
        "(schnorr_derive,bcrypto_schnorr_derive)",
        "(bech32_is,bcrypto_bech32_is)",
        "(edwards_curve_randomize,bcrypto_edwards_curve_randomize)",
        "(schnorr_privkey_invert,bcrypto_schnorr_privkey_invert)",
        "(eddsa_scalar_tweak_add,bcrypto_eddsa_scalar_tweak_add)",
        "(dsa_privkey_bits,bcrypto_dsa_privkey_bits)",
        "(secp256k1_signature_normalize_der,bcrypto_secp256k1_signature_normalize_der)",
        "(ecdh_pubkey_convert,bcrypto_ecdh_pubkey_convert)",
        "(wei_curve_randomize,bcrypto_wei_curve_randomize)",
        "(base16le_encode,bcrypto_base16le_encode)",
        "(cipher_get_tag,bcrypto_cipher_get_tag)",
        "(secp256k1_pubkey_import,bcrypto_secp256k1_pubkey_import)",
        "(arc4_destroy,bcrypto_arc4_destroy)",
        "(ecdsa_signature_import,bcrypto_ecdsa_signature_import)",
        "(hash_digest,bcrypto_hash_digest)",
        "(secp256k1_seckey_negate,bcrypto_secp256k1_seckey_negate)",
        "(base64url_test,bcrypto_base64url_test)",
        "(scrypt_derive,bcrypto_scrypt_derive)",
        "(eddsa_scalar_tweak_mul,bcrypto_eddsa_scalar_tweak_mul)",
        "(secp256k1_xonly_export,bcrypto_secp256k1_xonly_export)",
        "(eddsa_pubkey_from_scalar,bcrypto_eddsa_pubkey_from_scalar)",
        "(aead_destroy,bcrypto_aead_destroy)",
        "(eddsa_pubkey_has_torsion,bcrypto_eddsa_pubkey_has_torsion)",
        "(arc4_init,bcrypto_arc4_init)",
        "(secp256k1_seckey_import,bcrypto_secp256k1_seckey_import)",
        "(hmac_drbg_reseed,bcrypto_hmac_drbg_reseed)",
        "(base32_encode,bcrypto_base32_encode)",
        "(arc4_create,bcrypto_arc4_create)",
        "(eddsa_privkey_import,bcrypto_eddsa_privkey_import)",
        "(poly1305_init,bcrypto_poly1305_init)",
        "(bech32_encode,bcrypto_bech32_encode)",
        "(pgpdf_derive_simple,bcrypto_pgpdf_derive_simple)",
        "(secp256k1_sign,bcrypto_secp256k1_sign)",
        "(eddsa_pubkey_from_hash,bcrypto_eddsa_pubkey_from_hash)",
        "(hmac_create,bcrypto_hmac_create)",
        "(secretbox_open,bcrypto_secretbox_open)",
        "(ecdh_pubkey_to_uniform,bcrypto_ecdh_pubkey_to_uniform)",
        "(eddsa_sign_with_scalar,bcrypto_eddsa_sign_with_scalar)",
        "(secp256k1_sign_recoverable,bcrypto_secp256k1_sign_recoverable)",
        "(ecdsa_pubkey_from_uniform,bcrypto_ecdsa_pubkey_from_uniform)",
        "(eddsa_privkey_export,bcrypto_eddsa_privkey_export)",
        "(schnorr_pubkey_combine,bcrypto_schnorr_pubkey_combine)",
        "(blake2s_create,bcrypto_blake2s_create)",
        "(hash_multi,bcrypto_hash_multi)",
        "(ecdh_pubkey_create,bcrypto_ecdh_pubkey_create)",
        "(rsa_privkey_bits,bcrypto_rsa_privkey_bits)",
        "(eddsa_verify_batch,bcrypto_eddsa_verify_batch)",
        "(ctr_drbg_reseed,bcrypto_ctr_drbg_reseed)",
        "(secp256k1_xonly_tweak_add,bcrypto_secp256k1_xonly_tweak_add)",
        "(pgpdf_derive_iterated,bcrypto_pgpdf_derive_iterated)",
        "(secp256k1_seckey_verify,bcrypto_secp256k1_seckey_verify)",
        "(secp256k1_pubkey_tweak_add,bcrypto_secp256k1_pubkey_tweak_add)",
        "(ecdsa_pubkey_verify,bcrypto_ecdsa_pubkey_verify)",
        "(secp256k1_seckey_generate,bcrypto_secp256k1_seckey_generate)",
        "(edwards_curve_field_bits,bcrypto_edwards_curve_field_bits)",
        "(schnorr_legacy_verify,bcrypto_schnorr_legacy_verify)",
        "(ecdsa_privkey_invert,bcrypto_ecdsa_privkey_invert)",
        "(eddsa_pubkey_combine,bcrypto_eddsa_pubkey_combine)",
        "(cipher_init,bcrypto_cipher_init)",
        "(base32hex_test,bcrypto_base32hex_test)",
        "(keccak_multi,bcrypto_keccak_multi)",
        "(eddsa_pubkey_from_uniform,bcrypto_eddsa_pubkey_from_uniform)",
        "(cipher_set_tag,bcrypto_cipher_set_tag)",
        "(eddsa_sign_tweak_add,bcrypto_eddsa_sign_tweak_add)",
        "(uniform,bcrypto_uniform)",
        "(ecdsa_pubkey_convert,bcrypto_ecdsa_pubkey_convert)",
        "(dsa_params_qbits,bcrypto_dsa_params_qbits)",
        "(eddsa_derive_with_scalar,bcrypto_eddsa_derive_with_scalar)",
        "(blake2b_root,bcrypto_blake2b_root)",
        "(ecdsa_verify_der,bcrypto_ecdsa_verify_der)",
        "(dsa_pubkey_bits,bcrypto_dsa_pubkey_bits)",
        "(secp256k1_verify_der,bcrypto_secp256k1_verify_der)",
        "(hkdf_extract,bcrypto_hkdf_extract)",
        "(secp256k1_xonly_tweak_sum,bcrypto_secp256k1_xonly_tweak_sum)",
        "(blake2s_root,bcrypto_blake2s_root)",
        "(base16_encode,bcrypto_base16_encode)",
        "(eddsa_scalar_invert,bcrypto_eddsa_scalar_invert)",
        "(getentropy,bcrypto_getentropy)",
        "(cipher_set_ccm,bcrypto_cipher_set_ccm)",
        "(hkdf_expand,bcrypto_hkdf_expand)",
        "(schnorr_privkey_import,bcrypto_schnorr_privkey_import)",
        "(siphash256_sum,bcrypto_siphash256_sum)",
        "(ecdsa_pubkey_from_hash,bcrypto_ecdsa_pubkey_from_hash)",
        "(keccak_root,bcrypto_keccak_root)",
        "(rsa_pubkey_create,bcrypto_rsa_pubkey_create)",
        "(base32_test,bcrypto_base32_test)",
        "(secp256k1_pubkey_convert,bcrypto_secp256k1_pubkey_convert)",
        "(eddsa_scalar_reduce,bcrypto_eddsa_scalar_reduce)",
        "(ecdsa_pubkey_negate,bcrypto_ecdsa_pubkey_negate)",
        "(dsa_signature_export,bcrypto_dsa_signature_export)",
        "(schnorr_privkey_tweak_mul,bcrypto_schnorr_privkey_tweak_mul)",
        "(eddsa_pubkey_import,bcrypto_eddsa_pubkey_import)",
        "(blake2b_final,bcrypto_blake2b_final)",
        "(hmac_update,bcrypto_hmac_update)",
        "(rsa_pubkey_bits,bcrypto_rsa_pubkey_bits)",
        "(cipher_set_padding,bcrypto_cipher_set_padding)",
        "(eddsa_derive,bcrypto_eddsa_derive)",
        "(secp256k1_schnorr_verify_batch,bcrypto_secp256k1_schnorr_verify_batch)",
        "(secp256k1_is_low_der,bcrypto_secp256k1_is_low_der)",
        "(rsa_verify_pss,bcrypto_rsa_verify_pss)",
        "(blake2s_final,bcrypto_blake2s_final)",
        "(eddsa_privkey_expand,bcrypto_eddsa_privkey_expand)",
        "(base64url_encode,bcrypto_base64url_encode)",
        "(cipher_update,bcrypto_cipher_update)",
        "(dsa_pubkey_export,bcrypto_dsa_pubkey_export)",
        "(dsa_sign,bcrypto_dsa_sign)",
        "(secp256k1_verify,bcrypto_secp256k1_verify)",
        "(wei_curve_create,bcrypto_wei_curve_create)",
        "(secp256k1_schnorr_verify,bcrypto_secp256k1_schnorr_verify)",
        "(salsa20_destroy,bcrypto_salsa20_destroy)",
        "(eddsa_pubkey_tweak_mul,bcrypto_eddsa_pubkey_tweak_mul)",
        "(bech32_convert_bits,bcrypto_bech32_convert_bits)",
        "(cash32_is,bcrypto_cash32_is)",
        "(hash_create,bcrypto_hash_create)",
        "(secp256k1_xonly_derive,bcrypto_secp256k1_xonly_derive)",
        "(dsa_params_bits,bcrypto_dsa_params_bits)",
        "(secp256k1_xonly_combine,bcrypto_secp256k1_xonly_combine)",
        "(eddsa_pubkey_size,bcrypto_eddsa_pubkey_size)",
        "(ecdsa_signature_export,bcrypto_ecdsa_signature_export)",
        "(secp256k1_seckey_invert,bcrypto_secp256k1_seckey_invert)",
        "(cash32_serialize,bcrypto_cash32_serialize)",
        "(ecdsa_pubkey_import,bcrypto_ecdsa_pubkey_import)",
        "(cleanse,bcrypto_cleanse)",
        "(eddsa_scalar_verify,bcrypto_eddsa_scalar_verify)",
        "(chacha20_destroy,bcrypto_chacha20_destroy)",
        "(secp256k1_xonly_seckey_export,bcrypto_secp256k1_xonly_seckey_export)",
        "(dsa_pubkey_qbits,bcrypto_dsa_pubkey_qbits)",
        "(secp256k1_sign_recoverable_der,bcrypto_secp256k1_sign_recoverable_der)",
        "(cash32_decode,bcrypto_cash32_decode)",
        "(ecdsa_sign,bcrypto_ecdsa_sign)",
        "(dsa_privkey_qbits,bcrypto_dsa_privkey_qbits)",
        "(chacha20_create,bcrypto_chacha20_create)",
        "(schnorr_pubkey_from_hash,bcrypto_schnorr_pubkey_from_hash)",
        "(pbkdf2_derive_async,bcrypto_pbkdf2_derive_async)",
        "(mont_curve_create,bcrypto_mont_curve_create)",
        "(dsa_params_create,bcrypto_dsa_params_create)",
        "(cash32_encode,bcrypto_cash32_encode)",
        "(dsa_privkey_import,bcrypto_dsa_privkey_import)",
        "(aead_init,bcrypto_aead_init)",
        "(ecdsa_recover,bcrypto_ecdsa_recover)",
        "(dsa_params_generate_async,bcrypto_dsa_params_generate_async)",
        "(secp256k1_is_low_s,bcrypto_secp256k1_is_low_s)",
        "(secp256k1_schnorr_legacy_sign,bcrypto_secp256k1_schnorr_legacy_sign)",
        "(secp256k1_xonly_tweak_mul,bcrypto_secp256k1_xonly_tweak_mul)",
        "(eddsa_scalar_negate,bcrypto_eddsa_scalar_negate)",
        "(ecdh_privkey_export,bcrypto_ecdh_privkey_export)",
        "(ctr_drbg_generate,bcrypto_ctr_drbg_generate)",
        "(secp256k1_signature_export,bcrypto_secp256k1_signature_export)",
        "(base32_decode,bcrypto_base32_decode)",
        "(eddsa_privkey_generate,bcrypto_eddsa_privkey_generate)",
        "(edwards_curve_field_size,bcrypto_edwards_curve_field_size)",
        "(hmac_digest,bcrypto_hmac_digest)",
        "(ecdh_derive,bcrypto_ecdh_derive)",
        "(eddsa_scalar_is_zero,bcrypto_eddsa_scalar_is_zero)",
        "(secp256k1_pubkey_to_uniform,bcrypto_secp256k1_pubkey_to_uniform)",
        "(schnorr_pubkey_tweak_mul,bcrypto_schnorr_pubkey_tweak_mul)",
        "(ecdsa_signature_normalize_der,bcrypto_ecdsa_signature_normalize_der)",
        "(ecdh_pubkey_is_small,bcrypto_ecdh_pubkey_is_small)",
        "(rsa_encrypt_oaep,bcrypto_rsa_encrypt_oaep)",
        "(secp256k1_context_create,bcrypto_secp256k1_context_create)",
        "(wei_curve_field_size,bcrypto_wei_curve_field_size)",
        "(schnorr_pubkey_verify,bcrypto_schnorr_pubkey_verify)",
        "(hash_update,bcrypto_hash_update)",
        "(scrypt_derive_async,bcrypto_scrypt_derive_async)",
        "(dsa_pubkey_create,bcrypto_dsa_pubkey_create)",
        "(base64url_decode,bcrypto_base64url_decode)",
        "(ecdsa_privkey_tweak_add,bcrypto_ecdsa_privkey_tweak_add)",
        "(salsa20_init,bcrypto_salsa20_init)",
        "(chacha20_derive,bcrypto_chacha20_derive)",
        "(chacha20_init,bcrypto_chacha20_init)",
        "(ecdh_pubkey_export,bcrypto_ecdh_pubkey_export)",
        "(ecdsa_is_low_s,bcrypto_ecdsa_is_low_s)",
        "(poly1305_destroy,bcrypto_poly1305_destroy)",
        "(secp256k1_context_randomize,bcrypto_secp256k1_context_randomize)",
        "(getrandom,bcrypto_getrandom)",
        "(ecdsa_privkey_export,bcrypto_ecdsa_privkey_export)",
        "(eddsa_scalar_clamp,bcrypto_eddsa_scalar_clamp)",
        "(secp256k1_xonly_verify,bcrypto_secp256k1_xonly_verify)",
        "(cipher_decrypt,bcrypto_cipher_decrypt)",
        "(rsa_verify,bcrypto_rsa_verify)",
        "(bech32_test,bcrypto_bech32_test)",
        "(secp256k1_signature_normalize,bcrypto_secp256k1_signature_normalize)",
        "(aead_decrypt,bcrypto_aead_decrypt)",
        "(ecdsa_privkey_import,bcrypto_ecdsa_privkey_import)",
        "(secp256k1_derive,bcrypto_secp256k1_derive)",
        "(ecdh_pubkey_verify,bcrypto_ecdh_pubkey_verify)",
        "(secp256k1_recover,bcrypto_secp256k1_recover)",
        "(cipher_crypt,bcrypto_cipher_crypt)",
        "(rsa_unveil,bcrypto_rsa_unveil)",
        "(secp256k1_xonly_to_hash,bcrypto_secp256k1_xonly_to_hash)",
        "(rsa_decrypt_oaep,bcrypto_rsa_decrypt_oaep)",
        "(schnorr_pubkey_from_uniform,bcrypto_schnorr_pubkey_from_uniform)",
        "(blake2b_digest,bcrypto_blake2b_digest)",
        "(schnorr_privkey_tweak_add,bcrypto_schnorr_privkey_tweak_add)",
        "(keccak_digest,bcrypto_keccak_digest)",
        "(eddsa_scalar_generate,bcrypto_eddsa_scalar_generate)",
        "(ecdh_privkey_import,bcrypto_ecdh_privkey_import)",
        "(rsa_veil,bcrypto_rsa_veil)",
        "(hash_init,bcrypto_hash_init)",
        "(dsa_derive,bcrypto_dsa_derive)",
        "(ecdsa_sign_recoverable,bcrypto_ecdsa_sign_recoverable)",
        "(schnorr_privkey_verify,bcrypto_schnorr_privkey_verify)",
        "(murmur3_tweak,bcrypto_murmur3_tweak)",
        "(arc4_crypt,bcrypto_arc4_crypt)",
        "(base32hex_encode,bcrypto_base32hex_encode)",
        "(secp256k1_xonly_to_uniform,bcrypto_secp256k1_xonly_to_uniform)",
        "(base58_decode,bcrypto_base58_decode)",
        "(eddsa_verify_single,bcrypto_eddsa_verify_single)",
        "(ecdh_pubkey_has_torsion,bcrypto_ecdh_pubkey_has_torsion)",
        "(secp256k1_seckey_tweak_mul,bcrypto_secp256k1_seckey_tweak_mul)",
        "(cash32_test,bcrypto_cash32_test)",
        "(eddsa_privkey_verify,bcrypto_eddsa_privkey_verify)",
        "(secp256k1_pubkey_create,bcrypto_secp256k1_pubkey_create)",
        "(eddsa_pubkey_verify,bcrypto_eddsa_pubkey_verify)",
        "(secp256k1_pubkey_export,bcrypto_secp256k1_pubkey_export)",
        "(hmac_drbg_generate,bcrypto_hmac_drbg_generate)",
        "(rsa_privkey_export,bcrypto_rsa_privkey_export)",
        "(hash_drbg_reseed,bcrypto_hash_drbg_reseed)",
        "(ctr_drbg_create,bcrypto_ctr_drbg_create)",
        "(siphash_mod,bcrypto_siphash_mod)",
        "(bcrypt_generate,bcrypto_bcrypt_generate)",
        "(aead_auth,bcrypto_aead_auth)",
        "(cash32_convert_bits,bcrypto_cash32_convert_bits)",
        "(ecdsa_pubkey_combine,bcrypto_ecdsa_pubkey_combine)",
        "(hash_drbg_generate,bcrypto_hash_drbg_generate)",
        "(bech32_decode,bcrypto_bech32_decode)",
        "(siphash_sum,bcrypto_siphash_sum)",
        "(rsa_privkey_generate_async,bcrypto_rsa_privkey_generate_async)",
        "(blake2s_multi,bcrypto_blake2s_multi)",
        "(ecdsa_pubkey_to_hash,bcrypto_ecdsa_pubkey_to_hash)",
        "(cipher_encrypt,bcrypto_cipher_encrypt)",
        "(eb2k_derive,bcrypto_eb2k_derive)",
        "(ecdsa_recover_der,bcrypto_ecdsa_recover_der)",
        "(base64_test,bcrypto_base64_test)",
        "(edwards_curve_create,bcrypto_edwards_curve_create)",
        "(aead_create,bcrypto_aead_create)",
        "(dsa_verify_der,bcrypto_dsa_verify_der)",
        "(eddsa_pubkey_negate,bcrypto_eddsa_pubkey_negate)",
        "(secp256k1_xonly_from_uniform,bcrypto_secp256k1_xonly_from_uniform)",
        "(salsa20_create,bcrypto_salsa20_create)",
        "(secretbox_derive,bcrypto_secretbox_derive)",
        "(dsa_params_import,bcrypto_dsa_params_import)",
        "(secp256k1_recover_der,bcrypto_secp256k1_recover_der)",
        "(bcrypt_verify,bcrypto_bcrypt_verify)",
        "(schnorr_pubkey_tweak_sum,bcrypto_schnorr_pubkey_tweak_sum)",
        "(ctr_drbg_init,bcrypto_ctr_drbg_init)",
        "(dsa_verify,bcrypto_dsa_verify)",
        "(eddsa_pubkey_to_hash,bcrypto_eddsa_pubkey_to_hash)",
        "(rsa_encrypt,bcrypto_rsa_encrypt)",
        "(eddsa_pubkey_tweak_add,bcrypto_eddsa_pubkey_tweak_add)",
        "(ecdh_privkey_generate,bcrypto_ecdh_privkey_generate)",
        "(schnorr_pubkey_tweak_add,bcrypto_schnorr_pubkey_tweak_add)",
        "(secp256k1_xonly_create,bcrypto_secp256k1_xonly_create)",
        "(keccak_update,bcrypto_keccak_update)",
        "(ecdh_pubkey_import,bcrypto_ecdh_pubkey_import)",
        "(siphash128_sum,bcrypto_siphash128_sum)",
        "(eddsa_sign,bcrypto_eddsa_sign)",
        "(rsa_privkey_generate,bcrypto_rsa_privkey_generate)",
        "(ecdsa_pubkey_tweak_add,bcrypto_ecdsa_pubkey_tweak_add)",
        "(bech32_serialize,bcrypto_bech32_serialize)",
        "(poly1305_final,bcrypto_poly1305_final)",
        "(hmac_init,bcrypto_hmac_init)",
        "(ecdsa_pubkey_export,bcrypto_ecdsa_pubkey_export)",
        "(secp256k1_sign_der,bcrypto_secp256k1_sign_der)",
        "(salsa20_derive,bcrypto_salsa20_derive)",
        "(random,bcrypto_random)",
        "(rsa_pubkey_export,bcrypto_rsa_pubkey_export)",
        "(schnorr_privkey_export,bcrypto_schnorr_privkey_export)",
        "(dsa_params_verify,bcrypto_dsa_params_verify)",
        "(mont_curve_field_size,bcrypto_mont_curve_field_size)",
        "(dsa_privkey_export,bcrypto_dsa_privkey_export)",
        "(schnorr_pubkey_import,bcrypto_schnorr_pubkey_import)",
        "(base58_encode,bcrypto_base58_encode)",
        "(secp256k1_xonly_import,bcrypto_secp256k1_xonly_import)",
        "(mont_curve_field_bits,bcrypto_mont_curve_field_bits)",
        "(ecdsa_privkey_negate,bcrypto_ecdsa_privkey_negate)",
        "(bcrypt_pbkdf,bcrypto_bcrypt_pbkdf)",
        "(dsa_privkey_verify,bcrypto_dsa_privkey_verify)",
        "(dsa_pubkey_verify,bcrypto_dsa_pubkey_verify)",
        "(dsa_signature_import,bcrypto_dsa_signature_import)",
        "(ecdsa_privkey_generate,bcrypto_ecdsa_privkey_generate)",
        "(blake2b_update,bcrypto_blake2b_update)",
        "(eddsa_pubkey_to_uniform,bcrypto_eddsa_pubkey_to_uniform)",
        "(hmac_final,bcrypto_hmac_final)",
        "(secretbox_seal,bcrypto_secretbox_seal)",
        "(ecdh_pubkey_from_uniform,bcrypto_ecdh_pubkey_from_uniform)",
        "(base16le_decode,bcrypto_base16le_decode)",
        "(dsa_privkey_create,bcrypto_dsa_privkey_create)",
        "(eddsa_pubkey_is_small,bcrypto_eddsa_pubkey_is_small)",
        "(hash_root,bcrypto_hash_root)",
        "(secp256k1_pubkey_negate,bcrypto_secp256k1_pubkey_negate)",
        "(aead_static_encrypt,bcrypto_aead_static_encrypt)",
        "(base16_test,bcrypto_base16_test)",
        "(secp256k1_pubkey_verify,bcrypto_secp256k1_pubkey_verify)",
        "(secp256k1_pubkey_tweak_mul,bcrypto_secp256k1_pubkey_tweak_mul)",
        "(rsa_decrypt,bcrypto_rsa_decrypt)",
        "(dsa_pubkey_import,bcrypto_dsa_pubkey_import)",
        "(schnorr_sign,bcrypto_schnorr_sign)",
        "(pbkdf2_derive,bcrypto_pbkdf2_derive)",
        "(aead_aad,bcrypto_aead_aad)",
        "(base32hex_decode,bcrypto_base32hex_decode)",
        "(hash_drbg_init,bcrypto_hash_drbg_init)",
        "(eddsa_pubkey_export,bcrypto_eddsa_pubkey_export)",
        "(secp256k1_schnorr_legacy_verify_batch,bcrypto_secp256k1_schnorr_legacy_verify_batch)",
        "(poly1305_verify,bcrypto_poly1305_verify)",
        "(secp256k1_schnorr_sign,bcrypto_secp256k1_schnorr_sign)",
        "(ecdh_pubkey_from_hash,bcrypto_ecdh_pubkey_from_hash)",
        "(base16_decode,bcrypto_base16_decode)",
        "(ecdh_pubkey_to_hash,bcrypto_ecdh_pubkey_to_hash)",
        "(rsa_privkey_verify,bcrypto_rsa_privkey_verify)",
        "(schnorr_verify_batch,bcrypto_schnorr_verify_batch)",
        "(keccak_create,bcrypto_keccak_create)",
        "(blake2s_update,bcrypto_blake2s_update)",
        "(base16le_test,bcrypto_base16le_test)",
        "(rsa_sign,bcrypto_rsa_sign)",
        "(secp256k1_pubkey_to_hash,bcrypto_secp256k1_pubkey_to_hash)",
        "(schnorr_pubkey_to_uniform,bcrypto_schnorr_pubkey_to_uniform)",
        "(secp256k1_xonly_seckey_tweak_add,bcrypto_secp256k1_xonly_seckey_tweak_add)",
        "(ecdsa_sign_recoverable_der,bcrypto_ecdsa_sign_recoverable_der)",
        "(ecdh_privkey_verify,bcrypto_ecdh_privkey_verify)",
        "(rsa_pubkey_import,bcrypto_rsa_pubkey_import)",
        "(eddsa_pubkey_convert,bcrypto_eddsa_pubkey_convert)",
        "(keccak_final,bcrypto_keccak_final)",
        "(schnorr_legacy_verify_batch,bcrypto_schnorr_legacy_verify_batch)",
        "(aead_encrypt,bcrypto_aead_encrypt)",
        "(eddsa_pubkey_is_infinity,bcrypto_eddsa_pubkey_is_infinity)",
        "(murmur3_sum,bcrypto_murmur3_sum)",
        "(cipher_destroy,bcrypto_cipher_destroy)",
        "(ecdsa_pubkey_to_uniform,bcrypto_ecdsa_pubkey_to_uniform)",
        "(wei_curve_field_bits,bcrypto_wei_curve_field_bits)",
        "(ecdsa_sign_der,bcrypto_ecdsa_sign_der)",
        "(blake2b_multi,bcrypto_blake2b_multi)",
        "(eddsa_pubkey_create,bcrypto_eddsa_pubkey_create)",
        "(ecdsa_derive,bcrypto_ecdsa_derive)",
        "(rsa_privkey_import,bcrypto_rsa_privkey_import)",
        "(eddsa_verify,bcrypto_eddsa_verify)",
        "(secp256k1_seckey_export,bcrypto_secp256k1_seckey_export)",
        "(aead_static_decrypt,bcrypto_aead_static_decrypt)",
        "(keccak_init,bcrypto_keccak_init)",
        "(ecdsa_privkey_verify,bcrypto_ecdsa_privkey_verify)",
        "(secp256k1_xonly_tweak_check,bcrypto_secp256k1_xonly_tweak_check)",
        "(ecdsa_is_low_der,bcrypto_ecdsa_is_low_der)",
        "(eddsa_privkey_convert,bcrypto_eddsa_privkey_convert)",
        "(ecdsa_verify,bcrypto_ecdsa_verify)",
        "(schnorr_pubkey_tweak_check,bcrypto_schnorr_pubkey_tweak_check)",
        "(ecdsa_signature_normalize,bcrypto_ecdsa_signature_normalize)",
        "(blake2s_digest,bcrypto_blake2s_digest)",
        "(dsa_params_export,bcrypto_dsa_params_export)",
        "(secp256k1_pubkey_from_uniform,bcrypto_secp256k1_pubkey_from_uniform)",
        "(schnorr_privkey_generate,bcrypto_schnorr_privkey_generate)",
        "(secp256k1_schnorr_legacy_verify,bcrypto_secp256k1_schnorr_legacy_verify)",
        "(bcrypt_pbkdf_async,bcrypto_bcrypt_pbkdf_async)",
        "(bech32_deserialize,bcrypto_bech32_deserialize)",
        "(ecdsa_privkey_tweak_mul,bcrypto_ecdsa_privkey_tweak_mul)",
        "(aead_verify,bcrypto_aead_verify)",
        "(aead_static_auth,bcrypto_aead_static_auth)",
        "(secp256k1_seckey_tweak_add,bcrypto_secp256k1_seckey_tweak_add)"
      ],
      "Charon": []
    },
    "bcrypt-small": {
      "Gasket": [
        "(target/bcrypt,hash_password)",
        "(bcrypt-small/build/Debug/bcrypt,hash_password)"
      ],
      "Charon": []
    },
    "bcrypt-updated": {
      "Gasket": [
        "(gen_salt_sync,GenerateSaltSync)",
        "(encrypt,Encrypt)",
        "(gen_salt,GenerateSalt)",
        "(encrypt_sync,EncryptSync)",
        "(compare_sync,CompareSync)",
        "(get_rounds,GetRounds)",
        "(compare,Compare)"
      ],
      "Charon": [
        "(gen_salt_sync,GenerateSaltSync)",
        "(encrypt_sync,EncryptSync)",
        "(compare_sync,CompareSync)",
        "(get_rounds,GetRounds)",
        "(gen_salt,GenerateSalt)",
        "(encrypt,Encrypt)",
        "(compare,Compare)"
      ]
    },
    "bdb": {
      "Gasket": [
        "(iterator_next,iterator_next)",
        "(destroy_db,destroy_db)",
        "(db_close,db_close)",
        "(db_get_many,db_get_many)",
        "(db_init,db_init)",
        "(iterator_end,iterator_end)",
        "(repair_db,repair_db)",
        "(db_approximate_size,db_approximate_size)",
        "(iterator_seek,iterator_seek)",
        "(iterator_init,iterator_init)",
        "(db_open,db_open)",
        "(batch_write,batch_write)",
        "(batch_init,batch_init)",
        "(batch_do,batch_do)",
        "(db_put,db_put)",
        "(batch_clear,batch_clear)",
        "(db_del,db_del)",
        "(db_clear,db_clear)",
        "(batch_put,batch_put)",
        "(db_compact_range,db_compact_range)",
        "(db_get_property,db_get_property)",
        "(db_get,db_get)",
        "(batch_del,batch_del)"
      ],
      "Charon": []
    },
    "better-sqlite3": {
      "Gasket": [
        "(columns,JS_columns)",
        "(exec,JS_exec)",
        "(return,JS_return)",
        "(expand,JS_expand)",
        "(loadExtension,JS_loadExtension)",
        "(Statement,JS_new)",
        "(iterate,JS_iterate)",
        "(all,JS_all)",
        "(aggregate,JS_aggregate)",
        "(function,JS_function)",
        "(defaultSafeIntegers,JS_defaultSafeIntegers)",
        "(StatementIterator,JS_new)",
        "(backup,JS_backup)",
        "(unsafeMode,JS_unsafeMode)",
        "(transfer,JS_transfer)",
        "(Database,JS_new)",
        "(serialize,JS_serialize)",
        "(run,JS_run)",
        "(next,JS_next)",
        "(raw,JS_raw)",
        "(pluck,JS_pluck)",
        "(get,JS_get)",
        "(Backup,JS_new)",
        "(close,JS_close)",
        "(prepare,JS_prepare)",
        "(setErrorConstructor,JS_setErrorConstructor)",
        "(bind,JS_bind)",
        "(safeIntegers,JS_safeIntegers)",
        "(table,JS_table)"
      ],
      "Charon": []
    },
    "better-sqlite3-multiple-ciphers": {
      "Gasket": [
        "(table,JS_table)",
        "(pluck,JS_pluck)",
        "(unsafeMode,JS_unsafeMode)",
        "(close,JS_close)",
        "(transfer,JS_transfer)",
        "(raw,JS_raw)",
        "(loadExtension,JS_loadExtension)",
        "(key,JS_key)",
        "(next,JS_next)",
        "(return,JS_return)",
        "(bind,JS_bind)",
        "(function,JS_function)",
        "(setErrorConstructor,JS_setErrorConstructor)",
        "(columns,JS_columns)",
        "(Backup,JS_new)",
        "(prepare,JS_prepare)",
        "(serialize,JS_serialize)",
        "(backup,JS_backup)",
        "(run,JS_run)",
        "(StatementIterator,JS_new)",
        "(Database,JS_new)",
        "(expand,JS_expand)",
        "(exec,JS_exec)",
        "(defaultSafeIntegers,JS_defaultSafeIntegers)",
        "(safeIntegers,JS_safeIntegers)",
        "(rekey,JS_rekey)",
        "(aggregate,JS_aggregate)",
        "(all,JS_all)",
        "(Statement,JS_new)",
        "(iterate,JS_iterate)",
        "(get,JS_get)"
      ],
      "Charon": []
    },
    "bfast-cloud": {
      "Gasket": [
        "(mask,Mask)",
        "(unmask,Unmask)",
        "(napi,IsValidUTF8)"
      ],
      "Charon": []
    },
    "bfast-database": {
      "Gasket": [
        "(mask,Mask)",
        "(unmask,Unmask)",
        "(napi,IsValidUTF8)"
      ],
      "Charon": []
    },
    "bglobal-signal": {
      "Gasket": [
        "(ServerSecretParams_GetPublicParams,h50d4f9253d13ef80)",
        "(SenderCertificate_GetServerCertificate,h50d4f9253d13ef80)",
        "(Aes256GcmSiv_New,h50d4f9253d13ef80)",
        "(ServerPublicParams_ReceiveAuthCredential,h50d4f9253d13ef80)",
        "(SessionCipher_DecryptPreKeySignalMessage,h50d4f9253d13ef80)",
        "(PlaintextContent_Serialize,h50d4f9253d13ef80)",
        "(GroupSecretParams_EncryptUuid,h50d4f9253d13ef80)",
        "(SignalMessage_GetCounter,h50d4f9253d13ef80)",
        "(SenderKeyMessage_Serialize,h50d4f9253d13ef80)",
        "(GroupSecretParams_GetPublicParams,h50d4f9253d13ef80)",
        "(Fingerprint_New,h50d4f9253d13ef80)",
        "(PublicKey_GetPublicKeyBytes,h50d4f9253d13ef80)",
        "(ProfileKeyCiphertext_CheckValidContents,h50d4f9253d13ef80)",
        "(PreKeyRecord_New,h50d4f9253d13ef80)",
        "(ServerSecretParams_IssueReceiptCredentialDeterministic,h50d4f9253d13ef80)",
        "(SenderKeyDistributionMessage_GetIteration,h50d4f9253d13ef80)",
        "(HsmEnclaveClient_EstablishedRecv,h50d4f9253d13ef80)",
        "(DecryptionErrorMessage_GetDeviceId,h50d4f9253d13ef80)",
        "(PrivateKey_Agree,h50d4f9253d13ef80)",
        "(ServerCertificate_GetCertificate,h50d4f9253d13ef80)",
        "(SenderCertificate_Deserialize,h50d4f9253d13ef80)",
        "(PreKeyBundle_GetPreKeyId,h50d4f9253d13ef80)",
        "(PniCredentialRequestContext_GetRequest,h50d4f9253d13ef80)",
        "(ServerSecretParams_VerifyPniCredentialPresentation,h50d4f9253d13ef80)",
        "(ReceiptCredentialRequest_CheckValidContents,h50d4f9253d13ef80)",
        "(UnidentifiedSenderMessageContent_New,h50d4f9253d13ef80)",
        "(ReceiptCredentialPresentation_GetReceiptExpirationTime,h50d4f9253d13ef80)",
        "(SenderCertificate_Validate,h50d4f9253d13ef80)",
        "(PniCredentialPresentation_GetPniCiphertext,h50d4f9253d13ef80)",
        "(UnidentifiedSenderMessageContent_GetContents,h50d4f9253d13ef80)",
        "(GroupSecretParams_EncryptBlobWithPaddingDeterministic,h50d4f9253d13ef80)",
        "(PlaintextContent_FromDecryptionErrorMessage,h50d4f9253d13ef80)",
        "(ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic,h50d4f9253d13ef80)",
        "(PreKeyRecord_GetPublicKey,h50d4f9253d13ef80)",
        "(SealedSender_DecryptToUsmc,h50d4f9253d13ef80)",
        "(UnidentifiedSenderMessageContent_GetSenderCert,h50d4f9253d13ef80)",
        "(SenderCertificate_GetKey,h50d4f9253d13ef80)",
        "(PreKeySignalMessage_GetVersion,h50d4f9253d13ef80)",
        "(SenderKeyMessage_GetDistributionId,h50d4f9253d13ef80)",
        "(PreKeySignalMessage_Deserialize,h50d4f9253d13ef80)",
        "(Fingerprint_DisplayString,h50d4f9253d13ef80)",
        "(GroupMasterKey_CheckValidContents,h50d4f9253d13ef80)",
        "(ServerSecretParams_SignDeterministic,h50d4f9253d13ef80)",
        "(SenderKeyDistributionMessage_New,h50d4f9253d13ef80)",
        "(SenderKeyMessage_GetIteration,h50d4f9253d13ef80)",
        "(ReceiptCredentialPresentation_CheckValidContents,h50d4f9253d13ef80)",
        "(SenderKeyDistributionMessage_GetChainKey,h50d4f9253d13ef80)",
        "(HsmEnclaveClient_InitialRequest,h50d4f9253d13ef80)",
        "(PreKeyRecord_GetPrivateKey,h50d4f9253d13ef80)",
        "(CiphertextMessage_Serialize,h50d4f9253d13ef80)",
        "(PrivateKey_Generate,h50d4f9253d13ef80)",
        "(SignedPreKeyRecord_GetId,h50d4f9253d13ef80)",
        "(PreKeyBundle_GetPreKeyPublic,h50d4f9253d13ef80)",
        "(ProfileKeyCredentialResponse_CheckValidContents,h50d4f9253d13ef80)",
        "(ServerCertificate_GetSignature,h50d4f9253d13ef80)",
        "(SealedSender_MultiRecipientEncrypt,h50d4f9253d13ef80)",
        "(SealedSenderDecryptionResult_GetDeviceId,h50d4f9253d13ef80)",
        "(SenderKeyDistributionMessage_Serialize,h50d4f9253d13ef80)",
        "(PublicKey_Compare,h50d4f9253d13ef80)",
        "(GroupSecretParams_GetMasterKey,h50d4f9253d13ef80)",
        "(ProfileKeyCredentialRequestContext_CheckValidContents,h50d4f9253d13ef80)",
        "(PreKeyBundle_GetRegistrationId,h50d4f9253d13ef80)",
        "(SealedSenderDecryptionResult_GetSenderUuid,h50d4f9253d13ef80)",
        "(ProfileKeyCredentialRequestContext_GetRequest,h50d4f9253d13ef80)",
        "(ServerSecretParams_IssueProfileKeyCredentialDeterministic,h50d4f9253d13ef80)",
        "(SenderKeyMessage_GetCipherText,h50d4f9253d13ef80)",
        "(ServerSecretParams_VerifyAuthCredentialPresentation,h50d4f9253d13ef80)",
        "(SenderKeyMessage_GetChainId,h50d4f9253d13ef80)",
        "(SessionCipher_EncryptMessage,h50d4f9253d13ef80)",
        "(GroupSecretParams_DecryptBlobWithPadding,h50d4f9253d13ef80)",
        "(Fingerprint_ScannableEncoding,h50d4f9253d13ef80)",
        "(SealedSender_Encrypt,h50d4f9253d13ef80)",
        "(PreKeySignalMessage_New,h50d4f9253d13ef80)",
        "(PlaintextContent_GetBody,h50d4f9253d13ef80)",
        "(HsmEnclaveClient_New,h50d4f9253d13ef80)",
        "(SignedPreKeyRecord_Deserialize,h50d4f9253d13ef80)",
        "(GroupSecretParams_DecryptUuid,h50d4f9253d13ef80)",
        "(GroupPublicParams_GetGroupIdentifier,h50d4f9253d13ef80)",
        "(GroupPublicParams_CheckValidContents,h50d4f9253d13ef80)",
        "(SessionCipher_DecryptSignalMessage,h50d4f9253d13ef80)",
        "(SenderCertificate_GetDeviceId,h50d4f9253d13ef80)",
        "(GroupCipher_EncryptMessage,h50d4f9253d13ef80)",
        "(DecryptionErrorMessage_Deserialize,h50d4f9253d13ef80)",
        "(ReceiptCredential_GetReceiptExpirationTime,h50d4f9253d13ef80)",
        "(SenderCertificate_GetSenderUuid,h50d4f9253d13ef80)",
        "(ServerSecretParams_CheckValidContents,h50d4f9253d13ef80)",
        "(ProtocolAddress_New,h50d4f9253d13ef80)",
        "(HsmEnclaveClient_EstablishedSend,h50d4f9253d13ef80)",
        "(ReceiptCredential_CheckValidContents,h50d4f9253d13ef80)",
        "(ProtocolAddress_DeviceId,h50d4f9253d13ef80)",
        "(IdentityKeyPair_Serialize,h50d4f9253d13ef80)",
        "(ProfileKey_CheckValidContents,h50d4f9253d13ef80)",
        "(SessionRecord_Serialize,h50d4f9253d13ef80)",
        "(ServerPublicParams_CreateAuthCredentialPresentationDeterministic,h50d4f9253d13ef80)",
        "(UuidCiphertext_CheckValidContents,h50d4f9253d13ef80)",
        "(ServerSecretParams_IssueAuthCredentialDeterministic,h50d4f9253d13ef80)",
        "(SignalMessage_GetMessageVersion,h50d4f9253d13ef80)",
        "(SessionRecord_CurrentRatchetKeyMatches,h50d4f9253d13ef80)",
        "(DecryptionErrorMessage_ForOriginalMessage,h50d4f9253d13ef80)",
        "(PreKeySignalMessage_GetRegistrationId,h50d4f9253d13ef80)",
        "(ProfileKeyCommitment_CheckValidContents,h50d4f9253d13ef80)",
        "(UnidentifiedSenderMessageContent_GetMsgType,h50d4f9253d13ef80)",
        "(SenderCertificate_GetSerialized,h50d4f9253d13ef80)",
        "(DecryptionErrorMessage_GetTimestamp,h50d4f9253d13ef80)",
        "(SenderCertificate_GetSenderE164,h50d4f9253d13ef80)",
        "(SignalMessage_New,h50d4f9253d13ef80)",
        "(PrivateKey_Sign,h50d4f9253d13ef80)",
        "(ProfileKeyCredentialPresentation_GetProfileKeyCiphertext,h50d4f9253d13ef80)",
        "(AuthCredentialPresentation_GetUuidCiphertext,h50d4f9253d13ef80)",
        "(GroupSecretParams_DecryptProfileKey,h50d4f9253d13ef80)",
        "(CiphertextMessage_Type,h50d4f9253d13ef80)",
        "(SealedSender_MultiRecipientMessageForSingleRecipient,h50d4f9253d13ef80)",
        "(ReceiptCredentialResponse_CheckValidContents,h50d4f9253d13ef80)",
        "(SealedSender_DecryptMessage,h50d4f9253d13ef80)",
        "(SignedPreKeyRecord_GetPrivateKey,h50d4f9253d13ef80)",
        "(GroupSecretParams_DeriveFromMasterKey,h50d4f9253d13ef80)",
        "(DecryptionErrorMessage_ExtractFromSerializedContent,h50d4f9253d13ef80)",
        "(UnidentifiedSenderMessageContent_Deserialize,h50d4f9253d13ef80)",
        "(ServerCertificate_GetKey,h50d4f9253d13ef80)",
        "(SenderKeyDistributionMessage_Deserialize,h50d4f9253d13ef80)",
        "(PniCredentialPresentation_GetAciCiphertext,h50d4f9253d13ef80)",
        "(ProfileKey_GetProfileKeyVersion,h50d4f9253d13ef80)",
        "(PreKeySignalMessage_GetSignedPreKeyId,h50d4f9253d13ef80)",
        "(SenderCertificate_GetCertificate,h50d4f9253d13ef80)",
        "(ServerCertificate_GetSerialized,h50d4f9253d13ef80)",
        "(initLogger,hc774eddd9c21c175)",
        "(SignedPreKeyRecord_Serialize,h50d4f9253d13ef80)",
        "(SignedPreKeyRecord_GetSignature,h50d4f9253d13ef80)",
        "(PreKeyBundle_New,h50d4f9253d13ef80)",
        "(ServerPublicParams_ReceiveReceiptCredential,h50d4f9253d13ef80)",
        "(SignedPreKeyRecord_GetPublicKey,h50d4f9253d13ef80)",
        "(PreKeyBundle_GetDeviceId,h50d4f9253d13ef80)",
        "(PniCredentialPresentation_CheckValidContents,h50d4f9253d13ef80)",
        "(AuthCredential_CheckValidContents,h50d4f9253d13ef80)",
        "(PreKeyBundle_GetIdentityKey,h50d4f9253d13ef80)",
        "(ServerSecretParams_IssuePniCredentialDeterministic,h50d4f9253d13ef80)",
        "(AuthCredentialPresentation_CheckValidContents,h50d4f9253d13ef80)",
        "(Aes256GcmSiv_Encrypt,h50d4f9253d13ef80)",
        "(ServerCertificate_GetKeyId,h50d4f9253d13ef80)",
        "(HKDF_DeriveSecrets,h50d4f9253d13ef80)",
        "(HsmEnclaveClient_CompleteHandshake,h50d4f9253d13ef80)",
        "(GroupCipher_DecryptMessage,h50d4f9253d13ef80)",
        "(SessionRecord_NeedsPniSignature,h50d4f9253d13ef80)",
        "(PreKeyRecord_Serialize,h50d4f9253d13ef80)",
        "(PreKeyRecord_Deserialize,h50d4f9253d13ef80)",
        "(UnidentifiedSenderMessageContent_GetContentHint,h50d4f9253d13ef80)",
        "(ServerCertificate_Deserialize,h50d4f9253d13ef80)",
        "(SenderKeyRecord_Deserialize,h50d4f9253d13ef80)",
        "(SignedPreKeyRecord_New,h50d4f9253d13ef80)",
        "(SenderKeyRecord_Serialize,h50d4f9253d13ef80)",
        "(PlaintextContent_Deserialize,h50d4f9253d13ef80)",
        "(PublicKey_Serialize,h50d4f9253d13ef80)",
        "(ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic,h50d4f9253d13ef80)",
        "(ReceiptCredentialRequestContext_CheckValidContents,h50d4f9253d13ef80)",
        "(SessionRecord_SetNeedsPniSignature,h50d4f9253d13ef80)",
        "(GroupSecretParams_EncryptProfileKey,h50d4f9253d13ef80)",
        "(SenderCertificate_GetExpiration,h50d4f9253d13ef80)",
        "(ProfileKeyCredentialRequest_CheckValidContents,h50d4f9253d13ef80)",
        "(SenderCertificate_New,h50d4f9253d13ef80)",
        "(SessionBuilder_ProcessPreKeyBundle,h50d4f9253d13ef80)",
        "(PreKeyBundle_GetSignedPreKeySignature,h50d4f9253d13ef80)",
        "(SessionRecord_ArchiveCurrentState,h50d4f9253d13ef80)",
        "(ReceiptCredentialRequestContext_GetRequest,h50d4f9253d13ef80)",
        "(SignedPreKeyRecord_GetTimestamp,h50d4f9253d13ef80)",
        "(SessionRecord_Deserialize,h50d4f9253d13ef80)",
        "(ServerPublicParams_ReceiveProfileKeyCredential,h50d4f9253d13ef80)",
        "(ServerSecretParams_GenerateDeterministic,h50d4f9253d13ef80)",
        "(PrivateKey_Deserialize,h50d4f9253d13ef80)",
        "(ReceiptCredentialPresentation_GetReceiptLevel,h50d4f9253d13ef80)",
        "(SenderKeyMessage_Deserialize,h50d4f9253d13ef80)",
        "(AuthCredentialPresentation_GetRedemptionTime,h50d4f9253d13ef80)",
        "(PrivateKey_GetPublicKey,h50d4f9253d13ef80)",
        "(GroupSecretParams_GenerateDeterministic,h50d4f9253d13ef80)",
        "(SenderCertificate_GetSignature,h50d4f9253d13ef80)",
        "(SignalMessage_VerifyMac,h50d4f9253d13ef80)",
        "(SenderKeyDistributionMessage_GetChainId,h50d4f9253d13ef80)",
        "(ProfileKeyCredential_CheckValidContents,h50d4f9253d13ef80)",
        "(PreKeySignalMessage_GetPreKeyId,h50d4f9253d13ef80)",
        "(DecryptionErrorMessage_Serialize,h50d4f9253d13ef80)",
        "(ReceiptCredential_GetReceiptLevel,h50d4f9253d13ef80)",
        "(SessionRecord_GetRemoteRegistrationId,h50d4f9253d13ef80)",
        "(AuthCredentialResponse_CheckValidContents,h50d4f9253d13ef80)",
        "(CiphertextMessage_FromPlaintextContent,h50d4f9253d13ef80)",
        "(SenderKeyDistributionMessage_GetDistributionId,h50d4f9253d13ef80)",
        "(UnidentifiedSenderMessageContent_GetGroupId,h50d4f9253d13ef80)",
        "(SignalMessage_GetBody,h50d4f9253d13ef80)",
        "(SealedSenderDecryptionResult_Message,h50d4f9253d13ef80)",
        "(ReceiptCredentialPresentation_GetReceiptSerial,h50d4f9253d13ef80)",
        "(ServerPublicParams_CheckValidContents,h50d4f9253d13ef80)",
        "(SenderKeyDistributionMessage_Create,h50d4f9253d13ef80)",
        "(ServerSecretParams_VerifyProfileKeyCredentialPresentation,h50d4f9253d13ef80)",
        "(ScannableFingerprint_Compare,h50d4f9253d13ef80)",
        "(PrivateKey_Serialize,h50d4f9253d13ef80)",
        "(PreKeySignalMessage_Serialize,h50d4f9253d13ef80)",
        "(ServerPublicParams_VerifySignature,h50d4f9253d13ef80)",
        "(ServerPublicParams_ReceivePniCredential,h50d4f9253d13ef80)",
        "(SenderKeyMessage_VerifySignature,h50d4f9253d13ef80)",
        "(SealedSenderDecryptionResult_GetSenderE164,h50d4f9253d13ef80)",
        "(SessionRecord_GetLocalRegistrationId,h50d4f9253d13ef80)",
        "(UnidentifiedSenderMessageContent_Serialize,h50d4f9253d13ef80)",
        "(ProfileKeyCredentialPresentation_GetUuidCiphertext,h50d4f9253d13ef80)",
        "(PreKeyRecord_GetId,h50d4f9253d13ef80)",
        "(PreKeyBundle_GetSignedPreKeyPublic,h50d4f9253d13ef80)",
        "(PublicKey_Deserialize,h50d4f9253d13ef80)",
        "(ServerPublicParams_CreateProfileKeyCredentialPresentationDeterministic,h50d4f9253d13ef80)",
        "(SenderKeyDistributionMessage_Process,h50d4f9253d13ef80)",
        "(ServerPublicParams_CreateReceiptCredentialPresentationDeterministic,h50d4f9253d13ef80)",
        "(SenderKeyMessage_New,h50d4f9253d13ef80)",
        "(SignalMessage_Deserialize,h50d4f9253d13ef80)",
        "(IdentityKeyPair_SignAlternateIdentity,h50d4f9253d13ef80)",
        "(PniCredentialPresentation_GetProfileKeyCiphertext,h50d4f9253d13ef80)",
        "(ServerCertificate_New,h50d4f9253d13ef80)",
        "(ProtocolAddress_AccountId,h50d4f9253d13ef80)",
        "(ServerPublicParams_CreatePniCredentialRequestContextDeterministic,h50d4f9253d13ef80)",
        "(PniCredentialRequestContext_CheckValidContents,h50d4f9253d13ef80)",
        "(Aes256GcmSiv_Decrypt,h50d4f9253d13ef80)",
        "(SessionRecord_HasCurrentState,h50d4f9253d13ef80)",
        "(DecryptionErrorMessage_GetRatchetKey,h50d4f9253d13ef80)",
        "(SignalMessage_GetSerialized,h50d4f9253d13ef80)",
        "(ServerSecretParams_VerifyReceiptCredentialPresentation,h50d4f9253d13ef80)",
        "(ProfileKey_GetCommitment,h50d4f9253d13ef80)",
        "(PniCredentialResponse_CheckValidContents,h50d4f9253d13ef80)",
        "(PublicKey_Verify,h50d4f9253d13ef80)",
        "(PreKeyBundle_GetSignedPreKeyId,h50d4f9253d13ef80)",
        "(ProfileKeyCredentialPresentation_CheckValidContents,h50d4f9253d13ef80)",
        "(PniCredential_CheckValidContents,h50d4f9253d13ef80)",
        "(ServerPublicParams_CreatePniCredentialPresentationDeterministic,h50d4f9253d13ef80)",
        "(registerErrors,h50d4f9253d13ef80)",
        "(GroupSecretParams_CheckValidContents,h50d4f9253d13ef80)",
        "(IdentityKey_VerifyAlternateIdentity,h50d4f9253d13ef80)"
      ],
      "Charon": []
    },
    "bhtsne": {
      "Gasket": [
        "(run,Method)"
      ],
      "Charon": [
        "(run,Method)"
      ]
    },
    "@bigemap/usb-detection": {
      "Gasket": [
        "(stopMonitoring,StopMonitoring)",
        "(find,Find)",
        "(registerRemoved,RegisterRemoved)",
        "(startMonitoring,StartMonitoring)",
        "(registerAdded,RegisterAdded)"
      ],
      "Charon": [
        "(find,Find)",
        "(registerAdded,RegisterAdded)",
        "(registerRemoved,RegisterRemoved)",
        "(startMonitoring,StartMonitoring)",
        "(stopMonitoring,StopMonitoring)"
      ]
    },
    "bigint-buffer": {
      "Gasket": [
        "(toBigInt,toBigInt)",
        "(fromBigInt,fromBigInt)"
      ],
      "Charon": []
    },
    "bigint-hash": {
      "Gasket": [
        "(getHashDigestBigInt,get_hash_digest_bigint)",
        "(getHashDigestBuffer,get_hash_digest_buffer)",
        "(hashBufferOneshotBigInt,hash_buffer_oneshot_bigint)",
        "(getHashHandle,get_hash_handle)",
        "(hashBuffer,hash_buffer)",
        "(hashBufferOneshotBuffer,hash_buffer_oneshot_buffer)"
      ],
      "Charon": []
    },
    "bignum": {
      "Gasket": [
        "(upow,Upow)",
        "(bcompare,Bcompare)",
        "(bsub,Bsub)",
        "(uadd,Uadd)",
        "(badd,Badd)",
        "(uprime0,Uprime0)",
        "(umul,Umul)",
        "(udiv,Udiv)",
        "(bsqrt,Bsqrt)",
        "(gcd,Bgcd)",
        "(probprime,Probprime)",
        "(bmod,Bmod)",
        "(jacobi,Bjacobi)",
        "(upowm,Upowm)",
        "(bneg,Bneg)",
        "(umul2exp,Umul_2exp)",
        "(isbitset,IsBitSet)",
        "(broot,Broot)",
        "(usub,Usub)",
        "(bxor,Bxor)",
        "(setCompact,Bsetcompact)",
        "(scompare,Scompare)",
        "(bmul,Bmul)",
        "(bor,Bor)",
        "(udiv2exp,Udiv_2exp)",
        "(umod,Umod)",
        "(setJSConditioner,SetJSConditioner)",
        "(BigNum,New)",
        "(ucompare,Ucompare)",
        "(tostring,ToString)",
        "(brand0,Brand0)",
        "(bitLength,BitLength)",
        "(band,Band)",
        "(babs,Babs)",
        "(binvertm,Binvertm)",
        "(bdiv,Bdiv)",
        "(bpowm,Bpowm)"
      ],
      "Charon": [
        "(uprime0,Uprime0)",
        "(tostring,ToString)",
        "(badd,Badd)",
        "(bsub,Bsub)",
        "(bmul,Bmul)",
        "(bdiv,Bdiv)",
        "(uadd,Uadd)",
        "(usub,Usub)",
        "(umul,Umul)",
        "(udiv,Udiv)",
        "(umul2exp,Umul_2exp)",
        "(udiv2exp,Udiv_2exp)",
        "(babs,Babs)",
        "(bneg,Bneg)",
        "(bmod,Bmod)",
        "(umod,Umod)",
        "(bpowm,Bpowm)",
        "(upowm,Upowm)",
        "(upow,Upow)",
        "(brand0,Brand0)",
        "(probprime,Probprime)",
        "(bcompare,Bcompare)",
        "(scompare,Scompare)",
        "(ucompare,Ucompare)",
        "(band,Band)",
        "(bor,Bor)",
        "(bxor,Bxor)",
        "(binvertm,Binvertm)",
        "(bsqrt,Bsqrt)",
        "(broot,Broot)",
        "(bitLength,BitLength)",
        "(gcd,Bgcd)",
        "(jacobi,Bjacobi)",
        "(setCompact,Bsetcompact)",
        "(isbitset,IsBitSet)",
        "(setJSConditioner,SetJSConditioner)"
      ]
    },
    "bitcoinnova-crypto": {
      "Gasket": [
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(derivePublicKey,derivePublicKey)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(cnFastHash,cn_fast_hash)",
        "(checkKey,checkKey)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(generateRingSignatures,generateRingSignatures)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(generateKeys,generateKeys)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(scReduce32,scReduce32)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(generateKeyImage,generateKeyImage)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)",
        "(deriveSecretKey,deriveSecretKey)",
        "(scalarmultKey,scalarmultKey)",
        "(checkSignature,checkSignature)",
        "(generateSignature,generateSignature)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(tree_hash,tree_hash)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(tree_branch,tree_branch)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(checkRingSignature,checkRingSignature)",
        "(chukwa_slow_hash,chukwa_slow_hash)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(underivePublicKey,underivePublicKey)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(hashToScalar,hashToScalar)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(tree_depth,tree_depth)"
      ],
      "Charon": [
        "(checkKey,checkKey)",
        "(checkRingSignature,checkRingSignature)",
        "(checkSignature,checkSignature)",
        "(derivePublicKey,derivePublicKey)",
        "(deriveSecretKey,deriveSecretKey)",
        "(generateKeys,generateKeys)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(generateKeyImage,generateKeyImage)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(generateRingSignatures,generateRingSignatures)",
        "(generateSignature,generateSignature)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(hashToScalar,hashToScalar)",
        "(scalarmultKey,scalarmultKey)",
        "(scReduce32,scReduce32)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(tree_depth,tree_depth)",
        "(tree_hash,tree_hash)",
        "(tree_branch,tree_branch)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(underivePublicKey,underivePublicKey)",
        "(cnFastHash,cn_fast_hash)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(chukwa_slow_hash,chukwa_slow_hash)"
      ]
    },
    "@bithighlander/usb-detection": {
      "Gasket": [
        "(stopMonitoring,StopMonitoring)",
        "(find,Find)",
        "(registerRemoved,RegisterRemoved)",
        "(startMonitoring,StartMonitoring)",
        "(registerAdded,RegisterAdded)"
      ],
      "Charon": [
        "(find,Find)",
        "(registerAdded,RegisterAdded)",
        "(registerRemoved,RegisterRemoved)",
        "(startMonitoring,StartMonitoring)",
        "(stopMonitoring,StopMonitoring)"
      ]
    },
    "bkjs-cache": {
      "Gasket": [
        "(lruClean,lruClean)",
        "(lruInit,lruInit)",
        "(exists,exists)",
        "(begin,begin)",
        "(lruSize,lruSize)",
        "(each,each)",
        "(incr,incr)",
        "(names,names)",
        "(lruFront,lruFront)",
        "(lruKeys,lruKeys)",
        "(put,put)",
        "(lruStats,lruStats)",
        "(lruCount,lruCount)",
        "(size,size)",
        "(next,next)",
        "(lruClear,lruClear)",
        "(lruIncr,lruIncr)",
        "(lruGet,lruGet)",
        "(get,get)",
        "(lruExists,lruExists)",
        "(del,del)",
        "(clear,clear)",
        "(lruDel,lruDel)",
        "(keys,keys)",
        "(lruPut,lruPut)"
      ],
      "Charon": [
        "(put,put)",
        "(incr,incr)",
        "(get,get)",
        "(exists,exists)",
        "(del,del)",
        "(keys,keys)",
        "(clear,clear)",
        "(names,names)",
        "(size,size)",
        "(each,each)",
        "(begin,begin)",
        "(next,next)",
        "(lruInit,lruInit)",
        "(lruStats,lruStats)",
        "(lruSize,lruSize)",
        "(lruCount,lruCount)",
        "(lruPut,lruPut)",
        "(lruGet,lruGet)",
        "(lruExists,lruExists)",
        "(lruIncr,lruIncr)",
        "(lruDel,lruDel)",
        "(lruKeys,lruKeys)",
        "(lruClear,lruClear)",
        "(lruClean,lruClean)",
        "(lruFront,lruFront)"
      ]
    },
    "bkjs-sqlite": {
      "Gasket": [
        "(close,Close)",
        "(run,Run)",
        "(stats,stats)",
        "(exec,Exec)",
        "(prepare,Prepare)",
        "(querySync,QuerySync)",
        "(Statement,NewStmt)",
        "(closeSync,CloseSync)",
        "(copy,Copy)",
        "(finalize,Finalize)",
        "(Database,NewDB)",
        "(runSync,RunSync)",
        "(query,Query)"
      ],
      "Charon": [
        "(open,OpenGetter)",
        "(inserted_oid,InsertedOidGetter)",
        "(affected_rows,AffectedRowsGetter)",
        "(close,Close)",
        "(closeSync,CloseSync)",
        "(exec,Exec)",
        "(run,Run)",
        "(runSync,RunSync)",
        "(query,Query)",
        "(querySync,QuerySync)",
        "(copy,Copy)",
        "(prepare,Prepare)",
        "(finalize,Finalize)",
        "(name,filename)",
        "(mode,mode)",
        "(sql,sql)",
        "(stats,stats)"
      ]
    },
    "bkjs-syslog": {
      "Gasket": [
        "(send,send)",
        "(close,close)",
        "(open,open)"
      ],
      "Charon": [
        "(open,open)",
        "(send,send)",
        "(close,close)"
      ]
    },
    "bkjs-utils": {
      "Gasket": [
        "(zlibUncompress,zlibUncompress)",
        "(zlibCompress,zlibCompress)",
        "(zipFiles,zipFiles)",
        "(countWordsInit,countWordsInit)",
        "(geoHashDecode,geoHashDecode)",
        "(getUser,getUser)",
        "(geoHashEncode,geoHashEncode)",
        "(geoHashAdjacent,geoHashAdjacent)",
        "(unzipFile,unzipFile)",
        "(getTimeOfDay,getTimeOfDay)",
        "(geoHashGrid,geoHashGrid)",
        "(geoHashRow,geoHashRow)",
        "(strSplit,strSplit)",
        "(run,run)",
        "(snappyCompress,snappyCompress)",
        "(geoDistance,geoDistance)",
        "(unzip,unzip)",
        "(getGroup,getGroup)",
        "(snappyUncompress,snappyUncompress)",
        "(initBusy,initBusy)",
        "(getBusy,getBusy)",
        "(countWords,countWords)",
        "(countAllWords,countAllWords)",
        "(isBusy,isBusy)",
        "(geoBoundingBox,geoBoundingBox)"
      ],
      "Charon": [
        "(run,run)",
        "(strSplit,strSplit)",
        "(getUser,getUser)",
        "(getGroup,getGroup)",
        "(countWordsInit,countWordsInit)",
        "(countWords,countWords)",
        "(countAllWords,countAllWords)",
        "(snappyCompress,snappyCompress)",
        "(snappyUncompress,snappyUncompress)",
        "(zlibCompress,zlibCompress)",
        "(zlibUncompress,zlibUncompress)",
        "(geoDistance,geoDistance)",
        "(geoBoundingBox,geoBoundingBox)",
        "(geoHashEncode,geoHashEncode)",
        "(geoHashDecode,geoHashDecode)",
        "(geoHashAdjacent,geoHashAdjacent)",
        "(geoHashGrid,geoHashGrid)",
        "(geoHashRow,geoHashRow)",
        "(zipFiles,zipFiles)",
        "(unzipFile,unzipFile)",
        "(unzip,unzip)",
        "(initBusy,initBusy)",
        "(isBusy,isBusy)",
        "(getBusy,getBusy)",
        "(getTimeOfDay,getTimeOfDay)"
      ]
    },
    "bkjs-wand": {
      "Gasket": [
        "(resizeImage,resizeImage)"
      ],
      "Charon": []
    },
    "bktree-fast": {
      "Gasket": [
        "(distance,_bk_distance)",
        "(walk,_bk_walk)",
        "(size,_bk_size)",
        "(query,_bk_query)",
        "(create,_bk_create)",
        "(add,_bk_add)"
      ],
      "Charon": []
    },
    "blake2": {
      "Gasket": [
        "(update,Update)",
        "(digest,Digest)",
        "(copy,Copy)",
        "(Hash,New)"
      ],
      "Charon": [
        "(update,Update)",
        "(digest,Digest)",
        "(copy,Copy)"
      ]
    },
    "blake-hash": {
      "Gasket": [
        "(Blake384,BlakeWrapper384)",
        "(Blake256,BlakeWrapper256)",
        "(Blake224,BlakeWrapper224)",
        "(digest,Digest)",
        "(Blake512,BlakeWrapper512)",
        "(update,Update)"
      ],
      "Charon": [
        "(Blake224,BlakeWrapper224)",
        "(Blake256,BlakeWrapper256)",
        "(Blake384,BlakeWrapper384)",
        "(Blake512,BlakeWrapper512)"
      ]
    },
    "bling-hashes": {
      "Gasket": [
        "(cityHash32,_CityHash32)",
        "(calcHash,CalcHash)",
        "(cityHash64,_CityHash64)",
        "(cityHash128,_CityHash128)"
      ],
      "Charon": []
    },
    "bodmas": {
      "Gasket": [
        "(ClassExample,ClassExample)",
        "(devide,DevideWrapped)",
        "(subtract,SubtactWrapped)",
        "(add,AddWrapped)",
        "(addN,AddNWrapped)",
        "(getValue,GetValue)",
        "(add,Add)",
        "(multiply,MultiplyWrapped)"
      ],
      "Charon": []
    },
    "bole-first-test": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": []
    },
    "boost-geospatial-index": {
      "Gasket": [
        "(addBBox,addBBox)",
        "(addPolygon,addPolygon)",
        "(addAnnulus,addAnnulus)",
        "(SpatialIndex,New)",
        "(addCircle,addCircle)",
        "(queryIntersect,queryIntersect)",
        "(remove,remove)",
        "(queryPoint,queryPoint)"
      ],
      "Charon": [
        "(addBBox,addBBox)",
        "(addCircle,addCircle)",
        "(addAnnulus,addAnnulus)",
        "(addPolygon,addPolygon)",
        "(queryPoint,queryPoint)",
        "(queryIntersect,queryIntersect)",
        "(remove,remove)"
      ]
    },
    "boyia-npm": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": [
        "(hello,Method)"
      ]
    },
    "@bpnetguy/sharp": {
      "Gasket": [
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(counters,counters)",
        "(concurrency,concurrency)",
        "(_maxColourDistance,_maxColourDistance)",
        "(pipeline,pipeline)",
        "(cache,cache)",
        "(simd,simd)",
        "(libvipsVersion,libvipsVersion)",
        "(stats,stats)",
        "(metadata,metadata)",
        "(format,format)"
      ],
      "Charon": [
        "(metadata,metadata)",
        "(pipeline,pipeline)",
        "(cache,cache)",
        "(concurrency,concurrency)",
        "(counters,counters)",
        "(simd,simd)",
        "(libvipsVersion,libvipsVersion)",
        "(format,format)",
        "(_maxColourDistance,_maxColourDistance)",
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(stats,stats)",
        "(background,background)"
      ]
    },
    "@breush/ref-napi": {
      "Gasket": [
        "(_reinterpretUntilZeros,ReinterpretBufferUntilZeros)",
        "(isNull,IsNull)",
        "(readCString,ReadCString)",
        "(writeInt32,WriteInt32)",
        "(readUInt64,ReadUInt64)",
        "(readInt32,ReadInt32)",
        "(readPointer,ReadPointer)",
        "(readExternalArrayBuffer,ReadExternalArrayBuffer)",
        "(_reinterpret,ReinterpretBuffer)",
        "(_writeObject,WriteObject)",
        "(readObject,ReadObject)",
        "(address,Address)",
        "(hexAddress,HexAddress)",
        "(toString,ToString)",
        "(_writePointer,WritePointer)",
        "(get,Get)",
        "(writeUInt64,WriteUInt64)",
        "(PointerBuffer,PointerBuffer)",
        "(isAddress,IsAddress)",
        "(writeInt64,WriteInt64)",
        "(readInt64,ReadInt64)"
      ],
      "Charon": []
    },
    "broadcast-interfaces": {
      "Gasket": [
        "(listInterfaces,ListInterfaces)"
      ],
      "Charon": [
        "(name,String)",
        "(running,Boolean)",
        "(internal,Boolean)",
        "(address,String)",
        "(broadcast,String)",
        "(listInterfaces,ListInterfaces)"
      ]
    },
    "bsdiff-node": {
      "Gasket": [
        "(diff,diff)",
        "(patch,patch)",
        "(patchSync,patchSync)",
        "(diffSync,diffSync)"
      ],
      "Charon": [
        "(diff,diff)",
        "(diffSync,diffSync)",
        "(patch,patch)",
        "(patchSync,patchSync)"
      ]
    },
    "bsdiff-nodejs": {
      "Gasket": [
        "(diff,diff)",
        "(patch,patch)",
        "(patchSync,patchSync)",
        "(diffSync,diffSync)"
      ],
      "Charon": [
        "(diff,diff)",
        "(diffSync,diffSync)",
        "(patch,patch)",
        "(patchSync,patchSync)"
      ]
    },
    "bsdp": {
      "Gasket": [
        "(diff,diff)",
        "(patch,patch)"
      ],
      "Charon": [
        "(diff,diff)",
        "(patch,patch)"
      ]
    },
    "bsip": {
      "Gasket": [
        "(siphash64,siphash64)",
        "(siphash32k256,siphash32k256)",
        "(siphash,siphash)",
        "(siphash64k256,siphash64k256)",
        "(sipmod,sipmod)",
        "(siphash32,siphash32)",
        "(siphash256,siphash)"
      ],
      "Charon": [
        "(siphash,siphash)",
        "(siphash256,siphash)",
        "(siphash32,siphash32)",
        "(siphash64,siphash64)",
        "(siphash32k256,siphash32k256)",
        "(siphash64k256,siphash64k256)",
        "(sipmod,sipmod)"
      ]
    },
    "bson-ext": {
      "Gasket": [
        "(serialize,BSONSerialize)",
        "(deserialize,BSONDeserialize)",
        "(deserializeStream,BSONDeserializeStream)",
        "(serializeWithBufferAndIndex,SerializeWithBufferAndIndex)",
        "(BSON,New)",
        "(calculateObjectSize,CalculateObjectSize)"
      ],
      "Charon": [
        "(calculateObjectSize,CalculateObjectSize)",
        "(serialize,BSONSerialize)",
        "(serializeWithBufferAndIndex,SerializeWithBufferAndIndex)",
        "(deserialize,BSONDeserialize)",
        "(deserializeStream,BSONDeserializeStream)"
      ]
    },
    "bstring": {
      "Gasket": [
        "(base58_decode,base58_decode)",
        "(cashaddr_test,cashaddr_test)",
        "(base58_encode,base58_encode)",
        "(bech32_convert_bits,bech32_convert_bits)",
        "(bech32_deserialize,bech32_deserialize)",
        "(bech32_encode,bech32_encode)",
        "(cashaddr_decode,cashaddr_decode)",
        "(bech32_is,bech32_is)",
        "(cashaddr_encode,cashaddr_encode)",
        "(bech32_decode,bech32_decode)",
        "(base58_test,base58_test)",
        "(bech32_test,bech32_test)",
        "(bech32_serialize,bech32_serialize)"
      ],
      "Charon": [
        "(1,data)",
        "(base58_encode,base58_encode)",
        "(base58_decode,base58_decode)",
        "(base58_test,base58_test)",
        "(bech32_serialize,bech32_serialize)",
        "(bech32_deserialize,bech32_deserialize)",
        "(bech32_is,bech32_is)",
        "(bech32_convert_bits,bech32_convert_bits)",
        "(bech32_encode,bech32_encode)",
        "(bech32_decode,bech32_decode)",
        "(bech32_test,bech32_test)",
        "(cashaddr_encode,cashaddr_encode)",
        "(cashaddr_decode,cashaddr_decode)",
        "(cashaddr_test,cashaddr_test)"
      ]
    },
    "@buckyos/node-kcp": {
      "Gasket": [
        "(flush,Flush)",
        "(recv,Recv)",
        "(wndsize,Wndsize)",
        "(send,Send)",
        "(output,Output)",
        "(KCP,New)",
        "(setmtu,Setmtu)",
        "(waitsnd,Waitsnd)",
        "(context,GetContext)",
        "(release,Release)",
        "(update,Update)",
        "(peeksize,Peeksize)",
        "(check,Check)",
        "(input,Input)",
        "(nodelay,Nodelay)"
      ],
      "Charon": [
        "(release,Release)",
        "(context,GetContext)",
        "(recv,Recv)",
        "(send,Send)",
        "(input,Input)",
        "(output,Output)",
        "(update,Update)",
        "(check,Check)",
        "(flush,Flush)",
        "(peeksize,Peeksize)",
        "(setmtu,Setmtu)",
        "(wndsize,Wndsize)",
        "(waitsnd,Waitsnd)",
        "(nodelay,Nodelay)"
      ]
    },
    "@buckyos/segfault-handler": {
      "Gasket": [
        "(registerHandler,RegisterHandler)",
        "(causeSegfault,CauseSegfault)"
      ],
      "Charon": [
        "(registerHandler,RegisterHandler)",
        "(causeSegfault,CauseSegfault)"
      ]
    },
    "@buckyos/socketwatcher": {
      "Gasket": [
        "(stop,Stop)",
        "(set,Set)",
        "(start,Start)",
        "(SocketWatcher,New)"
      ],
      "Charon": [
        "(set,SocketWatcher)",
        "(start,SocketWatcher)",
        "(stop,SocketWatcher)"
      ]
    },
    "buffer2address": {
      "Gasket": [
        "(address2buffer,address2buffer_native)",
        "(buffer2address,buffer2address_native)"
      ],
      "Charon": []
    },
    "bufferutil": {
      "Gasket": [
        "(mask,Mask)",
        "(unmask,Unmask)"
      ],
      "Charon": []
    },
    "@bugsnag/plugin-electron-app": {
      "Gasket": [
        "(getPackageVersion,GetPackageVersion)",
        "(getBundleVersion,GetBundleVersion)"
      ],
      "Charon": []
    },
    "@bugsnag/plugin-electron-client-state-persistence": {
      "Gasket": [
        "(install,Install)",
        "(persistState,PersistState)",
        "(updateContext,UpdateContext)",
        "(updateFeatureFlags,UpdateFeatureFlags)",
        "(setApp,SetApp)",
        "(persistLastRunInfo,PersistLastRunInfo)",
        "(uninstall,Uninstall)",
        "(leaveBreadcrumb,LeaveBreadcrumb)",
        "(setLastRunInfo,SetLastRunInfo)",
        "(setDevice,SetDevice)",
        "(updateUser,UpdateUser)",
        "(setSession,SetSession)",
        "(updateMetadata,UpdateMetadata)"
      ],
      "Charon": []
    },
    "buildthing-bluetooth-hci-socket": {
      "Gasket": [
        "(BluetoothHciSocket,New)",
        "(bindRaw,BindRaw)",
        "(start,Start)",
        "(getDeviceList,GetDeviceList)",
        "(stop,Stop)",
        "(setFilter,SetFilter)",
        "(write,Write)",
        "(isDevUp,IsDevUp)",
        "(bindUser,BindUser)",
        "(bindControl,BindControl)"
      ],
      "Charon": [
        "(start,Start)",
        "(bindRaw,BindRaw)",
        "(bindUser,BindUser)",
        "(bindControl,BindControl)",
        "(isDevUp,IsDevUp)",
        "(getDeviceList,GetDeviceList)",
        "(setFilter,SetFilter)",
        "(stop,Stop)",
        "(write,Write)"
      ]
    },
    "bungle": {
      "Gasket": [
        "(stop,Stop)",
        "(start,Start)",
        "(getEntries,GetEntries)",
        "(poll,Poll)",
        "(Inotify,New)"
      ],
      "Charon": []
    },
    "bunyan-syslog": {
      "Gasket": [
        "(syslog,Log)",
        "(closelog,Close)",
        "(setlogmask,Mask)",
        "(openlog,Open)"
      ],
      "Charon": [
        "(openlog,Open)",
        "(syslog,Log)",
        "(closelog,Close)",
        "(setlogmask,Mask)"
      ]
    },
    "c4solver": {
      "Gasket": [
        "(refute,refute)",
        "(deload,deload)"
      ],
      "Charon": [
        "(refute,refute)",
        "(deload,deload)"
      ]
    },
    "caki": {
      "Gasket": [
        "(parse,parse)"
      ],
      "Charon": []
    },
    "@calculux/connector": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": []
    },
    "caliban": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": []
    },
    "@camol/file-lock": {
      "Gasket": [
        "(lock,Lock)",
        "(isLocked,IsLocked)",
        "(unlock,Unlock)",
        "(FileLock,FileLock)",
        "(setFilePath,SetFilePath)",
        "(getFilePath,GetFilePath)"
      ],
      "Charon": [
        "(setFilePath,FileLock)"
      ]
    },
    "@camol/mmap": {
      "Gasket": [
        "(mmapSync,MmapSync)"
      ],
      "Charon": [
        "(mmapSync,MmapSync)"
      ]
    },
    "canvas-mirror": {
      "Gasket": [
        "(streamPNGSync,StreamPNGSync)",
        "(PdfBackend,New)",
        "(toBuffer,ToBuffer)",
        "(drawImage,DrawImage)",
        "(rotate,Rotate)",
        "(setTransform,SetTransform)",
        "(ImageBackend,New)",
        "(lineTo,LineTo)",
        "(closePath,ClosePath)",
        "(arc,Arc)",
        "(CanvasPattern,New)",
        "(arcTo,ArcTo)",
        "(ellipse,Ellipse)",
        "(streamPDFSync,StreamPDFSync)",
        "(streamJPEGSync,StreamJPEGSync)",
        "(isPointInPath,IsPointInPath)",
        "(_deregisterAllFonts,DeregisterAllFonts)",
        "(beginPath,BeginPath)",
        "(clip,Clip)",
        "(CanvasRenderingContext2d,New)",
        "(fillText,FillText)",
        "(strokeText,StrokeText)",
        "(strokeRect,StrokeRect)",
        "(fillRect,FillRect)",
        "(Image,New)",
        "(rect,Rect)",
        "(createPattern,CreatePattern)",
        "(CanvasGradient,New)",
        "(SvgBackend,New)",
        "(createImageData,CreateImageData)",
        "(getImageData,GetImageData)",
        "(bezierCurveTo,BezierCurveTo)",
        "(restore,Restore)",
        "(createLinearGradient,CreateLinearGradient)",
        "(CanvasRenderingContext2dInit,SaveExternalModules)",
        "(_registerFont,RegisterFont)",
        "(CanvasPatternInit,SaveExternalModules)",
        "(transform,Transform)",
        "(putImageData,PutImageData)",
        "(roundRect,RoundRect)",
        "(fill,Fill)",
        "(resetTransform,ResetTransform)",
        "(ImageData,New)",
        "(scale,Scale)",
        "(clearRect,ClearRect)",
        "(quadraticCurveTo,QuadraticCurveTo)",
        "(Canvas,New)",
        "(addColorStop,AddColorStop)",
        "(addPage,AddPage)",
        "(createRadialGradient,CreateRadialGradient)",
        "(GetSource,GetSource)",
        "(moveTo,MoveTo)",
        "(translate,Translate)",
        "(getTransform,GetTransform)",
        "(measureText,MeasureText)",
        "(save,Save)",
        "(SetSource,SetSource)",
        "(stroke,Stroke)",
        "(setLineDash,SetLineDash)",
        "(getLineDash,GetLineDash)"
      ],
      "Charon": []
    },
    "canvas-terminal": {
      "Gasket": [
        "(initTermianl,initTermianl)"
      ],
      "Charon": [
        "(initTermianl,initTermianl)"
      ]
    },
    "canvas-termuc": {
      "Gasket": [
        "(streamPNGSync,StreamPNGSync)",
        "(PdfBackend,New)",
        "(toBuffer,ToBuffer)",
        "(drawImage,DrawImage)",
        "(rotate,Rotate)",
        "(setTransform,SetTransform)",
        "(ImageBackend,New)",
        "(lineTo,LineTo)",
        "(closePath,ClosePath)",
        "(arc,Arc)",
        "(CanvasPattern,New)",
        "(arcTo,ArcTo)",
        "(ellipse,Ellipse)",
        "(streamPDFSync,StreamPDFSync)",
        "(streamJPEGSync,StreamJPEGSync)",
        "(isPointInPath,IsPointInPath)",
        "(_deregisterAllFonts,DeregisterAllFonts)",
        "(beginPath,BeginPath)",
        "(clip,Clip)",
        "(CanvasRenderingContext2d,New)",
        "(fillText,FillText)",
        "(strokeText,StrokeText)",
        "(strokeRect,StrokeRect)",
        "(fillRect,FillRect)",
        "(Image,New)",
        "(rect,Rect)",
        "(createPattern,CreatePattern)",
        "(CanvasGradient,New)",
        "(SvgBackend,New)",
        "(createImageData,CreateImageData)",
        "(getImageData,GetImageData)",
        "(bezierCurveTo,BezierCurveTo)",
        "(restore,Restore)",
        "(createLinearGradient,CreateLinearGradient)",
        "(CanvasRenderingContext2dInit,SaveExternalModules)",
        "(_registerFont,RegisterFont)",
        "(CanvasPatternInit,SaveExternalModules)",
        "(transform,Transform)",
        "(putImageData,PutImageData)",
        "(roundRect,RoundRect)",
        "(fill,Fill)",
        "(resetTransform,ResetTransform)",
        "(ImageData,New)",
        "(scale,Scale)",
        "(clearRect,ClearRect)",
        "(quadraticCurveTo,QuadraticCurveTo)",
        "(Canvas,New)",
        "(addColorStop,AddColorStop)",
        "(addPage,AddPage)",
        "(createRadialGradient,CreateRadialGradient)",
        "(GetSource,GetSource)",
        "(moveTo,MoveTo)",
        "(translate,Translate)",
        "(getTransform,GetTransform)",
        "(measureText,MeasureText)",
        "(save,Save)",
        "(SetSource,SetSource)",
        "(stroke,Stroke)",
        "(setLineDash,SetLineDash)",
        "(getLineDash,GetLineDash)"
      ],
      "Charon": []
    },
    "canvas-zj-node-v1": {
      "Gasket": [
        "(streamPNGSync,StreamPNGSync)",
        "(PdfBackend,New)",
        "(toBuffer,ToBuffer)",
        "(drawImage,DrawImage)",
        "(rotate,Rotate)",
        "(setTransform,SetTransform)",
        "(ImageBackend,New)",
        "(lineTo,LineTo)",
        "(closePath,ClosePath)",
        "(arc,Arc)",
        "(CanvasPattern,New)",
        "(arcTo,ArcTo)",
        "(ellipse,Ellipse)",
        "(streamPDFSync,StreamPDFSync)",
        "(streamJPEGSync,StreamJPEGSync)",
        "(isPointInPath,IsPointInPath)",
        "(_deregisterAllFonts,DeregisterAllFonts)",
        "(beginPath,BeginPath)",
        "(clip,Clip)",
        "(CanvasRenderingContext2d,New)",
        "(fillText,FillText)",
        "(strokeText,StrokeText)",
        "(strokeRect,StrokeRect)",
        "(fillRect,FillRect)",
        "(Image,New)",
        "(rect,Rect)",
        "(createPattern,CreatePattern)",
        "(CanvasGradient,New)",
        "(SvgBackend,New)",
        "(createImageData,CreateImageData)",
        "(getImageData,GetImageData)",
        "(bezierCurveTo,BezierCurveTo)",
        "(restore,Restore)",
        "(createLinearGradient,CreateLinearGradient)",
        "(CanvasRenderingContext2dInit,SaveExternalModules)",
        "(_registerFont,RegisterFont)",
        "(CanvasPatternInit,SaveExternalModules)",
        "(transform,Transform)",
        "(putImageData,PutImageData)",
        "(roundRect,RoundRect)",
        "(fill,Fill)",
        "(resetTransform,ResetTransform)",
        "(ImageData,New)",
        "(scale,Scale)",
        "(clearRect,ClearRect)",
        "(quadraticCurveTo,QuadraticCurveTo)",
        "(Canvas,New)",
        "(addColorStop,AddColorStop)",
        "(addPage,AddPage)",
        "(createRadialGradient,CreateRadialGradient)",
        "(GetSource,GetSource)",
        "(moveTo,MoveTo)",
        "(translate,Translate)",
        "(getTransform,GetTransform)",
        "(measureText,MeasureText)",
        "(save,Save)",
        "(SetSource,SetSource)",
        "(stroke,Stroke)",
        "(setLineDash,SetLineDash)",
        "(getLineDash,GetLineDash)"
      ],
      "Charon": []
    },
    "casclib": {
      "Gasket": [
        "(cascReadSync,CascReadSync)",
        "(openCascFile,OpenCascFile)",
        "(closeCascStorage,CloseCascStorage)",
        "(findCascFiles,FindCascFiles)",
        "(readCascFileBuffer,ReadCascFileBuffer)",
        "(cascRead,CascRead)",
        "(openCascFileSync,OpenCascFileSync)",
        "(findCascFilesSync,FindCascFilesSync)",
        "(openCascStorageSync,OpenCascStorageSync)",
        "(getCascStorageInfo,GetCascStorageInfo)",
        "(openCascStorage,OpenCascStorage)",
        "(closeCascFile,CloseCascFile)"
      ],
      "Charon": []
    },
    "catboost": {
      "Gasket": [
        "(predict,CalcPrediction)",
        "(Model,TModel)",
        "(getTreeCount,GetModelTreeCount)",
        "(getDimensionsCount,GetModelDimensionsCount)",
        "(setPredictionType,SetPredictionType)",
        "(getPredictionDimensionsCount,GetPredictionDimensionsCount)",
        "(getFloatFeaturesCount,GetModelFloatFeaturesCount)",
        "(enableGPUEvaluation,EvaluateOnGPU)",
        "(loadModel,LoadFullFromFile)",
        "(getCatFeaturesCount,GetModelCatFeaturesCount)",
        "(getTextFeaturesCount,GetModelTextFeaturesCount)",
        "(getEmbeddingFeaturesCount,GetModelEmbeddingFeaturesCount)"
      ],
      "Charon": [
        "(setPredictionType,TModel)"
      ]
    },
    "catboost-model": {
      "Gasket": [
        "(predict,CalcPrediction)",
        "(Model,TModel)",
        "(getTreeCount,GetModelTreeCount)",
        "(getDimensionsCount,GetModelDimensionsCount)",
        "(getFloatFeaturesCount,GetModelFloatFeaturesCount)",
        "(loadModel,LoadFullFromFile)",
        "(getCatFeaturesCount,GetModelCatFeaturesCount)"
      ],
      "Charon": []
    },
    "@cathodique/mmap-io": {
      "Gasket": [
        "(advise,mmap_advise)",
        "(incore,mmap_incore)",
        "(sync_lib_private__,mmap_sync_lib_private_)",
        "(unmap,mmap_unmap)",
        "(map,mmap_map)",
        "(getbyte,mmap_getbyte)"
      ],
      "Charon": []
    },
    "@cathodique/usocket": {
      "Gasket": [
        "(listen,listen)",
        "(resume,resume)",
        "(UServerWrap,New)",
        "(connect,connect)",
        "(adopt,adopt)",
        "(USocketWrap,New)",
        "(pause,pause)",
        "(shutdown,shutdown)",
        "(close,close)",
        "(write,write)"
      ],
      "Charon": [
        "(pause,pause)",
        "(resume,resume)",
        "(close,close)",
        "(listen,listen)",
        "(connect,connect)",
        "(adopt,adopt)",
        "(write,write)",
        "(shutdown,shutdown)"
      ]
    },
    "cbor-extract": {
      "Gasket": [
        "(extractStrings,extractStrings)"
      ],
      "Charon": []
    },
    "@cbrewster/luna": {
      "Gasket": [
        "(luaTableGet,hed4252f0718a0bab)",
        "(luaDoString,hb45767fa273e2ea1)",
        "(luaNewTable,heb6b21ddbaef65a5)",
        "(luaNew,he9f2427a5ee353b3)",
        "(luaTableSet,hb45767fa273e2ea1)",
        "(luaTableToString,ha44d12352ea3bfca)",
        "(luaTableForEach,hb45767fa273e2ea1)",
        "(luaClose,hb45767fa273e2ea1)"
      ],
      "Charon": []
    },
    "@cdktf/node-pty-prebuilt-multiarch": {
      "Gasket": [
        "(open,PtyOpen)",
        "(fork,PtyFork)",
        "(process,PtyGetProc)",
        "(resize,PtyResize)"
      ],
      "Charon": []
    },
    "cd-node-napi-test": {
      "Gasket": [
        "(ddddd,Method2)",
        "(fangfa,Method)"
      ],
      "Charon": [
        "(fangfa,Method)",
        "(ddddd,Method2)"
      ]
    },
    "cdt-gdb-adapter": {
      "Gasket": [
        "(create_pty,create_pty)"
      ],
      "Charon": [
        "(create_pty,create_pty)"
      ]
    },
    "ced": {
      "Gasket": [
        "(detectEncoding,Method)"
      ],
      "Charon": []
    },
    "@celtium/doge-idle-time": {
      "Gasket": [
        "(getIdleTime,GetIdleTime)"
      ],
      "Charon": []
    },
    "@cfg.plat/lodepng": {
      "Gasket": [
        "(decode,decode)",
        "(encode,encode)"
      ],
      "Charon": [
        "(data,data)",
        "(decode,decode)",
        "(encode,encode)"
      ]
    },
    "c-float-divide": {
      "Gasket": [
        "(divide,divide)"
      ],
      "Charon": [
        "(divide,divide)"
      ]
    },
    "chacent": {
      "Gasket": [
        "(chacent/build/Debug/addon,New)",
        "(size,Size)",
        "(remove,Remove)",
        "(truncate,Truncate)",
        "(map,Map)"
      ],
      "Charon": []
    },
    "check-caps": {
      "Gasket": [
        "(status,checkCapsLock)"
      ],
      "Charon": [
        "(status,checkCapsLock)"
      ]
    },
    "checkpromise": {
      "Gasket": [
        "(isPromise,isPromise)",
        "(checkPromiseStatus,checkPromiseStatus)"
      ],
      "Charon": []
    },
    "child_process_tiny": {
      "Gasket": [
        "(close_stdin,CloseStdin)",
        "(spawn,Spawn)",
        "(get_id,GetID)",
        "(try_get_exit_status,TryGetExitStatus)",
        "(kill,Kill)",
        "(write,Write)",
        "(get_exit_status,GetExitStatus)",
        "(Process,Process)"
      ],
      "Charon": [
        "(spawn,Spawn)"
      ]
    },
    "child_pty-fixedv12": {
      "Gasket": [
        "(open,Open)",
        "(resize,Resize)"
      ],
      "Charon": [
        "(open,Open)",
        "(resize,Resize)"
      ]
    },
    "chimera-crypto": {
      "Gasket": [
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(derivePublicKey,derivePublicKey)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(cnFastHash,cn_fast_hash)",
        "(checkKey,checkKey)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(generateRingSignatures,generateRingSignatures)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(generateKeys,generateKeys)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(scReduce32,scReduce32)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(generateKeyImage,generateKeyImage)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)",
        "(deriveSecretKey,deriveSecretKey)",
        "(scalarmultKey,scalarmultKey)",
        "(checkSignature,checkSignature)",
        "(generateSignature,generateSignature)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(tree_hash,tree_hash)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(tree_branch,tree_branch)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(checkRingSignature,checkRingSignature)",
        "(chukwa_slow_hash,chukwa_slow_hash)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(underivePublicKey,underivePublicKey)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(hashToScalar,hashToScalar)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(tree_depth,tree_depth)"
      ],
      "Charon": [
        "(checkKey,checkKey)",
        "(checkRingSignature,checkRingSignature)",
        "(checkSignature,checkSignature)",
        "(derivePublicKey,derivePublicKey)",
        "(deriveSecretKey,deriveSecretKey)",
        "(generateKeys,generateKeys)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(generateKeyImage,generateKeyImage)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(generateRingSignatures,generateRingSignatures)",
        "(generateSignature,generateSignature)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(hashToScalar,hashToScalar)",
        "(scalarmultKey,scalarmultKey)",
        "(scReduce32,scReduce32)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(tree_depth,tree_depth)",
        "(tree_hash,tree_hash)",
        "(tree_branch,tree_branch)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(underivePublicKey,underivePublicKey)",
        "(cnFastHash,cn_fast_hash)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(chukwa_slow_hash,chukwa_slow_hash)"
      ]
    },
    "ckmeans-native": {
      "Gasket": [
        "(ckmeans,MyFunction)"
      ],
      "Charon": []
    },
    "c-kzg": {
      "Gasket": [
        "(verifyKzgProof,VerifyKzgProof)",
        "(computeBlobKzgProof,ComputeBlobKzgProof)",
        "(verifyBlobKzgProof,VerifyBlobKzgProof)",
        "(computeCellsAndKzgProofs,ComputeCellsAndKzgProofs)",
        "(computeCells,ComputeCells)",
        "(recoverCellsAndKzgProofs,RecoverCellsAndKzgProofs)",
        "(verifyCellKzgProofBatch,VerifyCellKzgProofBatch)",
        "(computeKzgProof,ComputeKzgProof)",
        "(verifyBlobKzgProofBatch,VerifyBlobKzgProofBatch)",
        "(blobToKzgCommitment,BlobToKzgCommitment)",
        "(loadTrustedSetup,LoadTrustedSetup)"
      ],
      "Charon": []
    },
    "classic-level": {
      "Gasket": [
        "(db_get_many,db_get_many)",
        "(db_init,db_init)",
        "(db_set_shared_buffer,db_set_shared_buffer)",
        "(db_compact_range,db_compact_range)",
        "(db_has_many,db_has_many)",
        "(db_close,db_close)",
        "(iterator_abort,iterator_abort)",
        "(batch_put,batch_put)",
        "(batch_clear,batch_clear)",
        "(snapshot_close,snapshot_close)",
        "(iterator_seek,iterator_seek)",
        "(iterator_init,iterator_init)",
        "(db_get,db_get)",
        "(snapshot_init,snapshot_init)",
        "(db_put,db_put)",
        "(batch_init,batch_init)",
        "(db_get_sync,db_get_sync)",
        "(batch_del,batch_del)",
        "(db_has,db_has)",
        "(db_open,db_open)",
        "(destroy_db,destroy_db)",
        "(repair_db,repair_db)",
        "(db_clear,db_clear)",
        "(iterator_close,iterator_close)",
        "(db_get_property,db_get_property)",
        "(iterator_nextv,iterator_nextv)",
        "(batch_write,batch_write)",
        "(batch_do,batch_do)",
        "(db_approximate_size,db_approximate_size)",
        "(db_del,db_del)"
      ],
      "Charon": []
    },
    "cld": {
      "Gasket": [
        "(detect,Detect)",
        "(detectAsync,DetectAsync)"
      ],
      "Charon": []
    },
    "clear-env": {
      "Gasket": [
        "(clearenv,ClearEnv)"
      ],
      "Charon": []
    },
    "clipboard-data": {
      "Gasket": [
        "(getText,GetText)",
        "(setText,SetText)",
        "(getImage,GetImage)"
      ],
      "Charon": []
    },
    "@cloudpss/zstd": {
      "Gasket": [
        "(Decompressor,Decompressor)",
        "(decompress,decompress)",
        "(Compressor,Compressor)",
        "(compress,compress)",
        "(decompress_async,decompress_async)",
        "(data,Data)",
        "(compress_async,compress_async)",
        "(end,End)"
      ],
      "Charon": []
    },
    "cm256": {
      "Gasket": [
        "(CalculateRecoveryBlocks,CalculateRecoveryBlocksWrapped)",
        "(RecoverData,RecoverDataWrapped)"
      ],
      "Charon": []
    },
    "cmake2json": {
      "Gasket": [
        "(getJsonData,getJsonData)",
        "(saveCMakeLists,saveCMakeLists)",
        "(checkFuncValid,checkFuncValid)"
      ],
      "Charon": [
        "(getJsonData,getJsonData)",
        "(saveCMakeLists,saveCMakeLists)",
        "(checkFuncValid,checkFuncValid)"
      ]
    },
    "cmark-gfm": {
      "Gasket": [
        "(Parser,StreamingParser)",
        "(destroy,Destroy)",
        "(isFinished,IsFinished)",
        "(write,Write)",
        "(renderHtmlSync,render_html_sync)",
        "(finalize,FinalizeMethod)"
      ],
      "Charon": [
        "(renderHtmlSync,render_html_sync)",
        "(cmark_version,String)"
      ]
    },
    "cmsn-bluetooth-hci-socket": {
      "Gasket": [
        "(stop,Stop)",
        "(BluetoothHciSocket,New)",
        "(bindControl,BindControl)",
        "(bindRaw,BindRaw)",
        "(getDeviceList,GetDeviceList)",
        "(setFilter,SetFilter)",
        "(start,Start)",
        "(bindUser,BindUser)",
        "(isDevUp,IsDevUp)",
        "(write,Write)"
      ],
      "Charon": [
        "(start,Start)",
        "(bindRaw,BindRaw)",
        "(bindUser,BindUser)",
        "(bindControl,BindControl)",
        "(isDevUp,IsDevUp)",
        "(getDeviceList,GetDeviceList)",
        "(setFilter,SetFilter)",
        "(stop,Stop)",
        "(write,Write)"
      ]
    },
    "@codeporter/robotjs": {
      "Gasket": [
        "(getColor,getColor)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(dragMouse,dragMouse)",
        "(mouseToggle,mouseToggle)",
        "(typeString,typeString)",
        "(getPixelColor,getPixelColor)",
        "(unicodeTap,unicodeTap)",
        "(setXDisplayName,setXDisplayName)",
        "(mouseClick,mouseClick)",
        "(typeStringDelayed,typeStringDelayed)",
        "(scrollMouse,scrollMouse)",
        "(getXDisplayName,getXDisplayName)",
        "(keyToggle,keyToggle)",
        "(keyTap,keyTap)",
        "(getMousePos,getMousePos)",
        "(captureScreen,captureScreen)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(setMouseDelay,setMouseDelay)",
        "(getScreenSize,getScreenSize)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(unicodeTap,unicodeTap)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getColor,getColor)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "@codspeed/core": {
      "Gasket": [
        "(stop,Stop)",
        "(LinuxPerf,LinuxPerf)",
        "(isInstrumented,IsInstrumented)",
        "(start,Start)",
        "(stopInstrumentation,StopInstrumentation)",
        "(startInstrumentation,StartInstrumentation)"
      ],
      "Charon": []
    },
    "computron": {
      "Gasket": [
        "(loadStylesheet,LoadStylesheet)",
        "(Computron,Computron)",
        "(apply,Apply)"
      ],
      "Charon": [
        "(nullptr,BlankHandler)"
      ]
    },
    "@confluentinc/kafka-javascript": {
      "Gasket": [
        "(poll,NodePoll)",
        "(listConsumerGroupOffsets,NodeListConsumerGroupOffsets)",
        "(committed,NodeCommitted)",
        "(assign,NodeAssign)",
        "(produce,NodeProduce)",
        "(unassign,NodeUnassign)",
        "(configureCallbacks,NodeConfigureCallbacks)",
        "(abortTransaction,NodeAbortTransaction)",
        "(flush,NodeFlush)",
        "(commit,NodeCommit)",
        "(queryWatermarkOffsets,NodeQueryWatermarkOffsets)",
        "(beginTransaction,NodeBeginTransaction)",
        "(resume,NodeResume)",
        "(createPartitions,NodeCreatePartitions)",
        "(rebalanceProtocol,NodeRebalanceProtocol)",
        "(Producer,New)",
        "(setOAuthBearerToken,NodeSetOAuthBearerToken)",
        "(offsetsStore,NodeOffsetsStore)",
        "(deleteRecords,NodeDeleteRecords)",
        "(name,NodeGetName)",
        "(disconnect,NodeDisconnect)",
        "(KafkaConsumer,New)",
        "(listOffsets,NodeListOffsets)",
        "(Topic,New)",
        "(deleteTopic,NodeDeleteTopic)",
        "(offsetsStoreSingle,NodeOffsetsStoreSingle)",
        "(subscription,NodeSubscription)",
        "(unsubscribe,NodeUnsubscribe)",
        "(listGroups,NodeListGroups)",
        "(pause,NodePause)",
        "(assignments,NodeAssignments)",
        "(initTransactions,NodeInitTransactions)",
        "(seek,NodeSeek)",
        "(sendOffsetsToTransaction,NodeSendOffsetsToTransaction)",
        "(incrementalUnassign,NodeIncrementalUnassign)",
        "(deleteGroups,NodeDeleteGroups)",
        "(subscribe,NodeSubscribe)",
        "(commitCb,NodeCommitCb)",
        "(consumeLoop,NodeConsumeLoop)",
        "(createTopic,NodeCreateTopic)",
        "(offsetsForTimes,NodeOffsetsForTimes)",
        "(describeTopics,NodeDescribeTopics)",
        "(err2str,NodeRdKafkaErr2Str)",
        "(setSaslCredentials,NodeSetSaslCredentials)",
        "(AdminClient,New)",
        "(assignmentLost,NodeAssignmentLost)",
        "(setPartitioner,NodeSetPartitioner)",
        "(commitTransaction,NodeCommitTransaction)",
        "(describeGroups,NodeDescribeGroups)",
        "(getWatermarkOffsets,NodeGetWatermarkOffsets)",
        "(getMetadata,NodeGetMetadata)",
        "(commitSync,NodeCommitSync)",
        "(setPollInBackground,NodeSetPollInBackground)",
        "(setOAuthBearerTokenFailure,NodeSetOAuthBearerTokenFailure)",
        "(position,NodePosition)",
        "(name,NodeName)",
        "(incrementalAssign,NodeIncrementalAssign)",
        "(connect,NodeConnect)",
        "(features,NodeRdKafkaBuildInFeatures)",
        "(consume,NodeConsume)"
      ],
      "Charon": []
    },
    "confusablematcher-js-interop": {
      "Gasket": [
        "(ConfusableMatcher,ConfusableMatcherNapiInterop)",
        "(computeStringPosPointers,computeStringPosPointers)",
        "(indexOfAsync,indexOfAsync)",
        "(getKeyMappings,getKeyMappings)",
        "(indexOfDebugFailuresAsync,indexOfDebugFailuresAsync)",
        "(freeStringPosPointers,freeStringPosPointers)",
        "(indexOf,indexOf)",
        "(indexOfDebugFailures,indexOfDebugFailures)"
      ],
      "Charon": []
    },
    "connect4-bot": {
      "Gasket": [
        "(greetHello,greetHello)"
      ],
      "Charon": [
        "(greetHello,greetHello)"
      ]
    },
    "@connectedyard/phin-ecdh": {
      "Gasket": [
        "(deriveSecret,DeriveSecret)",
        "(decrypt,Decrypt)",
        "(createKeyPair,CreateKeyPair)",
        "(encrypt,Encrypt)"
      ],
      "Charon": []
    },
    "@conr2d/bcrypto": {
      "Gasket": [
        "(dsa_verify_der,bcrypto_dsa_verify_der)",
        "(secp256k1_xonly_seckey_export,bcrypto_secp256k1_xonly_seckey_export)",
        "(bech32_is,bcrypto_bech32_is)",
        "(base16_encode,bcrypto_base16_encode)",
        "(bcrypt_hash192,bcrypto_bcrypt_hash192)",
        "(bcrypt_pbkdf_async,bcrypto_bcrypt_pbkdf_async)",
        "(blake2b_root,bcrypto_blake2b_root)",
        "(keccak_create,bcrypto_keccak_create)",
        "(hkdf_expand,bcrypto_hkdf_expand)",
        "(blake2s_create,bcrypto_blake2s_create)",
        "(eddsa_pubkey_tweak_mul,bcrypto_eddsa_pubkey_tweak_mul)",
        "(secp256k1_recover,bcrypto_secp256k1_recover)",
        "(siphash256_sum,bcrypto_siphash256_sum)",
        "(schnorr_pubkey_to_uniform,bcrypto_schnorr_pubkey_to_uniform)",
        "(bech32_decode,bcrypto_bech32_decode)",
        "(cash32_convert_bits,bcrypto_cash32_convert_bits)",
        "(schnorr_legacy_verify,bcrypto_schnorr_legacy_verify)",
        "(secp256k1_context_randomize,bcrypto_secp256k1_context_randomize)",
        "(dsa_sign_der,bcrypto_dsa_sign_der)",
        "(keccak_root,bcrypto_keccak_root)",
        "(base16_decode,bcrypto_base16_decode)",
        "(ecdsa_recover,bcrypto_ecdsa_recover)",
        "(base58_test,bcrypto_base58_test)",
        "(blake2s_init,bcrypto_blake2s_init)",
        "(bech32_convert_bits,bcrypto_bech32_convert_bits)",
        "(hash_drbg_create,bcrypto_hash_drbg_create)",
        "(rsa_sign_pss,bcrypto_rsa_sign_pss)",
        "(secp256k1_pubkey_negate,bcrypto_secp256k1_pubkey_negate)",
        "(rsa_veil,bcrypto_rsa_veil)",
        "(eddsa_sign_tweak_mul,bcrypto_eddsa_sign_tweak_mul)",
        "(schnorr_privkey_invert,bcrypto_schnorr_privkey_invert)",
        "(bcrypt_generate_with_salt64,bcrypto_bcrypt_generate_with_salt64)",
        "(cash32_test,bcrypto_cash32_test)",
        "(base64url_encode,bcrypto_base64url_encode)",
        "(base32_decode,bcrypto_base32_decode)",
        "(siphash_sum,bcrypto_siphash_sum)",
        "(base32_encode,bcrypto_base32_encode)",
        "(cipher_create,bcrypto_cipher_create)",
        "(base32hex_decode,bcrypto_base32hex_decode)",
        "(blake2s_digest,bcrypto_blake2s_digest)",
        "(dsa_pubkey_import,bcrypto_dsa_pubkey_import)",
        "(dsa_sign,bcrypto_dsa_sign)",
        "(secp256k1_xonly_from_uniform,bcrypto_secp256k1_xonly_from_uniform)",
        "(hash_digest,bcrypto_hash_digest)",
        "(secp256k1_seckey_invert,bcrypto_secp256k1_seckey_invert)",
        "(keccak_init,bcrypto_keccak_init)",
        "(base16_test,bcrypto_base16_test)",
        "(schnorr_pubkey_tweak_check,bcrypto_schnorr_pubkey_tweak_check)",
        "(hmac_create,bcrypto_hmac_create)",
        "(ecdsa_recover_der,bcrypto_ecdsa_recover_der)",
        "(ecdsa_pubkey_tweak_add,bcrypto_ecdsa_pubkey_tweak_add)",
        "(base64url_test,bcrypto_base64url_test)",
        "(siphash128_sum,bcrypto_siphash128_sum)",
        "(schnorr_derive,bcrypto_schnorr_derive)",
        "(schnorr_pubkey_import,bcrypto_schnorr_pubkey_import)",
        "(ecdsa_signature_export,bcrypto_ecdsa_signature_export)",
        "(ecdsa_pubkey_to_hash,bcrypto_ecdsa_pubkey_to_hash)",
        "(eddsa_scalar_negate,bcrypto_eddsa_scalar_negate)",
        "(chacha20_destroy,bcrypto_chacha20_destroy)",
        "(pgpdf_derive_salted,bcrypto_pgpdf_derive_salted)",
        "(rsa_encrypt_oaep,bcrypto_rsa_encrypt_oaep)",
        "(pbkdf2_derive_async,bcrypto_pbkdf2_derive_async)",
        "(aead_destroy,bcrypto_aead_destroy)",
        "(ecdsa_privkey_import,bcrypto_ecdsa_privkey_import)",
        "(cipher_encrypt,bcrypto_cipher_encrypt)",
        "(ecdh_pubkey_is_small,bcrypto_ecdh_pubkey_is_small)",
        "(eddsa_scalar_tweak_mul,bcrypto_eddsa_scalar_tweak_mul)",
        "(hmac_update,bcrypto_hmac_update)",
        "(arc4_create,bcrypto_arc4_create)",
        "(aead_encrypt,bcrypto_aead_encrypt)",
        "(dsa_params_generate_async,bcrypto_dsa_params_generate_async)",
        "(base16le_encode,bcrypto_base16le_encode)",
        "(hmac_drbg_create,bcrypto_hmac_drbg_create)",
        "(ecdh_pubkey_to_hash,bcrypto_ecdh_pubkey_to_hash)",
        "(poly1305_init,bcrypto_poly1305_init)",
        "(poly1305_verify,bcrypto_poly1305_verify)",
        "(aead_static_decrypt,bcrypto_aead_static_decrypt)",
        "(rsa_privkey_verify,bcrypto_rsa_privkey_verify)",
        "(secp256k1_xonly_tweak_check,bcrypto_secp256k1_xonly_tweak_check)",
        "(bcrypt_generate,bcrypto_bcrypt_generate)",
        "(edwards_curve_field_size,bcrypto_edwards_curve_field_size)",
        "(ecdsa_pubkey_from_hash,bcrypto_ecdsa_pubkey_from_hash)",
        "(eddsa_pubkey_has_torsion,bcrypto_eddsa_pubkey_has_torsion)",
        "(secp256k1_signature_normalize_der,bcrypto_secp256k1_signature_normalize_der)",
        "(blake2b_init,bcrypto_blake2b_init)",
        "(hash_create,bcrypto_hash_create)",
        "(edwards_curve_randomize,bcrypto_edwards_curve_randomize)",
        "(cash32_is,bcrypto_cash32_is)",
        "(ecdsa_signature_import,bcrypto_ecdsa_signature_import)",
        "(cipher_set_tag,bcrypto_cipher_set_tag)",
        "(eddsa_privkey_generate,bcrypto_eddsa_privkey_generate)",
        "(pbkdf2_derive,bcrypto_pbkdf2_derive)",
        "(secretbox_seal,bcrypto_secretbox_seal)",
        "(bcrypt_derive,bcrypto_bcrypt_derive)",
        "(aead_verify,bcrypto_aead_verify)",
        "(secp256k1_pubkey_convert,bcrypto_secp256k1_pubkey_convert)",
        "(aead_decrypt,bcrypto_aead_decrypt)",
        "(ecdh_pubkey_create,bcrypto_ecdh_pubkey_create)",
        "(secp256k1_verify_der,bcrypto_secp256k1_verify_der)",
        "(dsa_verify,bcrypto_dsa_verify)",
        "(ecdsa_privkey_export,bcrypto_ecdsa_privkey_export)",
        "(secp256k1_signature_export,bcrypto_secp256k1_signature_export)",
        "(cipher_set_ccm,bcrypto_cipher_set_ccm)",
        "(uniform,bcrypto_uniform)",
        "(secp256k1_pubkey_verify,bcrypto_secp256k1_pubkey_verify)",
        "(eddsa_sign_tweak_add,bcrypto_eddsa_sign_tweak_add)",
        "(eddsa_scalar_generate,bcrypto_eddsa_scalar_generate)",
        "(dsa_pubkey_export,bcrypto_dsa_pubkey_export)",
        "(ecdh_pubkey_from_uniform,bcrypto_ecdh_pubkey_from_uniform)",
        "(rsa_encrypt,bcrypto_rsa_encrypt)",
        "(ctr_drbg_init,bcrypto_ctr_drbg_init)",
        "(cipher_final,bcrypto_cipher_final)",
        "(eddsa_pubkey_convert,bcrypto_eddsa_pubkey_convert)",
        "(ecdsa_is_low_der,bcrypto_ecdsa_is_low_der)",
        "(base58_decode,bcrypto_base58_decode)",
        "(rsa_sign,bcrypto_rsa_sign)",
        "(schnorr_privkey_import,bcrypto_schnorr_privkey_import)",
        "(bech32_serialize,bcrypto_bech32_serialize)",
        "(chacha20_crypt,bcrypto_chacha20_crypt)",
        "(secp256k1_schnorr_legacy_verify,bcrypto_secp256k1_schnorr_legacy_verify)",
        "(eddsa_verify_batch,bcrypto_eddsa_verify_batch)",
        "(cipher_update,bcrypto_cipher_update)",
        "(secretbox_derive,bcrypto_secretbox_derive)",
        "(base64_encode,bcrypto_base64_encode)",
        "(ecdsa_sign,bcrypto_ecdsa_sign)",
        "(ctr_drbg_create,bcrypto_ctr_drbg_create)",
        "(schnorr_pubkey_tweak_mul,bcrypto_schnorr_pubkey_tweak_mul)",
        "(eddsa_privkey_verify,bcrypto_eddsa_privkey_verify)",
        "(base58_encode,bcrypto_base58_encode)",
        "(secp256k1_sign_recoverable,bcrypto_secp256k1_sign_recoverable)",
        "(dsa_params_qbits,bcrypto_dsa_params_qbits)",
        "(chacha20_derive,bcrypto_chacha20_derive)",
        "(ecdh_privkey_verify,bcrypto_ecdh_privkey_verify)",
        "(secp256k1_seckey_negate,bcrypto_secp256k1_seckey_negate)",
        "(base64_test,bcrypto_base64_test)",
        "(eddsa_pubkey_tweak_add,bcrypto_eddsa_pubkey_tweak_add)",
        "(eddsa_pubkey_negate,bcrypto_eddsa_pubkey_negate)",
        "(secp256k1_recover_der,bcrypto_secp256k1_recover_der)",
        "(eddsa_pubkey_verify,bcrypto_eddsa_pubkey_verify)",
        "(secp256k1_xonly_tweak_mul,bcrypto_secp256k1_xonly_tweak_mul)",
        "(secp256k1_pubkey_to_uniform,bcrypto_secp256k1_pubkey_to_uniform)",
        "(ecdsa_privkey_tweak_add,bcrypto_ecdsa_privkey_tweak_add)",
        "(rsa_pubkey_verify,bcrypto_rsa_pubkey_verify)",
        "(secp256k1_schnorr_legacy_verify_batch,bcrypto_secp256k1_schnorr_legacy_verify_batch)",
        "(eddsa_pubkey_combine,bcrypto_eddsa_pubkey_combine)",
        "(ecdsa_pubkey_create,bcrypto_ecdsa_pubkey_create)",
        "(secp256k1_pubkey_export,bcrypto_secp256k1_pubkey_export)",
        "(ecdsa_is_low_s,bcrypto_ecdsa_is_low_s)",
        "(secp256k1_sign,bcrypto_secp256k1_sign)",
        "(salsa20_crypt,bcrypto_salsa20_crypt)",
        "(secp256k1_pubkey_combine,bcrypto_secp256k1_pubkey_combine)",
        "(secp256k1_schnorr_verify_batch,bcrypto_secp256k1_schnorr_verify_batch)",
        "(ecdsa_pubkey_combine,bcrypto_ecdsa_pubkey_combine)",
        "(secp256k1_derive,bcrypto_secp256k1_derive)",
        "(secp256k1_verify,bcrypto_secp256k1_verify)",
        "(rsa_privkey_bits,bcrypto_rsa_privkey_bits)",
        "(eddsa_scalar_clamp,bcrypto_eddsa_scalar_clamp)",
        "(dsa_signature_export,bcrypto_dsa_signature_export)",
        "(secp256k1_pubkey_create,bcrypto_secp256k1_pubkey_create)",
        "(aead_static_encrypt,bcrypto_aead_static_encrypt)",
        "(blake2b_update,bcrypto_blake2b_update)",
        "(rsa_verify_pss,bcrypto_rsa_verify_pss)",
        "(wei_curve_create,bcrypto_wei_curve_create)",
        "(hmac_drbg_init,bcrypto_hmac_drbg_init)",
        "(cipher_crypt,bcrypto_cipher_crypt)",
        "(eddsa_scalar_verify,bcrypto_eddsa_scalar_verify)",
        "(dsa_privkey_import,bcrypto_dsa_privkey_import)",
        "(secp256k1_xonly_tweak_add,bcrypto_secp256k1_xonly_tweak_add)",
        "(schnorr_privkey_tweak_mul,bcrypto_schnorr_privkey_tweak_mul)",
        "(blake2s_final,bcrypto_blake2s_final)",
        "(poly1305_final,bcrypto_poly1305_final)",
        "(hash_drbg_init,bcrypto_hash_drbg_init)",
        "(bcrypt_pbkdf,bcrypto_bcrypt_pbkdf)",
        "(secp256k1_xonly_from_hash,bcrypto_secp256k1_xonly_from_hash)",
        "(secp256k1_schnorr_verify,bcrypto_secp256k1_schnorr_verify)",
        "(secp256k1_xonly_seckey_tweak_add,bcrypto_secp256k1_xonly_seckey_tweak_add)",
        "(eddsa_derive_with_scalar,bcrypto_eddsa_derive_with_scalar)",
        "(dsa_privkey_bits,bcrypto_dsa_privkey_bits)",
        "(eb2k_derive,bcrypto_eb2k_derive)",
        "(dsa_privkey_qbits,bcrypto_dsa_privkey_qbits)",
        "(eddsa_scalar_is_zero,bcrypto_eddsa_scalar_is_zero)",
        "(secp256k1_xonly_verify,bcrypto_secp256k1_xonly_verify)",
        "(secp256k1_is_low_s,bcrypto_secp256k1_is_low_s)",
        "(aead_create,bcrypto_aead_create)",
        "(schnorr_verify,bcrypto_schnorr_verify)",
        "(ecdsa_pubkey_import,bcrypto_ecdsa_pubkey_import)",
        "(ecdsa_privkey_tweak_mul,bcrypto_ecdsa_privkey_tweak_mul)",
        "(ecdsa_sign_recoverable_der,bcrypto_ecdsa_sign_recoverable_der)",
        "(ecdsa_pubkey_from_uniform,bcrypto_ecdsa_pubkey_from_uniform)",
        "(blake2s_root,bcrypto_blake2s_root)",
        "(aead_auth,bcrypto_aead_auth)",
        "(arc4_crypt,bcrypto_arc4_crypt)",
        "(cipher_init,bcrypto_cipher_init)",
        "(eddsa_scalar_tweak_add,bcrypto_eddsa_scalar_tweak_add)",
        "(eddsa_derive,bcrypto_eddsa_derive)",
        "(schnorr_pubkey_combine,bcrypto_schnorr_pubkey_combine)",
        "(secp256k1_xonly_combine,bcrypto_secp256k1_xonly_combine)",
        "(dsa_derive,bcrypto_dsa_derive)",
        "(ecdsa_privkey_negate,bcrypto_ecdsa_privkey_negate)",
        "(ecdh_derive,bcrypto_ecdh_derive)",
        "(cash32_serialize,bcrypto_cash32_serialize)",
        "(eddsa_pubkey_is_infinity,bcrypto_eddsa_pubkey_is_infinity)",
        "(wei_curve_randomize,bcrypto_wei_curve_randomize)",
        "(bech32_deserialize,bcrypto_bech32_deserialize)",
        "(secp256k1_seckey_export,bcrypto_secp256k1_seckey_export)",
        "(cipher_get_tag,bcrypto_cipher_get_tag)",
        "(ecdsa_signature_normalize_der,bcrypto_ecdsa_signature_normalize_der)",
        "(keccak_update,bcrypto_keccak_update)",
        "(base64_decode,bcrypto_base64_decode)",
        "(getrandom,bcrypto_getrandom)",
        "(secp256k1_pubkey_from_uniform,bcrypto_secp256k1_pubkey_from_uniform)",
        "(hmac_final,bcrypto_hmac_final)",
        "(rsa_privkey_generate_async,bcrypto_rsa_privkey_generate_async)",
        "(aead_init,bcrypto_aead_init)",
        "(rsa_privkey_export,bcrypto_rsa_privkey_export)",
        "(secp256k1_context_create,bcrypto_secp256k1_context_create)",
        "(dsa_params_generate,bcrypto_dsa_params_generate)",
        "(blake2b_create,bcrypto_blake2b_create)",
        "(blake2s_multi,bcrypto_blake2s_multi)",
        "(eddsa_pubkey_is_small,bcrypto_eddsa_pubkey_is_small)",
        "(bcrypt_verify,bcrypto_bcrypt_verify)",
        "(schnorr_sign,bcrypto_schnorr_sign)",
        "(secp256k1_seckey_import,bcrypto_secp256k1_seckey_import)",
        "(salsa20_derive,bcrypto_salsa20_derive)",
        "(eddsa_pubkey_to_hash,bcrypto_eddsa_pubkey_to_hash)",
        "(cipher_destroy,bcrypto_cipher_destroy)",
        "(schnorr_pubkey_tweak_add,bcrypto_schnorr_pubkey_tweak_add)",
        "(eddsa_scalar_reduce,bcrypto_eddsa_scalar_reduce)",
        "(keccak_digest,bcrypto_keccak_digest)",
        "(ctr_drbg_generate,bcrypto_ctr_drbg_generate)",
        "(schnorr_legacy_sign,bcrypto_schnorr_legacy_sign)",
        "(ecdsa_privkey_generate,bcrypto_ecdsa_privkey_generate)",
        "(ecdsa_pubkey_to_uniform,bcrypto_ecdsa_pubkey_to_uniform)",
        "(aead_aad,bcrypto_aead_aad)",
        "(ecdsa_signature_normalize,bcrypto_ecdsa_signature_normalize)",
        "(scrypt_derive,bcrypto_scrypt_derive)",
        "(rsa_pubkey_export,bcrypto_rsa_pubkey_export)",
        "(secp256k1_xonly_create,bcrypto_secp256k1_xonly_create)",
        "(schnorr_privkey_verify,bcrypto_schnorr_privkey_verify)",
        "(dsa_pubkey_create,bcrypto_dsa_pubkey_create)",
        "(eddsa_pubkey_create,bcrypto_eddsa_pubkey_create)",
        "(murmur3_sum,bcrypto_murmur3_sum)",
        "(eddsa_pubkey_from_uniform,bcrypto_eddsa_pubkey_from_uniform)",
        "(secp256k1_pubkey_tweak_mul,bcrypto_secp256k1_pubkey_tweak_mul)",
        "(dsa_params_bits,bcrypto_dsa_params_bits)",
        "(rsa_pubkey_import,bcrypto_rsa_pubkey_import)",
        "(blake2b_final,bcrypto_blake2b_final)",
        "(dsa_params_verify,bcrypto_dsa_params_verify)",
        "(ecdsa_pubkey_tweak_mul,bcrypto_ecdsa_pubkey_tweak_mul)",
        "(rsa_decrypt,bcrypto_rsa_decrypt)",
        "(schnorr_pubkey_from_uniform,bcrypto_schnorr_pubkey_from_uniform)",
        "(schnorr_pubkey_from_hash,bcrypto_schnorr_pubkey_from_hash)",
        "(dsa_privkey_export,bcrypto_dsa_privkey_export)",
        "(dsa_signature_import,bcrypto_dsa_signature_import)",
        "(schnorr_privkey_export,bcrypto_schnorr_privkey_export)",
        "(secp256k1_xonly_derive,bcrypto_secp256k1_xonly_derive)",
        "(eddsa_sign,bcrypto_eddsa_sign)",
        "(ecdsa_verify_der,bcrypto_ecdsa_verify_der)",
        "(cipher_decrypt,bcrypto_cipher_decrypt)",
        "(eddsa_sign_with_scalar,bcrypto_eddsa_sign_with_scalar)",
        "(rsa_pubkey_create,bcrypto_rsa_pubkey_create)",
        "(rsa_privkey_import,bcrypto_rsa_privkey_import)",
        "(bech32_test,bcrypto_bech32_test)",
        "(cipher_set_aad,bcrypto_cipher_set_aad)",
        "(secp256k1_pubkey_import,bcrypto_secp256k1_pubkey_import)",
        "(salsa20_init,bcrypto_salsa20_init)",
        "(aead_final,bcrypto_aead_final)",
        "(secp256k1_signature_import,bcrypto_secp256k1_signature_import)",
        "(rsa_unveil,bcrypto_rsa_unveil)",
        "(ecdsa_sign_recoverable,bcrypto_ecdsa_sign_recoverable)",
        "(getentropy,bcrypto_getentropy)",
        "(cash32_encode,bcrypto_cash32_encode)",
        "(hmac_digest,bcrypto_hmac_digest)",
        "(base32hex_test,bcrypto_base32hex_test)",
        "(hash_drbg_reseed,bcrypto_hash_drbg_reseed)",
        "(ecdh_pubkey_import,bcrypto_ecdh_pubkey_import)",
        "(hkdf_extract,bcrypto_hkdf_extract)",
        "(eddsa_pubkey_to_uniform,bcrypto_eddsa_pubkey_to_uniform)",
        "(ecdh_privkey_import,bcrypto_ecdh_privkey_import)",
        "(secp256k1_xonly_import,bcrypto_secp256k1_xonly_import)",
        "(eddsa_privkey_import,bcrypto_eddsa_privkey_import)",
        "(ecdh_pubkey_to_uniform,bcrypto_ecdh_pubkey_to_uniform)",
        "(schnorr_privkey_generate,bcrypto_schnorr_privkey_generate)",
        "(schnorr_pubkey_create,bcrypto_schnorr_pubkey_create)",
        "(ecdsa_derive,bcrypto_ecdsa_derive)",
        "(wei_curve_field_size,bcrypto_wei_curve_field_size)",
        "(hash_init,bcrypto_hash_init)",
        "(mont_curve_field_bits,bcrypto_mont_curve_field_bits)",
        "(dsa_params_import,bcrypto_dsa_params_import)",
        "(secp256k1_xonly_export,bcrypto_secp256k1_xonly_export)",
        "(dsa_params_export,bcrypto_dsa_params_export)",
        "(hash_root,bcrypto_hash_root)",
        "(scrypt_derive_async,bcrypto_scrypt_derive_async)",
        "(base16le_test,bcrypto_base16le_test)",
        "(secretbox_open,bcrypto_secretbox_open)",
        "(hmac_drbg_reseed,bcrypto_hmac_drbg_reseed)",
        "(edwards_curve_create,bcrypto_edwards_curve_create)",
        "(cipher_set_padding,bcrypto_cipher_set_padding)",
        "(ecdsa_verify,bcrypto_ecdsa_verify)",
        "(ecdsa_pubkey_export,bcrypto_ecdsa_pubkey_export)",
        "(ecdsa_pubkey_verify,bcrypto_ecdsa_pubkey_verify)",
        "(schnorr_pubkey_to_hash,bcrypto_schnorr_pubkey_to_hash)",
        "(ecdsa_pubkey_negate,bcrypto_ecdsa_pubkey_negate)",
        "(secp256k1_seckey_verify,bcrypto_secp256k1_seckey_verify)",
        "(chacha20_init,bcrypto_chacha20_init)",
        "(ctr_drbg_reseed,bcrypto_ctr_drbg_reseed)",
        "(ecdh_pubkey_export,bcrypto_ecdh_pubkey_export)",
        "(secp256k1_xonly_to_uniform,bcrypto_secp256k1_xonly_to_uniform)",
        "(poly1305_destroy,bcrypto_poly1305_destroy)",
        "(random,bcrypto_random)",
        "(secp256k1_pubkey_from_hash,bcrypto_secp256k1_pubkey_from_hash)",
        "(hmac_init,bcrypto_hmac_init)",
        "(secp256k1_xonly_to_hash,bcrypto_secp256k1_xonly_to_hash)",
        "(pgpdf_derive_simple,bcrypto_pgpdf_derive_simple)",
        "(eddsa_pubkey_export,bcrypto_eddsa_pubkey_export)",
        "(schnorr_pubkey_export,bcrypto_schnorr_pubkey_export)",
        "(schnorr_privkey_tweak_add,bcrypto_schnorr_privkey_tweak_add)",
        "(aead_static_auth,bcrypto_aead_static_auth)",
        "(mont_curve_field_size,bcrypto_mont_curve_field_size)",
        "(dsa_privkey_verify,bcrypto_dsa_privkey_verify)",
        "(rsa_decrypt_oaep,bcrypto_rsa_decrypt_oaep)",
        "(rsa_pubkey_bits,bcrypto_rsa_pubkey_bits)",
        "(secp256k1_schnorr_legacy_sign,bcrypto_secp256k1_schnorr_legacy_sign)",
        "(secp256k1_schnorr_sign,bcrypto_secp256k1_schnorr_sign)",
        "(cash32_deserialize,bcrypto_cash32_deserialize)",
        "(ecdh_pubkey_from_hash,bcrypto_ecdh_pubkey_from_hash)",
        "(keccak_final,bcrypto_keccak_final)",
        "(dsa_pubkey_bits,bcrypto_dsa_pubkey_bits)",
        "(mont_curve_create,bcrypto_mont_curve_create)",
        "(ecdsa_privkey_verify,bcrypto_ecdsa_privkey_verify)",
        "(eddsa_privkey_convert,bcrypto_eddsa_privkey_convert)",
        "(secp256k1_seckey_tweak_add,bcrypto_secp256k1_seckey_tweak_add)",
        "(hash_drbg_generate,bcrypto_hash_drbg_generate)",
        "(secp256k1_pubkey_tweak_add,bcrypto_secp256k1_pubkey_tweak_add)",
        "(ecdsa_privkey_invert,bcrypto_ecdsa_privkey_invert)",
        "(schnorr_pubkey_tweak_sum,bcrypto_schnorr_pubkey_tweak_sum)",
        "(blake2s_update,bcrypto_blake2s_update)",
        "(eddsa_verify_single,bcrypto_eddsa_verify_single)",
        "(eddsa_privkey_export,bcrypto_eddsa_privkey_export)",
        "(eddsa_pubkey_size,bcrypto_eddsa_pubkey_size)",
        "(poly1305_create,bcrypto_poly1305_create)",
        "(bech32_encode,bcrypto_bech32_encode)",
        "(eddsa_scalar_invert,bcrypto_eddsa_scalar_invert)",
        "(salsa20_destroy,bcrypto_salsa20_destroy)",
        "(eddsa_verify,bcrypto_eddsa_verify)",
        "(wei_curve_field_bits,bcrypto_wei_curve_field_bits)",
        "(base64url_decode,bcrypto_base64url_decode)",
        "(secp256k1_sign_recoverable_der,bcrypto_secp256k1_sign_recoverable_der)",
        "(base32_test,bcrypto_base32_test)",
        "(dsa_params_create,bcrypto_dsa_params_create)",
        "(ecdh_privkey_export,bcrypto_ecdh_privkey_export)",
        "(schnorr_pubkey_verify,bcrypto_schnorr_pubkey_verify)",
        "(eddsa_pubkey_from_hash,bcrypto_eddsa_pubkey_from_hash)",
        "(dsa_privkey_create,bcrypto_dsa_privkey_create)",
        "(pgpdf_derive_iterated,bcrypto_pgpdf_derive_iterated)",
        "(rsa_privkey_generate,bcrypto_rsa_privkey_generate)",
        "(ecdh_pubkey_convert,bcrypto_ecdh_pubkey_convert)",
        "(ecdsa_sign_der,bcrypto_ecdsa_sign_der)",
        "(secp256k1_sign_der,bcrypto_secp256k1_sign_der)",
        "(hash_final,bcrypto_hash_final)",
        "(chacha20_create,bcrypto_chacha20_create)",
        "(bcrypt_hash256,bcrypto_bcrypt_hash256)",
        "(ecdh_pubkey_verify,bcrypto_ecdh_pubkey_verify)",
        "(secp256k1_seckey_tweak_mul,bcrypto_secp256k1_seckey_tweak_mul)",
        "(dsa_pubkey_qbits,bcrypto_dsa_pubkey_qbits)",
        "(rsa_verify,bcrypto_rsa_verify)",
        "(base16le_decode,bcrypto_base16le_decode)",
        "(arc4_init,bcrypto_arc4_init)",
        "(secp256k1_pubkey_to_hash,bcrypto_secp256k1_pubkey_to_hash)",
        "(secp256k1_is_low_der,bcrypto_secp256k1_is_low_der)",
        "(keccak_multi,bcrypto_keccak_multi)",
        "(eddsa_privkey_expand,bcrypto_eddsa_privkey_expand)",
        "(blake2b_digest,bcrypto_blake2b_digest)",
        "(cleanse,bcrypto_cleanse)",
        "(hash_update,bcrypto_hash_update)",
        "(ecdh_pubkey_has_torsion,bcrypto_ecdh_pubkey_has_torsion)",
        "(poly1305_update,bcrypto_poly1305_update)",
        "(cash32_decode,bcrypto_cash32_decode)",
        "(secp256k1_signature_normalize,bcrypto_secp256k1_signature_normalize)",
        "(blake2b_multi,bcrypto_blake2b_multi)",
        "(murmur3_tweak,bcrypto_murmur3_tweak)",
        "(secp256k1_seckey_generate,bcrypto_secp256k1_seckey_generate)",
        "(ecdh_privkey_generate,bcrypto_ecdh_privkey_generate)",
        "(siphash_mod,bcrypto_siphash_mod)",
        "(eddsa_pubkey_from_scalar,bcrypto_eddsa_pubkey_from_scalar)",
        "(hash_multi,bcrypto_hash_multi)",
        "(ecdsa_pubkey_convert,bcrypto_ecdsa_pubkey_convert)",
        "(dsa_pubkey_verify,bcrypto_dsa_pubkey_verify)",
        "(eddsa_pubkey_import,bcrypto_eddsa_pubkey_import)",
        "(salsa20_create,bcrypto_salsa20_create)",
        "(schnorr_verify_batch,bcrypto_schnorr_verify_batch)",
        "(hmac_drbg_generate,bcrypto_hmac_drbg_generate)",
        "(secp256k1_xonly_tweak_sum,bcrypto_secp256k1_xonly_tweak_sum)",
        "(base32hex_encode,bcrypto_base32hex_encode)",
        "(schnorr_legacy_verify_batch,bcrypto_schnorr_legacy_verify_batch)",
        "(edwards_curve_field_bits,bcrypto_edwards_curve_field_bits)",
        "(arc4_destroy,bcrypto_arc4_destroy)"
      ],
      "Charon": []
    },
    "@contaquanto/chevronlib": {
      "Gasket": [
        "(generateKey,GenerateKeyAsync)",
        "(getKeyFingerprints,GetKeyFingerprintsSync)",
        "(loadKey,LoadKeyAsync)",
        "(signData,SignDataAsync)",
        "(changeKeyPassword,ChangeKeyPasswordAsync)",
        "(verifySignature,VerifySignatureAsync)",
        "(__loadnative,LoadNative)",
        "(unlockKey,UnlockKeyAsync)",
        "(getPublicKey,GetPublicKeySync)"
      ],
      "Charon": [
        "(__loadnative,LoadNative)",
        "(generateKey,GenerateKeyAsync)",
        "(loadKey,LoadKeyAsync)",
        "(unlockKey,UnlockKeyAsync)",
        "(getKeyFingerprints,GetKeyFingerprintsSync)",
        "(getPublicKey,GetPublicKeySync)",
        "(verifySignature,VerifySignatureAsync)",
        "(signData,SignDataAsync)",
        "(changeKeyPassword,ChangeKeyPasswordAsync)"
      ]
    },
    "@contrast/agent-lib": {
      "Gasket": [
        "(indexOfChaining,h69ad4d72dd3cbbf5)",
        "(checkSqlInjectionSink,hc0bc7afc69d24189)",
        "(isMethodTampering,h83108eb752589292)",
        "(isDangerousPath,h86c946d65f1aff12)",
        "(isXssScriptOrIframeInUserInput,hd29bc5e560d00243)",
        "(makeXssState,h209b5be1cf90711f)",
        "(scoreRequestConnect,h24295b38df18947d)",
        "(scoreRequestBody,hef61dbe12f49cd59)",
        "(isXssInChunkedBody,h961411b541e749d3)",
        "(findMongoComparators,hc3e66514317c6d0c)",
        "(Agent,hdd64c9bd554092ae)",
        "(isXssInWholeBody,h57a1b81b35c9e9b1)",
        "(isMongoQueryType,h550b598ba1bc7740)",
        "(scoreHeader,h0af3348da0004e45)",
        "(checkSqlInjectionContextFreeSink,h9c2dfffdd8c64264)",
        "(containsDangerousPath,he49f524907eee285)",
        "(doNothing,h8ac87cb943ca5022)",
        "(checkCommandInjectionSink,h938442fcd6b7734a)",
        "(scoreAtom,he18cd114a5393923)",
        "(checkSsjsInjectionSink,hb8741b9fefd5280f)"
      ],
      "Charon": []
    },
    "@contrast/code-events": {
      "Gasket": [
        "(stop,Stop)",
        "(noop,Noop)",
        "(stats,Stats)",
        "(size,Size)",
        "(getEvent,GetEvent)",
        "(loseMemory,LoseMemory)",
        "(start,Start)"
      ],
      "Charon": []
    },
    "@contrast/distringuish": {
      "Gasket": [
        "(internalize,Internalize)",
        "(isExternal,IsExternal)",
        "(getProperties,GetProperties)",
        "(externalize,Externalize)"
      ],
      "Charon": []
    },
    "@contrast/distringuish-prebuilt": {
      "Gasket": [
        "(internalize,Internalize)",
        "(isExternal,IsExternal)",
        "(getProperties,GetProperties)",
        "(externalize,Externalize)"
      ],
      "Charon": []
    },
    "@contrast/fn-inspect": {
      "Gasket": [
        "(funcInfo,FuncInfo)"
      ],
      "Charon": []
    },
    "@contrast/stash": {
      "Gasket": [
        "(hasData,has_data)",
        "(getData,get_data)",
        "(setData,set_data)",
        "(delData,del_data)"
      ],
      "Charon": []
    },
    "@corbinu/couchbase": {
      "Gasket": [
        "(httpRequest,fnHttpRequest)",
        "(selectBucket,fnSelectBucket)",
        "(searchQuery,fnSearchQuery)",
        "(remove,fnRemove)",
        "(Connection,fnNew)",
        "(cntl,fnCntl)",
        "(analyticsQuery,fnAnalyticsQuery)",
        "(exists,fnExists)",
        "(lookupIn,fnLookupIn)",
        "(ping,fnPing)",
        "(store,fnStore)",
        "(viewQuery,fnViewQuery)",
        "(touch,fnTouch)",
        "(diag,fnDiag)",
        "(get,fnGet)",
        "(unlock,fnUnlock)",
        "(shutdown,fnShutdown)",
        "(query,fnQuery)",
        "(connect,fnConnect)",
        "(getReplica,fnGetReplica)",
        "(counter,fnCounter)",
        "(mutateIn,fnMutateIn)"
      ],
      "Charon": []
    },
    "corelink-trail-smoothifier": {
      "Gasket": [
        "(smooth,smooth)",
        "(TrailSmoothifier,TrailSmoothifier)"
      ],
      "Charon": []
    },
    "corona-school-matching": {
      "Gasket": [
        "(matching,Match)"
      ],
      "Charon": []
    },
    "cortex-cpp": {
      "Gasket": [
        "(stop,Start)",
        "(start,Start)"
      ],
      "Charon": [
        "(start,Start)",
        "(stop,Start)"
      ]
    },
    "@cosmicmedia/bcrypt": {
      "Gasket": [
        "(gen_salt_sync,GenerateSaltSync)",
        "(encrypt,Encrypt)",
        "(gen_salt,GenerateSalt)",
        "(encrypt_sync,EncryptSync)",
        "(compare_sync,CompareSync)",
        "(get_rounds,GetRounds)",
        "(compare,Compare)"
      ],
      "Charon": [
        "(gen_salt_sync,GenerateSaltSync)",
        "(encrypt_sync,EncryptSync)",
        "(compare_sync,CompareSync)",
        "(get_rounds,GetRounds)",
        "(gen_salt,GenerateSalt)",
        "(encrypt,Encrypt)",
        "(compare,Compare)"
      ]
    },
    "cozo-node": {
      "Gasket": [
        "(register_callback,h94ab6c9e6e330afb)",
        "(unregister_named_rule,h34facca2592e5937)",
        "(restore_db,hf024bfc9f5f837df)",
        "(commit_tx,h0835a8ae56d27a1b)",
        "(query_db,had2fa2b7e41969dd)",
        "(import_relations,h428cd357e6423fe3)",
        "(unregister_callback,h5f8793f502778e1a)",
        "(abort_tx,hb5e8988e9075c211)",
        "(query_tx,h8c4652c0a6d1c19b)",
        "(backup_db,h3212df78b927258d)",
        "(close_db,he6dd5c54f86454d0)",
        "(open_db,h0c886abce90416fe)",
        "(export_relations,hd951242dfb5d5f83)",
        "(register_named_rule,h99fb354a1f338681)",
        "(import_from_backup,h901d44aea7ea2d3b)",
        "(respond_to_named_rule_invocation,h64622f3fb899aa70)",
        "(multi_transact,hbeddca437a6cb424)"
      ],
      "Charon": []
    },
    "cpp-add": {
      "Gasket": [
        "(add,Add)"
      ],
      "Charon": [
        "(add,Add)"
      ]
    },
    "cpp-hexgenerator": {
      "Gasket": [
        "(Guid,GenerateGuid)"
      ],
      "Charon": [
        "(Guid,GenerateGuid)"
      ]
    },
    "cpp-time": {
      "Gasket": [
        "(getCppTime,GetCppTime)"
      ],
      "Charon": [
        "(getCppTime,GetCppTime)"
      ]
    },
    "cppzst": {
      "Gasket": [
        "(decompress,Decompress)",
        "(StreamDecompressor,New)",
        "(getBlockSize,GetBlockSize)",
        "(compress,Compress)",
        "(copy,Copy)",
        "(StreamCompressor,New)"
      ],
      "Charon": [
        "(getBlockSize,GetBlockSize)",
        "(copy,Copy)",
        "(decompress,Decompress)",
        "(compress,Compress)",
        "(- Set a larger chainLog (eg. --zstd=chainLog=%u)\\n,size_t)"
      ]
    },
    "cpuid-git": {
      "Gasket": [
        "(getCPUID,GetCPUID)"
      ],
      "Charon": [
        "(getCPUID,GetCPUID)"
      ]
    },
    "cpu-instructions": {
      "Gasket": [
        "(cpuInfo,Method)"
      ],
      "Charon": [
        "(cpuInfo,Method)"
      ]
    },
    "crc64cpp": {
      "Gasket": [
        "(Sum64,Sum64)",
        "(Sum,Sum)",
        "(close,close)",
        "(write,write)",
        "(flush,flush)",
        "(CRC64,CRC64)"
      ],
      "Charon": []
    },
    "crc64-ecma182": {
      "Gasket": [
        "(crc64,CRC64)",
        "(toUInt64String,ToUInt64String)"
      ],
      "Charon": [
        "(crc64,CRC64)",
        "(toUInt64String,ToUInt64String)"
      ]
    },
    "crfsuite": {
      "Gasket": [
        "(tag,Tag)",
        "(open,Open)",
        "(train,Train)",
        "(get_params,GetParams)",
        "(Tagger,TaggerClass)",
        "(init,InitTrainer)",
        "(append,Append)",
        "(close,Close)",
        "(Trainer,TrainerClass)",
        "(set_params,SetParams)",
        "(get_labels,GetLabels)"
      ],
      "Charon": [
        "(Tagger,func)",
        "(set_params,TrainerClass)",
        "(Trainer,func)"
      ]
    },
    "crypt3-passwd": {
      "Gasket": [
        "(encrypt,crypt3)"
      ],
      "Charon": []
    },
    "cryptian": {
      "Gasket": [
        "(Gost,New)",
        "(getVersion,GetVersion)",
        "(encrypt,Encrypt)",
        "(getName,GetName)",
        "(AlgorithmBlock,Forbidden)",
        "(Cast256,New)",
        "(getIvSize,GetIvSize)",
        "(Safer,New)",
        "(isPaddingRequired,IsPaddingRequired)",
        "(Saferplus,New)",
        "(Threeway,New)",
        "(Cast128,New)",
        "(decrypt,Decrypt)",
        "(Rijndael256,New)",
        "(getKeySizes,GetKeySizes)",
        "(Xtea,New)",
        "(Enigma,New)",
        "(Rijndael128,New)",
        "(transform,Transform)",
        "(Cipher,New)",
        "(setIv,SetIv)",
        "(Tripledes,New)",
        "(Decipher,New)",
        "(AlgorithmStream,Forbidden)",
        "(Rc2,New)",
        "(getBlockSize,GetBlockSize)",
        "(Loki97,New)",
        "(Dummy,New)",
        "(Blowfish,New)",
        "(setKey,SetKey)",
        "(Mode,New)",
        "(Rijndael192,New)",
        "(Des,New)",
        "(Wake,New)",
        "(reset,Reset)",
        "(setEndianCompat,SetEndianCompat)",
        "(Arcfour,New)"
      ],
      "Charon": []
    },
    "@cryptlex/lexactivator": {
      "Gasket": [
        "(SetLicenseKey,setLicenseKey)",
        "(SetProductData,setProductData)",
        "(GetLicenseType,getLicenseType)",
        "(GetTrialId,getTrialId)",
        "(ActivateLicense,activateLicense)",
        "(GetLicenseAllowedDeactivations,getLicenseAllowedDeactivations)",
        "(GetActivationMeterAttributeUses,getActivationMeterAttributeUses)",
        "(GenerateOfflineActivationRequest,generateOfflineActivationRequest)",
        "(SetReleaseChannel,setReleaseChannel)",
        "(GenerateOfflineDeactivationRequest,generateOfflineDeactivationRequest)",
        "(GenerateOfflineTrialActivationRequest,generateOfflineTrialActivationRequest)",
        "(GetLicenseTotalDeactivations,getLicenseTotalDeactivations)",
        "(GetActivationMetadata,getActivationMetadata)",
        "(GetLicenseMeterAttribute,getLicenseMeterAttribute)",
        "(GetLicenseUserMetadata,getLicenseUserMetadata)",
        "(SetTwoFactorAuthenticationCode,setTwoFactorAuthenticationCode)",
        "(SetProductId,setProductId)",
        "(AuthenticateUser,authenticateUser)",
        "(SetNetworkProxy,setNetworkProxy)",
        "(GetActivationId,getActivationId)",
        "(SetCryptlexHost,setCryptlexHost)",
        "(GetActivationMode,getActivationMode)",
        "(GetLicenseMetadata,getLicenseMetadata)",
        "(SetCacheMode,setCacheMode)",
        "(GetLicenseActivationDate,getLicenseActivationDate)",
        "(IsLocalTrialGenuine,isLocalTrialGenuine)",
        "(SetLicenseUserCredential,setLicenseUserCredential)",
        "(GetLicenseUserName,getLicenseUserName)",
        "(GetProductVersionName,getProductVersionName)",
        "(SetAppVersion,setAppVersion)",
        "(GetUserLicenses,getUserLicenses)",
        "(IsLicenseGenuine,isLicenseGenuine)",
        "(IsTrialGenuine,isTrialGenuine)",
        "(GetLicenseExpiryDate,getLicenseExpiryDate)",
        "(ResetActivationMeterAttributeUses,resetActivationMeterAttributeUses)",
        "(AuthenticateUserWithIdToken,authenticateUserWithIdToken)",
        "(GetLicenseMaxAllowedReleaseVersion,getLicenseMaxAllowedReleaseVersion)",
        "(SetDataDirectory,setDataDirectory)",
        "(SetReleaseVersion,setReleaseVersion)",
        "(SetActivationMetadata,setActivationMetadata)",
        "(SetCustomDeviceFingerprint,setCustomDeviceFingerprint)",
        "(GetServerSyncGracePeriodExpiryDate,getServerSyncGracePeriodExpiryDate)",
        "(IsLicenseValid,isLicenseValid)",
        "(DeactivateLicense,deactivateLicense)",
        "(GetTrialActivationMetadata,getTrialActivationMetadata)",
        "(SetReleasePublishedDate,setReleasePublishedDate)",
        "(GetLicenseOrganizationName,getLicenseOrganizationName)",
        "(SetDebugMode,setDebugMode)",
        "(GetProductVersionFeatureFlag,getProductVersionFeatureFlag)",
        "(GetLibraryVersion,getLibraryVersion)",
        "(CheckForReleaseUpdate,checkForReleaseUpdate)",
        "(SetProductFile,setProductFile)",
        "(GetLicenseAllowedActivations,getLicenseAllowedActivations)",
        "(SetOfflineActivationRequestMeterAttributeUses,setOfflineActivationRequestMeterAttributeUses)",
        "(ActivateTrial,activateTrial)",
        "(DecrementActivationMeterAttributeUses,decrementActivationMeterAttributeUses)",
        "(GetTrialExpiryDate,getTrialExpiryDate)",
        "(GetProductVersionDisplayName,getProductVersionDisplayName)",
        "(GetLicenseKey,getLicenseKey)",
        "(ActivateLocalTrial,activateLocalTrial)",
        "(CheckReleaseUpdate,checkReleaseUpdate)",
        "(ActivateLicenseOffline,activateLicenseOffline)",
        "(SetActivationLeaseDuration,setActivationLeaseDuration)",
        "(GetLicenseUserEmail,getLicenseUserEmail)",
        "(Reset,reset)",
        "(GetLicenseOrganizationAddress,getLicenseOrganizationAddress)",
        "(GetActivationCreationDate,getActivationCreationDate)",
        "(SetLicenseCallback,setLicenseCallback)",
        "(GetLicenseMaintenanceExpiryDate,getLicenseMaintenanceExpiryDate)",
        "(SetTrialActivationMetadata,setTrialActivationMetadata)",
        "(GetLicenseTotalActivations,getLicenseTotalActivations)",
        "(ExtendLocalTrial,extendLocalTrial)",
        "(GetProductMetadata,getProductMetadata)",
        "(SetReleasePlatform,setReleasePlatform)",
        "(GetLicenseCreationDate,getLicenseCreationDate)",
        "(GetLocalTrialExpiryDate,getLocalTrialExpiryDate)",
        "(GetLicenseUserCompany,getLicenseUserCompany)",
        "(IncrementActivationMeterAttributeUses,incrementActivationMeterAttributeUses)",
        "(ActivateTrialOffline,activateTrialOffline)"
      ],
      "Charon": []
    },
    "@cryptlex/lexfloatclient": {
      "Gasket": [
        "(GetHostProductVersionFeatureFlag,getHostProductVersionFeatureFlag)",
        "(GetHostLicenseMeterAttribute,getHostLicenseMeterAttribute)",
        "(GetFloatingClientMetadata,getFloatingClientMetadata)",
        "(SetHostProductId,setHostProductId)",
        "(RequestOfflineFloatingLicense,requestOfflineFloatingLicense)",
        "(SetHostUrl,setHostUrl)",
        "(SetFloatingLicenseCallback,setFloatingLicenseCallback)",
        "(GetHostLicenseExpiryDate,getHostLicenseExpiryDate)",
        "(DecrementFloatingClientMeterAttributeUses,decrementFloatingClientMeterAttributeUses)",
        "(GetFloatingClientLibraryVersion,getFloatingClientLibraryVersion)",
        "(HasFloatingLicense,hasFloatingLicense)",
        "(GetHostProductVersionName,getHostProductVersionName)",
        "(GetHostProductVersionDisplayName,getHostProductVersionDisplayName)",
        "(GetHostLicenseMetadata,getHostLicenseMetadata)",
        "(GetFloatingLicenseMode,getFloatingLicenseMode)",
        "(SetFloatingClientMetadata,setFloatingClientMetadata)",
        "(RequestFloatingLicense,requestFloatingLicense)",
        "(GetHostConfig,getHostConfig)",
        "(ResetFloatingClientMeterAttributeUses,resetFloatingClientMeterAttributeUses)",
        "(GetFloatingClientLeaseExpiryDate,getFloatingClientLeaseExpiryDate)",
        "(GetFloatingClientMeterAttributeUses,getFloatingClientMeterAttributeUses)",
        "(DropFloatingLicense,dropFloatingLicense)",
        "(IncrementFloatingClientMeterAttributeUses,incrementFloatingClientMeterAttributeUses)",
        "(SetPermissionFlag,setPermissionFlag)"
      ],
      "Charon": []
    },
    "crypto-incognito": {
      "Gasket": [
        "(create_privkey,CreatePrivkey)",
        "(load_mG,LoadmG)",
        "(selector_create,SelectorCreate)",
        "(pubkey_from_privkey,PubkeyFromPrivkey)",
        "(reply_decrypt,ReplyDecrypt)",
        "(selector_create_fast,SelectorCreateFast)"
      ],
      "Charon": [
        "(create_privkey,CreatePrivkey)",
        "(pubkey_from_privkey,PubkeyFromPrivkey)",
        "(load_mG,LoadmG)",
        "(selector_create,SelectorCreate)",
        "(selector_create_fast,SelectorCreateFast)",
        "(reply_decrypt,ReplyDecrypt)"
      ]
    },
    "@csc1/shacrypt": {
      "Gasket": [
        "(sha512cryptasync,sha512cryptasync)",
        "(sha512crypt,sha512crypt)",
        "(sha256crypt,sha256crypt)",
        "(sha256cryptasync,sha256cryptasync)"
      ],
      "Charon": [
        "(sha256crypt,sha256crypt)",
        "(sha512crypt,sha512crypt)",
        "(sha256cryptasync,sha256cryptasync)",
        "(sha512cryptasync,sha512cryptasync)"
      ]
    },
    "ctags": {
      "Gasket": [
        "(getTags,GetTags)",
        "(end,End)",
        "(exists,Exists)",
        "(findTags,FindTags)",
        "(Tags,New)"
      ],
      "Charon": [
        "(end,Tags)",
        "(exists,Tags)",
        "(findTags,Tags)",
        "(getTags,Tags)"
      ]
    },
    "@cubbit/enigma": {
      "Gasket": [
        "(ed25519_sign,sign)",
        "(ed25519_create_keypair,create_keypair)",
        "(ed25519_verify,verify)",
        "(rsa_create_keypair,create_keypair)",
        "(ed25519_create_seed,create_seed)"
      ],
      "Charon": []
    },
    "cubiomes": {
      "Gasket": [
        "(shiftRight,shiftRight)",
        "(increment,increment)",
        "(getBiomeAtPos,_getBiomeAtPos)",
        "(createInt,createInt)",
        "(nextLong,_nextLong)",
        "(nextInt,_nextInt)",
        "(applySeed,_applySeed)",
        "(lt,lt)",
        "(isOceanic,_isOceanic)",
        "(xor,_xor)",
        "(intToString,intToString)",
        "(lteq,lteq)",
        "(copy,copy)",
        "(destroyInt,destroyInt)",
        "(nextDouble,_nextDouble)",
        "(isViableStructurePos,_isViableStructurePos)",
        "(nextFloat,_nextFloat)",
        "(createGenerator,createGenerator)",
        "(add,add)",
        "(gteq,gteq)",
        "(shiftLeft,shiftLeft)",
        "(next,_next)",
        "(gt,gt)",
        "(getStructurePos,getStructurePos)",
        "(mod,mod)",
        "(eq,eq)"
      ],
      "Charon": []
    },
    "cue-sdk": {
      "Gasket": [
        "(CorsairGetDevices,corsairGetDevices)",
        "(CorsairGetDeviceInfo,corsairGetDeviceInfo)",
        "(CorsairGetSessionDetails,corsairGetSessionDetails)",
        "(CorsairSetLedColorsFlushBufferAsync,corsairSetLedColorsFlushBufferAsync)",
        "(CorsairSubscribeForEvents,corsairSubscribeForEvents)",
        "(CorsairGetLedPositions,corsairGetLedPositions)",
        "(CorsairConnect,corsairConnect)",
        "(CorsairUnsubscribeFromEvents,corsairUnsubscribeFromEvents)",
        "(CorsairGetLedColors,corsairGetLedColors)",
        "(CorsairReleaseControl,corsairReleaseControl)",
        "(CorsairRequestControl,corsairRequestControl)",
        "(CorsairSetLedColors,corsairSetLedColors)",
        "(CorsairSetLayerPriority,corsairSetLayerPriority)",
        "(CorsairGetLedLuidForKeyName,corsairGetLedLuidForKeyName)",
        "(CorsairSetLedColorsBuffer,corsairSetLedColorsBuffer)",
        "(CorsairConfigureKeyEvent,corsairConfigureKeyEvent)",
        "(CorsairDisconnect,corsairDisconnect)"
      ],
      "Charon": [
        "(CorsairSetLedColors,corsairSetLedColors)",
        "(CorsairSetLedColorsBuffer,corsairSetLedColorsBuffer)",
        "(CorsairSetLedColorsFlushBufferAsync,corsairSetLedColorsFlushBufferAsync)",
        "(CorsairSetLayerPriority,corsairSetLayerPriority)"
      ]
    },
    "cue-sdk-cove": {
      "Gasket": [
        "(CorsairSubscribeForEvents,corsairSubscribeForEvents)",
        "(CorsairGetLedPositions,corsairGetLedPositions)",
        "(CorsairUnsubscribeFromEvents,corsairUnsubscribeFromEvents)",
        "(CorsairGetDeviceCount,corsairGetDeviceCount)",
        "(CorsairSetLedsColorsBufferByDeviceIndex,corsairSetLedsColorsBufferByDeviceIndex)",
        "(CorsairGetLastError,corsairGetLastError)",
        "(CorsairGetLedsColors,corsairGetLedsColors)",
        "(CorsairRequestControl,corsairRequestControl)",
        "(CorsairGetLedIdForKeyName,corsairGetLedIdForKeyName)",
        "(CorsairGetDeviceProperty,corsairGetDeviceProperty)",
        "(CorsairGetLedPositionsByDeviceIndex,corsairGetLedPositionsByDeviceIndex)",
        "(CorsairSetLedsColors,corsairSetLedsColors)",
        "(CorsairReleaseControl,corsairReleaseControl)",
        "(CorsairSetLedsColorsFlushBufferAsync,corsairSetLedsColorsFlushBufferAsync)",
        "(CorsairGetDeviceInfo,corsairGetDeviceInfo)",
        "(CorsairSetLedsColorsAsync,corsairSetLedsColorsAsync)",
        "(CorsairGetLedsColorsByDeviceIndex,corsairGetLedsColorsByDeviceIndex)",
        "(CorsairPerformProtocolHandshake,corsairPerformProtocolHandshake)",
        "(CorsairSetLayerPriority,corsairSetLayerPriority)",
        "(CorsairSetLedsColorsFlushBuffer,corsairSetLedsColorsFlushBuffer)"
      ],
      "Charon": [
        "(CorsairSetLedsColors,corsairSetLedsColors)",
        "(CorsairSetLedsColorsBufferByDeviceIndex,corsairSetLedsColorsBufferByDeviceIndex)",
        "(CorsairSetLedsColorsFlushBuffer,corsairSetLedsColorsFlushBuffer)",
        "(CorsairSetLedsColorsFlushBufferAsync,corsairSetLedsColorsFlushBufferAsync)",
        "(CorsairSetLedsColorsAsync,corsairSetLedsColorsAsync)",
        "(CorsairSetLayerPriority,corsairSetLayerPriority)"
      ]
    },
    "@curlconverter/tree-sitter-bash": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "curve25519-n": {
      "Gasket": [
        "(Curve,Curve)"
      ],
      "Charon": []
    },
    "curve25519-n2": {
      "Gasket": [
        "(curve,DoCurve)"
      ],
      "Charon": [
        "(curve,DoCurve)"
      ]
    },
    "cypher.js": {
      "Gasket": [
        "(js/build/Debug/native-cypher,ParseQuery)",
        "(target/native-cypher,ParseQuery)"
      ],
      "Charon": []
    },
    "darknet-bindings": {
      "Gasket": [
        "(toRGB,ToRGB)",
        "(predict,predict)",
        "(interpret,Interepret)",
        "(doNMS,DoNMS)",
        "(resetMemory,resetMemory)",
        "(fromRGB,FromRGB)",
        "(DarknetImage,DarknetImage)",
        "(release,Release)",
        "(fromPlanarRGB,FromPlanarRGB)",
        "(letterbox,LetterBox)",
        "(DarknetDetections,DarknetDetections)",
        "(Darknet,DarknetClass)"
      ],
      "Charon": []
    },
    "data-ann-native-addon-test": {
      "Gasket": [
        "(add,Add)"
      ],
      "Charon": []
    },
    "@datadog/native-iast-taint-tracking": {
      "Gasket": [
        "(replaceStringByString,TaintReplaceStringByStringMethod)",
        "(addSecureMarksToTaintedString,AddSecureMarksToTaintedString)",
        "(stringCase,StringCaseOperator)",
        "(substr,substr)",
        "(setMaxTransactions,SetMaxTransactions)",
        "(getMetrics,GetMetrics)",
        "(newTaintedObject,NewTaintedObject)",
        "(trimEnd,TaintTrimEndOperator)",
        "(createTransaction,CreateTransaction)",
        "(removeTransaction,DeleteTransaction)",
        "(getRanges,GetRanges)",
        "(isTainted,IsTainted)",
        "(arrayJoin,ArrayJoinOperator)",
        "(concat,TaintConcatOperator)",
        "(replaceStringByStringUsingRegex,TaintReplaceStringByStringUsingRegexMethod)",
        "(substring,substring)",
        "(slice,slice)",
        "(newTaintedString,NewTaintedString)",
        "(trim,TaintTrimOperator)"
      ],
      "Charon": []
    },
    "@datadog/native-metrics": {
      "Gasket": [
        "(stop,Stop)",
        "(stats,Stats)",
        "(start,Start)"
      ],
      "Charon": []
    },
    "@datadog/pprof": {
      "Gasket": [
        "(startSamplingHeapProfiler,StartSamplingHeapProfiler)",
        "(stop,Stop)",
        "(v8ProfilerStuckEventLoopDetected,V8ProfilerStuckEventLoopDetected)",
        "(getNativeThreadId,GetNativeThreadId)",
        "(dispose,Dispose)",
        "(stopSamplingHeapProfiler,StopSamplingHeapProfiler)",
        "(TimeProfiler,New)",
        "(start,Start)",
        "(getAllocationProfile,GetAllocationProfile)",
        "(monitorOutOfMemory,MonitorOutOfMemory)"
      ],
      "Charon": []
    },
    "@dataee/sockopt": {
      "Gasket": [
        "(setsockopt,Setsockopt)",
        "(getsockopt,Getsockopt)"
      ],
      "Charon": [
        "(getsockopt,Getsockopt)",
        "(setsockopt,Setsockopt)"
      ]
    },
    "@davedoesdev/fs-ext": {
      "Gasket": [
        "(flock,Flock)",
        "(statVFS,StatVFS)",
        "(seek,Seek)",
        "(fcntl,Fcntl)"
      ],
      "Charon": [
        "(seek,Seek)",
        "(fcntl,Fcntl)",
        "(flock,Flock)",
        "(statVFS,StatVFS)"
      ]
    },
    "db4bix": {
      "Gasket": [
        "(preproc,Preproc)"
      ],
      "Charon": [
        "(preproc,Preproc)"
      ]
    },
    "dblogger": {
      "Gasket": [
        "(info,Info)",
        "(tag,Tag)",
        "(rotate,Rotate)",
        "(error,Error)",
        "(warn,Warn)",
        "(debug,Debug)",
        "(Logger,New)",
        "(log,Log)",
        "(trace,Trace)",
        "(fatal,Fatal)"
      ],
      "Charon": [
        "(trace,Trace)",
        "(debug,Debug)",
        "(info,Info)",
        "(log,Log)",
        "(warn,Warn)",
        "(error,Error)",
        "(fatal,Fatal)",
        "(tag,Tag)",
        "(rotate,Rotate)"
      ]
    },
    "dbus": {
      "Gasket": [
        "(sendMessageReply,SendMessageReply)",
        "(setSignalHandler,SetSignalHandler)",
        "(parseIntrospectSource,ParseIntrospectSource)",
        "(sendErrorMessageReply,SendErrorMessageReply)",
        "(unregisterObjectPath,UnregisterObjectPath)",
        "(registerObjectPath,RegisterObjectPath)",
        "(getBus,GetBus)",
        "(emitSignal,EmitSignal)",
        "(setObjectHandler,SetObjectHandler)",
        "(releaseBus,ReleaseBus)",
        "(addSignalFilter,AddSignalFilter)",
        "(setMaxMessageSize,SetMaxMessageSize)",
        "(callMethod,CallMethod)",
        "(requestName,RequestName)"
      ],
      "Charon": [
        "(getBus,GetBus)",
        "(releaseBus,ReleaseBus)",
        "(callMethod,CallMethod)",
        "(requestName,RequestName)",
        "(parseIntrospectSource,ParseIntrospectSource)",
        "(setSignalHandler,Signal)",
        "(addSignalFilter,AddSignalFilter)",
        "(setMaxMessageSize,SetMaxMessageSize)",
        "(emitSignal,Signal)"
      ]
    },
    "ddamsign": {
      "Gasket": [
        "(signtx,SigntxMethod)",
        "(hello,HelloMethod)",
        "(sk2Pk,Sk2PkMethod)"
      ],
      "Charon": [
        "(hello,HelloMethod)",
        "(sk2Pk,Sk2PkMethod)",
        "(signtx,SigntxMethod)"
      ]
    },
    "deadline-math": {
      "Gasket": [
        "(calculate_deadlines_sse4,calculate_deadlines_sse4_wrapper)",
        "(calculate_deadlines_avx2,calculate_deadlines_avx2_wrapper)",
        "(calculate_deadline,calculate_deadline_wrapper)",
        "(calculate_scoop,calculate_scoop_wrapper)"
      ],
      "Charon": []
    },
    "deasync": {
      "Gasket": [
        "(run,Run)"
      ],
      "Charon": []
    },
    "debstep": {
      "Gasket": [
        "(getPackageTags,GetPackageTags)",
        "(getPackageCandidateVersion,GetPackageCandidateVersion)",
        "(getPackageCurrentVersion,GetPackageCurrentVersion)"
      ],
      "Charon": []
    },
    "decimal102": {
      "Gasket": [
        "(main,Decimal102)"
      ],
      "Charon": []
    },
    "decoder1090-c": {
      "Gasket": [
        "(decodeMsg,DecodeMsg)"
      ],
      "Charon": []
    },
    "deltachat-node": {
      "Gasket": [
        "(dcn_get_contact_encrinfo,dcn_get_contact_encrinfo)",
        "(dcn_msg_get_duration,dcn_msg_get_duration)",
        "(dcn_msg_get_received_timestamp,dcn_msg_get_received_timestamp)",
        "(dcn_get_fresh_msg_cnt,dcn_get_fresh_msg_cnt)",
        "(dcn_get_msg,dcn_get_msg)",
        "(dcn_chat_is_unpromoted,dcn_chat_is_unpromoted)",
        "(dcn_get_contacts,dcn_get_contacts)",
        "(dcn_chat_get_color,dcn_chat_get_color)",
        "(dcn_accounts_start_jsonrpc,dcn_accounts_start_jsonrpc)",
        "(dcn_get_webxdc_status_updates,dcn_get_webxdc_status_updates)",
        "(dcn_get_chat_contacts,dcn_get_chat_contacts)",
        "(dcn_add_address_book,dcn_add_address_book)",
        "(dcn_accounts_add_account,dcn_accounts_add_account)",
        "(dcn_accounts_maybe_network_lost,dcn_accounts_maybe_network_lost)",
        "(dcn_chat_is_muted,dcn_chat_is_muted)",
        "(dcn_chatlist_get_cnt,dcn_chatlist_get_cnt)",
        "(dcn_msg_has_html,dcn_msg_has_html)",
        "(dcn_block_chat,dcn_block_chat)",
        "(dcn_contact_is_blocked,dcn_contact_is_blocked)",
        "(dcn_lot_get_text2,dcn_lot_get_text2)",
        "(dcn_msg_set_dimension,dcn_msg_set_dimension)",
        "(dcn_get_info,dcn_get_info)",
        "(dcn_array_get_timestamp,dcn_array_get_timestamp)",
        "(dcn_msg_get_timestamp,dcn_msg_get_timestamp)",
        "(dcn_msg_get_text,dcn_msg_get_text)",
        "(dcn_set_chat_mute_duration,dcn_set_chat_mute_duration)",
        "(dcn_msg_get_width,dcn_msg_get_width)",
        "(dcn_context_open,dcn_context_open)",
        "(dcn_set_draft,dcn_set_draft)",
        "(dcn_get_next_media,dcn_get_next_media)",
        "(dcn_json_rpc_request,dcn_json_rpc_request)",
        "(dcn_msg_is_sent,dcn_msg_is_sent)",
        "(dcn_array_is_independent,dcn_array_is_independent)",
        "(dcn_forward_msgs,dcn_forward_msgs)",
        "(dcn_msg_get_download_state,dcn_msg_get_download_state)",
        "(dcn_get_draft,dcn_get_draft)",
        "(dcn_chatlist_get_summary,dcn_chatlist_get_summary)",
        "(dcn_download_full_msg,dcn_download_full_msg)",
        "(dcn_set_chat_visibility,dcn_set_chat_visibility)",
        "(dcn_markseen_msgs,dcn_markseen_msgs)",
        "(dcn_send_webxdc_status_update,dcn_send_webxdc_status_update)",
        "(dcn_remove_contact_from_chat,dcn_remove_contact_from_chat)",
        "(dcn_chatlist_get_chat_id,dcn_chatlist_get_chat_id)",
        "(dcn_msg_get_sort_timestamp,dcn_msg_get_sort_timestamp)",
        "(dcn_set_chat_name,dcn_set_chat_name)",
        "(dcn_marknoticed_chat,dcn_marknoticed_chat)",
        "(dcn_start_event_handler,dcn_start_event_handler)",
        "(dcn_contact_get_display_name,dcn_contact_get_display_name)",
        "(dcn_get_config,dcn_get_config)",
        "(dcn_start_io,dcn_start_io)",
        "(dcn_estimate_deletion_cnt,dcn_estimate_deletion_cnt)",
        "(dcn_msg_get_filebytes,dcn_msg_get_filebytes)",
        "(dcn_imex_has_backup,dcn_imex_has_backup)",
        "(dcn_configure,dcn_configure)",
        "(dcn_lookup_contact_id_by_addr,dcn_lookup_contact_id_by_addr)",
        "(dcn_create_broadcast_list,dcn_create_broadcast_list)",
        "(dcn_accounts_new,dcn_accounts_new)",
        "(dcn_msg_set_override_sender_name,dcn_msg_set_override_sender_name)",
        "(dcn_msg_set_text,dcn_msg_set_text)",
        "(dcn_chatlist_get_msg_id,dcn_chatlist_get_msg_id)",
        "(dcn_chat_get_mailinglist_addr,dcn_chat_get_mailinglist_addr)",
        "(dcn_accounts_unref,dcn_accounts_unref)",
        "(dcn_accounts_migrate_account,dcn_accounts_migrate_account)",
        "(dcn_get_securejoin_qr,dcn_get_securejoin_qr)",
        "(dcn_msg_has_deviating_timestamp,dcn_msg_has_deviating_timestamp)",
        "(dcn_contact_get_status,dcn_contact_get_status)",
        "(dcn_provider_get_status,dcn_provider_get_status)",
        "(dcn_chat_is_device_talk,dcn_chat_is_device_talk)",
        "(dcn_join_securejoin,dcn_join_securejoin)",
        "(dcn_search_msgs,dcn_search_msgs)",
        "(dcn_accounts_start_event_handler,dcn_accounts_start_event_handler)",
        "(dcn_msg_get_webxdc_info,dcn_msg_get_webxdc_info)",
        "(dcn_msg_get_subject,dcn_msg_get_subject)",
        "(dcn_msg_get_videochat_url,dcn_msg_get_videochat_url)",
        "(dcn_delete_chat,dcn_delete_chat)",
        "(dcn_continue_key_transfer,dcn_continue_key_transfer)",
        "(dcn_stop_ongoing_process,dcn_stop_ongoing_process)",
        "(dcn_array_get_latitude,dcn_array_get_latitude)",
        "(dcn_chat_get_name,dcn_chat_get_name)",
        "(dcn_msg_get_viewtype,dcn_msg_get_viewtype)",
        "(dcn_delete_contact,dcn_delete_contact)",
        "(dcn_lot_get_text1,dcn_lot_get_text1)",
        "(dcn_array_get_chat_id,dcn_array_get_chat_id)",
        "(dcn_msg_set_file,dcn_msg_set_file)",
        "(dcn_msg_latefiling_mediasize,dcn_msg_latefiling_mediasize)",
        "(dcn_contact_get_name_n_addr,dcn_contact_get_name_n_addr)",
        "(dcn_set_config,dcn_set_config)",
        "(dcn_provider_new_from_email,dcn_provider_new_from_email)",
        "(dcn_chatlist_get_summary2,dcn_chatlist_get_summary2)",
        "(dcn_array_get_marker,dcn_array_get_marker)",
        "(dcn_msg_get_videochat_type,dcn_msg_get_videochat_type)",
        "(dcn_chat_get_visibility,dcn_chat_get_visibility)",
        "(dcn_msg_get_setupcodebegin,dcn_msg_get_setupcodebegin)",
        "(dcn_get_chat_encrinfo,dcn_get_chat_encrinfo)",
        "(dcn_context_new_closed,dcn_context_new_closed)",
        "(dcn_imex,dcn_imex)",
        "(dcn_msg_is_info,dcn_msg_is_info)",
        "(dcn_msg_get_chat_id,dcn_msg_get_chat_id)",
        "(dcn_get_securejoin_qr_svg,dcn_get_securejoin_qr_svg)",
        "(dcn_msg_is_forwarded,dcn_msg_is_forwarded)",
        "(dcn_array_get_longitude,dcn_array_get_longitude)",
        "(dcn_msg_get_from_id,dcn_msg_get_from_id)",
        "(dcn_array_get_accuracy,dcn_array_get_accuracy)",
        "(dcn_contact_get_profile_image,dcn_contact_get_profile_image)",
        "(dcn_contact_is_verified,dcn_contact_is_verified)",
        "(dcn_get_contact,dcn_get_contact)",
        "(dcn_chat_is_protected,dcn_chat_is_protected)",
        "(dcn_msg_set_location,dcn_msg_set_location)",
        "(dcn_contact_get_name,dcn_contact_get_name)",
        "(dcn_initiate_key_transfer,dcn_initiate_key_transfer)",
        "(dcn_send_msg,dcn_send_msg)",
        "(dcn_msg_set_duration,dcn_msg_set_duration)",
        "(dcn_get_blobdir,dcn_get_blobdir)",
        "(dcn_lot_get_id,dcn_lot_get_id)",
        "(dcn_contact_get_addr,dcn_contact_get_addr)",
        "(dcn_accounts_get_account,dcn_accounts_get_account)",
        "(dcn_contact_get_last_seen,dcn_contact_get_last_seen)",
        "(dcn_msg_get_height,dcn_msg_get_height)",
        "(dcn_chat_get_profile_image,dcn_chat_get_profile_image)",
        "(dcn_accounts_select_account,dcn_accounts_select_account)",
        "(dcn_set_chat_profile_image,dcn_set_chat_profile_image)",
        "(dcn_array_get_msg_id,dcn_array_get_msg_id)",
        "(dcn_get_msg_cnt,dcn_get_msg_cnt)",
        "(dcn_contact_get_auth_name,dcn_contact_get_auth_name)",
        "(dcn_add_contact_to_chat,dcn_add_contact_to_chat)",
        "(dcn_msg_get_filemime,dcn_msg_get_filemime)",
        "(dcn_get_chatlist,dcn_get_chatlist)",
        "(dcn_msg_get_parent,dcn_msg_get_parent)",
        "(dcn_chat_can_send,dcn_chat_can_send)",
        "(dcn_is_configured,dcn_is_configured)",
        "(dcn_msg_get_override_sender_name,dcn_msg_get_override_sender_name)",
        "(dcn_msg_get_id,dcn_msg_get_id)",
        "(dcn_chat_get_id,dcn_chat_get_id)",
        "(dcn_get_locations,dcn_get_locations)",
        "(dcn_chat_get_type,dcn_chat_get_type)",
        "(dcn_set_config_null,dcn_set_config_null)",
        "(dcn_create_group_chat,dcn_create_group_chat)",
        "(dcn_get_chat_id_by_contact_id,dcn_get_chat_id_by_contact_id)",
        "(dcn_msg_force_plaintext,dcn_msg_force_plaintext)",
        "(dcn_context_is_open,dcn_context_is_open)",
        "(dcn_accounts_remove_account,dcn_accounts_remove_account)",
        "(dcn_get_msg_info,dcn_get_msg_info)",
        "(dcn_lot_get_timestamp,dcn_lot_get_timestamp)",
        "(dcn_set_config_from_qr,dcn_set_config_from_qr)",
        "(dcn_get_connectivity,dcn_get_connectivity)",
        "(dcn_get_chat,dcn_get_chat)",
        "(dcn_get_connectivity_html,dcn_get_connectivity_html)",
        "(dcn_msg_has_location,dcn_msg_has_location)",
        "(dcn_msg_set_html,dcn_msg_set_html)",
        "(dcn_msg_get_summarytext,dcn_msg_get_summarytext)",
        "(dcn_create_chat_by_contact_id,dcn_create_chat_by_contact_id)",
        "(dcn_array_get_cnt,dcn_array_get_cnt)",
        "(dcn_set_stock_translation,dcn_set_stock_translation)",
        "(dcn_msg_get_quoted_text,dcn_msg_get_quoted_text)",
        "(dcn_accounts_stop_io,dcn_accounts_stop_io)",
        "(dcn_msg_get_summary,dcn_msg_get_summary)",
        "(dcn_add_device_msg,dcn_add_device_msg)",
        "(dcn_create_contact,dcn_create_contact)",
        "(dcn_context_unref,dcn_context_unref)",
        "(dcn_msg_get_webxdc_blob,dcn_msg_get_webxdc_blob)",
        "(dcn_accounts_start_io,dcn_accounts_start_io)",
        "(dcn_context_new,dcn_context_new)",
        "(dcn_lot_get_text1_meaning,dcn_lot_get_text1_meaning)",
        "(dcn_lot_get_state,dcn_lot_get_state)",
        "(dcn_msg_is_increation,dcn_msg_is_increation)",
        "(dcn_block_contact,dcn_block_contact)",
        "(dcn_contact_get_id,dcn_contact_get_id)",
        "(dcn_provider_get_overview_page,dcn_provider_get_overview_page)",
        "(dcn_accounts_add_closed_account,dcn_accounts_add_closed_account)",
        "(dcn_send_videochat_invitation,dcn_send_videochat_invitation)",
        "(dcn_delete_msgs,dcn_delete_msgs)",
        "(dcn_get_msg_html,dcn_get_msg_html)",
        "(dcn_get_blocked_cnt,dcn_get_blocked_cnt)",
        "(dcn_get_fresh_msgs,dcn_get_fresh_msgs)",
        "(dcn_get_blocked_contacts,dcn_get_blocked_contacts)",
        "(dcn_maybe_valid_addr,dcn_maybe_valid_addr)",
        "(dcn_chat_is_self_talk,dcn_chat_is_self_talk)",
        "(dcn_msg_get_quoted_msg,dcn_msg_get_quoted_msg)",
        "(dcn_msg_new,dcn_msg_new)",
        "(dcn_set_chat_ephemeral_timer,dcn_set_chat_ephemeral_timer)",
        "(dcn_get_mime_headers,dcn_get_mime_headers)",
        "(dcn_msg_get_file,dcn_msg_get_file)",
        "(dcn_msg_get_showpadlock,dcn_msg_get_showpadlock)",
        "(dcn_accounts_get_selected_account,dcn_accounts_get_selected_account)",
        "(dcn_msg_is_setupmessage,dcn_msg_is_setupmessage)",
        "(dcn_get_chat_ephemeral_timer,dcn_get_chat_ephemeral_timer)",
        "(dcn_array_get_id,dcn_array_get_id)",
        "(dcn_was_device_msg_ever_added,dcn_was_device_msg_ever_added)",
        "(dcn_msg_get_filename,dcn_msg_get_filename)",
        "(dcn_check_qr,dcn_check_qr)",
        "(dcn_accept_chat,dcn_accept_chat)",
        "(dcn_set_location,dcn_set_location)",
        "(dcn_accounts_maybe_network,dcn_accounts_maybe_network)",
        "(dcn_msg_get_state,dcn_msg_get_state)",
        "(dcn_msg_set_quote,dcn_msg_set_quote)",
        "(dcn_stop_io,dcn_stop_io)",
        "(dcn_contact_get_color,dcn_contact_get_color)",
        "(dcn_accounts_get_all,dcn_accounts_get_all)",
        "(dcn_is_contact_in_chat,dcn_is_contact_in_chat)",
        "(dcn_get_chat_media,dcn_get_chat_media)",
        "(dcn_maybe_network,dcn_maybe_network)",
        "(dcn_array_get_contact_id,dcn_array_get_contact_id)",
        "(dcn_get_chat_msgs,dcn_get_chat_msgs)",
        "(dcn_provider_get_before_login_hint,dcn_provider_get_before_login_hint)",
        "(dcn_chat_is_contact_request,dcn_chat_is_contact_request)"
      ],
      "Charon": []
    },
    "@dennisameling/sharp-arm64-win-temp": {
      "Gasket": [
        "(counters,counters)",
        "(format,format)",
        "(pipeline,pipeline)",
        "(_maxColourDistance,_maxColourDistance)",
        "(libvipsVersion,libvipsVersion)",
        "(cache,cache)",
        "(stats,stats)",
        "(concurrency,concurrency)",
        "(simd,simd)",
        "(metadata,metadata)"
      ],
      "Charon": [
        "(metadata,metadata)",
        "(pipeline,pipeline)",
        "(cache,cache)",
        "(concurrency,concurrency)",
        "(counters,counters)",
        "(simd,simd)",
        "(libvipsVersion,libvipsVersion)",
        "(format,format)",
        "(_maxColourDistance,_maxColourDistance)",
        "(stats,stats)"
      ]
    },
    "deps-verdaccio": {
      "Gasket": [
        "(batch_write,batch_write)",
        "(iterator_next,iterator_next)",
        "(destroy_db,destroy_db)",
        "(repair_db,repair_db)",
        "(iterator_seek,iterator_seek)",
        "(db_get,db_get)",
        "(db_del,db_del)",
        "(db_compact_range,db_compact_range)",
        "(db_init,db_init)",
        "(db_close,db_close)",
        "(batch_do,batch_do)",
        "(batch_init,batch_init)",
        "(db_get_property,db_get_property)",
        "(iterator_end,iterator_end)",
        "(iterator_init,iterator_init)",
        "(batch_put,batch_put)",
        "(batch_clear,batch_clear)",
        "(batch_del,batch_del)",
        "(db_put,db_put)",
        "(db_open,db_open)",
        "(db_approximate_size,db_approximate_size)"
      ],
      "Charon": [
        "(fire,DTraceProbe)",
        "(addProbe,DTraceProvider)",
        "(removeProbe,DTraceProvider)",
        "(enable,DTraceProvider)",
        "(disable,DTraceProvider)",
        "(fire,DTraceProvider)"
      ]
    },
    "desktop-idle": {
      "Gasket": [
        "(getIdleTime,desktopIdleGetIdleTime)"
      ],
      "Charon": [
        "(getIdleTime,desktopIdleGetIdleTime)"
      ]
    },
    "desktop-idle-prebuild": {
      "Gasket": [
        "(getIdleTime,desktopIdleGetIdleTime)"
      ],
      "Charon": [
        "(getIdleTime,desktopIdleGetIdleTime)"
      ]
    },
    "desktop-idle-prebuilt": {
      "Gasket": [
        "(getIdleTime,desktopIdleGetIdleTime)"
      ],
      "Charon": [
        "(getIdleTime,desktopIdleGetIdleTime)"
      ]
    },
    "desktopshortcuts": {
      "Gasket": [
        "(registerShortcut,registerShortcut)",
        "(unregisterAllShortcuts,unregisterAllShortcuts)",
        "(unregisterShortcut,unregisterShortcut)",
        "(stop,stop)",
        "(macCheckAccessibilityGranted,macCheckAccessibilityGranted)",
        "(macUnsubscribeAccessibilityUpdates,macUnsubscribeAccessibilityUpdates)",
        "(macShowAccessibilitySettings,macShowAccessibilitySettings)",
        "(macSubscribeAccessibilityUpdates,macSubscribeAccessibilityUpdates)",
        "(start,start)"
      ],
      "Charon": []
    },
    "@desktop.vision/libnut-linux": {
      "Gasket": [
        "(typeStringDelayed,_typeStringDelayed)",
        "(getWindowRect,_getWindowRect)",
        "(highlight,_highlight)",
        "(getWindowTitle,_getWindowTitle)",
        "(setXDisplayName,_setXDisplayName)",
        "(getActiveWindow,_getActiveWindow)",
        "(getMousePos,_getMousePos)",
        "(typeString,_typeString)",
        "(theAnswer,_theAnswer)",
        "(mouseClick,_mouseClick)",
        "(setKeyboardDelay,_setKeyboardDelay)",
        "(scrollMouse,_scrollMouse)",
        "(dragMouse,_dragMouse)",
        "(captureScreen,_captureScreen)",
        "(setMouseDelay,_setMouseDelay)",
        "(getScreenSize,_getScreenSize)",
        "(getXDisplayName,_getXDisplayName)",
        "(keyToggle,_keyToggle)",
        "(keyTap,_keyTap)",
        "(mouseToggle,_mouseToggle)",
        "(getWindows,_getWindows)",
        "(moveMouse,_moveMouse)"
      ],
      "Charon": []
    },
    "detect-character-encoding": {
      "Gasket": [
        "(detect-character-encoding/build/Debug/icuWrapper,DetectCharacterEncoding)"
      ],
      "Charon": [
        "(1,status)",
        "(u[[:Zs:][\\\\u0009][:Bidi_Control:][:Variation_Selector:]],status)",
        "(u[[:Bidi_Control:]],status)",
        "(u[\u066c\u2018\\\\u0020\\\\u00A0\\\\u2000-\\\\u200A\\\\u202F\\\\u205F\\\\u3000],status)",
        "(u[\u221e],status)",
        "(u[:digit:],status)",
        "(2,length)",
        "(exports,DetectCharacterEncoding)",
        "(nullptr,status)",
        "(0,UnicodeSet)",
        "(u[:^S:],status)",
        "(0,status)",
        "(0x10000,UnicodeSet)",
        "(1,UnicodeSet)",
        "(1,n)",
        "(this,workingDescription)",
        "(this,foldSet)",
        "(0x39,CollationSettings)",
        "(0,data)",
        "(1,NFRuleSet)",
        "(this,UVector)",
        "(0,p)"
      ]
    },
    "detect-fullscreen": {
      "Gasket": [
        "(isFullscreen,isFullscreen)"
      ],
      "Charon": [
        "(isFullscreen,isFullscreen)"
      ]
    },
    "dev_fastlz": {
      "Gasket": [
        "(compressSync,CompressSync)"
      ],
      "Charon": [
        "(compressSync,CompressSync)"
      ]
    },
    "devlz": {
      "Gasket": [
        "(compressSync,Method)"
      ],
      "Charon": [
        "(compressSync,Method)",
        "(add,Add)"
      ]
    },
    "@dhruvit_r/pathwatcher": {
      "Gasket": [
        "(get,Get)",
        "(has,Has)",
        "(unwatch,Unwatch)",
        "(remove,Remove)",
        "(HandleMap,New)",
        "(setCallback,SetCallback)",
        "(values,Values)",
        "(clear,Clear)",
        "(add,Add)",
        "(watch,Watch)"
      ],
      "Charon": [
        "(setCallback,SetCallback)",
        "(watch,Watch)",
        "(unwatch,Unwatch)",
        "(0,handle)",
        "(add,Add)",
        "(get,Get)",
        "(has,Has)",
        "(values,Values)",
        "(remove,Remove)",
        "(clear,Clear)"
      ]
    },
    "diat-addon": {
      "Gasket": [
        "(addIncreaseHeapLimitHandler,AddIncreaseHeapLimitHandler)",
        "(removeIncreaseHeapLimitHandler,RemoveIncreaseHeapLimitHandler)"
      ],
      "Charon": [
        "(addIncreaseHeapLimitHandler,AddIncreaseHeapLimitHandler)",
        "(removeIncreaseHeapLimitHandler,RemoveIncreaseHeapLimitHandler)"
      ]
    },
    "dicom-dimse-native": {
      "Gasket": [
        "(shutdownScu,DoShutdown)",
        "(storeScu,DoStore)",
        "(moveScu,DoMove)",
        "(echoScu,DoEcho)",
        "(findScu,DoFind)",
        "(getScu,DoGet)",
        "(parseFile,DoParse)",
        "(recompress,DoCompress)",
        "(startScp,StartScp)"
      ],
      "Charon": []
    },
    "dicom-to-json": {
      "Gasket": [
        "(dcm2xml,dcm2xml)",
        "(dcm2json,dcm2json)"
      ],
      "Charon": []
    },
    "discord-game": {
      "Gasket": [
        "(getOAuth2Token,GetOAuth2Token)",
        "(update,UpdateActivity)",
        "(runCallback,RunCallback)",
        "(create,Create)"
      ],
      "Charon": []
    },
    "@discordjs/opus": {
      "Gasket": [
        "(decode,Decode)",
        "(getBitrate,GetBitrate)",
        "(encode,Encode)",
        "(setBitrate,SetBitrate)",
        "(applyEncoderCTL,ApplyEncoderCTL)",
        "(OpusEncoder,OpusEncoder)",
        "(applyDecoderCTL,ApplyDecoderCTL)"
      ],
      "Charon": [
        "(setBitrate,OpusEncoder)"
      ]
    },
    "diskfree": {
      "Gasket": [
        "(isErrDenied,nodeIsErrDenied)",
        "(isErrIO,nodeIsErrIO)",
        "(check,DiskSpace)",
        "(isErrBadPath,nodeIsErrBadPath)"
      ],
      "Charon": [
        "(check,DiskSpace)",
        "(isErrDenied,nodeIsErrDenied)",
        "(isErrBadPath,nodeIsErrBadPath)",
        "(isErrIO,nodeIsErrIO)"
      ]
    },
    "disk-tool": {
      "Gasket": [
        "(info,DiskInfo)"
      ],
      "Charon": [
        "(info,DiskInfo)"
      ]
    },
    "diskusage": {
      "Gasket": [
        "(getDiskUsage,GetDiskUsage)"
      ],
      "Charon": [
        "(getDiskUsage,GetDiskUsage)"
      ]
    },
    "displays": {
      "Gasket": [
        "(get,GetDisplays)"
      ],
      "Charon": [
        "(height,DisplayImpl)",
        "(width,DisplayImpl)",
        "(left,DisplayImpl)",
        "(top,DisplayImpl)",
        "(get,GetDisplays)"
      ]
    },
    "@div_arora/libpg-query": {
      "Gasket": [
        "(parsePlPgSQLSync,ParsePlPgSQLSync)",
        "(parseQueryAsync,ParseQueryAsync)",
        "(fingerprintSync,FingerprintSync)",
        "(fingerprintAsync,FingerprintAsync)",
        "(parsePlPgSQLAsync,ParsePlPgSQLAsync)",
        "(parseQuerySync,ParseQuerySync)"
      ],
      "Charon": [
        "(parseQuery,Method)",
        "(parseQueryAsync,MethodAsync)",
        "(parsePlPgSQL,MethodPlPgSQL)",
        "(parsePlPgSQLAsync,MethodPlPgSQLAsync)",
        "(lineNumber,Value)",
        "(cursorPosition,Value)",
        "(context,Value)",
        "(message,String)",
        "(fileName,String)",
        "(functionName,String)",
        "(lineNumber,Integer)",
        "(cursorPosition,Integer)",
        "(context,String)",
        "(stderr,String)",
        "(parseQuerySync,ParseQuerySync)",
        "(parseQueryAsync,ParseQueryAsync)",
        "(parsePlPgSQLSync,ParsePlPgSQLSync)",
        "(parsePlPgSQLAsync,ParsePlPgSQLAsync)",
        "(fingerprintSync,FingerprintSync)",
        "(fingerprintAsync,FingerprintAsync)"
      ]
    },
    "@divy-work/native-utils": {
      "Gasket": [
        "(getClipboardText,Get)",
        "(xor8Hash,xor8)",
        "(sdbmHash,sdbm)",
        "(write,WriteFile)",
        "(host,HostName)",
        "(find,Find)",
        "(minus,Minus)",
        "(ip,IPInfo)",
        "(copyToClipboard,Copy)",
        "(djb2Hash,djb2)",
        "(crc32Hash,crc32)",
        "(read,ReadFile)",
        "(probability,Probability)",
        "(add,Add)",
        "(adler32Hash,adler_32)"
      ],
      "Charon": [
        "(host,HostName)",
        "(ip,IPInfo)",
        "(add,Add)",
        "(minus,Minus)",
        "(find,Find)",
        "(probability,Probability)",
        "(copyToClipboard,Copy)",
        "(getClipboardText,Get)",
        "(sdbmHash,sdbm)",
        "(djb2Hash,djb2)",
        "(xor8Hash,xor8)",
        "(adler32Hash,adler_32)",
        "(crc32Hash,crc32)",
        "(write,WriteFile)",
        "(read,ReadFile)",
        "(17,hmem)"
      ]
    },
    "@divy-work/spin-cc": {
      "Gasket": [
        "(stop,Stop)",
        "(start,Start)"
      ],
      "Charon": [
        "(stop,Stop)",
        "(start,Start)"
      ]
    },
    "@dooub/rocksdb-nodejs": {
      "Gasket": [
        "(iterator_next,iterator_next)",
        "(destroy_db,destroy_db)",
        "(db_close,db_close)",
        "(batch_put_with_column_families,batch_put_with_column_families)",
        "(db_init,db_init)",
        "(iterator_end,iterator_end)",
        "(repair_db,repair_db)",
        "(db_approximate_size,db_approximate_size)",
        "(iterator_seek,iterator_seek)",
        "(iterator_init,iterator_init)",
        "(db_open,db_open)",
        "(batch_write,batch_write)",
        "(batch_init,batch_init)",
        "(batch_do,batch_do)",
        "(db_put,db_put)",
        "(batch_clear,batch_clear)",
        "(db_drop_column_family,db_drop_column_family)",
        "(db_del,db_del)",
        "(batch_del_with_column_families,batch_del_with_column_families)",
        "(db_get_with_column_families,db_get_with_column_families)",
        "(batch_put,batch_put)",
        "(db_del_with_column_families,db_del_with_column_families)",
        "(db_create_column_family,db_create_column_family)",
        "(db_compact_range,db_compact_range)",
        "(db_get_property,db_get_property)",
        "(db_get,db_get)",
        "(batch_del,batch_del)",
        "(db_put_with_column_families,db_put_with_column_families)"
      ],
      "Charon": []
    },
    "dotnode-js": {
      "Gasket": [
        "(shutdown,shutdownDotnode)",
        "(initialize,initializeDotnode)",
        "(invokeMethod,callFunction)",
        "(isInitialized,isInitialized)"
      ],
      "Charon": [
        "(initialize,initializeDotnode)",
        "(isInitialized,isInitialized)",
        "(invokeMethod,callFunction)",
        "(shutdown,shutdownDotnode)"
      ]
    },
    "drivelist": {
      "Gasket": [
        "(list,List)"
      ],
      "Charon": [
        "(enumerator,String)",
        "(busType,String)",
        "(device,String)",
        "(raw,String)",
        "(description,String)",
        "(partitionTableType,String)",
        "(error,String)",
        "(size,Number)",
        "(blockSize,Number)",
        "(logicalBlockSize,Number)",
        "(path,String)",
        "(label,String)",
        "(isReadOnly,Boolean)",
        "(isSystem,Boolean)",
        "(isVirtual,Boolean)",
        "(isRemovable,Boolean)",
        "(isCard,Boolean)",
        "(isSCSI,Boolean)",
        "(isUSB,Boolean)",
        "(list,List)"
      ]
    },
    "drive-name": {
      "Gasket": [
        "(getDriveName,getDriveNameWrapped)"
      ],
      "Charon": [
        "(getDriveName,getDriveNameWrapped)"
      ]
    },
    "@drorgl/talib": {
      "Gasket": [
        "(execute,Execute)",
        "(setUnstablePeriod,SetUnstablePeriod)",
        "(explain,Explain)"
      ],
      "Charon": [
        "(functions,Functions)",
        "(functionUnstIds,FunctionUnstIds)",
        "(explain,Explain)",
        "(execute,Execute)",
        "(setUnstablePeriod,SetUnstablePeriod)"
      ]
    },
    "dualshock": {
      "Gasket": [
        "(sbcEncode,sbcEncode)",
        "(sbcDecode,sbcDecode)"
      ],
      "Charon": [
        "(sbcEncode,sbcEncode)",
        "(sbcDecode,sbcDecode)"
      ]
    },
    "@duck4i/llama": {
      "Gasket": [
        "(ReleaseModelAsync,ReleaseModelAsync)",
        "(GetModelToken,GetModelToken)",
        "(ReleaseContextAsync,ReleaseContextAsync)",
        "(SetLogLevel,SetLogLevel)",
        "(LoadModelAsync,LoadModelAsync)",
        "(RunInference,RunInference)",
        "(CreateContextAsync,CreateContextAsync)",
        "(RunInferenceAsync,RunInferenceAsync)"
      ],
      "Charon": []
    },
    "duckdb": {
      "Gasket": [
        "(QueryResult,QueryResult)",
        "(close_internal,Close)",
        "(finalize,Finish)",
        "(close,Close)",
        "(serialize,Serialize)",
        "(all,All)",
        "(Database,Database)",
        "(parallelize,Parallelize)",
        "(each,Each)",
        "(stream,Stream)",
        "(interrupt,Interrupt)",
        "(registerReplacementScan,RegisterReplacementScan)",
        "(nextChunk,NextChunk)",
        "(connect,Connect)",
        "(prepare,Prepare)",
        "(register_buffer,RegisterBuffer)",
        "(unregister_buffer,UnRegisterBuffer)",
        "(Statement,Statement)",
        "(tokenize,Tokenize)",
        "(wait,Wait)",
        "(run,Run)",
        "(Connection,Connection)",
        "(exec,Exec)",
        "(register_udf_bulk,RegisterUdf)",
        "(columns,Columns)",
        "(nextIpcBuffer,NextIpcBuffer)",
        "(unregister_udf,UnregisterUdf)",
        "(arrowIPCAll,ArrowIPCAll)"
      ],
      "Charon": []
    },
    "dumpme": {
      "Gasket": [
        "(dumpProcess,dumpProcess)"
      ],
      "Charon": [
        "(dumpProcess,dumpProcess)"
      ]
    },
    "dvbtee": {
      "Gasket": [
        "(getDescriptorDecoderIds,getDescriptorDecoderIds)",
        "(Parser,New)",
        "(getTableDecoderIds,getTableDecoderIds)",
        "(logLevel,logLevel)",
        "(libVersion,libVersion)",
        "(enableParseISO6937,enableParseISO6937)",
        "(feed,feed)",
        "(reset,reset)",
        "(enableEttCollection,enableEttCollection)"
      ],
      "Charon": [
        "(reset,reset)",
        "(feed,feed)",
        "(enableEttCollection,enableEttCollection)",
        "(enableParseISO6937,enableParseISO6937)",
        "(logLevel,logLevel)",
        "(libVersion,libVersion)",
        "(getTableDecoderIds,getTableDecoderIds)",
        "(getDescriptorDecoderIds,getDescriptorDecoderIds)"
      ]
    },
    "dylib": {
      "Gasket": [
        "(call,call)",
        "(DYLIB,New)"
      ],
      "Charon": []
    },
    "easybotics-rpi-rgb-led-matrix": {
      "Gasket": [
        "(clear,Clear)",
        "(scroll,Scroll)",
        "(getWidth,GetWidth)",
        "(brightness,Brightness)",
        "(drawLine,DrawLine)",
        "(draw,Draw)",
        "(update,Update)",
        "(setImageBuffer,SetImageBuffer)",
        "(fill,Fill)",
        "(drawCircle,DrawCircle)",
        "(setPixel,SetPixel)",
        "(LedMatrix,New)",
        "(getHeight,GetHeight)",
        "(drawText,DrawText)"
      ],
      "Charon": [
        "(getWidth,GetWidth)",
        "(getHeight,GetHeight)",
        "(setPixel,SetPixel)",
        "(clear,Clear)",
        "(fill,Fill)",
        "(setImageBuffer,SetImageBuffer)",
        "(draw,Draw)",
        "(scroll,Scroll)",
        "(update,Update)",
        "(drawText,DrawText)",
        "(drawCircle,DrawCircle)",
        "(drawLine,DrawLine)",
        "(brightness,Brightness)"
      ]
    },
    "easy-sleep": {
      "Gasket": [
        "(usleep,usleepFn)"
      ],
      "Charon": []
    },
    "eboxprinter": {
      "Gasket": [
        "(print,Print)",
        "(add,Add)"
      ],
      "Charon": [
        "(add,Add)",
        "(print,Print)"
      ]
    },
    "@ecervo/canvas": {
      "Gasket": [
        "(streamPNGSync,StreamPNGSync)",
        "(PdfBackend,New)",
        "(toBuffer,ToBuffer)",
        "(drawImage,DrawImage)",
        "(rotate,Rotate)",
        "(setTransform,SetTransform)",
        "(ImageBackend,New)",
        "(lineTo,LineTo)",
        "(closePath,ClosePath)",
        "(arc,Arc)",
        "(CanvasPattern,New)",
        "(arcTo,ArcTo)",
        "(ellipse,Ellipse)",
        "(streamPDFSync,StreamPDFSync)",
        "(streamJPEGSync,StreamJPEGSync)",
        "(isPointInPath,IsPointInPath)",
        "(_deregisterAllFonts,DeregisterAllFonts)",
        "(beginPath,BeginPath)",
        "(clip,Clip)",
        "(CanvasRenderingContext2d,New)",
        "(fillText,FillText)",
        "(strokeText,StrokeText)",
        "(strokeRect,StrokeRect)",
        "(fillRect,FillRect)",
        "(Image,New)",
        "(rect,Rect)",
        "(createPattern,CreatePattern)",
        "(CanvasGradient,New)",
        "(SvgBackend,New)",
        "(createImageData,CreateImageData)",
        "(getImageData,GetImageData)",
        "(bezierCurveTo,BezierCurveTo)",
        "(restore,Restore)",
        "(createLinearGradient,CreateLinearGradient)",
        "(CanvasRenderingContext2dInit,SaveExternalModules)",
        "(_registerFont,RegisterFont)",
        "(CanvasPatternInit,SaveExternalModules)",
        "(transform,Transform)",
        "(putImageData,PutImageData)",
        "(roundRect,RoundRect)",
        "(fill,Fill)",
        "(resetTransform,ResetTransform)",
        "(ImageData,New)",
        "(scale,Scale)",
        "(clearRect,ClearRect)",
        "(quadraticCurveTo,QuadraticCurveTo)",
        "(Canvas,New)",
        "(addColorStop,AddColorStop)",
        "(addPage,AddPage)",
        "(createRadialGradient,CreateRadialGradient)",
        "(GetSource,GetSource)",
        "(moveTo,MoveTo)",
        "(translate,Translate)",
        "(getTransform,GetTransform)",
        "(measureText,MeasureText)",
        "(save,Save)",
        "(SetSource,SetSource)",
        "(stroke,Stroke)",
        "(setLineDash,SetLineDash)",
        "(getLineDash,GetLineDash)"
      ],
      "Charon": []
    },
    "ed25519": {
      "Gasket": [
        "(Verify,Verify)",
        "(MakeKeypair,MakeKeypair)",
        "(Sign,Sign)"
      ],
      "Charon": [
        "(MakeKeypair,MakeKeypair)",
        "(Sign,Sign)",
        "(Verify,Verify)"
      ]
    },
    "ed25519-supercop": {
      "Gasket": [
        "(node_supercop_sign,node_supercop_sign)",
        "(node_supercop_create_seed,node_supercop_create_seed)",
        "(node_supercop_verify,node_supercop_verify)",
        "(node_supercop_create_key_pair,node_supercop_create_key_pair)"
      ],
      "Charon": []
    },
    "efsw": {
      "Gasket": [
        "(stop,Stop)",
        "(EFSWCore,New)",
        "(start,Start)"
      ],
      "Charon": [
        "(start,Start)",
        "(stop,Stop)"
      ]
    },
    "eiows": {
      "Gasket": [
        "(getSSLContext,getSSLContext)",
        "(transfer,transfer)",
        "(onDisconnection,onDisconnection)",
        "(create,createGroup)",
        "(close,closeSocket)",
        "(close,closeGroup)",
        "(onConnection,onConnection)",
        "(setNoop,setNoop)",
        "(send,send)",
        "(clearUserData,clearUserData)",
        "(setUserData,setUserData)",
        "(onMessage,onMessage)",
        "(upgrade,upgrade)",
        "(getAddress,getAddress)"
      ],
      "Charon": [
        "(send,send)",
        "(close,closeSocket)",
        "(onConnection,onConnection)",
        "(onMessage,onMessage)",
        "(onDisconnection,onDisconnection)",
        "(create,createGroup)",
        "(close,closeGroup)",
        "(getSSLContext,getSSLContext)",
        "(setUserData,setUserData)",
        "(clearUserData,clearUserData)",
        "(getAddress,getAddress)",
        "(transfer,transfer)",
        "(upgrade,upgrade)",
        "(setNoop,setNoop)"
      ]
    },
    "@elchetz/cld": {
      "Gasket": [
        "(detect,Detect)",
        "(detectAsync,DetectAsync)"
      ],
      "Charon": []
    },
    "ele-500-sql3": {
      "Gasket": [
        "(step,Step)",
        "(close,Close)",
        "(serialize,Serialize)",
        "(bind,Bind)",
        "(all,All)",
        "(loadExtension,LoadExtension)",
        "(parallelize,Parallelize)",
        "(finalize,Finalize)",
        "(each,Each)",
        "(reset,Reset)",
        "(Database,New)",
        "(interrupt,Interrupt)",
        "(get,Get)",
        "(configure,Configure)",
        "(Statement,New)",
        "(wait,Wait)",
        "(run,Run)",
        "(exec,Exec)",
        "(finish,Finish)",
        "(Backup,New)"
      ],
      "Charon": [
        "(close,Close)",
        "(exec,Exec)",
        "(wait,Wait)",
        "(loadExtension,LoadExtension)",
        "(serialize,Serialize)",
        "(parallelize,Parallelize)",
        "(configure,Configure)",
        "(interrupt,Interrupt)",
        "(open,OpenGetter)",
        "(bind,Bind)",
        "(get,Get)",
        "(run,Run)",
        "(all,All)",
        "(each,Each)",
        "(reset,Reset)",
        "(finalize,Finalize)",
        "(step,Step)",
        "(finish,Finish)",
        "(idle,IdleGetter)",
        "(completed,CompletedGetter)",
        "(failed,FailedGetter)",
        "(remaining,RemainingGetter)",
        "(pageCount,PageCountGetter)"
      ]
    },
    "ele6-sqlite3": {
      "Gasket": [
        "(step,Step)",
        "(close,Close)",
        "(serialize,Serialize)",
        "(bind,Bind)",
        "(all,All)",
        "(loadExtension,LoadExtension)",
        "(parallelize,Parallelize)",
        "(finalize,Finalize)",
        "(each,Each)",
        "(reset,Reset)",
        "(Database,New)",
        "(interrupt,Interrupt)",
        "(get,Get)",
        "(configure,Configure)",
        "(Statement,New)",
        "(wait,Wait)",
        "(run,Run)",
        "(exec,Exec)",
        "(finish,Finish)",
        "(Backup,New)"
      ],
      "Charon": [
        "(close,Close)",
        "(exec,Exec)",
        "(wait,Wait)",
        "(loadExtension,LoadExtension)",
        "(serialize,Serialize)",
        "(parallelize,Parallelize)",
        "(configure,Configure)",
        "(interrupt,Interrupt)",
        "(open,OpenGetter)",
        "(step,Step)",
        "(finish,Finish)",
        "(idle,IdleGetter)",
        "(completed,CompletedGetter)",
        "(failed,FailedGetter)",
        "(remaining,RemainingGetter)",
        "(pageCount,PageCountGetter)",
        "(bind,Bind)",
        "(get,Get)",
        "(run,Run)",
        "(all,All)",
        "(each,Each)",
        "(reset,Reset)",
        "(finalize,Finalize)"
      ]
    },
    "@eleccookie/ref-napi": {
      "Gasket": [
        "(_reinterpretUntilZeros,ReinterpretBufferUntilZeros)",
        "(isNull,IsNull)",
        "(readCString,ReadCString)",
        "(writeInt32,WriteInt32)",
        "(readUInt64,ReadUInt64)",
        "(readInt32,ReadInt32)",
        "(readPointer,ReadPointer)",
        "(readExternalArrayBuffer,ReadExternalArrayBuffer)",
        "(_reinterpret,ReinterpretBuffer)",
        "(_writeObject,WriteObject)",
        "(readObject,ReadObject)",
        "(address,Address)",
        "(hexAddress,HexAddress)",
        "(toString,ToString)",
        "(_writePointer,WritePointer)",
        "(get,Get)",
        "(writeUInt64,WriteUInt64)",
        "(PointerBuffer,PointerBuffer)",
        "(isAddress,IsAddress)",
        "(writeInt64,WriteInt64)",
        "(readInt64,ReadInt64)"
      ],
      "Charon": []
    },
    "electron-active-window": {
      "Gasket": [
        "(getActiveWindow,getActiveWindowWrapped)"
      ],
      "Charon": []
    },
    "electron-application-desktop-toolbar": {
      "Gasket": [
        "(unregister,Unregister)",
        "(register,Register)",
        "(dock,Dock)"
      ],
      "Charon": [
        "(register,Register)",
        "(unregister,Unregister)",
        "(dock,Dock)"
      ]
    },
    "electron-clipboard-files": {
      "Gasket": [
        "(readFiles,readFiles)"
      ],
      "Charon": [
        "(readFiles,readFiles)"
      ]
    },
    "electron-disable-minimize": {
      "Gasket": [
        "(DisableMinimize,DisableMinimize)"
      ],
      "Charon": [
        "(DisableMinimize,DisableMinimize)"
      ]
    },
    "electron-diskusage": {
      "Gasket": [
        "(getDiskUsage,GetDiskUsage)"
      ],
      "Charon": [
        "(getDiskUsage,GetDiskUsage)"
      ]
    },
    "electron-drivelist": {
      "Gasket": [
        "(list,list)"
      ],
      "Charon": [
        "(list,list)"
      ]
    },
    "electron-fsdes": {
      "Gasket": [
        "(readFile,ReadWrapper)",
        "(writeFile,WriteWrapper)"
      ],
      "Charon": [
        "(readFile,ReadWrapper)",
        "(writeFile,WriteWrapper)"
      ]
    },
    "electron-overlay-window": {
      "Gasket": [
        "(start,AddonStart)",
        "(screenshot,AddonScreenshot)",
        "(focusTarget,AddonFocusTarget)",
        "(activateOverlay,AddonActivateOverlay)"
      ],
      "Charon": []
    },
    "@electron-prebuilds-preview/parcel-watcher": {
      "Gasket": [
        "(unsubscribe,unsubscribe)",
        "(getEventsSince,getEventsSince)",
        "(writeSnapshot,writeSnapshot)",
        "(subscribe,subscribe)"
      ],
      "Charon": [
        "(path,String)",
        "(type,String)",
        "(writeSnapshot,writeSnapshot)",
        "(getEventsSince,getEventsSince)",
        "(subscribe,subscribe)",
        "(unsubscribe,unsubscribe)"
      ]
    },
    "elios-protocol": {
      "Gasket": [
        "(createConnection,CreateConnection)"
      ],
      "Charon": [
        "(createConnection,CreateConnection)"
      ]
    },
    "embeddable-wg": {
      "Gasket": [
        "(listDeviceNames,list_device_names)",
        "(removeDevice,remove_device)",
        "(generatePresharedKey,generate_preshared_key)",
        "(setDevice,set_device)",
        "(generatePublicKey,generate_public_key)",
        "(generatePrivateKey,generate_private_key)",
        "(getInterfaceAddress,get_interface_address)",
        "(getDevice,get_device)",
        "(setInterfaceAddress,set_interface_address)",
        "(addDevice,add_device)"
      ],
      "Charon": []
    },
    "ems": {
      "Gasket": [
        "(criticalEnter,NodeJScriticalEnter)",
        "(loopChunk,NodeJSloopChunk)",
        "(loopInit,NodeJSloopInit)",
        "(barrier,NodeJSbarrier)",
        "(initialize,NodeJSinitialize)",
        "(criticalExit,NodeJScriticalExit)",
        "(singleTask,NodeJSsingleTask)"
      ],
      "Charon": [
        "(data,String)",
        "(start,Value)",
        "(end,Value)",
        "(mmapID,Value)"
      ]
    },
    "enhanced_promise": {
      "Gasket": [
        "(CPPModule,runloop)"
      ],
      "Charon": []
    },
    "enigmawrap": {
      "Gasket": [
        "(AuthUser,AuthUserJS)",
        "(GetSerialNumber,GetSerialNumberJS)",
        "(ChangeUserPassword,ChangeUserPasswordJS)",
        "(ClearToken,ClearTokenJS)",
        "(WriteData,WriteDataJS)",
        "(VerifySignData,VerifySignDataJS)",
        "(ProcessRequest,ProcessRequestJS)",
        "(DeAuthUser,DeAuthUserJS)",
        "(SignData,SignDataJS)",
        "(ReadData,ReadDataJS)",
        "(GenPrivateKeyEnigma,GenPrivateKeyEnigmaJS)"
      ],
      "Charon": [
        "(GetSerialNumber,GetSerialNumberJS)",
        "(GenPrivateKeyEnigma,GenPrivateKeyEnigmaJS)",
        "(ChangeUserPassword,ChangeUserPasswordJS)",
        "(WriteData,WriteDataJS)",
        "(ReadData,ReadDataJS)",
        "(ClearToken,ClearTokenJS)",
        "(AuthUser,AuthUserJS)",
        "(DeAuthUser,DeAuthUserJS)",
        "(SignData,SignDataJS)",
        "(VerifySignData,VerifySignDataJS)",
        "(ProcessRequest,ProcessRequestJS)"
      ]
    },
    "@eosrio/node-abieos": {
      "Gasket": [
        "(load_abi_hex,LoadAbiHexWrapped)",
        "(load_abi,LoadAbiWrapped)",
        "(string_to_name,StringToNameWrapped)",
        "(json_to_hex,JsonToHexWrapped)",
        "(delete_contract,DeleteContractWrapped)",
        "(get_type_for_table,GetTableTypeWrapped)",
        "(hex_to_json,HexToJsonWrapped)",
        "(bin_to_json,BinToJsonWrapped)",
        "(get_type_for_action,GetTypeWrapped)"
      ],
      "Charon": []
    },
    "@epaperjs/rpi-2in13-bc": {
      "Gasket": [
        "(dev_init,DEV_Init)",
        "(clear,Clear)",
        "(sleep,Sleep)",
        "(dev_exit,DEV_Exit)",
        "(display,Display)",
        "(init,Init)"
      ],
      "Charon": []
    },
    "@episensor/bluetooth-hci-socket": {
      "Gasket": [
        "(BluetoothHciSocket,New)",
        "(bindRaw,BindRaw)",
        "(start,Start)",
        "(getDeviceList,GetDeviceList)",
        "(stop,Stop)",
        "(close,CloseSocket)",
        "(setFilter,SetFilter)",
        "(write,Write)",
        "(isDevUp,IsDevUp)",
        "(bindUser,BindUser)",
        "(bindControl,BindControl)",
        "(open,OpenSocket)"
      ],
      "Charon": []
    },
    "epoll": {
      "Gasket": [
        "(modify,Modify)",
        "(close,Close)",
        "(remove,Remove)",
        "(add,Add)",
        "(Epoll,New)"
      ],
      "Charon": []
    },
    "equate": {
      "Gasket": [
        "(_isMatch,is_match)"
      ],
      "Charon": []
    },
    "@ericvanwyk/tree-sitter-oberon0": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "eris-profiler": {
      "Gasket": [
        "(stop,Stop)",
        "(start,Start)"
      ],
      "Charon": []
    },
    "eris-sleep": {
      "Gasket": [
        "(sleep,Method)"
      ],
      "Charon": []
    },
    "eris-snapshot": {
      "Gasket": [
        "(snapshot,Method)"
      ],
      "Charon": []
    },
    "erlpack": {
      "Gasket": [
        "(unpack,Unpack)",
        "(pack,Pack)"
      ],
      "Charon": [
        "(pack,Pack)",
        "(unpack,Unpack)"
      ]
    },
    "@esfx/equatable": {
      "Gasket": [
        "(hashNumber,HashNumber)",
        "(hashString,HashName)",
        "(hashBigInt,HashBigInt)",
        "(hashSymbol,HashName)",
        "(hashObject,HashObject)"
      ],
      "Charon": [
        "(hashBigInt,HashBigInt)",
        "(hashNumber,HashNumber)",
        "(hashString,HashName)",
        "(hashSymbol,HashName)",
        "(hashObject,HashObject)"
      ]
    },
    "espresso-logic-minimizer": {
      "Gasket": [
        "(minimize_from_path,minimize_from_path)",
        "(minimize_from_data,minimize_from_data)"
      ],
      "Charon": [
        "(minimize_from_data,minimize_from_data)",
        "(minimize_from_path,minimize_from_path)"
      ]
    },
    "essy-fft": {
      "Gasket": [
        "(ifft,ifft)",
        "(rfft,rfft)"
      ],
      "Charon": []
    },
    "essy-nnls": {
      "Gasket": [
        "(NNLS,NNLS)"
      ],
      "Charon": []
    },
    "@eth-optimism/ganache-cli": {
      "Gasket": [
        "(publicKeyCreate,PublicKeyCreate)",
        "(publicKeyTweakAdd,PublicKeyTweakAdd)",
        "(signatureNormalize,SignatureNormalize)",
        "(Secp256k1,Secp256k1Addon)",
        "(privateKeyNegate,PrivateKeyNegate)",
        "(squeeze,Squeeze)",
        "(publicKeyVerify,PublicKeyVerify)",
        "(ecdh,ECDH)",
        "(ecdsaRecover,ECDSARecover)",
        "(publicKeyTweakMul,PublicKeyTweakMul)",
        "(ecdsaSign,ECDSASign)",
        "(initialize,Initialize)",
        "(signatureExport,SignatureExport)",
        "(absorbLastFewBits,AbsorbLastFewBits)",
        "(privateKeyVerify,PrivateKeyVerify)",
        "(signatureImport,SignatureImport)",
        "(contextRandomize,ContextRandomize)",
        "(privateKeyTweakAdd,PrivateKeyTweakAdd)",
        "(copy,Copy)",
        "(publicKeyCombine,PublicKeyCombine)",
        "(publicKeyConvert,PublicKeyConvert)",
        "(publicKeyNegate,PublicKeyNegate)",
        "(ecdsaVerify,ECDSAVerify)",
        "(privateKeyTweakMul,PrivateKeyTweakMul)",
        "(glibc,KeccakWrapper)",
        "(absorb,Absorb)"
      ],
      "Charon": [
        "(Secp256k1,Secp256k1Addon)"
      ]
    },
    "@eugenepankov/system-idle-time": {
      "Gasket": [
        "(getIdleTime,GetIdleTime)"
      ],
      "Charon": [
        "(getIdleTime,GetIdleTime)"
      ]
    },
    "evdev": {
      "Gasket": [
        "(evdev_new_from_fd,EvdevNewFromFd)"
      ],
      "Charon": []
    },
    "event-loop-native": {
      "Gasket": [
        "(getEventLoopAddress,getEventLoopAddress)"
      ],
      "Charon": []
    },
    "event-loop-stats": {
      "Gasket": [
        "(sense,sense)"
      ],
      "Charon": [
        "(sense,sense)"
      ]
    },
    "@evolvingriley/file-upload": {
      "Gasket": [
        "(upload,process_and_upload_js)",
        "(mkdir_and_download_files,mkdir_and_download_all_images_from_s3)"
      ],
      "Charon": []
    },
    "exclusive-keyboard": {
      "Gasket": [
        "(eviocgrab,Eviocgrab)"
      ],
      "Charon": [
        "(eviocgrab,Eviocgrab)"
      ]
    },
    "fadvise": {
      "Gasket": [
        "(posix_fadvise,posix_fadvise)"
      ],
      "Charon": [
        "(posix_fadvise,posix_fadvise)"
      ]
    },
    "faiss-napi": {
      "Gasket": [
        "(getIndexType,getIndexType)",
        "(fromFactory,fromFactory)",
        "(getCodeSize,getCodeSize)",
        "(getEfConstruction,getEfConstruction)",
        "(getCodesUInt8,getCodesUInt8)",
        "(write,write)",
        "(train,train)",
        "(addWithIds,addWithIds)",
        "(reconstructBatch,reconstructBatch)",
        "(toBuffer,toBuffer)",
        "(Index,Index)",
        "(getNProbe,getNProbe)",
        "(IndexHNSW,IndexHNSW)",
        "(toIDMap2,toIDMap2)",
        "(read,read)",
        "(getEfSearch,getEfSearch)",
        "(fromBuffer,fromBuffer)",
        "(mergeFrom,mergeFrom)",
        "(setEfSearch,setEfSearch)",
        "(getCodesByRange,getCodesByRange)",
        "(IndexFlatL2,IndexFlatL2)",
        "(getNTotal,getNTotal)",
        "(getMetricArg,getMetricArg)",
        "(removeIds,removeIds)",
        "(getDimension,getDimension)",
        "(dispose,dispose)",
        "(reconstruct,reconstruct)",
        "(IndexIVFFlat,IndexIVFFlat)",
        "(add,add)",
        "(setEfConstruction,setEfConstruction)",
        "(setCodesByRange,setCodesByRange)",
        "(getMetricType,getMetricType)",
        "(IndexFlatIP,IndexFlatIP)",
        "(reset,reset)",
        "(getIds,getIds)",
        "(mergeOnDisk,mergeOnDisk)",
        "(search,search)",
        "(setNProbe,setNProbe)",
        "(getIsTrained,getIsTrained)"
      ],
      "Charon": []
    },
    "faiss-node": {
      "Gasket": [
        "(add,add)",
        "(IndexFlatIP,IndexFlatIP)",
        "(train,train)",
        "(getDimension,getDimension)",
        "(search,search)",
        "(mergeFrom,mergeFrom)",
        "(removeIds,removeIds)",
        "(fromBuffer,fromBuffer)",
        "(isTrained,isTrained)",
        "(IndexFlatL2,IndexFlatL2)",
        "(ntotal,ntotal)",
        "(toBuffer,toBuffer)",
        "(Index,Index)",
        "(fromFactory,fromFactory)",
        "(write,write)",
        "(read,read)"
      ],
      "Charon": []
    },
    "@faressoft/node-pty-prebuilt": {
      "Gasket": [
        "(open,PtyOpen)",
        "(resize,PtyResize)",
        "(fork,PtyFork)",
        "(process,PtyGetProc)"
      ],
      "Charon": []
    },
    "farmhash": {
      "Gasket": [
        "(Hash32WithSeedString,Hash32WithSeedString)",
        "(Fingerprint32Buffer,Fingerprint32Buffer)",
        "(Hash64Buffer,Hash64Buffer)",
        "(Hash64String,Hash64String)",
        "(Fingerprint32String,Fingerprint32String)",
        "(Hash64WithSeedBuffer,Hash64WithSeedBuffer)",
        "(Hash32WithSeedBuffer,Hash32WithSeedBuffer)",
        "(Hash32Buffer,Hash32Buffer)",
        "(Hash32String,Hash32String)",
        "(Hash64WithSeedString,Hash64WithSeedString)",
        "(Hash64WithSeedsBuffer,Hash64WithSeedsBuffer)",
        "(Fingerprint64String,Fingerprint64String)",
        "(Hash64WithSeedsString,Hash64WithSeedsString)",
        "(Fingerprint64Buffer,Fingerprint64Buffer)"
      ],
      "Charon": [
        "(Hash32Buffer,Hash32Buffer)",
        "(Hash32String,Hash32String)",
        "(Hash32WithSeedBuffer,Hash32WithSeedBuffer)",
        "(Hash32WithSeedString,Hash32WithSeedString)",
        "(Hash64Buffer,Hash64Buffer)",
        "(Hash64String,Hash64String)",
        "(Hash64WithSeedBuffer,Hash64WithSeedBuffer)",
        "(Hash64WithSeedString,Hash64WithSeedString)",
        "(Hash64WithSeedsBuffer,Hash64WithSeedsBuffer)",
        "(Hash64WithSeedsString,Hash64WithSeedsString)",
        "(Fingerprint32Buffer,Fingerprint32Buffer)",
        "(Fingerprint32String,Fingerprint32String)",
        "(Fingerprint64Buffer,Fingerprint64Buffer)",
        "(Fingerprint64String,Fingerprint64String)"
      ]
    },
    "fast-bigint": {
      "Gasket": [
        "(add,ex_add)",
        "(create,ex_create)",
        "(mulAsync,ex_mulAsync)",
        "(sub,ex_sub)",
        "(setUInt64,ex_setUInt64)",
        "(mul,ex_mul)",
        "(addAsync,ex_addAsync)",
        "(divAsync,ex_divAsync)",
        "(subAsync,ex_subAsync)",
        "(modAsync,ex_modAsync)",
        "(div,ex_div)",
        "(compare,ex_compare)",
        "(getBuffer,ex_getBuffer)",
        "(setMaxThreads,ex_setMaxThreads)",
        "(fromPtr,ex_fromPtr)",
        "(mod,ex_mod)"
      ],
      "Charon": []
    },
    "fast-feed": {
      "Gasket": [
        "(parse,ParseFeed)"
      ],
      "Charon": [
        "(name,name)",
        "(length,length)",
        "(author,name)",
        "(parse,ParseFeed)"
      ]
    },
    "fast-find-in-files": {
      "Gasket": [
        "(exportedFn,napiFunc)"
      ],
      "Charon": [
        "(exportedFn,napiFunc)"
      ]
    },
    "fast-is-utf8": {
      "Gasket": [
        "(is_utf8,is_utf8_api)"
      ],
      "Charon": []
    },
    "fastnoisejs": {
      "Gasket": [
        "(SetFractalType,SetFractalType)",
        "(SetCellularDistanceFunction,SetCellularDistanceFunction)",
        "(Noise,FastNoiseJs)",
        "(GetCubic,GetCubic)",
        "(GetSimplexFractal,GetSimplexFractal)",
        "(GetPerlinFractal,GetPerlinFractal)",
        "(SetFractalLacunarity,SetFractalLacunarity)",
        "(GetCellular,GetCellular)",
        "(SetInterp,SetInterp)",
        "(GetNoise,GetNoise)",
        "(SetCellularReturnType,SetCellularReturnType)",
        "(GetSimplex,GetSimplex)",
        "(GetValueFractal,GetValueFractal)",
        "(SetCellularDistance2Indices,SetCellularDistance2Indices)",
        "(GetCubicFractal,GetCubicFractal)",
        "(GetPerlin,GetPerlin)",
        "(SetFrequency,SetFrequency)",
        "(SetFractalOctaves,SetFractalOctaves)",
        "(SetNoiseType,SetNoiseType)",
        "(GetSeed,GetSeed)",
        "(SetCellularJitter,SetCellularJitter)",
        "(SetFractalGain,SetFractalGain)",
        "(GetWhiteNoise,GetWhiteNoise)",
        "(SetSeed,SetSeed)",
        "(GetValue,GetValue)"
      ],
      "Charon": [
        "(SetSeed,FastNoiseJs)",
        "(SetFrequency,FastNoiseJs)",
        "(SetInterp,FastNoiseJs)",
        "(SetNoiseType,FastNoiseJs)",
        "(SetFractalOctaves,FastNoiseJs)",
        "(SetFractalLacunarity,FastNoiseJs)",
        "(SetFractalGain,FastNoiseJs)",
        "(SetFractalType,FastNoiseJs)",
        "(SetCellularDistanceFunction,FastNoiseJs)",
        "(SetCellularReturnType,FastNoiseJs)",
        "(SetCellularDistance2Indices,FastNoiseJs)",
        "(SetCellularJitter,FastNoiseJs)",
        "(Value,Number)",
        "(ValueFractal,Number)",
        "(Perlin,Number)",
        "(PerlinFractal,Number)",
        "(Simplex,Number)",
        "(SimplexFractal,Number)",
        "(Cellular,Number)",
        "(Cubic,Number)",
        "(CubicFractal,Number)",
        "(WhiteNoise,Number)",
        "(Linear,Number)",
        "(Hermite,Number)",
        "(Quintic,Number)",
        "(FBM,Number)",
        "(Billow,Number)",
        "(RigidMulti,Number)",
        "(Euclidean,Number)",
        "(Manhattan,Number)",
        "(Natural,Number)",
        "(CellValue,Number)",
        "(NoiseLookup,Number)",
        "(Distance,Number)",
        "(Distance2,Number)",
        "(Distance2Add,Number)",
        "(Distance2Sub,Number)",
        "(Distance2Mul,Number)",
        "(Distance2Div,Number)"
      ]
    },
    "fastpug": {
      "Gasket": [
        "(compile,compileFn)"
      ],
      "Charon": []
    },
    "fast-string-search": {
      "Gasket": [
        "(utf16IndexOf,utf16IndexOf)",
        "(indexOfSkip,indexOfSkip)",
        "(utf16LastIndexOf,utf16LastIndexOf)",
        "(indexOf,indexOf)",
        "(lastIndexOf,lastIndexOf)",
        "(utf16IndexOfSkip,utf16IndexOfSkip)"
      ],
      "Charon": []
    },
    "fasttail": {
      "Gasket": [
        "(getLastIndex,GetLastIndex)",
        "(FastTail,FastTail)",
        "(readFromIndex,ReadFromIndex)",
        "(getLogUri,GetLogUri)"
      ],
      "Charon": []
    },
    "fasttext": {
      "Gasket": [
        "(nn,Nn)",
        "(quantize,Quantize)",
        "(Query,FasttextQuery)",
        "(loadModel,LoadModel)",
        "(predict,Predict)",
        "(Classifier,FasttextClassifier)",
        "(train,Train)"
      ],
      "Charon": [
        "(label,String)",
        "(value,Number)"
      ]
    },
    "fast-uuidv4": {
      "Gasket": [
        "(uuidV4,uuidV4)",
        "(c,c_gen_v4)"
      ],
      "Charon": []
    },
    "fd-lock": {
      "Gasket": [
        "(fd_unlock,fd_unlock)",
        "(fd_lock,fd_lock)"
      ],
      "Charon": []
    },
    "fdpassing": {
      "Gasket": [
        "(fdTransfer,fdTransfer)"
      ],
      "Charon": []
    },
    "@felixrieseberg/spellchecker": {
      "Gasket": [
        "(Spellchecker,New)"
      ],
      "Charon": [
        "(end,end)",
        "(setDictionary,Spellchecker)",
        "(getAvailableDictionaries,Spellchecker)",
        "(getCorrectionsForMisspelling,Spellchecker)",
        "(isMisspelled,Spellchecker)",
        "(checkSpelling,Spellchecker)",
        "(add,Spellchecker)",
        "(remove,Spellchecker)"
      ]
    },
    "ffi-napi-v22": {
      "Gasket": [
        "(initializeBindings,InitializeBindings)"
      ],
      "Charon": []
    },
    "fileworkbyaleksbelka": {
      "Gasket": [
        "(mask,Mask)",
        "(napi,IsValidUTF8)",
        "(unmask,Unmask)"
      ],
      "Charon": [
        "(close,close)",
        "(open,open)",
        "(query,query)",
        "(bindQuery,bind_query)",
        "(prepare,prepare)",
        "(readColumn,read_column)",
        "(beginTransaction,begin_transaction)",
        "(commit,commit)",
        "(rollback,rollback)",
        "(nextResult,read_next_result)",
        "(callProcedure,call_procedure)",
        "(unbind,unbind)",
        "(freeStatement,free_statement)",
        "(cancelQuery,cancel_statement)",
        "(pollingMode,polling_mode)",
        "(type,type_name)"
      ]
    },
    "finalize-addon": {
      "Gasket": [
        "(weak,Weak)"
      ],
      "Charon": []
    },
    "find-git-repositories": {
      "Gasket": [
        "(target/findGitRepos,FindGitRepos)",
        "(find-git-repositories/build/Debug/findGitRepos,FindGitRepos)"
      ],
      "Charon": []
    },
    "fit-native": {
      "Gasket": [
        "(greetHello,greetHello)"
      ],
      "Charon": [
        "(greetHello,greetHello)"
      ]
    },
    "fixed-node-canvas": {
      "Gasket": [
        "(streamPNGSync,StreamPNGSync)",
        "(PdfBackend,New)",
        "(toBuffer,ToBuffer)",
        "(drawImage,DrawImage)",
        "(rotate,Rotate)",
        "(setTransform,SetTransform)",
        "(ImageBackend,New)",
        "(lineTo,LineTo)",
        "(closePath,ClosePath)",
        "(arc,Arc)",
        "(CanvasPattern,New)",
        "(arcTo,ArcTo)",
        "(ellipse,Ellipse)",
        "(streamPDFSync,StreamPDFSync)",
        "(streamJPEGSync,StreamJPEGSync)",
        "(isPointInPath,IsPointInPath)",
        "(_deregisterAllFonts,DeregisterAllFonts)",
        "(beginPath,BeginPath)",
        "(clip,Clip)",
        "(CanvasRenderingContext2d,New)",
        "(fillText,FillText)",
        "(strokeText,StrokeText)",
        "(strokeRect,StrokeRect)",
        "(fillRect,FillRect)",
        "(Image,New)",
        "(rect,Rect)",
        "(createPattern,CreatePattern)",
        "(CanvasGradient,New)",
        "(SvgBackend,New)",
        "(createImageData,CreateImageData)",
        "(getImageData,GetImageData)",
        "(bezierCurveTo,BezierCurveTo)",
        "(restore,Restore)",
        "(createLinearGradient,CreateLinearGradient)",
        "(CanvasRenderingContext2dInit,SaveExternalModules)",
        "(_registerFont,RegisterFont)",
        "(CanvasPatternInit,SaveExternalModules)",
        "(transform,Transform)",
        "(putImageData,PutImageData)",
        "(roundRect,RoundRect)",
        "(fill,Fill)",
        "(resetTransform,ResetTransform)",
        "(ImageData,New)",
        "(scale,Scale)",
        "(clearRect,ClearRect)",
        "(quadraticCurveTo,QuadraticCurveTo)",
        "(Canvas,New)",
        "(addColorStop,AddColorStop)",
        "(addPage,AddPage)",
        "(createRadialGradient,CreateRadialGradient)",
        "(GetSource,GetSource)",
        "(moveTo,MoveTo)",
        "(translate,Translate)",
        "(getTransform,GetTransform)",
        "(measureText,MeasureText)",
        "(save,Save)",
        "(SetSource,SetSource)",
        "(stroke,Stroke)",
        "(setLineDash,SetLineDash)",
        "(getLineDash,GetLineDash)"
      ],
      "Charon": []
    },
    "fjt-walter": {
      "Gasket": [
        "(generateCoeffMatrix,GenerateCoeffMatrix)",
        "(predict,Predict)"
      ],
      "Charon": [
        "(predict,Predict)",
        "(generateCoeffMatrix,GenerateCoeffMatrix)"
      ]
    },
    "flatbuffers-addon": {
      "Gasket": [
        "(js,GenerateJS)",
        "(binary,GenerateBinary)"
      ],
      "Charon": []
    },
    "@flat/lame": {
      "Gasket": [
        "(lame_set_compression_ratio,node_lame_set_compression_ratio)",
        "(lame_get_copyright,node_lame_get_copyright)",
        "(lame_set_scale_left,node_lame_set_scale_left)",
        "(get_lame_os_bitness,node_get_lame_os_bitness)",
        "(lame_get_brate,node_lame_get_brate)",
        "(lame_set_original,node_lame_set_original)",
        "(lame_get_disable_reservoir,node_lame_get_disable_reservoir)",
        "(lame_get_VBR_quality,node_lame_get_VBR_quality)",
        "(mpg123_framepos,node_mpg123_framepos)",
        "(mpg123_supported_decoders,node_mpg123_supported_decoders)",
        "(lame_get_num_channels,node_lame_get_num_channels)",
        "(lame_init_params,node_lame_init_params)",
        "(lame_get_VBR_q,node_lame_get_VBR_q)",
        "(lame_samplerates,node_lame_samplerates)",
        "(lame_print_config,node_lame_print_config)",
        "(lame_set_VBR_min_bitrate_kbps,node_lame_set_VBR_min_bitrate_kbps)",
        "(lame_set_num_samples,node_lame_set_num_samples)",
        "(mpg123_outblock,node_mpg123_outblock)",
        "(lame_get_exp_nspsytune,node_lame_get_exp_nspsytune)",
        "(mpg123_current_decoder,node_mpg123_current_decoder)",
        "(lame_get_in_samplerate,node_lame_get_in_samplerate)",
        "(mpg123_open_feed,node_mpg123_open_feed)",
        "(lame_get_lowpasswidth,node_lame_get_lowpasswidth)",
        "(lame_set_VBR_mean_bitrate_kbps,node_lame_set_VBR_mean_bitrate_kbps)",
        "(lame_get_out_samplerate,node_lame_get_out_samplerate)",
        "(get_lame_version,node_get_lame_version)",
        "(lame_set_exp_nspsytune,node_lame_set_exp_nspsytune)",
        "(lame_set_disable_reservoir,node_lame_set_disable_reservoir)",
        "(lame_set_highpasswidth,node_lame_set_highpasswidth)",
        "(mpg123_read,node_mpg123_read)",
        "(lame_get_quant_comp,node_lame_get_quant_comp)",
        "(lame_get_id3v1_tag,node_lame_get_id3v1_tag)",
        "(lame_set_out_samplerate,node_lame_set_out_samplerate)",
        "(lame_init,node_lame_init)",
        "(lame_set_bWriteVbrTag,node_lame_set_bWriteVbrTag)",
        "(lame_set_extension,node_lame_set_extension)",
        "(lame_get_scale_left,node_lame_get_scale_left)",
        "(mpg123_init,node_mpg123_init)",
        "(lame_set_highpassfreq,node_lame_set_highpassfreq)",
        "(lame_get_quant_comp_short,node_lame_get_quant_comp_short)",
        "(mpg123_id3,node_mpg123_id3)",
        "(lame_print_internals,node_lame_print_internals)",
        "(lame_get_VBR,node_lame_get_VBR)",
        "(mpg123_feed,node_mpg123_feed)",
        "(lame_set_quant_comp,node_lame_set_quant_comp)",
        "(lame_close,node_lame_close)",
        "(lame_set_in_samplerate,node_lame_set_in_samplerate)",
        "(lame_get_highpassfreq,node_lame_get_highpassfreq)",
        "(lame_get_id3v2_tag,node_lame_get_id3v2_tag)",
        "(lame_get_extension,node_lame_get_extension)",
        "(lame_set_lowpasswidth,node_lame_set_lowpasswidth)",
        "(lame_get_scale_right,node_lame_get_scale_right)",
        "(lame_get_scale,node_lame_get_scale)",
        "(lame_get_VBR_mean_bitrate_kbps,node_lame_get_VBR_mean_bitrate_kbps)",
        "(lame_set_analysis,node_lame_set_analysis)",
        "(lame_set_mode,node_lame_set_mode)",
        "(lame_get_VBR_hard_min,node_lame_get_VBR_hard_min)",
        "(lame_get_VBR_max_bitrate_kbps,node_lame_get_VBR_max_bitrate_kbps)",
        "(mpg123_decoders,node_mpg123_decoders)",
        "(mpg123_tell_stream,node_mpg123_tell_stream)",
        "(lame_set_VBR_max_bitrate_kbps,node_lame_set_VBR_max_bitrate_kbps)",
        "(mpg123_exit,node_mpg123_exit)",
        "(lame_set_strict_ISO,node_lame_set_strict_ISO)",
        "(lame_get_mode,node_lame_get_mode)",
        "(lame_set_quant_comp_short,node_lame_set_quant_comp_short)",
        "(lame_set_num_channels,node_lame_set_num_channels)",
        "(lame_set_brate,node_lame_set_brate)",
        "(lame_get_lowpassfreq,node_lame_get_lowpassfreq)",
        "(lame_set_quality,node_lame_set_quality)",
        "(lame_set_error_protection,node_lame_set_error_protection)",
        "(lame_set_scale,node_lame_set_scale)",
        "(lame_set_scale_right,node_lame_set_scale_right)",
        "(lame_get_original,node_lame_get_original)",
        "(lame_get_num_samples,node_lame_get_num_samples)",
        "(lame_get_quality,node_lame_get_quality)",
        "(lame_set_VBR_q,node_lame_set_VBR_q)",
        "(lame_set_VBR_hard_min,node_lame_set_VBR_hard_min)",
        "(lame_set_VBR_quality,node_lame_set_VBR_quality)",
        "(lame_get_compression_ratio,node_lame_get_compression_ratio)",
        "(mpg123_safe_buffer,node_mpg123_safe_buffer)",
        "(lame_bitrates,node_lame_bitrates)",
        "(lame_get_highpasswidth,node_lame_get_highpasswidth)",
        "(lame_get_analysis,node_lame_get_analysis)",
        "(mpg123_new,node_mpg123_new)",
        "(lame_set_VBR,node_lame_set_VBR)",
        "(lame_get_strict_ISO,node_lame_get_strict_ISO)",
        "(lame_get_VBR_min_bitrate_kbps,node_lame_get_VBR_min_bitrate_kbps)",
        "(lame_encode_buffer,node_lame_encode_buffer)",
        "(mpg123_getformat,node_mpg123_getformat)",
        "(lame_encode_flush_nogap,node_lame_encode_flush_nogap)",
        "(lame_get_error_protection,node_lame_get_error_protection)",
        "(lame_set_copyright,node_lame_set_copyright)",
        "(lame_set_lowpassfreq,node_lame_set_lowpassfreq)",
        "(mpg123_tellframe,node_mpg123_tellframe)",
        "(lame_get_bWriteVbrTag,node_lame_get_bWriteVbrTag)",
        "(mpg123_tell,node_mpg123_tell)"
      ],
      "Charon": []
    },
    "flock-rs": {
      "Gasket": [
        "(unlock,h207334b8ab181baa)",
        "(isLocked,hd8ed6f62a089e270)",
        "(Flock,h266321e3385ba825)",
        "(lock,h9710b3f5704b921c)"
      ],
      "Charon": []
    },
    "flocon-new": {
      "Gasket": [
        "(snow,Snow)",
        "(Flocon,New)"
      ],
      "Charon": []
    },
    "@floffah/node-memwatch": {
      "Gasket": [
        "(HeapDiff,New)",
        "(end,End)",
        "(gc,trigger_gc)",
        "(upon_gc,upon_gc)"
      ],
      "Charon": [
        "(end,End)"
      ]
    },
    "@flowaccount/node-icu-tokenizer": {
      "Gasket": [
        "(getWordBoundaryPositions,GetWordBoundaryPositions)"
      ],
      "Charon": [
        "(start,Number)",
        "(end,Number)",
        "(getWordBoundaryPositions,GetWordBoundaryPositions)"
      ]
    },
    "floweejs": {
      "Gasket": [
        "(unsubscribeAddress,contextData_unsubscribeAddress)",
        "(search,contextData_startSearch)",
        "(parseAddress,contextData_parseAddress)",
        "(testConnectIndexer,contextData_testConnectIndexer)",
        "(connectIndexer,contextData_connectIndexer)",
        "(sendMessage,contextData_sendMessage)",
        "(testConnectHub,contextData_testConnectHub)",
        "(sendTransaction,contextData_sendTransaction)",
        "(connect,contextData_connect)",
        "(connectHub,contextData_connectHub)",
        "(testConnect,contextData_testConnect)",
        "(stop,contextData_shutdown)",
        "(subscribeToAddress,contextData_subscribeToAddress)"
      ],
      "Charon": []
    },
    "flow-parser-bin": {
      "Gasket": [
        "(parse,Parse)"
      ],
      "Charon": [
        "(parse,Parse)"
      ]
    },
    "flush-all": {
      "Gasket": [
        "(flush_all,flush_all)"
      ],
      "Charon": []
    },
    "fmemory": {
      "Gasket": [
        "(readMemory,readMemory)",
        "(getModuleBaseAddr,getModuleBaseAddr)",
        "(writeMemory,writeMemory)",
        "(getProcessID,getProcessID)"
      ],
      "Charon": [
        "(getProcessID,getProcessID)",
        "(getModuleBaseAddr,getModuleBaseAddr)",
        "(readMemory,readMemory)",
        "(writeMemory,writeMemory)"
      ]
    },
    "fontnik": {
      "Gasket": [
        "(range,Range)",
        "(load,Load)",
        "(composite,Composite)"
      ],
      "Charon": [
        "(load,Load)",
        "(range,Range)",
        "(composite,Composite)"
      ]
    },
    "forcefocus": {
      "Gasket": [
        "(focusWindow,FocusWindowExport)"
      ],
      "Charon": [
        "(focusWindow,FocusWindowExport)"
      ]
    },
    "frankda-newrelic-native-metrics": {
      "Gasket": [
        "(LoopChecker,New)",
        "(read,Read)",
        "(GCBinder,New)",
        "(bind,Bind)",
        "(unbind,Unbind)"
      ],
      "Charon": []
    },
    "freetype2": {
      "Gasket": [
        "(NewMemoryFace,NewMemoryFace)",
        "(NewFace,NewFace)"
      ],
      "Charon": [
        "(NewFace,NewFace)",
        "(NewMemoryFace,NewMemoryFace)",
        "(setCharSize,FontFace)",
        "(setPixelSizes,FontFace)",
        "(setTransform,FontFace)"
      ]
    },
    "frk": {
      "Gasket": [
        "(run,Frk)"
      ],
      "Charon": [
        "(run,Frk)"
      ]
    },
    "frog-jump-master": {
      "Gasket": [
        "(hello,HelloMethod)"
      ],
      "Charon": []
    },
    "@frosttusk/ginger": {
      "Gasket": [
        "(run,Run)"
      ],
      "Charon": [
        "(run,Run)"
      ]
    },
    "fs-admin": {
      "Gasket": [
        "(clearAuthorizationCache,ClearAuthorizationCache)",
        "(getAuthorizationForm,GetAuthorizationForm)",
        "(spawnAsAdmin,SpawnAsAdmin)"
      ],
      "Charon": [
        "(getAuthorizationForm,GetAuthorizationForm)",
        "(clearAuthorizationCache,ClearAuthorizationCache)",
        "(spawnAsAdmin,SpawnAsAdmin)"
      ]
    },
    "fsctl": {
      "Gasket": [
        "(fsctl_napi_unlock,fsctl_napi_unlock)",
        "(fsctl_napi_sparse,fsctl_napi_sparse)",
        "(fsctl_napi_lock,fsctl_napi_lock)",
        "(fsctl_napi_punch_hole,fsctl_napi_punch_hole)",
        "(fsctl_napi_try_lock,fsctl_napi_try_lock)"
      ],
      "Charon": []
    },
    "fs-ext": {
      "Gasket": [
        "(flock,Flock)",
        "(statVFS,StatVFS)",
        "(seek,Seek)",
        "(fcntl,Fcntl)"
      ],
      "Charon": [
        "(seek,Seek)",
        "(fcntl,Fcntl)",
        "(flock,Flock)",
        "(statVFS,StatVFS)"
      ]
    },
    "fs-extended-attributes": {
      "Gasket": [
        "(fsx_init,fsx_init)",
        "(fsx_run,fsx_run)"
      ],
      "Charon": []
    },
    "@fsiot/heatshrink": {
      "Gasket": [
        "(end,decoder_method_end)",
        "(HSDecoder,decoder_constructor)",
        "(sink,encoder_method_sink)",
        "(poll,decoder_method_poll)",
        "(HSEncoder,encoder_constructor)",
        "(sink,decoder_method_sink)",
        "(poll,encoder_method_poll)",
        "(end,encoder_method_end)"
      ],
      "Charon": []
    },
    "fstime": {
      "Gasket": [
        "(statSync,StatSync)",
        "(utimesSync,UtimesSync)"
      ],
      "Charon": []
    },
    "fs-xattr": {
      "Gasket": [
        "(get,xattr_get)",
        "(set,xattr_set)",
        "(listSync,xattr_list_sync)",
        "(list,xattr_list)",
        "(removeSync,xattr_remove_sync)",
        "(setSync,xattr_set_sync)",
        "(getSync,xattr_get_sync)",
        "(remove,xattr_remove)"
      ],
      "Charon": []
    },
    "@fttx/robotjs": {
      "Gasket": [
        "(getMousePos,getMousePos)",
        "(mouseToggle,mouseToggle)",
        "(setMouseDelay,setMouseDelay)",
        "(dragMouse,dragMouse)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(typeStringDelayed,typeStringDelayed)",
        "(captureScreen,captureScreen)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(mouseClick,mouseClick)",
        "(setXDisplayName,setXDisplayName)",
        "(keyTap,keyTap)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(moveMouse,moveMouse)",
        "(scrollMouse,scrollMouse)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(typeString,typeString)",
        "(keyToggle,keyToggle)",
        "(getXDisplayName,getXDisplayName)",
        "(getColor,getColor)",
        "(unicodeTap,unicodeTap)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(unicodeTap,unicodeTap)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getColor,getColor)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "fullname-native": {
      "Gasket": [
        "(binding,name)"
      ],
      "Charon": [
        "(exports,name)"
      ]
    },
    "fuzzaldrin-plus-fast": {
      "Gasket": [
        "(Fuzzaldrin,Fuzzaldrin)",
        "(filterTree,FilterTree)",
        "(score,score)",
        "(match,match)",
        "(setTreeFiltererCandidates,setTreeFiltererCandidates)",
        "(filter,Filter)",
        "(setArrayFiltererCandidates,setArrayFiltererCandidates)",
        "(wrap,wrap)"
      ],
      "Charon": [
        "(score,score)",
        "(match,match)",
        "(wrap,wrap)"
      ]
    },
    "@gamergenic/js-spice": {
      "Gasket": [
        "(eul2m,eul2m)",
        "(getelm,getelm)",
        "(jyear,jyear)",
        "(rpd,rpd)",
        "(m2eul,m2eul)",
        "(vpack,vpack)",
        "(mxm,mxm)",
        "(spkgps,spkgps)",
        "(oscelt,oscelt)",
        "(gfsep,gfsep)",
        "(mxmt,mxmt)",
        "(pl2nvp,pl2nvp)",
        "(deltet,deltet)",
        "(spkobj,spkobj)",
        "(spkopn,spkopn)",
        "(spkcpo,spkcpo)",
        "(gfposc,gfposc)",
        "(spd,spd)",
        "(errprt,errprt)",
        "(erract,erract)",
        "(vrel,vrel)",
        "(sigerr,sigerr)",
        "(mxv,mxv)",
        "(vsub,vsub)",
        "(furnsh,furnsh)",
        "(vprjpi,vprjpi)",
        "(evsgp4,evsgp4)",
        "(pl2psv,pl2psv)",
        "(latrec,latrec)",
        "(radrec,radrec)",
        "(reccyl,reccyl)",
        "(vhat,vhat)",
        "(vproj,vproj)",
        "(reset,reset)",
        "(recsph,recsph)",
        "(et2utc,et2utc)",
        "(etcal,etcal)",
        "(mtxv,mtxv)",
        "(vperp,vperp)",
        "(cylrec,cylrec)",
        "(vzero,vzero)",
        "(vequ,vequ)",
        "(raxisa,raxisa)",
        "(j2100,j2100)",
        "(q2m,q2m)",
        "(spkcls,spkcls)",
        "(recgeo,recgeo)",
        "(rotate,rotate)",
        "(vcrss,vcrss)",
        "(recrad,recrad)",
        "(b1900,b1900)",
        "(vdist,vdist)",
        "(pgrrec,pgrrec)",
        "(psv2pl,psv2pl)",
        "(spkw05,spkw05)",
        "(vrotv,vrotv)",
        "(georec,georec)",
        "(halfpi,halfpi)",
        "(j2000,j2000)",
        "(spkpos,spkpos)",
        "(unload,unload)",
        "(str2et,str2et)",
        "(reclat,reclat)",
        "(j1950,j1950)",
        "(vupack,vupack)",
        "(conics,conics)",
        "(pl2nvc,pl2nvc)",
        "(sxform,sxform)",
        "(spkgeo,spkgeo)",
        "(ident,ident)",
        "(dpr,dpr)",
        "(pxform,pxform)",
        "(sphrec,sphrec)",
        "(qxq,qxq)",
        "(invert,invert)",
        "(clight,clight)",
        "(vlcom3,vlcom3)",
        "(errdev,errdev)",
        "(vlcom,vlcom)",
        "(nvc2pl,nvc2pl)",
        "(vsep,vsep)",
        "(b1950,b1950)",
        "(nvp2pl,nvp2pl)",
        "(xpose,xpose)",
        "(twopi,twopi)",
        "(mtxm,mtxm)",
        "(spkcpt,spkcpt)",
        "(spkezr,spkezr)",
        "(pxfrm2,pxfrm2)",
        "(vadd,vadd)",
        "(pi,pi)",
        "(j1900,j1900)",
        "(bodvrd,bodvrd)",
        "(azlrec,azlrec)",
        "(kclear,kclear)",
        "(timout,timout)",
        "(vtmv,vtmv)",
        "(axisar,axisar)",
        "(convrt,convrt)",
        "(vnorm,vnorm)",
        "(spkcvt,spkcvt)",
        "(m2q,m2q)",
        "(vscl,vscl)",
        "(recazl,recazl)",
        "(recpgr,recpgr)",
        "(prop2b,prop2b)",
        "(pckfrm,pckfrm)",
        "(vminus,vminus)",
        "(vdot,vdot)",
        "(failed,failed)",
        "(spkcvo,spkcvo)",
        "(vprjp,vprjp)"
      ],
      "Charon": [
        "(0,Number)",
        "(1,Number)",
        "(w,q)",
        "(x,q)",
        "(y,q)",
        "(z,q)",
        "(axisar,axisar)",
        "(azlrec,azlrec)",
        "(b1900,b1900)",
        "(b1950,b1950)",
        "(bodvrd,bodvrd)",
        "(clight,clight)",
        "(conics,conics)",
        "(convrt,convrt)",
        "(cylrec,cylrec)",
        "(deltet,deltet)",
        "(dpr,dpr)",
        "(erract,erract)",
        "(errdev,errdev)",
        "(errprt,errprt)",
        "(et2utc,et2utc)",
        "(etcal,etcal)",
        "(eul2m,eul2m)",
        "(evsgp4,evsgp4)",
        "(failed,failed)",
        "(furnsh,furnsh)",
        "(georec,georec)",
        "(getelm,getelm)",
        "(gfposc,gfposc)",
        "(gfsep,gfsep)",
        "(halfpi,halfpi)",
        "(ident,ident)",
        "(invert,invert)",
        "(j1900,j1900)",
        "(j1950,j1950)",
        "(j2000,j2000)",
        "(j2100,j2100)",
        "(jyear,jyear)",
        "(kclear,kclear)",
        "(latrec,latrec)",
        "(m2eul,m2eul)",
        "(m2q,m2q)",
        "(mtxm,mtxm)",
        "(mtxv,mtxv)",
        "(mxm,mxm)",
        "(mxmt,mxmt)",
        "(mxv,mxv)",
        "(nvc2pl,nvc2pl)",
        "(nvp2pl,nvp2pl)",
        "(oscelt,oscelt)",
        "(pckfrm,pckfrm)",
        "(pgrrec,pgrrec)",
        "(pi,pi)",
        "(pl2nvc,pl2nvc)",
        "(pl2nvp,pl2nvp)",
        "(pl2psv,pl2psv)",
        "(prop2b,prop2b)",
        "(psv2pl,psv2pl)",
        "(pxform,pxform)",
        "(pxfrm2,pxfrm2)",
        "(q2m,q2m)",
        "(qxq,qxq)",
        "(radrec,radrec)",
        "(raxisa,raxisa)",
        "(recazl,recazl)",
        "(reccyl,reccyl)",
        "(recgeo,recgeo)",
        "(reclat,reclat)",
        "(recpgr,recpgr)",
        "(recrad,recrad)",
        "(recsph,recsph)",
        "(reset,reset)",
        "(rotate,rotate)",
        "(rpd,rpd)",
        "(str2et,str2et)",
        "(spd,spd)",
        "(sigerr,sigerr)",
        "(sphrec,sphrec)",
        "(spkcls,spkcls)",
        "(spkcpo,spkcpo)",
        "(spkcpt,spkcpt)",
        "(spkcvo,spkcvo)",
        "(spkcvt,spkcvt)",
        "(spkezr,spkezr)",
        "(spkgeo,spkgeo)",
        "(spkgps,spkgps)",
        "(spkobj,spkobj)",
        "(spkopn,spkopn)",
        "(spkpos,spkpos)",
        "(spkw05,spkw05)",
        "(sxform,sxform)",
        "(timout,timout)",
        "(twopi,twopi)",
        "(unload,unload)",
        "(vadd,vadd)",
        "(vcrss,vcrss)",
        "(vdist,vdist)",
        "(vdot,vdot)",
        "(vequ,vequ)",
        "(vhat,vhat)",
        "(vlcom,vlcom)",
        "(vlcom3,vlcom3)",
        "(vminus,vminus)",
        "(vnorm,vnorm)",
        "(vpack,vpack)",
        "(vperp,vperp)",
        "(vprjp,vprjp)",
        "(vprjpi,vprjpi)",
        "(vproj,vproj)",
        "(vrel,vrel)",
        "(vrotv,vrotv)",
        "(vscl,vscl)",
        "(vsep,vsep)",
        "(vsub,vsub)",
        "(vtmv,vtmv)",
        "(vupack,vupack)",
        "(vzero,vzero)",
        "(xpose,xpose)"
      ]
    },
    "ganache-cli": {
      "Gasket": [
        "(publicKeyCreate,PublicKeyCreate)",
        "(publicKeyTweakAdd,PublicKeyTweakAdd)",
        "(signatureNormalize,SignatureNormalize)",
        "(Secp256k1,Secp256k1Addon)",
        "(privateKeyNegate,PrivateKeyNegate)",
        "(squeeze,Squeeze)",
        "(publicKeyVerify,PublicKeyVerify)",
        "(ecdh,ECDH)",
        "(ecdsaRecover,ECDSARecover)",
        "(publicKeyTweakMul,PublicKeyTweakMul)",
        "(ecdsaSign,ECDSASign)",
        "(initialize,Initialize)",
        "(signatureExport,SignatureExport)",
        "(absorbLastFewBits,AbsorbLastFewBits)",
        "(privateKeyVerify,PrivateKeyVerify)",
        "(signatureImport,SignatureImport)",
        "(contextRandomize,ContextRandomize)",
        "(privateKeyTweakAdd,PrivateKeyTweakAdd)",
        "(copy,Copy)",
        "(publicKeyCombine,PublicKeyCombine)",
        "(publicKeyConvert,PublicKeyConvert)",
        "(publicKeyNegate,PublicKeyNegate)",
        "(ecdsaVerify,ECDSAVerify)",
        "(privateKeyTweakMul,PrivateKeyTweakMul)",
        "(glibc,KeccakWrapper)",
        "(absorb,Absorb)"
      ],
      "Charon": [
        "(Secp256k1,Secp256k1Addon)"
      ]
    },
    "@ganeshmogare/bodmas": {
      "Gasket": [
        "(ClassExample,ClassExample)",
        "(devide,DevideWrapped)",
        "(subtract,SubtactWrapped)",
        "(add,AddWrapped)",
        "(addN,AddNWrapped)",
        "(getValue,GetValue)",
        "(add,Add)",
        "(multiply,MultiplyWrapped)"
      ],
      "Charon": []
    },
    "@gatsbyjs/sharp": {
      "Gasket": [
        "(simd,simd)",
        "(cache,cache)",
        "(format,format)",
        "(libvipsVersion,libvipsVersion)",
        "(counters,counters)",
        "(_maxColourDistance,_maxColourDistance)",
        "(stats,stats)",
        "(concurrency,concurrency)",
        "(metadata,metadata)",
        "(pipeline,pipeline)"
      ],
      "Charon": [
        "(metadata,metadata)",
        "(pipeline,pipeline)",
        "(cache,cache)",
        "(concurrency,concurrency)",
        "(counters,counters)",
        "(simd,simd)",
        "(libvipsVersion,libvipsVersion)",
        "(format,format)",
        "(_maxColourDistance,_maxColourDistance)",
        "(stats,stats)"
      ]
    },
    "@gbkwiatt/node-rpi-ws281x-native": {
      "Gasket": [
        "(setChannelData,setChannelData)",
        "(setChannelParam,setChannelParam)",
        "(init,init)",
        "(render,render)",
        "(setParam,setParam)",
        "(finalize,finalize)"
      ],
      "Charon": [
        "(setParam,setParam)",
        "(setChannelParam,setChannelParam)",
        "(setChannelData,setChannelData)",
        "(init,init)",
        "(render,render)",
        "(finalize,finalize)"
      ]
    },
    "gcontext": {
      "Gasket": [
        "(uninit,GContextUninit)",
        "(init,GContextInit)"
      ],
      "Charon": [
        "(init,GContextInit)",
        "(uninit,GContextUninit)"
      ]
    },
    "gc-profiler": {
      "Gasket": [
        "(loadProfiler,loadProfiler)"
      ],
      "Charon": [
        "(loadProfiler,loadProfiler)"
      ]
    },
    "gc-stats": {
      "Gasket": [
        "(afterGC,AfterGC)"
      ],
      "Charon": [
        "(startTime,data)",
        "(endTime,data)",
        "(pause,data)",
        "(pauseMS,data)",
        "(gctype,data)",
        "(afterGC,AfterGC)"
      ]
    },
    "gcstats.js": {
      "Gasket": [
        "(afterGC,AfterGC)"
      ],
      "Charon": [
        "(start,data)",
        "(end,data)",
        "(afterGC,AfterGC)"
      ]
    },
    "gc-watch": {
      "Gasket": [
        "(afterGC,SetAfterGCCallback)",
        "(beforeGC,SetBeforeGCCallback)"
      ],
      "Charon": []
    },
    "gdal-async": {
      "Gasket": [
        "(setMetadataAsync,setMetadataAsync)",
        "(MultiPoint,New)",
        "(toPixelFunc,toPixelFunc)",
        "(open,open)",
        "(testCapability,testCapability)",
        "(toWKTAsync,exportToWKTAsync)",
        "(Dimension,New)",
        "(buffer,buffer)",
        "(MultiLineString,New)",
        "(getMask,getMask)",
        "(buildOverviewsAsync,buildOverviewsAsync)",
        "(Point,New)",
        "(demAsync,demAsync)",
        "(intersects,intersects)",
        "(removeAsync,removeAsync)",
        "(swapXYAsync,swapXYAsync)",
        "(getAngularUnits,getAngularUnits)",
        "(isVertical,isVertical)",
        "(next,next)",
        "(simplify,simplify)",
        "(CompoundCurve,New)",
        "(isSimpleAsync,isSimpleAsync)",
        "(isSameGeogCS,isSameGeogCS)",
        "(fromCRSURLAsync,fromCRSURLAsync)",
        "(flattenTo2D,flattenTo2D)",
        "(isGeocentric,isGeocentric)",
        "(GroupDimensions,New)",
        "(fromXML,fromXML)",
        "(isValid,isValid)",
        "(emptyAsync,emptyAsync)",
        "(simplifyAsync,simplifyAsync)",
        "(set,vsimemSet)",
        "(Layer,New)",
        "(flattenTo2DAsync,flattenTo2DAsync)",
        "(reverse,reverse)",
        "(fromURL,fromURL)",
        "(getNames,getNames)",
        "(containsAsync,containsAsync)",
        "(log,Log)",
        "(isGeographic,isGeographic)",
        "(resize,resize)",
        "(sieveFilterAsync,sieveFilterAsync)",
        "(getEnvelope3DAsync,getEnvelope3DAsync)",
        "(openAsync,openAsync)",
        "(LineString,New)",
        "(getGCPProjection,getGCPProjection)",
        "(writeAsync,writeAsync)",
        "(touchesAsync,touchesAsync)",
        "(polygonize,polygonize)",
        "(toXML,exportToXML)",
        "(flush,syncToDisk)",
        "(getGCPs,getGCPs)",
        "(simplifyPreserveTopologyAsync,simplifyPreserveTopologyAsync)",
        "(Group,New)",
        "(clampBlock,clampBlock)",
        "(isSameVertCS,isSameVertCS)",
        "(count,count)",
        "(stopLogging,StopLogging)",
        "(readDirAsync,readDirAsync)",
        "(SimpleCurve,New)",
        "(add,add)",
        "(checksumImageAsync,checksumImageAsync)",
        "(GroupArrays,New)",
        "(getLinearUnits,getLinearUnits)",
        "(nextAsync,nextAsync)",
        "(getAuthorityName,getAuthorityName)",
        "(indexOf,indexOf)",
        "(getAsync,getAsync)",
        "(fromEPSGA,fromEPSGA)",
        "(DatasetBands,New)",
        "(fromGeoJsonBuffer,createFromGeoJsonBuffer)",
        "(reprojectImageAsync,reprojectImageAsync)",
        "(getLength,getLength)",
        "(decToDMS,decToDMS)",
        "(read,read)",
        "(toJSONAsync,exportToJSONAsync)",
        "(equalsAsync,equalsAsync)",
        "(remove,remove)",
        "(isCompound,isCompound)",
        "(GroupGroups,New)",
        "(overlaps,overlaps)",
        "(toString,toString)",
        "(getSpatialFilter,getSpatialFilter)",
        "(readBlockAsync,readBlockAsync)",
        "(write,write)",
        "(toJSON,exportToJSON)",
        "(get,get)",
        "(union,unionGeometry)",
        "(ColorTable,New)",
        "(getMetadata,getMetadata)",
        "(copyFiles,copyFiles)",
        "(getAuthorityCode,getAuthorityCode)",
        "(makeValidAsync,makeValidAsync)",
        "(transformAsync,transformAsync)",
        "(distance,distance)",
        "(buildVRTAsync,buildvrtAsync)",
        "(transform,transform)",
        "(fromGeoJson,createFromGeoJson)",
        "(setFrom,setFrom)",
        "(centroidAsync,centroidAsync)",
        "(morphToESRI,morphToESRI)",
        "(_isAlive,isAlive)",
        "(fill,fill)",
        "(validate,validate)",
        "(LayerFeatures,New)",
        "(getBySampleCount,getBySampleCount)",
        "(RasterBandPixels,New)",
        "(autoIdentifyEPSG,autoIdentifyEPSG)",
        "(verbose,VerboseOutput)",
        "(toPrettyWKT,exportToPrettyWKT)",
        "(toKMLAsync,exportToKMLAsync)",
        "(writeBlock,writeBlock)",
        "(set,set)",
        "(boundary,boundary)",
        "(withinAsync,withinAsync)",
        "(getStatistics,getStatistics)",
        "(fromWKT,createFromWkt)",
        "(setWellKnownGeogCS,setWellKnownGeogCS)",
        "(CircularString,New)",
        "(reset,reset)",
        "(Dataset,New)",
        "(empty,empty)",
        "(statAsync,statAsync)",
        "(vectorTranslate,vectorTranslate)",
        "(FeatureFields,New)",
        "(transformTo,transformTo)",
        "(toProj4,exportToProj4)",
        "(cloneGeogCS,cloneGeogCS)",
        "(create,create)",
        "(getEnvelope3D,getEnvelope3D)",
        "(fillAsync,fillAsync)",
        "(fromWKT,fromWKT)",
        "(toWKT,exportToWKT)",
        "(Attribute,New)",
        "(createCopy,createCopy)",
        "(setSpatialFilter,setSpatialFilter)",
        "(unionCascaded,unionCascaded)",
        "(reorder,reorder)",
        "(morphFromESRI,morphFromESRI)",
        "(isRingAsync,isRingAsync)",
        "(fromProj4,fromProj4)",
        "(within,within)",
        "(value,value)",
        "(toArray,toArray)",
        "(first,first)",
        "(getArea,getArea)",
        "(fromURN,fromURN)",
        "(close,close)",
        "(createMaskBand,createMaskBand)",
        "(toGMLAsync,exportToGMLAsync)",
        "(copy,copy)",
        "(readAsync,readAsync)",
        "(open,gdal_open)",
        "(fromWKBAsync,createFromWkbAsync)",
        "(unionAsync,unionGeometryAsync)",
        "(computeStatisticsAsync,computeStatisticsAsync)",
        "(warpAsync,warpAsync)",
        "(flushAsync,syncToDiskAsync)",
        "(setStatistics,setStatistics)",
        "(ArrayAttributes,New)",
        "(EPSGTreatsAsLatLong,EPSGTreatsAsLatLong)",
        "(intersectionAsync,intersectionAsync)",
        "(PolygonRings,New)",
        "(_anonymous,vsimemAnonymous)",
        "(makeValid,makeValid)",
        "(RasterBandOverviews,New)",
        "(firstAsync,firstAsync)",
        "(setConfigOption,setConfigOption)",
        "(intersectsAsync,intersectsAsync)",
        "(release,vsimemRelease)",
        "(flushAsync,flushAsync)",
        "(LayerFields,New)",
        "(getConstructor,getConstructor)",
        "(ramp,ramp)",
        "(buildVRT,buildvrt)",
        "(difference,difference)",
        "(isSame,isSame)",
        "(fromEPSG,fromEPSG)",
        "(setGeometry,setGeometry)",
        "(fromWKB,createFromWkb)",
        "(executeSQLAsync,executeSQLAsync)",
        "(differenceAsync,differenceAsync)",
        "(infoAsync,infoAsync)",
        "(fromUserInput,fromUserInput)",
        "(RasterBand,New)",
        "(buildOverviews,buildOverviews)",
        "(_acquireLocksAsync,_acquireLocksAsync)",
        "(Polygon,New)",
        "(contains,contains)",
        "(readBlock,readBlock)",
        "(stat,stat)",
        "(CoordinateTransformation,New)",
        "(getBySampleCountAsync,getBySampleCountAsync)",
        "(setMetadata,setMetadata)",
        "(isEmpty,isEmpty)",
        "(segmentize,segmentize)",
        "(getMaskBand,getMaskBand)",
        "(asDataset,asDataset)",
        "(startLogging,StartLogging)",
        "(getEnvelope,getEnvelope)",
        "(fromWMSAUTO,fromWMSAUTO)",
        "(deleteDataset,deleteDataset)",
        "(executeSQL,executeSQL)",
        "(isVectical,isVertical)",
        "(closeRings,closeRings)",
        "(fromCRSURL,fromCRSURL)",
        "(getEnvelopeAsync,getEnvelopeAsync)",
        "(FeatureDefn,New)",
        "(isLocal,isLocal)",
        "(isSimple,isSimple)",
        "(MDArray,New)",
        "(asMDArray,asMDArray)",
        "(quiet,QuietOutput)",
        "(convexHull,convexHull)",
        "(setGCPs,setGCPs)",
        "(isProjected,isProjected)",
        "(closeRingsAsync,closeRingsAsync)",
        "(warp,warp)",
        "(destroy,destroy)",
        "(FeatureDefnFields,New)",
        "(toKML,exportToKML)",
        "(transformPoint,transformPoint)",
        "(addPixelFunc,addPixelFunc)",
        "(toGML,exportToGML)",
        "(fillNodata,fillNodata)",
        "(computeStatistics,computeStatistics)",
        "(Driver,New)",
        "(fromWKTAsync,createFromWktAsync)",
        "(fromURLAsync,fromURLAsync)",
        "(fromGeoJsonBufferAsync,createFromGeoJsonBufferAsync)",
        "(contourGenerate,contourGenerate)",
        "(suggestedWarpOutput,suggestedWarpOutput)",
        "(copyAsync,copyAsync)",
        "(getMaskFlags,getMaskFlags)",
        "(transformToAsync,transformToAsync)",
        "(polygonizeAsync,polygonizeAsync)",
        "(distanceAsync,distanceAsync)",
        "(EPSGTreatsAsNorthingEasting,EPSGTreatsAsNorthingEasting)",
        "(setAsync,setAsync)",
        "(toWKB,exportToWKB)",
        "(checksumImage,checksumImage)",
        "(copy,vsimemCopy)",
        "(touches,touches)",
        "(createCopyAsync,createCopyAsync)",
        "(toObject,toObject)",
        "(getExtent,getExtent)",
        "(ArrayDimensions,New)",
        "(isEmptyAsync,isEmptyAsync)",
        "(fromUserInputAsync,fromUserInputAsync)",
        "(crossesAsync,crossesAsync)",
        "(dem,dem)",
        "(crosses,crosses)",
        "(translateAsync,translateAsync)",
        "(MultiCurve,New)",
        "(GeometryCollectionChildren,New)",
        "(Feature,New)",
        "(GroupAttributes,New)",
        "(isValidAsync,isValidAsync)",
        "(centroid,centroid)",
        "(simplifyPreserveTopology,simplifyPreserveTopology)",
        "(reprojectImage,reprojectImage)",
        "(disjoint,disjoint)",
        "(info,info)",
        "(rasterizeAsync,rasterizeAsync)",
        "(suggestedWarpOutputAsync,suggestedWarpOutputAsync)",
        "(addAsync,addAsync)",
        "(LinearRing,New)",
        "(readDir,readDir)",
        "(boundaryAsync,boundaryAsync)",
        "(getFileList,getFileList)",
        "(CompoundCurveCurves,New)",
        "(toWKBAsync,exportToWKBAsync)",
        "(getName,getName)",
        "(sieveFilter,sieveFilter)",
        "(setAttributeFilter,setAttributeFilter)",
        "(fromESRI,fromESRI)",
        "(clampBlockAsync,clampBlockAsync)",
        "(rasterize,rasterize)",
        "(rename,rename)",
        "(Geometry,New)",
        "(bufferAsync,bufferAsync)",
        "(getAttrValue,getAttrValue)",
        "(fillNodataAsync,fillNodataAsync)",
        "(contourGenerateAsync,contourGenerateAsync)",
        "(vectorTranslateAsync,vectorTranslateAsync)",
        "(getGeometry,getGeometry)",
        "(fromMICoordSys,fromMICoordSys)",
        "(SpatialReference,New)",
        "(createAsync,createAsync)",
        "(symDifference,symDifference)",
        "(openAsync,gdal_openAsync)",
        "(getMetadataAsync,getMetadataAsync)",
        "(countAsync,countAsync)",
        "(LineStringPoints,New)",
        "(GDALDrivers,New)",
        "(overlapsAsync,overlapsAsync)",
        "(DatasetLayers,New)",
        "(addSubLineString,addSubLineString)",
        "(_acquireLocks,_acquireLocks)",
        "(equals,equals)",
        "(getConfigOption,getConfigOption)",
        "(setPROJSearchPath,setPROJSearchPath)",
        "(GeometryCollection,New)",
        "(getView,getView)",
        "(translate,translate)",
        "(intersection,intersection)",
        "(convexHullAsync,convexHullAsync)",
        "(swapXY,swapXY)",
        "(FieldDefn,New)",
        "(_triggerCPLError,ThrowDummyCPLError)",
        "(symDifferenceAsync,symDifferenceAsync)",
        "(fromGeoJsonAsync,createFromGeoJsonAsync)",
        "(writeBlockAsync,writeBlockAsync)",
        "(flush,flush)",
        "(isRing,isRing)",
        "(disjointAsync,disjointAsync)",
        "(MultiPolygon,New)",
        "(clone,clone)"
      ],
      "Charon": []
    },
    "@genee/desktop-idle": {
      "Gasket": [
        "(getIdleTime,desktopIdleGetIdleTime)"
      ],
      "Charon": [
        "(getIdleTime,desktopIdleGetIdleTime)"
      ]
    },
    "generate-rsa-keypair": {
      "Gasket": [
        "(generateRSAKeypair,generate_rsa_keypair)"
      ],
      "Charon": []
    },
    "genx": {
      "Gasket": [
        "(addAttributeLiteral,AddAttributeLiteral)",
        "(declareNamespace,DeclareNamespace)",
        "(startElementLiteral,StartElementLiteral)",
        "(Element,New)",
        "(addAttribute,AddAttribute)",
        "(endElementInline,EndElementInline)",
        "(endDocument,EndDocument)",
        "(getPrefix,GetPrefix)",
        "(Namespace,New)",
        "(startDocument,StartDoc)",
        "(startElement,StartElement)",
        "(endElement,EndElement)",
        "(addText,AddText)",
        "(declareElement,DeclareElement)",
        "(Attribute,New)",
        "(addComment,AddComment)",
        "(declareAttribute,DeclareAttribute)",
        "(Writer,New)"
      ],
      "Charon": [
        "(startDocument,StartDoc)",
        "(endDocument,EndDocument)",
        "(declareNamespace,DeclareNamespace)",
        "(declareElement,DeclareElement)",
        "(startElement,StartElement)",
        "(startElementLiteral,StartElementLiteral)",
        "(addText,AddText)",
        "(addComment,AddComment)",
        "(declareAttribute,DeclareAttribute)",
        "(addAttribute,AddAttribute)",
        "(addAttributeLiteral,AddAttributeLiteral)",
        "(endElement,EndElement)",
        "(endElementInline,EndElementInline)",
        "(getPrefix,GetPrefix)"
      ]
    },
    "@gera2ld/robotjs": {
      "Gasket": [
        "(getColor,getColor)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(dragMouse,dragMouse)",
        "(mouseToggle,mouseToggle)",
        "(typeString,typeString)",
        "(getPixelColor,getPixelColor)",
        "(unicodeTap,unicodeTap)",
        "(setXDisplayName,setXDisplayName)",
        "(mouseClick,mouseClick)",
        "(typeStringDelayed,typeStringDelayed)",
        "(scrollMouse,scrollMouse)",
        "(getXDisplayName,getXDisplayName)",
        "(keyToggle,keyToggle)",
        "(keyTap,keyTap)",
        "(getMousePos,getMousePos)",
        "(captureScreen,captureScreen)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(setMouseDelay,setMouseDelay)",
        "(getScreenSize,getScreenSize)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(unicodeTap,unicodeTap)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getColor,getColor)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "get-cursor-position": {
      "Gasket": [
        "(sync,Method)"
      ],
      "Charon": [
        "(sync,Method)"
      ]
    },
    "@getjerry/lambda-at-edge": {
      "Gasket": [
        "(simd,simd)",
        "(cache,cache)",
        "(format,format)",
        "(libvipsVersion,libvipsVersion)",
        "(counters,counters)",
        "(_maxColourDistance,_maxColourDistance)",
        "(stats,stats)",
        "(concurrency,concurrency)",
        "(metadata,metadata)",
        "(pipeline,pipeline)"
      ],
      "Charon": [
        "(metadata,metadata)",
        "(pipeline,pipeline)",
        "(cache,cache)",
        "(concurrency,concurrency)",
        "(counters,counters)",
        "(simd,simd)",
        "(libvipsVersion,libvipsVersion)",
        "(format,format)",
        "(_maxColourDistance,_maxColourDistance)",
        "(stats,stats)"
      ]
    },
    "getrusage": {
      "Gasket": [
        "(usage,GetUsage)",
        "(getcputime,GetCPUTime)",
        "(getsystemtime,GetSystemTime)"
      ],
      "Charon": [
        "(usage,GetUsage)",
        "(getcputime,GetCPUTime)",
        "(getsystemtime,GetSystemTime)"
      ]
    },
    "@gifyourgame/spawn-as-admin": {
      "Gasket": [
        "(spawnAsAdmin,SpawnAsAdmin)"
      ],
      "Charon": [
        "(spawnAsAdmin,SpawnAsAdmin)"
      ]
    },
    "@gilsdav/robotjs": {
      "Gasket": [
        "(getColor,getColor)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(dragMouse,dragMouse)",
        "(mouseToggle,mouseToggle)",
        "(typeString,typeString)",
        "(getPixelColor,getPixelColor)",
        "(unicodeTap,unicodeTap)",
        "(setXDisplayName,setXDisplayName)",
        "(mouseClick,mouseClick)",
        "(typeStringDelayed,typeStringDelayed)",
        "(scrollMouse,scrollMouse)",
        "(getXDisplayName,getXDisplayName)",
        "(keyToggle,keyToggle)",
        "(keyTap,keyTap)",
        "(getMousePos,getMousePos)",
        "(captureScreen,captureScreen)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(setMouseDelay,setMouseDelay)",
        "(getScreenSize,getScreenSize)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(unicodeTap,unicodeTap)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getColor,getColor)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "git-utils": {
      "Gasket": [
        "(getPath,GetPath)",
        "(checkoutHead,CheckoutHead)",
        "(_getWorkingDirectory,GetWorkingDirectory)",
        "(getHead,GetHead)",
        "(compareCommitsAsync,CompareCommitsAsync)",
        "(getIndexBlob,GetIndexBlob)",
        "(checkoutRef,CheckoutReference)",
        "(compareCommits,CompareCommits)",
        "(Repository,New)",
        "(refreshIndex,RefreshIndex)",
        "(exists,Exists)",
        "(getConfigValue,GetConfigValue)",
        "(add,Add)",
        "(getLineDiffs,GetLineDiffs)",
        "(_release,Release)",
        "(getReferences,GetReferences)",
        "(isIgnored,IsIgnored)",
        "(getStatusAsync,GetStatusAsync)",
        "(getStatus,GetStatus)",
        "(getHeadAsync,GetHeadAsync)",
        "(getStatusForPath,GetStatusForPath)",
        "(getLineDiffDetails,GetLineDiffDetails)",
        "(setConfigValue,SetConfigValue)",
        "(getReferenceTarget,GetReferenceTarget)",
        "(getHeadBlob,GetHeadBlob)",
        "(getSubmodulePaths,GetSubmodulePaths)",
        "(isSubmodule,IsSubmodule)",
        "(getDiffStats,GetDiffStats)"
      ],
      "Charon": [
        "(getPath,Repository)",
        "(_getWorkingDirectory,Repository)",
        "(exists,Repository)",
        "(getSubmodulePaths,Repository)",
        "(getHead,Repository)",
        "(getHeadAsync,Repository)",
        "(refreshIndex,Repository)",
        "(isIgnored,Repository)",
        "(isSubmodule,Repository)",
        "(getConfigValue,Repository)",
        "(setConfigValue,Repository)",
        "(getStatus,Repository)",
        "(getStatusForPath,Repository)",
        "(getStatusAsync,Repository)",
        "(checkoutHead,Repository)",
        "(getReferenceTarget,Repository)",
        "(getDiffStats,Repository)",
        "(getIndexBlob,Repository)",
        "(getHeadBlob,Repository)",
        "(compareCommits,Repository)",
        "(compareCommitsAsync,Repository)",
        "(_release,Repository)",
        "(getLineDiffs,Repository)",
        "(getLineDiffDetails,Repository)",
        "(getReferences,Repository)",
        "(checkoutRef,Repository)",
        "(add,Repository)"
      ]
    },
    "gl": {
      "Gasket": [
        "(_vertexAttribDivisor,VertexAttribDivisor)",
        "(cullFace,CullFace)",
        "(getSupportedExtensions,GetSupportedExtensions)",
        "(clearColor,ClearColor)",
        "(extWEBGL_draw_buffers,EXTWEBGL_draw_buffers)",
        "(clear,Clear)",
        "(blendFunc,BlendFunc)",
        "(viewport,Viewport)",
        "(uniform3i,Uniform3i)",
        "(bindFramebuffer,BindFramebuffer)",
        "(renderbufferStorage,RenderbufferStorage)",
        "(isProgram,IsProgram)",
        "(uniform4f,Uniform4f)",
        "(pixelStorei,PixelStorei)",
        "(cleanup,DisposeAll)",
        "(enableVertexAttribArray,EnableVertexAttribArray)",
        "(uniformMatrix2fv,UniformMatrix2fv)",
        "(uniform3f,Uniform3f)",
        "(framebufferTexture2D,FramebufferTexture2D)",
        "(bindAttribLocation,BindAttribLocation)",
        "(deleteVertexArrayOES,DeleteVertexArrayOES)",
        "(isShader,IsShader)",
        "(texParameteri,TexParameteri)",
        "(createTexture,CreateTexture)",
        "(stencilOpSeparate,StencilOpSeparate)",
        "(getBufferParameter,GetBufferParameter)",
        "(shaderSource,ShaderSource)",
        "(deleteProgram,DeleteProgram)",
        "(getRenderbufferParameter,GetRenderbufferParameter)",
        "(getFramebufferAttachmentParameter,GetFramebufferAttachmentParameter)",
        "(createFramebuffer,CreateFramebuffer)",
        "(uniform1i,Uniform1i)",
        "(isEnabled,IsEnabled)",
        "(generateMipmap,GenerateMipmap)",
        "(stencilFuncSeparate,StencilFuncSeparate)",
        "(destroy,Destroy)",
        "(getShaderInfoLog,GetShaderInfoLog)",
        "(disable,Disable)",
        "(getProgramInfoLog,GetProgramInfoLog)",
        "(colorMask,ColorMask)",
        "(lineWidth,LineWidth)",
        "(bindBuffer,BindBuffer)",
        "(useProgram,UseProgram)",
        "(getVertexAttrib,GetVertexAttrib)",
        "(bufferSubData,BufferSubData)",
        "(sampleCoverage,SampleCoverage)",
        "(stencilMask,StencilMask)",
        "(drawArrays,DrawArrays)",
        "(uniform2f,Uniform2f)",
        "(blendColor,BlendColor)",
        "(vertexAttrib2f,VertexAttrib2f)",
        "(vertexAttrib4f,VertexAttrib4f)",
        "(copyTexImage2D,CopyTexImage2D)",
        "(stencilOp,StencilOp)",
        "(createProgram,CreateProgram)",
        "(vertexAttrib1f,VertexAttrib1f)",
        "(stencilMaskSeparate,StencilMaskSeparate)",
        "(depthRange,DepthRange)",
        "(getProgramParameter,GetProgramParameter)",
        "(depthFunc,DepthFunc)",
        "(uniform4i,Uniform4i)",
        "(drawElements,DrawElements)",
        "(validateProgram,ValidateProgram)",
        "(getShaderParameter,GetShaderParameter)",
        "(drawBuffersWEBGL,DrawBuffersWEBGL)",
        "(readPixels,ReadPixels)",
        "(linkProgram,LinkProgram)",
        "(_drawElementsInstanced,DrawElementsInstanced)",
        "(isFramebuffer,IsFramebuffer)",
        "(isTexture,IsTexture)",
        "(uniform1f,Uniform1f)",
        "(isVertexArrayOES,IsVertexArrayOES)",
        "(getAttachedShaders,GetAttachedShaders)",
        "(texImage2D,TexImage2D)",
        "(_drawArraysInstanced,DrawArraysInstanced)",
        "(deleteBuffer,DeleteBuffer)",
        "(scissor,Scissor)",
        "(deleteFramebuffer,DeleteFramebuffer)",
        "(deleteShader,DeleteShader)",
        "(getActiveAttrib,GetActiveAttrib)",
        "(getShaderPrecisionFormat,GetShaderPrecisionFormat)",
        "(framebufferRenderbuffer,FramebufferRenderbuffer)",
        "(attachShader,AttachShader)",
        "(checkFramebufferStatus,CheckFramebufferStatus)",
        "(polygonOffset,PolygonOffset)",
        "(getError,GetError)",
        "(compileShader,CompileShader)",
        "(isBuffer,IsBuffer)",
        "(getTexParameter,GetTexParameter)",
        "(setError,SetError)",
        "(uniformMatrix4fv,UniformMatrix4fv)",
        "(texParameterf,TexParameterf)",
        "(texSubImage2D,TexSubImage2D)",
        "(getUniform,GetUniform)",
        "(createShader,CreateShader)",
        "(getUniformLocation,GetUniformLocation)",
        "(blendFuncSeparate,BlendFuncSeparate)",
        "(detachShader,DetachShader)",
        "(getShaderSource,GetShaderSource)",
        "(getVertexAttribOffset,GetVertexAttribOffset)",
        "(blendEquationSeparate,BlendEquationSeparate)",
        "(createVertexArrayOES,CreateVertexArrayOES)",
        "(bufferData,BufferData)",
        "(copyTexSubImage2D,CopyTexSubImage2D)",
        "(bindTexture,BindTexture)",
        "(hint,Hint)",
        "(uniform2i,Uniform2i)",
        "(getAttribLocation,GetAttribLocation)",
        "(deleteTexture,DeleteTexture)",
        "(frontFace,FrontFace)",
        "(vertexAttrib3f,VertexAttrib3f)",
        "(getExtension,GetExtension)",
        "(blendEquation,BlendEquation)",
        "(vertexAttribPointer,VertexAttribPointer)",
        "(disableVertexAttribArray,DisableVertexAttribArray)",
        "(createRenderbuffer,CreateRenderbuffer)",
        "(uniformMatrix3fv,UniformMatrix3fv)",
        "(activeTexture,ActiveTexture)",
        "(deleteRenderbuffer,DeleteRenderbuffer)",
        "(getActiveUniform,GetActiveUniform)",
        "(createBuffer,CreateBuffer)",
        "(getParameter,GetParameter)",
        "(bindVertexArrayOES,BindVertexArrayOES)",
        "(bindRenderbuffer,BindRenderbuffer)",
        "(clearStencil,ClearStencil)",
        "(clearDepth,ClearDepth)",
        "(isRenderbuffer,IsRenderbuffer)",
        "(enable,Enable)",
        "(depthMask,DepthMask)",
        "(WebGLRenderingContext,New)",
        "(finish,Finish)",
        "(stencilFunc,StencilFunc)",
        "(flush,Flush)"
      ],
      "Charon": [
        "(setError,WebGLRenderingContext)",
        "(size,size)",
        "(type,type)",
        "(name,name)",
        "(cleanup,WebGLRenderingContext)"
      ]
    },
    "@glaced/gles2-2.0": {
      "Gasket": [
        "(getBufferParameteriv,napi_glGetBufferParameteriv)",
        "(renderbufferStorage,napi_glRenderbufferStorage)",
        "(isEnabled,napi_glIsEnabled)",
        "(stencilMask,napi_glStencilMask)",
        "(uniform4f,napi_glUniform4f)",
        "(disable,napi_glDisable)",
        "(genRenderbuffers,napi_glGenRenderbuffers)",
        "(getProgramiv,napi_glGetProgramiv)",
        "(colorMask,napi_glColorMask)",
        "(drawElements,napi_glDrawElements)",
        "(getFramebufferAttachmentParameteriv,napi_glGetFramebufferAttachmentParameteriv)",
        "(uniform1iv,napi_glUniform1iv)",
        "(getVertexAttribPointerv,napi_glGetVertexAttribPointerv)",
        "(deleteBuffers,napi_glDeleteBuffers)",
        "(cullFace,napi_glCullFace)",
        "(depthRangef,napi_glDepthRangef)",
        "(bindBuffer,napi_glBindBuffer)",
        "(bufferData,napi_glBufferData)",
        "(depthFunc,napi_glDepthFunc)",
        "(framebufferTexture2D,napi_glFramebufferTexture2D)",
        "(shaderSource,napi_glShaderSource)",
        "(vertexAttrib3f,napi_glVertexAttrib3f)",
        "(finish,napi_glFinish)",
        "(uniform1f,napi_glUniform1f)",
        "(texImage2D,napi_glTexImage2D)",
        "(deleteTextures,napi_glDeleteTextures)",
        "(getString,napi_glGetString)",
        "(bindFramebuffer,napi_glBindFramebuffer)",
        "(isTexture,napi_glIsTexture)",
        "(depthMask,napi_glDepthMask)",
        "(uniform3iv,napi_glUniform3iv)",
        "(sampleCoverage,napi_glSampleCoverage)",
        "(drawArrays,napi_glDrawArrays)",
        "(getShaderSource,napi_glGetShaderSource)",
        "(vertexAttrib3fv,napi_glVertexAttrib3fv)",
        "(stencilOpSeparate,napi_glStencilOpSeparate)",
        "(polygonOffset,napi_glPolygonOffset)",
        "(stencilMaskSeparate,napi_glStencilMaskSeparate)",
        "(vertexAttrib1fv,napi_glVertexAttrib1fv)",
        "(attachShader,napi_glAttachShader)",
        "(getUniformLocation,napi_glGetUniformLocation)",
        "(clearDepthf,napi_glClearDepthf)",
        "(viewport,napi_glViewport)",
        "(uniform1i,napi_glUniform1i)",
        "(getTexParameteriv,napi_glGetTexParameteriv)",
        "(scissor,napi_glScissor)",
        "(isFramebuffer,napi_glIsFramebuffer)",
        "(generateMipmap,napi_glGenerateMipmap)",
        "(clearStencil,napi_glClearStencil)",
        "(genBuffers,napi_glGenBuffers)",
        "(releaseShaderCompiler,napi_glReleaseShaderCompiler)",
        "(getShaderPrecisionFormat,napi_glGetShaderPrecisionFormat)",
        "(activeTexture,napi_glActiveTexture)",
        "(vertexAttrib2f,napi_glVertexAttrib2f)",
        "(uniformMatrix4fv,napi_glUniformMatrix4fv)",
        "(getRenderbufferParameteriv,napi_glGetRenderbufferParameteriv)",
        "(uniform2f,napi_glUniform2f)",
        "(deleteRenderbuffers,napi_glDeleteRenderbuffers)",
        "(texParameteriv,napi_glTexParameteriv)",
        "(uniformMatrix2fv,napi_glUniformMatrix2fv)",
        "(vertexAttribPointer,napi_glVertexAttribPointer)",
        "(useProgram,napi_glUseProgram)",
        "(copyTexImage2D,napi_glCopyTexImage2D)",
        "(getProgramInfoLog,napi_glGetProgramInfoLog)",
        "(clear,napi_glClear)",
        "(createProgram,napi_glCreateProgram)",
        "(blendFunc,napi_glBlendFunc)",
        "(deleteFramebuffers,napi_glDeleteFramebuffers)",
        "(getTexParameterfv,napi_glGetTexParameterfv)",
        "(uniform3fv,napi_glUniform3fv)",
        "(isBuffer,napi_glIsBuffer)",
        "(genFramebuffers,napi_glGenFramebuffers)",
        "(getIntegerv,napi_glGetIntegerv)",
        "(uniform4i,napi_glUniform4i)",
        "(getShaderiv,napi_glGetShaderiv)",
        "(texParameterf,napi_glTexParameterf)",
        "(getUniformfv,napi_glGetUniformfv)",
        "(compileShader,napi_glCompileShader)",
        "(genTextures,napi_glGenTextures)",
        "(compressedTexSubImage2D,napi_glCompressedTexSubImage2D)",
        "(enableVertexAttribArray,napi_glEnableVertexAttribArray)",
        "(isRenderbuffer,napi_glIsRenderbuffer)",
        "(vertexAttrib2fv,napi_glVertexAttrib2fv)",
        "(bindTexture,napi_glBindTexture)",
        "(getVertexAttribfv,napi_glGetVertexAttribfv)",
        "(blendEquation,napi_glBlendEquation)",
        "(clearColor,napi_glClearColor)",
        "(uniform2i,napi_glUniform2i)",
        "(blendColor,napi_glBlendColor)",
        "(compressedTexImage2D,napi_glCompressedTexImage2D)",
        "(getShaderInfoLog,napi_glGetShaderInfoLog)",
        "(getBooleanv,napi_glGetBooleanv)",
        "(detachShader,napi_glDetachShader)",
        "(blendEquationSeparate,napi_glBlendEquationSeparate)",
        "(enable,napi_glEnable)",
        "(isProgram,napi_glIsProgram)",
        "(uniform4fv,napi_glUniform4fv)",
        "(hint,napi_glHint)",
        "(isShader,napi_glIsShader)",
        "(uniform2fv,napi_glUniform2fv)",
        "(getError,napi_glGetError)",
        "(flush,napi_glFlush)",
        "(vertexAttrib4f,napi_glVertexAttrib4f)",
        "(getFloatv,napi_glGetFloatv)",
        "(uniform3f,napi_glUniform3f)",
        "(stencilOp,napi_glStencilOp)",
        "(linkProgram,napi_glLinkProgram)",
        "(bindRenderbuffer,napi_glBindRenderbuffer)",
        "(blendFuncSeparate,napi_glBlendFuncSeparate)",
        "(getActiveAttrib,napi_glGetActiveAttrib)",
        "(uniform1fv,napi_glUniform1fv)",
        "(getUniformiv,napi_glGetUniformiv)",
        "(bindAttribLocation,napi_glBindAttribLocation)",
        "(texSubImage2D,napi_glTexSubImage2D)",
        "(checkFramebufferStatus,napi_glCheckFramebufferStatus)",
        "(uniform3i,napi_glUniform3i)",
        "(texParameteri,napi_glTexParameteri)",
        "(readPixels,napi_glReadPixels)",
        "(deleteShader,napi_glDeleteShader)",
        "(stencilFuncSeparate,napi_glStencilFuncSeparate)",
        "(uniform2iv,napi_glUniform2iv)",
        "(lineWidth,napi_glLineWidth)",
        "(shaderBinary,napi_glShaderBinary)",
        "(uniform4iv,napi_glUniform4iv)",
        "(getVertexAttribiv,napi_glGetVertexAttribiv)",
        "(createShader,napi_glCreateShader)",
        "(vertexAttrib1f,napi_glVertexAttrib1f)",
        "(bufferSubData,napi_glBufferSubData)",
        "(frontFace,napi_glFrontFace)",
        "(getActiveUniform,napi_glGetActiveUniform)",
        "(loadContext,napi_loadContext)",
        "(uniformMatrix3fv,napi_glUniformMatrix3fv)",
        "(vertexAttrib4fv,napi_glVertexAttrib4fv)",
        "(pixelStorei,napi_glPixelStorei)",
        "(stencilFunc,napi_glStencilFunc)",
        "(texParameterfv,napi_glTexParameterfv)",
        "(getAttribLocation,napi_glGetAttribLocation)",
        "(getAttachedShaders,napi_glGetAttachedShaders)",
        "(validateProgram,napi_glValidateProgram)",
        "(copyTexSubImage2D,napi_glCopyTexSubImage2D)",
        "(framebufferRenderbuffer,napi_glFramebufferRenderbuffer)",
        "(deleteProgram,napi_glDeleteProgram)",
        "(disableVertexAttribArray,napi_glDisableVertexAttribArray)"
      ],
      "Charon": []
    },
    "@glaced/glfw": {
      "Gasket": [
        "(extensionSupported,napi_extensionSupported)",
        "(getMouseButton,napi_getMouseButton)",
        "(setWindowCloseCallback,napi_setWindowCloseCallback)",
        "(setInputMode,napi_setInputMode)",
        "(getJoystickName,napi_getJoystickName)",
        "(createStandardCursor,napi_createStandardCursor)",
        "(swapBuffers,napi_swapBuffers)",
        "(getVideoModes,napi_getVideoModes)",
        "(windowShouldClose,napi_windowShouldClose)",
        "(setCursor,napi_setCursor)",
        "(setWindowSize,napi_setWindowSize)",
        "(getCurrentContext,napi_getCurrentContext)",
        "(getClipboardString,napi_getClipboardString)",
        "(setClipboardString,napi_setClipboardString)",
        "(makeContextCurrent,napi_makeContextCurrent)",
        "(createWindow,napi_createWindow)",
        "(getCursorPos,napi_getCursorPos)",
        "(getFramebufferSize,napi_getFramebufferSize)",
        "(setFramebufferSizeCallback,napi_setFramebufferSizeCallback)",
        "(pollEvents,napi_pollEvents)",
        "(setCursorPosCallback,napi_setCursorPosCallback)",
        "(destroyCursor,napi_destroyCursor)",
        "(init,napi_init)",
        "(getVideoMode,napi_getVideoMode)",
        "(setWindowSizeCallback,napi_setWindowSizeCallback)",
        "(getJoystickAxes,napi_getJoystickAxes)",
        "(getInputMode,napi_getInputMode)",
        "(destroyWindow,napi_destroyWindow)",
        "(setTime,napi_setTime)",
        "(getMonitors,napi_getMonitors)",
        "(windowHint,napi_windowHint)",
        "(setKeyCallback,napi_setKeyCallback)",
        "(getWindowSize,napi_getWindowSize)",
        "(getKey,napi_getKey)",
        "(joystickPresent,napi_joystickPresent)",
        "(setWindowTitle,napi_setWindowTitle)",
        "(terminate,napi_terminate)",
        "(getTimerValue,napi_getTimerValue)",
        "(getKeyName,napi_getKeyName)",
        "(swapInterval,napi_swapInterval)",
        "(getPrimaryMonitor,napi_getPrimaryMonitor)",
        "(setMouseButtonCallback,napi_setMouseButtonCallback)",
        "(getVersionString,napi_getVersionString)",
        "(getJoystickButtons,napi_getJoystickButtons)",
        "(setErrorCallback,napi_setErrorCallback)",
        "(getProcAddress,napi_getProcAddress)",
        "(getTimerFrequency,napi_getTimerFrequency)",
        "(getVersion,napi_getVersion)",
        "(getTime,napi_getTime)",
        "(setCursorPos,napi_setCursorPos)"
      ],
      "Charon": []
    },
    "gl-client": {
      "Gasket": [
        "(schedulerNew,h01218163223195fc)",
        "(signerRunInForeground,h040b45eb76f80d8c)",
        "(schedulerRecover,h040b45eb76f80d8c)",
        "(tlsConfigNew,h01218163223195fc)",
        "(signerHandleShutdown,h040b45eb76f80d8c)",
        "(signerVersion,h040b45eb76f80d8c)",
        "(incomingStreamNext,h040b45eb76f80d8c)",
        "(schedulerGetInviteCodes,h01218163223195fc)",
        "(schedulerSchedule,h01218163223195fc)",
        "(signerNew,h01218163223195fc)",
        "(nodeCallStreamIncoming,h01218163223195fc)",
        "(signerRunInThread,h01218163223195fc)",
        "(tlsConfigIdentity,h01218163223195fc)",
        "(nodeCall,h040b45eb76f80d8c)",
        "(logStreamNext,h040b45eb76f80d8c)",
        "(schedulerRegister,h040b45eb76f80d8c)",
        "(signerNodeId,h040b45eb76f80d8c)",
        "(nodeCallStreamLog,h01218163223195fc)"
      ],
      "Charon": []
    },
    "glfw-n-api": {
      "Gasket": [
        "(_glfwGetMonitorName,_glfwGetMonitorName)",
        "(_glfwGetJoystickGUID,_glfwGetJoystickGUID)",
        "(_glfwGetError,_glfwGetError)",
        "(_glfwGetTimerValue,_glfwGetTimerValue)",
        "(_glfwSetWindowTitle,_glfwSetWindowTitle)",
        "(_glfwInitHint,_glfwInitHint)",
        "(_glfwGetInputMode,_glfwGetInputMode)",
        "(_glfwGetWindowFrameSize,_glfwGetWindowFrameSize)",
        "(_glfwInit,_glfwInit)",
        "(_glfwGetRequiredInstanceExtensions,_glfwGetRequiredInstanceExtensions)",
        "(_glfwGetGammaRamp,_glfwGetGammaRamp)",
        "(getAddress,getAddress)",
        "(_glfwUpdateGamepadMappings,_glfwUpdateGamepadMappings)",
        "(_glfwSetWindowUserPointer,_glfwSetWindowUserPointer)",
        "(_glfwSetGammaRamp,_glfwSetGammaRamp)",
        "(_glfwGetWindowSize,_glfwGetWindowSize)",
        "(_glfwSetWindowPosCallback,_glfwSetWindowPosCallback)",
        "(_glfwSetWindowSize,_glfwSetWindowSize)",
        "(_glfwSetCursorPos,_glfwSetCursorPos)",
        "(_glfwRestoreWindow,_glfwRestoreWindow)",
        "(_glfwGetWindowPos,_glfwGetWindowPos)",
        "(_glfwGetMonitorContentScale,_glfwGetMonitorContentScale)",
        "(_glfwGetWindowAttrib,_glfwGetWindowAttrib)",
        "(_glfwVulkanSupported,_glfwVulkanSupported)",
        "(_glfwGetVersion,_glfwGetVersion)",
        "(_glfwCreateStandardCursor,_glfwCreateStandardCursor)",
        "(_glfwSetWindowContentScaleCallback,_glfwSetWindowContentScaleCallback)",
        "(_glfwSetCursor,_glfwSetCursor)",
        "(_glfwSetTime,_glfwSetTime)",
        "(_glfwWaitEvents,_glfwWaitEvents)",
        "(_glfwSetWindowCloseCallback,_glfwSetWindowCloseCallback)",
        "(_glfwIconifyWindow,_glfwIconifyWindow)",
        "(_glfwGetJoystickUserPointer,_glfwGetJoystickUserPointer)",
        "(_glfwWindowHint,_glfwWindowHint)",
        "(_glfwSetWindowSizeCallback,_glfwSetWindowSizeCallback)",
        "(_glfwJoystickIsGamepad,_glfwJoystickIsGamepad)",
        "(_glfwSetMonitorUserPointer,_glfwSetMonitorUserPointer)",
        "(_glfwSetWindowSizeLimits,_glfwSetWindowSizeLimits)",
        "(_glfwPollEvents,_glfwPollEvents)",
        "(_glfwWindowHintString,_glfwWindowHintString)",
        "(_glfwGetWindowContentScale,_glfwGetWindowContentScale)",
        "(_glfwGetKeyName,_glfwGetKeyName)",
        "(_glfwDestroyCursor,_glfwDestroyCursor)",
        "(_glfwSetWindowShouldClose,_glfwSetWindowShouldClose)",
        "(_glfwWindowShouldClose,_glfwWindowShouldClose)",
        "(_glfwSetClipboardString,_glfwSetClipboardString)",
        "(_glfwSwapBuffers,_glfwSwapBuffers)",
        "(_glfwGetMonitorWorkarea,_glfwGetMonitorWorkarea)",
        "(_glfwExtensionSupported,_glfwExtensionSupported)",
        "(_glfwGetMonitorPos,_glfwGetMonitorPos)",
        "(_glfwDefaultWindowHints,_glfwDefaultWindowHints)",
        "(_glfwGetWindowOpacity,_glfwGetWindowOpacity)",
        "(_glfwSetCharCallback,_glfwSetCharCallback)",
        "(_glfwJoystickPresent,_glfwJoystickPresent)",
        "(_glfwGetClipboardString,_glfwGetClipboardString)",
        "(_glfwGetMonitorPhysicalSize,_glfwGetMonitorPhysicalSize)",
        "(_glfwGetVideoMode,_glfwGetVideoMode)",
        "(_glfwRawMouseMotionSupported,_glfwRawMouseMotionSupported)",
        "(_glfwTerminate,_glfwTerminate)",
        "(_glfwGetTime,_glfwGetTime)",
        "(_glfwSetWindowMonitor,_glfwSetWindowMonitor)",
        "(_glfwShowWindow,_glfwShowWindow)",
        "(_glfwSetWindowAspectRatio,_glfwSetWindowAspectRatio)",
        "(_glfwGetGamepadState,_glfwGetGamepadState)",
        "(_glfwSetKeyCallback,_glfwSetKeyCallback)",
        "(_glfwGetMouseButton,_glfwGetMouseButton)",
        "(_glfwGetVersionString,_glfwGetVersionString)",
        "(_glfwPostEmptyEvent,_glfwPostEmptyEvent)",
        "(_glfwSetCursorEnterCallback,_glfwSetCursorEnterCallback)",
        "(_glfwGetWindowMonitor,_glfwGetWindowMonitor)",
        "(_glfwGetJoystickButtons,_glfwGetJoystickButtons)",
        "(_glfwSetWindowAttrib,_glfwSetWindowAttrib)",
        "(_glfwFocusWindow,_glfwFocusWindow)",
        "(_glfwGetJoystickHats,_glfwGetJoystickHats)",
        "(_glfwDestroyWindow,_glfwDestroyWindow)",
        "(_glfwMaximizeWindow,_glfwMaximizeWindow)",
        "(_glfwGetJoystickName,_glfwGetJoystickName)",
        "(_glfwSetCharModsCallback,_glfwSetCharModsCallback)",
        "(_glfwSetCursorPosCallback,_glfwSetCursorPosCallback)",
        "(_glfwSetWindowMaximizeCallback,_glfwSetWindowMaximizeCallback)",
        "(_glfwSetWindowIconifyCallback,_glfwSetWindowIconifyCallback)",
        "(_glfwHideWindow,_glfwHideWindow)",
        "(_glfwSetWindowOpacity,_glfwSetWindowOpacity)",
        "(_glfwSetJoystickUserPointer,_glfwSetJoystickUserPointer)",
        "(_glfwGetGamepadName,_glfwGetGamepadName)",
        "(_glfwSwapInterval,_glfwSwapInterval)",
        "(_glfwSetWindowFocusCallback,_glfwSetWindowFocusCallback)",
        "(_glfwCreateCursor,_glfwCreateCursor)",
        "(_glfwGetKey,_glfwGetKey)",
        "(_glfwGetMonitors,_glfwGetMonitors)",
        "(_glfwSetFramebufferSizeCallback,_glfwSetFramebufferSizeCallback)",
        "(_glfwGetCursorPos,_glfwGetCursorPos)",
        "(_glfwSetMouseButtonCallback,_glfwSetMouseButtonCallback)",
        "(_glfwGetJoystickAxes,_glfwGetJoystickAxes)",
        "(_glfwWaitEventsTimeout,_glfwWaitEventsTimeout)",
        "(_glfwSetMonitorCallback,_glfwSetMonitorCallback)",
        "(_glfwGetMonitorUserPointer,_glfwGetMonitorUserPointer)",
        "(_glfwMakeContextCurrent,_glfwMakeContextCurrent)",
        "(_glfwSetWindowRefreshCallback,_glfwSetWindowRefreshCallback)",
        "(_glfwSetWindowIcon,_glfwSetWindowIcon)",
        "(_glfwGetPrimaryMonitor,_glfwGetPrimaryMonitor)",
        "(getMemory,getMemory)",
        "(_glfwCreateWindow,_glfwCreateWindow)",
        "(_glfwGetTimerFrequency,_glfwGetTimerFrequency)",
        "(_glfwRequestWindowAttention,_glfwRequestWindowAttention)",
        "(_glfwSetInputMode,_glfwSetInputMode)",
        "(_glfwGetKeyScancode,_glfwGetKeyScancode)",
        "(_glfwSetErrorCallback,_glfwSetErrorCallback)",
        "(_glfwGetWindowUserPointer,_glfwGetWindowUserPointer)",
        "(_glfwSetJoystickCallback,_glfwSetJoystickCallback)",
        "(_glfwGetVideoModes,_glfwGetVideoModes)",
        "(_glfwGetFramebufferSize,_glfwGetFramebufferSize)",
        "(_glfwGetProcAddress,_glfwGetProcAddress)",
        "(_glfwSetWindowPos,_glfwSetWindowPos)",
        "(_glfwSetScrollCallback,_glfwSetScrollCallback)",
        "(_glfwSetGamma,_glfwSetGamma)",
        "(_glfwSetDropCallback,_glfwSetDropCallback)",
        "(_glfwGetCurrentContext,_glfwGetCurrentContext)"
      ],
      "Charon": []
    },
    "glpk": {
      "Gasket": [
        "(getRowPrim,GetRowPrim)",
        "(getColDual,GetColDual)",
        "(mipColVal,MipColVal)",
        "(getProbName,GetProbName)",
        "(readMip,ReadMip)",
        "(exactSync,ExactSync)",
        "(printMipSync,PrintMipSync)",
        "(getBhead,GetBhead)",
        "(findCol,FindCol)",
        "(addRows,AddRows)",
        "(erase,Erase)",
        "(getPrimStat,GetPrimStat)",
        "(unscaleSync,UnscaleSync)",
        "(getDualStat,GetDualStat)",
        "(exact,Exact)",
        "(iptColDual,IptColDual)",
        "(getColLb,GetColLb)",
        "(getRowStat,GetRowStat)",
        "(writeMpsSync,WriteMpsSync)",
        "(writeProbSync,WriteProbSync)",
        "(readLpSync,ReadLpSync)",
        "(getColName,GetColName)",
        "(setColStat,SetColStat)",
        "(writeMipSync,WriteMipSync)",
        "(getLine,getLine)",
        "(factorize,Factorize)",
        "(writeProb,WriteProb)",
        "(setColBnds,SetColBnds)",
        "(readLp,ReadLp)",
        "(setItCnt,SetItCnt)",
        "(buildProb,BuildProb)",
        "(getColPrim,GetColPrim)",
        "(findRow,FindRow)",
        "(createIndex,CreateIndex)",
        "(getRowLb,GetRowLb)",
        "(readProb,ReadProb)",
        "(setRii,SetRii)",
        "(setProbName,SetProbName)",
        "(writeSolSync,WriteSolSync)",
        "(printSol,PrintSol)",
        "(writeLpSync,WriteLpSync)",
        "(getRowName,GetRowName)",
        "(printIpt,PrintIpt)",
        "(printSolSync,PrintSolSync)",
        "(delRows,DelRows)",
        "(mipStatus,MipStatus)",
        "(writeIpt,WriteIpt)",
        "(setObjCoef,SetObjCoef)",
        "(getMatRow,GetMatRow)",
        "(setRowName,SetRowName)",
        "(delCols,DelCols)",
        "(getNumInt,GetNumInt)",
        "(setBfcp,SetBfcp)",
        "(intoptSync,IntoptSync)",
        "(iptStatus,IptStatus)",
        "(printRangesSync,PrintRangesSync)",
        "(printIptSync,PrintIptSync)",
        "(readModel,ReadModel)",
        "(mipRowVal,MipRowVal)",
        "(getSjj,GetSjj)",
        "(getLastError,getLastError)",
        "(readSol,ReadSol)",
        "(readIptSync,ReadIptSync)",
        "(cpxBasis,CpxBasis)",
        "(getNumRows,GetNumRows)",
        "(addCols,AddCols)",
        "(readIpt,ReadIpt)",
        "(getObjName,GetObjName)",
        "(getRowUb,GetRowUb)",
        "(setSjj,SetSjj)",
        "(getColStat,GetColStat)",
        "(getMatCol,GetMatCol)",
        "(warmUp,WarmUp)",
        "(getItCnt,GetItCnt)",
        "(delete,Delete)",
        "(writeIptSync,WriteIptSync)",
        "(deleteIndex,DeleteIndex)",
        "(getRii,GetRii)",
        "(checkKkt,CheckKkt)",
        "(writeLp,WriteLp)",
        "(getObjDir,GetObjDir)",
        "(readDataSync,ReadDataSync)",
        "(generate,Generate)",
        "(getNumCols,GetNumCols)",
        "(getNumNz,GetNumNz)",
        "(writeSol,WriteSol)",
        "(readData,ReadData)",
        "(readMpsSync,ReadMpsSync)",
        "(readModelSync,ReadModelSync)",
        "(iptRowPrim,IptRowPrim)",
        "(intopt,Intopt)",
        "(setObjDir,SetObjDir)",
        "(getObjVal,GetObjVal)",
        "(getColType,GetColType)",
        "(getColBind,GetColBind)",
        "(getStatus,GetStatus)",
        "(setObjName,SetObjName)",
        "(getColUb,GetColUb)",
        "(bfExists,BfExists)",
        "(setMatCol,SetMatCol)",
        "(loadMatrix,LoadMatrix)",
        "(iptColPrim,IptColPrim)",
        "(advBasis,AdvBasis)",
        "(writeMip,WriteMip)",
        "(Problem,New)",
        "(unscale,Unscale)",
        "(buildProbSync,BuildProbSync)",
        "(setColName,SetColName)",
        "(Mathprog,New)",
        "(printRanges,PrintRanges)",
        "(getBfcp,GetBfcp)",
        "(stdBasis,StdBasis)",
        "(getRowBind,GetRowBind)",
        "(interior,Interior)",
        "(getNumBin,GetNumBin)",
        "(getObjCoef,GetObjCoef)",
        "(interiorSync,InteriorSync)",
        "(postsolve,Postsolve)",
        "(writeMps,WriteMps)",
        "(getColKind,GetColKind)",
        "(iptRowDual,IptRowDual)",
        "(generateSync,GenerateSync)",
        "(readMps,ReadMps)",
        "(readProbSync,ReadProbSync)",
        "(termOutput,TermOutput)",
        "(setRowStat,SetRowStat)",
        "(scaleSync,ScaleSync)",
        "(setColKind,SetColKind)",
        "(readMipSync,ReadMipSync)",
        "(scale,Scale)",
        "(getRowDual,GetRowDual)",
        "(getUnbndRay,GetUnbndRay)",
        "(readSolSync,ReadSolSync)",
        "(simplex,Simplex)",
        "(simplexSync,SimplexSync)",
        "(sortMatrix,SortMatrix)",
        "(getRowType,GetRowType)",
        "(setRowBnds,SetRowBnds)",
        "(bfUpdated,BfUpdated)",
        "(mipObjVal,MipObjVal)",
        "(printMip,PrintMip)",
        "(postsolveSync,PostsolveSync)",
        "(setMatRow,SetMatRow)",
        "(iptObjVal,IptObjVal)"
      ],
      "Charon": [
        "(reason,Reason)",
        "(terminate,Terminate)",
        "(treeSize,TreeSize)",
        "(currNode,CurrNode)",
        "(nextNode,NextNode)",
        "(prevNode,PrevNode)",
        "(upNode,UpNode)",
        "(nodeLevel,NodeLevel)",
        "(nodeBound,NodeBound)",
        "(bestNode,BestNode)",
        "(mipGap,MipGap)",
        "(rowAttrib,RowAttrib)",
        "(poolSize,PoolSize)",
        "(delRow,DelRow)",
        "(clearPool,ClearPool)",
        "(canBranch,CanBranch)",
        "(branchUpon,BranchUpon)",
        "(selectNode,SelectNode)",
        "(addRow,AddRow)",
        "(heurSol,HeurSol)",
        "(setProbName,SetProbName)",
        "(getProbName,GetProbName)",
        "(setObjDir,SetObjDir)",
        "(getObjDir,GetObjDir)",
        "(addRows,AddRows)",
        "(setRowName,SetRowName)",
        "(getRowName,GetRowName)",
        "(setRowBnds,SetRowBnds)",
        "(addCols,AddCols)",
        "(setColName,SetColName)",
        "(getColName,GetColName)",
        "(setColBnds,SetColBnds)",
        "(setObjCoef,SetObjCoef)",
        "(getObjCoef,GetObjCoef)",
        "(loadMatrix,LoadMatrix)",
        "(simplexSync,SimplexSync)",
        "(simplex,Simplex)",
        "(getObjVal,GetObjVal)",
        "(getColPrim,GetColPrim)",
        "(setObjName,SetObjName)",
        "(getObjName,GetObjName)",
        "(setMatRow,SetMatRow)",
        "(getMatRow,GetMatRow)",
        "(setMatCol,SetMatCol)",
        "(getMatCol,GetMatCol)",
        "(sortMatrix,SortMatrix)",
        "(delRows,DelRows)",
        "(delCols,DelCols)",
        "(erase,Erase)",
        "(delete,Delete)",
        "(getNumRows,GetNumRows)",
        "(getNumCols,GetNumCols)",
        "(getRowType,GetRowType)",
        "(getRowLb,GetRowLb)",
        "(getRowUb,GetRowUb)",
        "(getColType,GetColType)",
        "(getColLb,GetColLb)",
        "(getColUb,GetColUb)",
        "(getNumNz,GetNumNz)",
        "(createIndex,CreateIndex)",
        "(findRow,FindRow)",
        "(findCol,FindCol)",
        "(deleteIndex,DeleteIndex)",
        "(setRii,SetRii)",
        "(setSjj,SetSjj)",
        "(getRii,GetRii)",
        "(getSjj,GetSjj)",
        "(scaleSync,ScaleSync)",
        "(scale,Scale)",
        "(unscaleSync,UnscaleSync)",
        "(unscale,Unscale)",
        "(setRowStat,SetRowStat)",
        "(setColStat,SetColStat)",
        "(getRowStat,GetRowStat)",
        "(getColStat,GetColStat)",
        "(stdBasis,StdBasis)",
        "(advBasis,AdvBasis)",
        "(cpxBasis,CpxBasis)",
        "(exactSync,ExactSync)",
        "(exact,Exact)",
        "(getStatus,GetStatus)",
        "(getPrimStat,GetPrimStat)",
        "(getDualStat,GetDualStat)",
        "(getRowPrim,GetRowPrim)",
        "(getRowDual,GetRowDual)",
        "(getColDual,GetColDual)",
        "(getUnbndRay,GetUnbndRay)",
        "(getItCnt,GetItCnt)",
        "(setItCnt,SetItCnt)",
        "(interiorSync,InteriorSync)",
        "(interior,Interior)",
        "(iptStatus,IptStatus)",
        "(readMpsSync,ReadMpsSync)",
        "(readMps,ReadMps)",
        "(writeMpsSync,WriteMpsSync)",
        "(writeMps,WriteMps)",
        "(iptObjVal,IptObjVal)",
        "(iptRowPrim,IptRowPrim)",
        "(iptRowDual,IptRowDual)",
        "(iptColPrim,IptColPrim)",
        "(iptColDual,IptColDual)",
        "(setColKind,SetColKind)",
        "(getColKind,GetColKind)",
        "(getNumInt,GetNumInt)",
        "(getNumBin,GetNumBin)",
        "(intoptSync,IntoptSync)",
        "(intopt,Intopt)",
        "(readProbSync,ReadProbSync)",
        "(readProb,ReadProb)",
        "(writeProbSync,WriteProbSync)",
        "(writeProb,WriteProb)",
        "(readLp,ReadLp)",
        "(readLpSync,ReadLpSync)",
        "(writeLpSync,WriteLpSync)",
        "(writeLp,WriteLp)",
        "(mipStatus,MipStatus)",
        "(mipObjVal,MipObjVal)",
        "(mipRowVal,MipRowVal)",
        "(mipColVal,MipColVal)",
        "(checkKkt,CheckKkt)",
        "(printSolSync,PrintSolSync)",
        "(printSol,PrintSol)",
        "(readSolSync,ReadSolSync)",
        "(readSol,ReadSol)",
        "(writeSolSync,WriteSolSync)",
        "(writeSol,WriteSol)",
        "(printRangesSync,PrintRangesSync)",
        "(printRanges,PrintRanges)",
        "(printIptSync,PrintIptSync)",
        "(printIpt,PrintIpt)",
        "(readIptSync,ReadIptSync)",
        "(readIpt,ReadIpt)",
        "(writeIptSync,WriteIptSync)",
        "(writeIpt,WriteIpt)",
        "(printMipSync,PrintMipSync)",
        "(printMip,PrintMip)",
        "(readMipSync,ReadMipSync)",
        "(readMip,ReadMip)",
        "(writeMipSync,WriteMipSync)",
        "(writeMip,WriteMip)",
        "(bfExists,BfExists)",
        "(factorize,Factorize)",
        "(bfUpdated,BfUpdated)",
        "(getBfcp,GetBfcp)",
        "(setBfcp,SetBfcp)",
        "(getBhead,GetBhead)",
        "(getRowBind,GetRowBind)",
        "(getColBind,GetColBind)",
        "(warmUp,WarmUp)",
        "(readModelSync,ReadModelSync)",
        "(readModel,ReadModel)",
        "(readDataSync,ReadDataSync)",
        "(readData,ReadData)",
        "(generateSync,GenerateSync)",
        "(generate,Generate)",
        "(buildProbSync,BuildProbSync)",
        "(buildProb,BuildProb)",
        "(postsolveSync,PostsolveSync)",
        "(postsolve,Postsolve)",
        "(getLine,getLine)",
        "(getLastError,getLastError)",
        "(termOutput,TermOutput)"
      ]
    },
    "@gnaudio/jabra-node-sdk": {
      "Gasket": [
        "(GetNamedAsset,napi_GetNamedAsset)",
        "(SetPasswordProvisioning,napi_SetPasswordProvisioning)",
        "(GetConnectedBTDeviceName,napi_GetConnectedBTDeviceName)",
        "(GetBusyLightStatus,napi_GetBusyLightStatus)",
        "(EnableRemoteManagement,napi_EnableRemoteManagement)",
        "(IsEqualizerEnabled,napi_IsEqualizerEnabled)",
        "(StopBTPairing,napi_StopBTPairing)",
        "(SetXpressUrl,napi_SetXpressUrl)",
        "(GetConstBooleanSync,napi_GetConstBooleanSync)",
        "(GetDeviceImagePath,napi_GetDeviceImagePath)",
        "(GetBatteryStatus,napi_GetBatteryStatus)",
        "(GetDiagnosticLogFile,napi_GetDiagnosticLogFile)",
        "(SetSecondVideoStream,napi_SetSecondVideoStream)",
        "(GetRoomCapacity,napi_GetRoomCapacity)",
        "(GetTimestamp,napi_GetTimestamp)",
        "(SetEqualizerParameters,napi_SetEqualizerParameters)",
        "(IsLocked,napi_IsLocked)",
        "(GetSupportedButtonEvents,napi_GetSupportedButtonEvents)",
        "(SetIntelligentZoomLatency,napi_SetIntelligentZoomLatency)",
        "(CheckForFirmwareUpdate,napi_CheckForFirmwareUpdate)",
        "(GetSubDeviceProperty,napi_GetSubDeviceProperty)",
        "(GetConstSync,napi_GetConstSync)",
        "(SetRoomCapacity,napi_SetRoomCapacity)",
        "(GetWhiteboardOnMainStream,napi_GetWhiteboardOnMainStream)",
        "(GetNotificationUsage,napi_GetNotificationUsage)",
        "(SyncExperiment,napi_SyncExperiment)",
        "(SetOffHook,napi_SetOffHook)",
        "(GetEqualizerParameters,napi_GetEqualizerParameters)",
        "(NativeAddonLog,napi_NativeAddonLog)",
        "(SetTimestamp,napi_SetTimestamp)",
        "(IsBusyLightSupported,napi_IsBusyLightSupported)",
        "(IsFirmwareLockEnabled,napi_IsFirmwareLockEnabled)",
        "(IsVideoDeviceStreaming,napi_IsVideoDeviceStreaming)",
        "(SetZoom,napi_SetZoom)",
        "(GetRemoteMmiFocus,napi_GetRemoteMmiFocus)",
        "(DisconnectPairedDevice,napi_DisconnectPairedDevice)",
        "(GetUSBState,napi_GetUSBState)",
        "(GetSensorRegions,napi_GetSensorRegions)",
        "(GetSupportedFeatures,napi_GetSupportedFeatures)",
        "(ClearPairingList,napi_ClearPairingList)",
        "(ResetPanTiltZoom,napi_ResetPanTiltZoom)",
        "(SetSharpnessLevel,napi_SetSharpnessLevel)",
        "(GetWhiteBalanceLimits,napi_GetWhiteBalanceLimits)",
        "(GetVersion,napi_GetVersion)",
        "(ApplyColorControlPreset,napi_ApplyColorControlPreset)",
        "(GetSearchDeviceList,napi_GetSearchDeviceList)",
        "(GetConstStringSync,napi_GetConstStringSync)",
        "(UploadWavRingtone,napi_UploadWavRingtone)",
        "(ReleaseRemoteMmiFocus,napi_ReleaseRemoteMmiFocus)",
        "(SetAutoPairing,napi_SetAutoPairing)",
        "(CancelFirmwareDownload,napi_CancelFirmwareDownload)",
        "(GetSecureConnectionMode,napi_GetSecureConnectionMode)",
        "(GetDatetime,napi_GetDatetime)",
        "(SetWhiteBalance,napi_SetWhiteBalance)",
        "(GetVideoTransitionStyle,napi_GetVideoTransitionStyle)",
        "(SetBTPairing,napi_SetBTPairing)",
        "(SetVideoMode,napi_SetVideoMode)",
        "(GetFirmwareVersionBundle,napi_GetFirmwareVersionBundle)",
        "(ReleaseLock,napi_ReleaseLock)",
        "(GetPictureInPicture,napi_GetPictureInPicture)",
        "(SetPanTiltRelativeAction,napi_SetPanTiltRelativeAction)",
        "(UpdateFirmware,napi_UpdateFirmware)",
        "(GetIntelligentZoomLatency,napi_GetIntelligentZoomLatency)",
        "(SetWhiteboardPosition,napi_SetWhiteboardPosition)",
        "(SetSaturationLevel,napi_SetSaturationLevel)",
        "(EnableEqualizer,napi_EnableEqualizer)",
        "(SetDECTPairingKey,napi_SetDECTPairingKey)",
        "(GetFailedSettingNames,napi_GetFailedSettingNames)",
        "(RestoreVideoRoomDefaults,napi_RestoreVideoRoomDefaults)",
        "(IsSettingProtectionEnabled,napi_IsSettingProtectionEnabled)",
        "(GetDeviceImageThumbnailPath,napi_GetDeviceImageThumbnailPath)",
        "(GetEthernetIPv4Status,napi_GetEthernetIPv4Status)",
        "(GetHidWorkingState,napi_GetHidWorkingState)",
        "(SetZoomRelativeAction,napi_SetZoomRelativeAction)",
        "(DisconnectFromJabraApplication,napi_DisconnectFromJabraApplication)",
        "(SetRoomCapacityNotificationEnabled,napi_SetRoomCapacityNotificationEnabled)",
        "(GetErrorString,napi_GetErrorString)",
        "(GetVideoHDRDefault,napi_GetVideoHDRDefault)",
        "(IsMuteSupported,napi_IsMuteSupported)",
        "(SetDatetime,napi_SetDatetime)",
        "(SetWizardMode,napi_SetWizardMode)",
        "(IsRingerSupported,napi_IsRingerSupported)",
        "(SetBrightnessLevel,napi_SetBrightnessLevel)",
        "(GetConstIntegerSync,napi_GetConstIntegerSync)",
        "(IsHoldSupported,napi_IsHoldSupported)",
        "(UploadImage,napi_UploadImage)",
        "(GetConstFieldSync,napi_GetConstFieldSync)",
        "(GetSharpnessLevel,napi_GetSharpnessLevel)",
        "(IsCameraStreaming,napi_IsCameraStreaming)",
        "(IsSoftphoneInFocus,napi_IsSoftphoneInFocus)",
        "(SetNotificationStyle,napi_SetNotificationStyle)",
        "(IsSetDateTimeSupported,napi_IsSetDateTimeSupported)",
        "(IsOnlineSupported,napi_IsOnlineSupported)",
        "(PlayRingTone,napi_PlayRingTone)",
        "(GetWLANIPv4Status,napi_GetWLANIPv4Status)",
        "(ConnectPairedDevice,napi_ConnectPairedDevice)",
        "(ConfigureXpressManagement,napi_ConfigureXpressManagement)",
        "(GetContrastLimits,napi_GetContrastLimits)",
        "(SetContrastLevel,napi_SetContrastLevel)",
        "(GetNativeAddonLogConfig,napi_GetNativeAddonLogConfig)",
        "(IsGnHidStdHidSupported,napi_IsGnHidStdHidSupported)",
        "(IsBatteryStatusSupported,napi_IsBatteryStatusSupported)",
        "(SetSettings,napi_SetSettings)",
        "(SetVideoHDRDefault,napi_SetVideoHDRDefault)",
        "(Initialize,napi_Initialize)",
        "(GetButtonFocus,napi_GetButtonFocus)",
        "(SetNetworkAuthenticationIdentity,napi_SetNetworkAuthenticationIdentity)",
        "(StoreColorControlPreset,napi_StoreColorControlPreset)",
        "(PreloadDeviceInfo,napi_PreloadDeviceInfo)",
        "(GetVideoHDR,napi_GetVideoHDR)",
        "(IsPairingListSupported,napi_IsPairingListSupported)",
        "(SetVideoTransitionStyle,napi_SetVideoTransitionStyle)",
        "(IsUploadRingtoneSupported,napi_IsUploadRingtoneSupported)",
        "(GetZoom,napi_GetZoom)",
        "(GetFirmwareFilePath,napi_GetFirmwareFilePath)",
        "(GetSettings,napi_GetSettings)",
        "(ConnectBTDevice,napi_ConnectBTDevice)",
        "(SetPanTilt,napi_SetPanTilt)",
        "(GetRoomCapacityNotificationEnabled,napi_GetRoomCapacityNotificationEnabled)",
        "(IsEqualizerSupported,napi_IsEqualizerSupported)",
        "(GetContrastLevel,napi_GetContrastLevel)",
        "(SetWhiteboardOnMainStream,napi_SetWhiteboardOnMainStream)",
        "(IsFeatureSupported,napi_IsFeatureSupported)",
        "(StorePTZPreset,napi_StorePTZPreset)",
        "(SetNotificationUsage,napi_SetNotificationUsage)",
        "(GetSetting,napi_GetSetting)",
        "(SetHidWorkingState,napi_SetHidWorkingState)",
        "(GetLanguagePackInformation,napi_GetLanguagePackInformation)",
        "(ApplyPTZPreset,napi_ApplyPTZPreset)",
        "(IsDevLogEnabled,napi_IsDevLogEnabled)",
        "(GetWizardMode,napi_GetWizardMode)",
        "(SetOnline,napi_SetOnline)",
        "(GetSecondVideoStream,napi_GetSecondVideoStream)",
        "(GetVideoMode,napi_GetVideoMode)",
        "(DownloadFirmware,napi_DownloadFirmware)",
        "(EnableFirmwareLock,napi_EnableFirmwareLock)",
        "(TriggerDiagnosticLogGeneration,napi_TriggerDiagnosticLogGeneration)",
        "(GetNetworkAuthenticationMode,napi_GetNetworkAuthenticationMode)",
        "(RebootDevice,napi_RebootDevice)",
        "(SetPictureInPicture,napi_SetPictureInPicture)",
        "(GetFirmwareVersion,napi_GetFirmwareVersion)",
        "(SetMute,napi_SetMute)",
        "(IsOffHookSupported,napi_IsOffHookSupported)",
        "(ClearPairedDevice,napi_ClearPairedDevice)",
        "(GetNotificationStyle,napi_GetNotificationStyle)",
        "(SetRemoteMmiAction,napi_SetRemoteMmiAction)",
        "(GetRemoteControlBatteryStatus,napi_GetRemoteControlBatteryStatus)",
        "(IsRemoteMmiInFocus,napi_IsRemoteMmiInFocus)",
        "(GetWhiteBalance,napi_GetWhiteBalance)",
        "(FactoryReset,napi_FactoryReset)",
        "(IsRemoteManagementEnabled,napi_IsRemoteManagementEnabled)",
        "(GetRemoteControlFirmwareVersion,napi_GetRemoteControlFirmwareVersion)",
        "(GetPanics,napi_GetPanics)",
        "(GetESN,napi_GetESN)",
        "(ResetImageQualityControls,napi_ResetImageQualityControls)",
        "(UnInitialize,napi_UnInitialize)",
        "(SetBusyLightStatus,napi_SetBusyLightStatus)",
        "(GetXpressManagementNetworkStatus,napi_GetXpressManagementNetworkStatus)",
        "(GetPanTilt,napi_GetPanTilt)",
        "(ConnectToJabraApplication,napi_ConnectToJabraApplication)",
        "(ConnectNewDevice,napi_ConnectNewDevice)",
        "(GetXpressUrl,napi_GetXpressUrl)",
        "(IsUploadImageSupported,napi_IsUploadImageSupported)",
        "(GetBrightnessLimits,napi_GetBrightnessLimits)",
        "(SetNetworkAuthenticationMode,napi_SetNetworkAuthenticationMode)",
        "(TriggerDECTSecurePairing,napi_TriggerDECTSecurePairing)",
        "(EnableDevLog,napi_EnableDevLog)",
        "(GetAutoPairing,napi_GetAutoPairing)",
        "(GetPanTiltLimits,napi_GetPanTiltLimits)",
        "(UploadRingtone,napi_UploadRingtone)",
        "(SetSoftphoneReady,napi_SetSoftphoneReady)",
        "(IsFactoryResetSupported,napi_IsFactoryResetSupported)",
        "(GetLatestFirmwareInformation,napi_GetLatestFirmwareInformation)",
        "(GetAudioFileParametersForUpload,napi_GetAudioFileParametersForUpload)",
        "(DownloadFirmwareUpdater,napi_DownloadFirmwareUpdater)",
        "(BTLinkQualityChangeEventEnabled,napi_BTLinkQualityChangeEventEnabled)",
        "(GetSaturationLimits,napi_GetSaturationLimits)",
        "(DisconnectBTDevice,napi_DisconnectBTDevice)",
        "(GetWhiteboardPosition,napi_GetWhiteboardPosition)",
        "(GetBrightnessLevel,napi_GetBrightnessLevel)",
        "(GetLock,napi_GetLock)",
        "(GetDECTPairingKey,napi_GetDECTPairingKey)",
        "(GetLocalManifestVersion,napi_GetLocalManifestVersion)",
        "(IsCertifiedForSkypeForBusiness,napi_IsCertifiedForSkypeForBusiness)",
        "(ReleaseButtonFocus,napi_ReleaseButtonFocus)",
        "(SearchNewDevices,napi_SearchNewDevices)",
        "(TriggerDECTPairing,napi_TriggerDECTPairing)",
        "(GetZoomLimits,napi_GetZoomLimits)",
        "(GetSharpnessLimits,napi_GetSharpnessLimits)",
        "(GetUserDefinedDeviceName,napi_GetUserDefinedDeviceName)",
        "(GetMACAddress,napi_GetMACAddress)",
        "(PreloadAttachedDeviceInfo,napi_PreloadAttachedDeviceInfo)",
        "(GetPasswordProvisioning,napi_GetPasswordProvisioning)",
        "(GetSaturationLevel,napi_GetSaturationLevel)",
        "(SetRinger,napi_SetRinger)",
        "(SetVideoHDR,napi_SetVideoHDR)",
        "(GetConnectedHeadsetNames,napi_GetConnectedHeadsetNames)",
        "(GetPairingList,napi_GetPairingList)",
        "(SetHold,napi_SetHold)",
        "(GetConstListSync,napi_GetConstListSync)"
      ],
      "Charon": []
    },
    "@goblinalchemist/nodejieba": {
      "Gasket": [
        "(insertWord,insertWord)",
        "(cutForSearch,cutForSearch)",
        "(cutAll,cutAll)",
        "(load,load)",
        "(cutSmall,cutSmall)",
        "(textRankExtract,textRankExtract)",
        "(cut,cut)",
        "(cutHMM,cutHMM)",
        "(extract,extract)",
        "(tag,tag)"
      ],
      "Charon": []
    },
    "goosig": {
      "Gasket": [
        "(goosig_sign,goosig_sign)",
        "(goosig_challenge,goosig_challenge)",
        "(goosig_validate,goosig_validate)",
        "(goosig_verify,goosig_verify)",
        "(goosig_create,goosig_create)",
        "(goosig_generate,goosig_generate)"
      ],
      "Charon": []
    },
    "go-text-template-napi": {
      "Gasket": [
        "(urlQueryEscaper,genericNapiCallback)",
        "(funcs,genericNapiCallback)",
        "(parseFiles,genericNapiCallback)",
        "(htmlEscaper,genericNapiCallback)",
        "(lookup,genericNapiCallback)",
        "(parse,genericNapiCallback)",
        "(addSprigHermeticFuncs,genericNapiCallback)",
        "(name,genericNapiCallback)",
        "(jsEscaper,genericNapiCallback)",
        "(option,genericNapiCallback)",
        "(delims,genericNapiCallback)",
        "(jsEscapeString,genericNapiCallback)",
        "(parseGlob,genericNapiCallback)",
        "(executeTemplateString,genericNapiCallback)",
        "(htmlEscapeString,genericNapiCallback)",
        "(new,genericNapiCallback)",
        "(addSprigFuncs,genericNapiCallback)",
        "(templates,genericNapiCallback)",
        "(executeString,genericNapiCallback)",
        "(definedTemplates,genericNapiCallback)",
        "(Template,genericNapiCallback)",
        "(clone,genericNapiCallback)"
      ],
      "Charon": []
    },
    "gphoto2": {
      "Gasket": [
        "(downloadPicture,DownloadPicture)",
        "(list,List)",
        "(takePicture,TakePicture)",
        "(Camera,New)",
        "(getConfig,GetConfig)",
        "(setLogLevel,SetLogLevel)",
        "(setConfigValue,SetConfigValue)",
        "(GPhoto2,New)"
      ],
      "Charon": [
        "(list,List)",
        "(setLogLevel,SetLogLevel)",
        "(getConfig,GetConfig)",
        "(setConfigValue,SetConfigValue)",
        "(takePicture,TakePicture)",
        "(downloadPicture,DownloadPicture)"
      ]
    },
    "gpt4all": {
      "Gasket": [
        "(type,GetType)",
        "(isModelLoaded,IsModelLoaded)",
        "(embed,GenerateEmbedding)",
        "(initGpuByString,InitGpuByString)",
        "(listGpu,GetGpuDevices)",
        "(name,GetName)",
        "(memoryNeeded,GetRequiredMemory)",
        "(hasGpuDevice,HasGpuDevice)",
        "(infer,Infer)",
        "(dispose,Dispose)",
        "(LLModel,NodeModelWrapper)",
        "(stateSize,StateSize)",
        "(threadCount,ThreadCount)",
        "(setThreadCount,SetThreadCount)",
        "(getLibraryPath,GetLibraryPath)"
      ],
      "Charon": []
    },
    "@graphistry/node-pigz": {
      "Gasket": [
        "(deflate,ErrorOnlyMethod)"
      ],
      "Charon": [
        "(deflate,ErrorOnlyMethod)",
        "(deflate,DeflateMethod)"
      ]
    },
    "@graphprotocol/indexer-native": {
      "Gasket": [
        "(attestation_signer_new,attestation_signer_new)",
        "(signature_verifier_verify,signature_verifier_verify)",
        "(signature_verifier_new,signature_verifier_new)",
        "(attestation_signer_create_attestation,attestation_signer_create_attestation)"
      ],
      "Charon": []
    },
    "@gregnr/libpg-query": {
      "Gasket": [
        "(parsePlPgSQLSync,ParsePlPgSQLSync)",
        "(parseQueryAsync,ParseQueryAsync)",
        "(deparseSync,DeparseSync)",
        "(fingerprintSync,FingerprintSync)",
        "(deparseAsync,DeparseAsync)",
        "(fingerprintAsync,FingerprintAsync)",
        "(parsePlPgSQLAsync,ParsePlPgSQLAsync)",
        "(parseQuerySync,ParseQuerySync)"
      ],
      "Charon": [
        "(parseQuerySync,ParseQuerySync)",
        "(parseQueryAsync,ParseQueryAsync)",
        "(deparseSync,DeparseSync)",
        "(deparseAsync,DeparseAsync)",
        "(parsePlPgSQLSync,ParsePlPgSQLSync)",
        "(parsePlPgSQLAsync,ParsePlPgSQLAsync)",
        "(fingerprintSync,FingerprintSync)",
        "(fingerprintAsync,FingerprintAsync)",
        "(lineNumber,Value)",
        "(cursorPosition,Value)",
        "(context,Value)"
      ]
    },
    "grpc": {
      "Gasket": [
        "(Server,New)",
        "(close,Close)",
        "(requestCall,RequestCall)",
        "(ChannelCredentials,New)",
        "(setCredentials,SetCredentials)",
        "(createSsl,CreateSsl)",
        "(createCall,CreateCall)",
        "(metadataKeyIsBinary,MetadataKeyIsBinary)",
        "(start,Start)",
        "(createFromPlugin,CreateFromPlugin)",
        "(setLogVerbosity,SetLogVerbosity)",
        "(forceShutdown,ForceShutdown)",
        "(tryShutdown,TryShutdown)",
        "(Call,New)",
        "(setDefaultRootsPem,SetDefaultRootsPem)",
        "(startBatch,StartBatch)",
        "(metadataNonbinValueIsLegal,MetadataNonbinValueIsLegal)",
        "(addHttp2Port,AddHttp2Port)",
        "(createInsecure,CreateInsecure)",
        "(metadataKeyIsLegal,MetadataKeyIsLegal)",
        "(getPeer,GetPeer)",
        "(forcePoll,ForcePoll)",
        "(getConnectivityState,GetConnectivityState)",
        "(Channel,New)",
        "(ServerCredentials,New)",
        "(cancelWithStatus,CancelWithStatus)",
        "(watchConnectivityState,WatchConnectivityState)",
        "(cancel,Cancel)",
        "(compose,Compose)",
        "(CallCredentials,New)",
        "(getTarget,GetTarget)",
        "(setDefaultLoggerCallback,SetDefaultLoggerCallback)"
      ],
      "Charon": []
    },
    "grpc-patch": {
      "Gasket": [
        "(metadataNonbinValueIsLegal,MetadataNonbinValueIsLegal)",
        "(createCall,CreateCall)",
        "(metadataKeyIsBinary,MetadataKeyIsBinary)",
        "(start,Start)",
        "(getTarget,GetTarget)",
        "(tryShutdown,TryShutdown)",
        "(ServerCredentials,New)",
        "(CallCredentials,New)",
        "(startBatch,StartBatch)",
        "(forcePoll,ForcePoll)",
        "(Call,New)",
        "(createInsecure,CreateInsecure)",
        "(Server,New)",
        "(ChannelCredentials,New)",
        "(setDefaultLoggerCallback,SetDefaultLoggerCallback)",
        "(requestCall,RequestCall)",
        "(compose,Compose)",
        "(getConnectivityState,GetConnectivityState)",
        "(cancel,Cancel)",
        "(setDefaultRootsPem,SetDefaultRootsPem)",
        "(addHttp2Port,AddHttp2Port)",
        "(watchConnectivityState,WatchConnectivityState)",
        "(setLogVerbosity,SetLogVerbosity)",
        "(getPeer,GetPeer)",
        "(Channel,New)",
        "(forceShutdown,ForceShutdown)",
        "(metadataKeyIsLegal,MetadataKeyIsLegal)",
        "(createSsl,CreateSsl)",
        "(close,Close)",
        "(setCredentials,SetCredentials)",
        "(createFromPlugin,CreateFromPlugin)",
        "(cancelWithStatus,CancelWithStatus)"
      ],
      "Charon": []
    },
    "grpc-zjl": {
      "Gasket": [
        "(metadataNonbinValueIsLegal,MetadataNonbinValueIsLegal)",
        "(createCall,CreateCall)",
        "(metadataKeyIsBinary,MetadataKeyIsBinary)",
        "(start,Start)",
        "(getTarget,GetTarget)",
        "(tryShutdown,TryShutdown)",
        "(ServerCredentials,New)",
        "(CallCredentials,New)",
        "(startBatch,StartBatch)",
        "(forcePoll,ForcePoll)",
        "(Call,New)",
        "(createInsecure,CreateInsecure)",
        "(Server,New)",
        "(ChannelCredentials,New)",
        "(setDefaultLoggerCallback,SetDefaultLoggerCallback)",
        "(requestCall,RequestCall)",
        "(compose,Compose)",
        "(getConnectivityState,GetConnectivityState)",
        "(cancel,Cancel)",
        "(setDefaultRootsPem,SetDefaultRootsPem)",
        "(addHttp2Port,AddHttp2Port)",
        "(watchConnectivityState,WatchConnectivityState)",
        "(setLogVerbosity,SetLogVerbosity)",
        "(getPeer,GetPeer)",
        "(Channel,New)",
        "(forceShutdown,ForceShutdown)",
        "(metadataKeyIsLegal,MetadataKeyIsLegal)",
        "(createSsl,CreateSsl)",
        "(close,Close)",
        "(setCredentials,SetCredentials)",
        "(createFromPlugin,CreateFromPlugin)",
        "(cancelWithStatus,CancelWithStatus)"
      ],
      "Charon": []
    },
    "gssapi.js": {
      "Gasket": [
        "(kinit,kinit)",
        "(acceptSecContext,acceptSecContext)",
        "(isComplete,isComplete)",
        "(initSecContext,initSecContext)",
        "(verifyCredentials,verifyCredentials)",
        "(clientName,clientName)",
        "(setKeytabPath,setKeytabPath)",
        "(kdestroy,kdestroy)",
        "(GssSecContext,GssSecContext)"
      ],
      "Charon": [
        "(acceptSecContext,acceptSecContext)",
        "(initSecContext,initSecContext)",
        "(setKeytabPath,setKeytabPath)",
        "(GssSecContext,GssSecContext)",
        "(verifyCredentials,verifyCredentials)",
        "(kinit,kinit)",
        "(kdestroy,kdestroy)"
      ]
    },
    "gtk-utils": {
      "Gasket": [
        "(getSetting,get_setting)"
      ],
      "Charon": [
        "(getSetting,get_setting)"
      ]
    },
    "gt-usb": {
      "Gasket": [
        "(sendrawdata,sendrawdata)",
        "(receiverawdata,receiverawdata)",
        "(initdevice,initdevice)",
        "(RunCommand,runcommand)"
      ],
      "Charon": [
        "(initdevice,initdevice)",
        "(receiverawdata,receiverawdata)",
        "(sendrawdata,sendrawdata)",
        "(RunCommand,runcommand)"
      ]
    },
    "h3-node": {
      "Gasket": [
        "(getHexagonEdgeLengthAvg,getHexagonEdgeLengthAvgNapi)",
        "(greatCircleDistance,greatCircleDistanceNapi)",
        "(getNumCells,getNumCellsNapi)",
        "(gridDisk,gridDiskNapi)",
        "(directedEdgeToBoundary,directedEdgeToBoundaryNapi)",
        "(gridRingUnsafe,gridRingUnsafeNapi)",
        "(gridPathCells,gridPathCellsNapi)",
        "(getIcosahedronFaces,getIcosahedronFacesNapi)",
        "(latLngToCell,latLngToCellNapi)",
        "(localIjToCell,localIjToCellNapi)",
        "(cellsToDirectedEdge,cellsToDirectedEdgeNapi)",
        "(cellToLatLng,cellToLatLngNapi)",
        "(cellToChildren,cellToChildrenNapi)",
        "(uncompactCells,uncompactCellsNapi)",
        "(isPentagon,isPentagonNapi)",
        "(cellToCenterChild,cellToCenterChildNapi)",
        "(getBaseCellNumber,getBaseCellNumberNapi)",
        "(gridDiskDistances,gridDiskDistancesNapi)",
        "(cellToBoundary,cellToBoundaryNapi)",
        "(getDirectedEdgeOrigin,getDirectedEdgeOriginNapi)",
        "(getPentagons,getPentagonsNapi)",
        "(getResolution,getResolutionNapi)",
        "(getDirectedEdgeDestination,getDirectedEdgeDestinationNapi)",
        "(cellToLocalIj,cellToLocalIjNapi)",
        "(cellsToMultiPolygon,cellsToMultiPolygonNapi)",
        "(isValidCell,isValidCellNapi)",
        "(radsToDegs,radsToDegsNapi)",
        "(edgeLength,edgeLengthNapi)",
        "(isResClassIII,isResClassIIINapi)",
        "(cellArea,cellAreaNapi)",
        "(getRes0Cells,getRes0CellsNapi)",
        "(isValidDirectedEdge,isValidDirectedEdgeNapi)",
        "(compactCells,compactCellsNapi)",
        "(cellToParent,cellToParentNapi)",
        "(directedEdgeToCells,directedEdgeToCellsNapi)",
        "(degsToRads,degsToRadsNapi)",
        "(getHexagonAreaAvg,getHexagonAreaAvgNapi)",
        "(originToDirectedEdges,originToDirectedEdgesNapi)",
        "(gridDistance,gridDistanceNapi)",
        "(polygonToCells,polygonToCellsNapi)",
        "(areNeighborCells,areNeighborCellsNapi)"
      ],
      "Charon": []
    },
    "haddley-factorial-cc": {
      "Gasket": [
        "(factorial_tr,Factorial_tr)",
        "(factorial,Factorial)",
        "(factorial_it,Factorial_it)"
      ],
      "Charon": []
    },
    "@haggholm/damerau-levenshtein": {
      "Gasket": [
        "(levenshteinDistance,wrapper)"
      ],
      "Charon": []
    },
    "happy-birthday-vipyne": {
      "Gasket": [
        "(initialize,initialize)",
        "(unref,unref)"
      ],
      "Charon": []
    },
    "hargument": {
      "Gasket": [
        "(add,Add)"
      ],
      "Charon": []
    },
    "hca-decoder": {
      "Gasket": [
        "(printInfo,_printInfo)",
        "(decodeToWaveFile,_decodeToWaveFile)",
        "(getInfo,_getInfo)",
        "(HCADecoder,HCADecoder)",
        "(decodeToWaveFileSync,_decodeToWaveFileSync)",
        "(decodeToMemorySync,_decodeToMemorySync)",
        "(decodeToMemory,_decodeToMemory)"
      ],
      "Charon": []
    },
    "hci-socket": {
      "Gasket": [
        "(HciSocket,HciSocket)",
        "(getDevInfo,GetDevInfo)",
        "(bind,Bind)",
        "(hciUpOrDown,HciUpOrDown)",
        "(getDevList,GetDevList)",
        "(write,Write)",
        "(close,Close)"
      ],
      "Charon": []
    },
    "hc_socketcan": {
      "Gasket": [
        "(writeData,writeData)",
        "(initSocketCan,initSocketCan)"
      ],
      "Charon": [
        "(initSocketCan,initSocketCan)",
        "(writeData,writeData)"
      ]
    },
    "hc_socketcan2": {
      "Gasket": [
        "(writeData,writeData)",
        "(initSocketCan,initSocketCan)"
      ],
      "Charon": [
        "(initSocketCan,initSocketCan)",
        "(writeData,writeData)"
      ]
    },
    "heapdump": {
      "Gasket": [
        "(writeSnapshot,WriteSnapshot)",
        "(configure,Configure)"
      ],
      "Charon": [
        "(configure,Configure)",
        "(writeSnapshot,WriteSnapshot)"
      ]
    },
    "heapdump-next": {
      "Gasket": [
        "(configure,Configure)",
        "(writeSnapshot,WriteSnapshot)"
      ],
      "Charon": [
        "(configure,Configure)",
        "(writeSnapshot,WriteSnapshot)"
      ]
    },
    "heapdump-prebuild": {
      "Gasket": [
        "(writeSnapshot,WriteSnapshot)",
        "(configure,Configure)"
      ],
      "Charon": [
        "(configure,Configure)",
        "(writeSnapshot,WriteSnapshot)"
      ]
    },
    "hello-addon": {
      "Gasket": [
        "(hello,Hello)"
      ],
      "Charon": []
    },
    "hello-hiro": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": []
    },
    "hello-hiro-js": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": []
    },
    "hello_publishing-native-pre-gyp": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": []
    },
    "@hfelix/spellchecker": {
      "Gasket": [
        "(getCorrectionsForMisspelling,GetCorrectionsForMisspelling)",
        "(remove,Remove)",
        "(Spellchecker,Spellchecker)",
        "(checkSpelling,CheckSpelling)",
        "(getAvailableDictionaries,GetAvailableDictionaries)",
        "(getSpellcheckerType,GetSpellcheckerType)",
        "(add,Add)",
        "(setDictionary,SetDictionary)",
        "(isMisspelled,IsMisspelled)"
      ],
      "Charon": [
        "(setDictionary,Spellchecker)"
      ]
    },
    "hhello": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": []
    },
    "hidden-machine-example-http": {
      "Gasket": [
        "(initialize,initialize)",
        "(unref,unref)"
      ],
      "Charon": []
    },
    "hide-cursor": {
      "Gasket": [
        "(hide,hide)",
        "(show,show)"
      ],
      "Charon": [
        "(hide,hide)",
        "(show,show)"
      ]
    },
    "highwayhash": {
      "Gasket": [
        "(AsUInt32Low,AsUInt32Low)",
        "(AsUInt32High,AsUInt32High)",
        "(AsString,AsString)",
        "(AsBuffer,AsBuffer)",
        "(AsHexString,AsHexString)"
      ],
      "Charon": []
    },
    "hikopenapi-node": {
      "Gasket": [
        "(artemisHttpGet,ArtemisHttpGet)",
        "(artemisHttpPost,ArtemisHttpPost)",
        "(sayHello,SayHello)",
        "(saySomething,SaySomething)"
      ],
      "Charon": []
    },
    "@hmodarres/robotjs": {
      "Gasket": [
        "(getMousePos,getMousePos)",
        "(mouseToggle,mouseToggle)",
        "(setMouseDelay,setMouseDelay)",
        "(dragMouse,dragMouse)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(typeStringDelayed,typeStringDelayed)",
        "(captureScreen,captureScreen)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(mouseClick,mouseClick)",
        "(setXDisplayName,setXDisplayName)",
        "(keyTap,keyTap)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(moveMouse,moveMouse)",
        "(scrollMouse,scrollMouse)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(typeString,typeString)",
        "(keyToggle,keyToggle)",
        "(getXDisplayName,getXDisplayName)",
        "(getColor,getColor)",
        "(unicodeTap,unicodeTap)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(unicodeTap,unicodeTap)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getColor,getColor)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "@homebridge/node-pty-prebuilt-multiarch": {
      "Gasket": [
        "(open,PtyOpen)",
        "(fork,PtyFork)",
        "(process,PtyGetProc)",
        "(resize,PtyResize)"
      ],
      "Charon": []
    },
    "@howlin/bluetooth-hci-socket": {
      "Gasket": [
        "(BluetoothHciSocket,New)",
        "(bindRaw,BindRaw)",
        "(start,Start)",
        "(getDeviceList,GetDeviceList)",
        "(stop,Stop)",
        "(setFilter,SetFilter)",
        "(write,Write)",
        "(isDevUp,IsDevUp)",
        "(bindUser,BindUser)",
        "(bindControl,BindControl)"
      ],
      "Charon": [
        "(start,Start)",
        "(bindRaw,BindRaw)",
        "(bindUser,BindUser)",
        "(bindControl,BindControl)",
        "(isDevUp,IsDevUp)",
        "(getDeviceList,GetDeviceList)",
        "(setFilter,SetFilter)",
        "(stop,Stop)",
        "(write,Write)"
      ]
    },
    "hs-miner": {
      "Gasket": [
        "(mine,mine)",
        "(stop,stop)",
        "(getEasiness,get_easiness)",
        "(verify,verify)",
        "(hasCUDA,has_cuda)",
        "(getEdgeBits,get_edge_bits)",
        "(mineAsync,mine_async)",
        "(getPerc,get_perc)",
        "(getBackends,get_backends)",
        "(hasDevice,has_device)",
        "(getDevices,get_devices)",
        "(blake2b,blake2b)",
        "(getNetwork,get_network)",
        "(sha3,sha3)",
        "(stopAll,stop_all)",
        "(getDeviceCount,get_device_count)",
        "(isRunning,is_running)",
        "(getProofSize,get_proof_size)"
      ],
      "Charon": []
    },
    "hts-encrypt": {
      "Gasket": [
        "(decrypt,Decrypt)",
        "(encrypt,Encrypt)"
      ],
      "Charon": [
        "(encrypt,Encrypt)",
        "(decrypt,Decrypt)"
      ]
    },
    "huskee-core": {
      "Gasket": [
        "(save,Save)",
        "(send,Send)"
      ],
      "Charon": [
        "(send,Send)",
        "(save,Save)"
      ]
    },
    "huskee-install": {
      "Gasket": [
        "(send,Method)"
      ],
      "Charon": [
        "(send,Send)",
        "(save,Save)"
      ]
    },
    "hwrap": {
      "Gasket": [
        "(createObject,CreateObject)",
        "(add,Add)"
      ],
      "Charon": []
    },
    "hybrixd": {
      "Gasket": [
        "(absorb,Absorb)",
        "(absorbLastFewBits,AbsorbLastFewBits)",
        "(publicKeyNegate,PublicKeyNegate)",
        "(signatureImport,SignatureImport)",
        "(publicKeyConvert,PublicKeyConvert)",
        "(contextRandomize,ContextRandomize)",
        "(signatureNormalize,SignatureNormalize)",
        "(publicKeyCreate,PublicKeyCreate)",
        "(ecdsaRecover,ECDSARecover)",
        "(publicKeyTweakMul,PublicKeyTweakMul)",
        "(publicKeyTweakAdd,PublicKeyTweakAdd)",
        "(initialize,Initialize)",
        "(ecdsaSign,ECDSASign)",
        "(privateKeyVerify,PrivateKeyVerify)",
        "(ecdsaVerify,ECDSAVerify)",
        "(ecdh,ECDH)",
        "(publicKeyVerify,PublicKeyVerify)",
        "(privateKeyTweakMul,PrivateKeyTweakMul)",
        "(signatureExport,SignatureExport)",
        "(glibc,KeccakWrapper)",
        "(copy,Copy)",
        "(napi,IsValidUTF8)",
        "(Secp256k1,Secp256k1Addon)",
        "(squeeze,Squeeze)",
        "(privateKeyNegate,PrivateKeyNegate)",
        "(publicKeyCombine,PublicKeyCombine)",
        "(privateKeyTweakAdd,PrivateKeyTweakAdd)"
      ],
      "Charon": []
    },
    "i2c-bus": {
      "Gasket": [
        "(readByteAsync,ReadByteAsync)",
        "(sendByteSync,SendByteSync)",
        "(readI2cBlockSync,ReadI2cBlockSync)",
        "(receiveByteSync,ReceiveByteSync)",
        "(writeWordSync,WriteWordSync)",
        "(writeByteSync,WriteByteSync)",
        "(writeWordAsync,WriteWordAsync)",
        "(readBlockSync,ReadBlockSync)",
        "(i2cFuncsSync,I2cFuncsSync)",
        "(writeBlockAsync,WriteBlockAsync)",
        "(readWordAsync,ReadWordAsync)",
        "(writeI2cBlockAsync,WriteI2cBlockAsync)",
        "(i2cFuncsAsync,I2cFuncsAsync)",
        "(deviceIdAsync,DeviceIdAsync)",
        "(readI2cBlockAsync,ReadI2cBlockAsync)",
        "(writeBlockSync,WriteBlockSync)",
        "(writeI2cBlockSync,WriteI2cBlockSync)",
        "(receiveByteAsync,ReceiveByteAsync)",
        "(readWordSync,ReadWordSync)",
        "(readBlockAsync,ReadBlockAsync)",
        "(writeByteAsync,WriteByteAsync)",
        "(setAddrAsync,SetAddrAsync)",
        "(writeQuickSync,WriteQuickSync)",
        "(setAddrSync,SetAddrSync)",
        "(writeQuickAsync,WriteQuickAsync)",
        "(readByteSync,ReadByteSync)",
        "(sendByteAsync,SendByteAsync)",
        "(deviceIdSync,DeviceIdSync)"
      ],
      "Charon": [
        "(setAddrAsync,SetAddrAsync)",
        "(setAddrSync,SetAddrSync)",
        "(i2cFuncsAsync,I2cFuncsAsync)",
        "(i2cFuncsSync,I2cFuncsSync)",
        "(deviceIdAsync,DeviceIdAsync)",
        "(deviceIdSync,DeviceIdSync)",
        "(readByteAsync,ReadByteAsync)",
        "(readByteSync,ReadByteSync)",
        "(readWordAsync,ReadWordAsync)",
        "(readWordSync,ReadWordSync)",
        "(readBlockAsync,ReadBlockAsync)",
        "(readBlockSync,ReadBlockSync)",
        "(readI2cBlockAsync,ReadI2cBlockAsync)",
        "(readI2cBlockSync,ReadI2cBlockSync)",
        "(receiveByteAsync,ReceiveByteAsync)",
        "(receiveByteSync,ReceiveByteSync)",
        "(sendByteAsync,SendByteAsync)",
        "(sendByteSync,SendByteSync)",
        "(writeByteAsync,WriteByteAsync)",
        "(writeByteSync,WriteByteSync)",
        "(writeWordAsync,WriteWordAsync)",
        "(writeWordSync,WriteWordSync)",
        "(writeBlockAsync,WriteBlockAsync)",
        "(writeBlockSync,WriteBlockSync)",
        "(writeI2cBlockAsync,WriteI2cBlockAsync)",
        "(writeI2cBlockSync,WriteI2cBlockSync)",
        "(writeQuickAsync,WriteQuickAsync)",
        "(writeQuickSync,WriteQuickSync)"
      ]
    },
    "i2c-bus-i2c-1": {
      "Gasket": [
        "(readI2cBlockAsync,ReadI2cBlockAsync)",
        "(readByteSync,ReadByteSync)",
        "(receiveByteSync,ReceiveByteSync)",
        "(writeWordSync,WriteWordSync)",
        "(readI2cBlockSync,ReadI2cBlockSync)",
        "(sendByteSync,SendByteSync)",
        "(receiveByteAsync,ReceiveByteAsync)",
        "(deviceIdSync,DeviceIdSync)",
        "(readWordSync,ReadWordSync)",
        "(readWordAsync,ReadWordAsync)",
        "(writeQuickAsync,WriteQuickAsync)",
        "(setAddrSync,SetAddrSync)",
        "(writeI2cBlockAsync,WriteI2cBlockAsync)",
        "(writeQuickSync,WriteQuickSync)",
        "(i2cFuncsAsync,I2cFuncsAsync)",
        "(writeWordAsync,WriteWordAsync)",
        "(i2cFuncsSync,I2cFuncsSync)",
        "(writeByteAsync,WriteByteAsync)",
        "(setAddrAsync,SetAddrAsync)",
        "(sendByteAsync,SendByteAsync)",
        "(writeI2cBlockSync,WriteI2cBlockSync)",
        "(writeBlockSync,WriteBlockSync)",
        "(deviceIdAsync,DeviceIdAsync)",
        "(readByteAsync,ReadByteAsync)",
        "(writeByteSync,WriteByteSync)",
        "(writeBlockAsync,WriteBlockAsync)",
        "(readBlockSync,ReadBlockSync)",
        "(readBlockAsync,ReadBlockAsync)"
      ],
      "Charon": [
        "(setAddrAsync,SetAddrAsync)",
        "(setAddrSync,SetAddrSync)",
        "(i2cFuncsAsync,I2cFuncsAsync)",
        "(i2cFuncsSync,I2cFuncsSync)",
        "(deviceIdAsync,DeviceIdAsync)",
        "(deviceIdSync,DeviceIdSync)",
        "(readByteAsync,ReadByteAsync)",
        "(readByteSync,ReadByteSync)",
        "(readWordAsync,ReadWordAsync)",
        "(readWordSync,ReadWordSync)",
        "(readBlockAsync,ReadBlockAsync)",
        "(readBlockSync,ReadBlockSync)",
        "(readI2cBlockAsync,ReadI2cBlockAsync)",
        "(readI2cBlockSync,ReadI2cBlockSync)",
        "(receiveByteAsync,ReceiveByteAsync)",
        "(receiveByteSync,ReceiveByteSync)",
        "(sendByteAsync,SendByteAsync)",
        "(sendByteSync,SendByteSync)",
        "(writeByteAsync,WriteByteAsync)",
        "(writeByteSync,WriteByteSync)",
        "(writeWordAsync,WriteWordAsync)",
        "(writeWordSync,WriteWordSync)",
        "(writeBlockAsync,WriteBlockAsync)",
        "(writeBlockSync,WriteBlockSync)",
        "(writeI2cBlockAsync,WriteI2cBlockAsync)",
        "(writeI2cBlockSync,WriteI2cBlockSync)",
        "(writeQuickAsync,WriteQuickAsync)",
        "(writeQuickSync,WriteQuickSync)"
      ]
    },
    "ibm_db": {
      "Gasket": [
        "(ODBCStatement,New)",
        "(getFunctionsSync,GetFunctionsSync)",
        "(getInfo,GetInfo)",
        "(getColumnMetadataSync,GetColumnMetadataSync)",
        "(getColumnNamesSync,GetColumnNamesSync)",
        "(fetchSync,FetchSync)",
        "(prepareSync,PrepareSync)",
        "(getAffectedRowsSync,GetAffectedRowsSync)",
        "(ODBC,New)",
        "(createConnection,CreateConnection)",
        "(query,Query)",
        "(endTransactionSync,EndTransactionSync)",
        "(fetch,Fetch)",
        "(open,Open)",
        "(getInfoSync,GetInfoSync)",
        "(fetchAll,FetchAll)",
        "(executeNonQuerySync,ExecuteNonQuerySync)",
        "(beginTransactionSync,BeginTransactionSync)",
        "(columns,Columns)",
        "(getFunctions,GetFunctions)",
        "(closeSync,CloseSync)",
        "(bindSync,BindSync)",
        "(executeDirectSync,ExecuteDirectSync)",
        "(fetchAllSync,FetchAllSync)",
        "(createDbSync,CreateDbSync)",
        "(close,Close)",
        "(moreResultsSync,MoreResultsSync)",
        "(getDataSync,GetDataSync)",
        "(getTypeInfoSync,GetTypeInfoSync)",
        "(ODBCResult,New)",
        "(executeSync,ExecuteSync)",
        "(querySync,QuerySync)",
        "(setAttr,SetAttr)",
        "(prepare,Prepare)",
        "(createStatementSync,CreateStatementSync)",
        "(setAttrSync,SetAttrSync)",
        "(ODBCConnection,New)",
        "(tables,Tables)",
        "(executeNonQuery,ExecuteNonQuery)",
        "(executeDirect,ExecuteDirect)",
        "(createStatement,CreateStatement)",
        "(dropDbSync,DropDbSync)",
        "(getTypeInfo,GetTypeInfo)",
        "(endTransaction,EndTransaction)",
        "(getSQLErrorSync,GetSQLErrorSync)",
        "(bind,Bind)",
        "(createConnectionSync,CreateConnectionSync)",
        "(setIsolationLevel,SetIsolationLevel)",
        "(execute,Execute)",
        "(getData,GetData)",
        "(beginTransaction,BeginTransaction)",
        "(openSync,OpenSync)"
      ],
      "Charon": [
        "(fetchAll,FetchAll)",
        "(fetch,Fetch)",
        "(getData,GetData)",
        "(moreResultsSync,MoreResultsSync)",
        "(close,Close)",
        "(closeSync,CloseSync)",
        "(fetchSync,FetchSync)",
        "(fetchAllSync,FetchAllSync)",
        "(getDataSync,GetDataSync)",
        "(getColumnNamesSync,GetColumnNamesSync)",
        "(getColumnMetadataSync,GetColumnMetadataSync)",
        "(getSQLErrorSync,GetSQLErrorSync)",
        "(getAffectedRowsSync,GetAffectedRowsSync)",
        "(index,self)",
        "(SQL_DESC_NAME,self)",
        "(SQL_DESC_TYPE_NAME,self)",
        "(SQL_DESC_CONSIZE_TYPE,self)",
        "(SQL_DESC_DISPLAY_SIZE,self)",
        "(SQL_DESC_PRECISION,self)",
        "(SQL_DESC_SCALE,self)",
        "(SQL_DESC_LENGTH,self)",
        "(execute,Execute)",
        "(executeSync,ExecuteSync)",
        "(executeDirect,ExecuteDirect)",
        "(executeDirectSync,ExecuteDirectSync)",
        "(executeNonQuery,ExecuteNonQuery)",
        "(executeNonQuerySync,ExecuteNonQuerySync)",
        "(prepare,Prepare)",
        "(prepareSync,PrepareSync)",
        "(bind,Bind)",
        "(bindSync,BindSync)",
        "(setAttr,SetAttr)",
        "(setAttrSync,SetAttrSync)",
        "(0,js_result)",
        "(connected,ConnectedGetter)",
        "(open,Open)",
        "(openSync,OpenSync)",
        "(createDbSync,CreateDbSync)",
        "(dropDbSync,DropDbSync)",
        "(createStatement,CreateStatement)",
        "(createStatementSync,CreateStatementSync)",
        "(query,Query)",
        "(querySync,QuerySync)",
        "(beginTransaction,BeginTransaction)",
        "(beginTransactionSync,BeginTransactionSync)",
        "(endTransaction,EndTransaction)",
        "(endTransactionSync,EndTransactionSync)",
        "(setIsolationLevel,SetIsolationLevel)",
        "(getInfo,GetInfo)",
        "(getInfoSync,GetInfoSync)",
        "(getTypeInfo,GetTypeInfo)",
        "(getTypeInfoSync,GetTypeInfoSync)",
        "(getFunctions,GetFunctions)",
        "(getFunctionsSync,GetFunctionsSync)",
        "(columns,Columns)",
        "(tables,Tables)",
        "(createConnection,CreateConnection)",
        "(createConnectionSync,CreateConnectionSync)",
        "(0,codeSet)"
      ]
    },
    "ibmmq": {
      "Gasket": [
        "(LoadLib,LoadLib)",
        "(DltMp,DLTMP)",
        "(DltMh,DLTMH)",
        "(Put1,PUT1)",
        "(Get,GET)",
        "(GetAsync,GETASYNC)",
        "(Close,CLOSE)",
        "(Put,PUT)",
        "(Back,BACK)",
        "(Configure,Configure)",
        "(Connx,CONNX)",
        "(Stat,STAT)",
        "(Begin,BEGIN)",
        "(Disc,DISC)",
        "(InqMp,INQMP)",
        "(Set,SET)",
        "(Ctl,CTL)",
        "(_SetTuningParameters,SetTuningParameters)",
        "(Sub,SUB)",
        "(CrtMh,CRTMH)",
        "(Inq,INQ)",
        "(Open,OPEN)",
        "(SetMp,SETMP)",
        "(Subrq,SUBRQ)",
        "(_TestSP,TESTSP)",
        "(GetDone,GETDONE)",
        "(Cmit,CMIT)"
      ],
      "Charon": [
        "(jsCc,Number)",
        "(jsRc,Number)",
        "(value,Number)",
        "(value,String)",
        "(message,String)",
        "(BuildTime,String)",
        "(Configure,Configure)",
        "(LoadLib,LoadLib)",
        "(Connx,CONNX)",
        "(Disc,DISC)",
        "(Open,OPEN)",
        "(Close,CLOSE)",
        "(Begin,BEGIN)",
        "(Cmit,CMIT)",
        "(Back,BACK)",
        "(Inq,INQ)",
        "(Set,SET)",
        "(Sub,SUB)",
        "(Subrq,SUBRQ)",
        "(Stat,STAT)",
        "(Put,PUT)",
        "(Put1,PUT1)",
        "(Get,GET)",
        "(GetAsync,GETASYNC)",
        "(GetDone,GETDONE)",
        "(Ctl,CTL)",
        "(CrtMh,CRTMH)",
        "(DltMh,DLTMH)",
        "(SetMp,SETMP)",
        "(InqMp,INQMP)",
        "(DltMp,DLTMP)",
        "(_SetTuningParameters,SetTuningParameters)",
        "(_TestSP,TESTSP)",
        "(jsHConn,Number)",
        "(Options,Number)",
        "(OriginalMsgHandle,BigInt)",
        "(NewMsgHandle,BigInt)",
        "(PubLevel,Number)",
        "(Report,Number)",
        "(MsgType,Number)",
        "(Expiry,Number)",
        "(Feedback,Number)",
        "(Encoding,Number)",
        "(CodedCharSetId,Number)",
        "(Priority,Number)",
        "(Persistence,Number)",
        "(BackoutCount,Number)",
        "(PutApplType,Number)",
        "(MsgSeqNumber,Number)",
        "(Offset,Number)",
        "(MsgFlags,Number)",
        "(OriginalLength,Number)",
        "(jsHObj,Number)",
        "(Type,Number)",
        "(PropsLen,Number)",
        "(jsCallType,Number)",
        "(RemoveRFH2,Boolean)",
        "(CompCode,Number)",
        "(Reason,Number)",
        "(PutSuccessCount,Number)",
        "(PutWarningCount,Number)",
        "(PutFailureCount,Number)",
        "(ObjectType,Number)",
        "(OpenOptions,Number)",
        "(SubOptions,Number)",
        "(WaitInterval,Number)",
        "(GroupStatus,Number)",
        "(SegmentStatus,Number)",
        "(Segmentation,Number)",
        "(ReturnedLength,Number)",
        "(jsHObjQ,Number)",
        "(jsHObjSub,Number)",
        "(jsDatalen,Number)",
        "(ResolvedType,Number)",
        "(jsHMsg,BigInt)",
        "(SubLevel,Number)"
      ]
    },
    "@ibsolution/hana-client-promise": {
      "Gasket": [
        "(executeQuery,execQuery)",
        "(getValueLength,getValueLength)",
        "(setAutoCommit,setAutoCommit)",
        "(getRowCount,getRowCount)",
        "(__getPipe,getPipe)",
        "(isParameterNull,isParameterNull)",
        "(getWarnings,getWarnings)",
        "(setTimeout,setTimeout)",
        "(rollback,rollback)",
        "(__loadDbcapi,loadDbcapi)",
        "(__stopAllWork,stopAllWork)",
        "(prepare,prepare)",
        "(createConnection,CreateConnection)",
        "(setClientInfo,setClientInfo)",
        "(execQuery,execQuery)",
        "(drop,drop)",
        "(exec,exec)",
        "(functionCode,functionCode)",
        "(execBatch,execBatch)",
        "(getPooledConnectionCount,getPooledConnectionCount)",
        "(Statement,Statement)",
        "(clearPool,clearPool)",
        "(getServerMemoryUsage,getServerMemoryUsage)",
        "(commit,commit)",
        "(getColumnCount,getColumnCount)",
        "(createClient,CreateConnection)",
        "(isNull,isNull)",
        "(nextResult,nextResult)",
        "(connect,connect)",
        "(getServerCPUTime,getServerCPUTime)",
        "(getColumnName,getColumnName)",
        "(getValues,getValues)",
        "(abort,abort)",
        "(setRowSetSize,setRowSetSize)",
        "(getServerProcessingTime,getServerProcessingTime)",
        "(close,disconnect)",
        "(getParameterInfo,getParameterInfo)",
        "(getPrintLines,getPrintLines)",
        "(execute,exec)",
        "(sendParameterData,sendParameterData)",
        "(end,disconnect)",
        "(next,next)",
        "(getData,getData)",
        "(getParameterLength,getParameterLength)",
        "(hasNextResult,hasNextResult)",
        "(__runCallbacks,runCallbacks)",
        "(isValid,isValid)",
        "(ResultSet,ResultSet)",
        "(getParameterValue,getParameterValue)",
        "(Connection,Connection)",
        "(getDriverVersion,getDriverVersion)",
        "(getValue,getValue)",
        "(getAutoCommit,getAutoCommit)",
        "(__setRefFunctions,setRefFns)",
        "(getColumnInfo,getColumnInfo)",
        "(isClosed,isClosed)",
        "(disconnect,disconnect)",
        "(close,close)",
        "(executeBatch,execBatch)",
        "(getClientInfo,getClientInfo)",
        "(state,state)",
        "(getRowStatus,getRowStatus)"
      ],
      "Charon": []
    },
    "@icebob/node-memwatch": {
      "Gasket": [
        "(HeapDiff,New)",
        "(end,End)",
        "(gc,trigger_gc)",
        "(upon_gc,upon_gc)"
      ],
      "Charon": [
        "(end,End)"
      ]
    },
    "@ices/node-addons-callbacks": {
      "Gasket": [
        "(node-addons-callbacks/build/Debug/hello,RunCallback)",
        "(target/hello,RunCallback)"
      ],
      "Charon": []
    },
    "@ices/node-addons-hello": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": []
    },
    "iconv": {
      "Gasket": [
        "(make,make)",
        "(convert,convert)"
      ],
      "Charon": []
    },
    "iconv-md5": {
      "Gasket": [
        "(convertMD5,convertMD5)"
      ],
      "Charon": [
        "(convertMD5,convertMD5)"
      ]
    },
    "icu-transliterator": {
      "Gasket": [
        "(format,Format)",
        "(RBT,RBT)",
        "(transliterate,Transliterate)",
        "(RBNF,RBNF)",
        "(register,Register)"
      ],
      "Charon": []
    },
    "@idango/crypt3": {
      "Gasket": [
        "(crypt,Method)",
        "(crypt,Crypt3Async)"
      ],
      "Charon": [
        "(crypt,Crypt3Async)",
        "(crypt,Method)"
      ]
    },
    "@ifabos/kerberos": {
      "Gasket": [
        "(checkPassword,CheckPassword)",
        "(wrap,WrapData)",
        "(_testMethod,TestMethod)",
        "(KerberosClient,KerberosClient)",
        "(unwrap,UnwrapData)",
        "(principalDetails,PrincipalDetails)",
        "(initializeClient,InitializeClient)",
        "(step,Step)",
        "(KerberosServer,KerberosServer)",
        "(initializeServer,InitializeServer)"
      ],
      "Charon": []
    },
    "@ikonopistsev/node-rapidjson": {
      "Gasket": [
        "(parse,parse)",
        "(parseMessage,parseMessage)",
        "(Schema,Schema)",
        "(getResult,getResult)",
        "(validateKeyword,validateKeyword)",
        "(Document,Document)",
        "(get,getResult)",
        "(documentPointer,documentPointer)",
        "(hasParseError,hasParseError)",
        "(validate,validate)",
        "(schemaPointer,schemaPointer)",
        "(parseOffset,parseOffset)",
        "(parseError,parseError)"
      ],
      "Charon": [
        "(bar,a)",
        "(1234,a)",
        "(foo,a)"
      ]
    },
    "@ilb/posix": {
      "Gasket": [
        "(setlogmask,node_setlogmask)",
        "(swapoff,node_swapoff)",
        "(closelog,node_closelog)",
        "(swapon,node_swapon)",
        "(seteuid,node_seteuid)",
        "(update_syslog_constants,node_update_syslog_constants)",
        "(update_swap_constants,node_update_swap_constants)",
        "(getgrnam,node_getgrnam)",
        "(setregid,node_setregid)",
        "(initgroups,node_initgroups)",
        "(openlog,node_openlog)",
        "(getpwnam,node_getpwnam)",
        "(setpgid,node_setpgid)",
        "(sethostname,node_sethostname)",
        "(gethostname,node_gethostname)",
        "(setrlimit,node_setrlimit)",
        "(setsid,node_setsid)",
        "(setegid,node_setegid)",
        "(getppid,node_getppid)",
        "(getpgid,node_getpgid)",
        "(syslog,node_syslog)",
        "(geteuid,node_geteuid)",
        "(getrlimit,node_getrlimit)",
        "(getegid,node_getegid)",
        "(chroot,node_chroot)",
        "(setreuid,node_setreuid)"
      ],
      "Charon": [
        "(code,Number)",
        "(name,String)",
        "(passwd,String)",
        "(uid,Number)",
        "(gid,Number)",
        "(gecos,String)",
        "(shell,String)",
        "(dir,String)",
        "(auth,Number)",
        "(cron,Number)",
        "(daemon,Number)",
        "(kern,Number)",
        "(lpr,Number)",
        "(mail,Number)",
        "(news,Number)",
        "(syslog,Number)",
        "(user,Number)",
        "(uucp,Number)",
        "(local0,Number)",
        "(local1,Number)",
        "(local2,Number)",
        "(local3,Number)",
        "(local4,Number)",
        "(local5,Number)",
        "(local6,Number)",
        "(local7,Number)",
        "(pid,Number)",
        "(cons,Number)",
        "(ndelay,Number)",
        "(odelay,Number)",
        "(nowait,Number)",
        "(getppid,node_getppid)",
        "(getpgid,node_getpgid)",
        "(setpgid,node_setpgid)",
        "(geteuid,node_geteuid)",
        "(getegid,node_getegid)",
        "(setsid,node_setsid)",
        "(chroot,node_chroot)",
        "(getrlimit,node_getrlimit)",
        "(setrlimit,node_setrlimit)",
        "(getpwnam,node_getpwnam)",
        "(getgrnam,node_getgrnam)",
        "(initgroups,node_initgroups)",
        "(seteuid,node_seteuid)",
        "(setegid,node_setegid)",
        "(setregid,node_setregid)",
        "(setreuid,node_setreuid)",
        "(openlog,node_openlog)",
        "(closelog,node_closelog)",
        "(syslog,node_syslog)",
        "(setlogmask,node_setlogmask)",
        "(update_syslog_constants,node_update_syslog_constants)",
        "(gethostname,node_gethostname)",
        "(sethostname,node_sethostname)"
      ]
    },
    "iltorb": {
      "Gasket": [
        "(StreamDecode,New)",
        "(flush,Flush)",
        "(transform,Transform)",
        "(StreamEncode,New)"
      ],
      "Charon": [
        "(transform,Transform)",
        "(flush,Flush)"
      ]
    },
    "inclose5js": {
      "Gasket": [
        "(run,Run)"
      ],
      "Charon": [
        "(run,Run)"
      ]
    },
    "inet_xtoy": {
      "Gasket": [
        "(inet_pton,InetPtoN)",
        "(inet_ntop,InetNtoP)"
      ],
      "Charon": [
        "(errno,Value)",
        "(inet_ntop,InetNtoP)",
        "(inet_pton,InetPtoN)"
      ]
    },
    "ingescape": {
      "Gasket": [
        "(commandLine,node_igs_command_line)",
        "(splitCount,node_igs_split_count)",
        "(inputRemove,node_igsagent_input_remove)",
        "(observeForcedStop,node_igs_observe_forced_stop)",
        "(inputSetDouble,node_igsagent_input_set_double)",
        "(inputBool,node_igs_input_bool)",
        "(logSetConsole,node_igs_log_set_console)",
        "(parameterExists,node_igs_parameter_exists)",
        "(attributeSetDetailedType,node_igsagent_attribute_set_detailed_type)",
        "(logSetConsoleLevel,node_igs_log_set_console_level)",
        "(logSetSyslog,node_igs_log_set_syslog)",
        "(outputString,node_igs_output_string)",
        "(parameterData,node_igs_parameter_data)",
        "(serviceReplyRemove,node_igs_service_reply_remove)",
        "(definitionSetPackage,node_igs_definition_set_package)",
        "(rtSynchronousMode,node_igs_rt_synchronous_mode)",
        "(clearMappingsWithAgent,node_igsagent_clear_mappings_with_agent)",
        "(logSetFileLevel,node_igs_log_set_file_level)",
        "(outputInt,node_igsagent_output_int)",
        "(serviceReplyDescription,node_igs_service_reply_description)",
        "(mappingLoadFile,node_igsagent_mapping_load_file)",
        "(parameterAddConstraint,node_igs_parameter_add_constraint)",
        "(attributeCreate,node_igsagent_attribute_create)",
        "(attributeType,node_igsagent_attribute_type)",
        "(inputDouble,node_igs_input_double)",
        "(trace,node_igs_trace)",
        "(brokerAdd,node_igs_broker_add)",
        "(logSetFileMaxLineLength,node_igs_log_set_file_max_line_length)",
        "(observeAgentEvents,node_igsagent_observe_agent_events)",
        "(agentSetFamily,node_igs_agent_set_family)",
        "(parameterRemove,node_igsagent_parameter_remove)",
        "(parameterSetData,node_igs_parameter_set_data)",
        "(logConsoleLevel,node_igs_log_console_level)",
        "(serviceDescription,node_igsagent_service_description)",
        "(state,node_igsagent_state)",
        "(outputSetDescription,node_igs_output_set_description)",
        "(logSyslog,node_igs_log_syslog)",
        "(serviceCall,node_igsagent_service_call)",
        "(parameterSetString,node_igsagent_parameter_set_string)",
        "(attributeBool,node_igsagent_attribute_bool)",
        "(unfreeze,node_igs_unfreeze)",
        "(inputDescription,node_igs_input_description)",
        "(netSetHighWaterMarks,node_igs_net_set_high_water_marks)",
        "(outputMute,node_igsagent_output_mute)",
        "(logFile,node_igs_log_file)",
        "(serviceArgSetDescription,node_igsagent_service_arg_set_description)",
        "(logConsole,node_igs_log_console)",
        "(parameterString,node_igs_parameter_string)",
        "(logSetConsoleColor,node_igs_log_set_console_color)",
        "(agentIsMuted,node_igs_agent_is_muted)",
        "(definitionSave,node_igs_definition_save)",
        "(inputSetData,node_igsagent_input_set_data)",
        "(definitionPackage,node_igsagent_definition_package)",
        "(inputAddConstraint,node_igsagent_input_add_constraint)",
        "(parameterDouble,node_igsagent_parameter_double)",
        "(startWithBrokers,node_igs_start_with_brokers)",
        "(mappingSetPath,node_igs_mapping_set_path)",
        "(error,node_igsagent_error)",
        "(outputType,node_igsagent_output_type)",
        "(serviceArgExists,node_igsagent_service_arg_exists)",
        "(serviceInit,node_igsagent_service_init)",
        "(serviceArgDescription,node_igsagent_service_arg_description)",
        "(setCommandLine,node_igs_set_command_line)",
        "(serviceArgAdd,node_igsagent_service_arg_add)",
        "(inputSetDescription,node_igs_input_set_description)",
        "(name,node_igsagent_name)",
        "(attributeCount,node_igsagent_attribute_count)",
        "(serviceReplyArgAdd,node_igs_service_reply_arg_add)",
        "(outputSetDetailedType,node_igsagent_output_set_detailed_type)",
        "(serviceArgsCount,node_igsagent_service_args_count)",
        "(family,node_igsagent_family)",
        "(outputSetString,node_igs_output_set_string)",
        "(attributeInt,node_igs_attribute_int)",
        "(agentName,node_igs_agent_name)",
        "(serviceArgRemove,node_igsagent_service_arg_remove)",
        "(trace,node_igsagent_trace)",
        "(netSetTimeout,node_igs_net_set_timeout)",
        "(serviceReplyArgExists,node_igs_service_reply_arg_exists)",
        "(inputData,node_igsagent_input_data)",
        "(outputSetDetailedType,node_igs_output_set_detailed_type)",
        "(serviceReplyArgsList,node_igs_service_reply_args_list)",
        "(enableSecurity,node_igs_enable_security)",
        "(startWithIp,node_igs_start_with_ip)",
        "(outputCount,node_igsagent_output_count)",
        "(serviceHasReplies,node_igsagent_service_has_replies)",
        "(monitorEventTypes,node_get_monitor_event_types)",
        "(serviceReplyArgSetDescription,node_igsagent_service_reply_arg_set_description)",
        "(attributeExists,node_igs_attribute_exists)",
        "(outputRemove,node_igsagent_output_remove)",
        "(isStarted,node_igs_is_started)",
        "(inputDescription,node_igsagent_input_description)",
        "(parameterAddConstraint,node_igsagent_parameter_add_constraint)",
        "(mappingLoadStr,node_igs_mapping_load_str)",
        "(mappingRemoveWithName,node_igs_mapping_remove_with_name)",
        "(serviceSetDescription,node_igsagent_service_set_description)",
        "(uuid,node_igsagent_uuid)",
        "(outputData,node_igsagent_output_data)",
        "(parameterSetDescription,node_igsagent_parameter_set_description)",
        "(Agent,node_igsagent_new)",
        "(inputDouble,node_igsagent_input_double)",
        "(serviceReplySetDescription,node_igs_service_reply_set_description)",
        "(attributeRemove,node_igs_attribute_remove)",
        "(rtSetTime,node_igs_rt_set_time)",
        "(attributeSetBool,node_igsagent_attribute_set_bool)",
        "(observeFreeze,node_igs_observe_freeze)",
        "(serviceArgSetDescription,node_igs_service_arg_set_description)",
        "(outputSetData,node_igs_output_set_data)",
        "(logFilePath,node_igs_log_file_path)",
        "(monitorStart,node_igs_monitor_start)",
        "(outputSetBool,node_igsagent_output_set_bool)",
        "(definitionJson,node_igsagent_definition_json)",
        "(serviceReplyAdd,node_igsagent_service_reply_add)",
        "(inputCount,node_igsagent_input_count)",
        "(logSetStream,node_igs_log_set_stream)",
        "(outputExists,node_igs_output_exists)",
        "(splitAdd,node_igs_split_add)",
        "(inputCreate,node_igs_input_create)",
        "(serviceReplyArgsCount,node_igs_service_reply_args_count)",
        "(observeOutput,node_igsagent_observe_output)",
        "(observe,node_igsagent_observe)",
        "(parameterExists,node_igsagent_parameter_exists)",
        "(inputExists,node_igsagent_input_exists)",
        "(serviceReplyArgAdd,node_igsagent_service_reply_arg_add)",
        "(splitRemoveWithName,node_igsagent_split_remove_with_name)",
        "(serviceArgAdd,node_igs_service_arg_add)",
        "(inputSetData,node_igs_input_set_data)",
        "(serviceReplyArgRemove,node_igsagent_service_reply_arg_remove)",
        "(attributeAddConstraint,node_igsagent_attribute_add_constraint)",
        "(netSetDiscoveryInterval,node_igs_net_set_discovery_interval)",
        "(serviceArgsAddBool,node_igs_service_args_add_bool)",
        "(inputSetString,node_igs_input_set_string)",
        "(setFamily,node_igsagent_set_family)",
        "(splitCount,node_igsagent_split_count)",
        "(attributeRemove,node_igsagent_attribute_remove)",
        "(ioTypes,node_get_ios_js)",
        "(observeAgentEvents,node_igs_observe_agent_events)",
        "(inputList,node_igs_input_list)",
        "(rtTimestamps,node_igs_rt_timestamps)",
        "(attributeType,node_igs_attribute_type)",
        "(parameterData,node_igsagent_parameter_data)",
        "(freeze,node_igs_freeze)",
        "(outputList,node_igsagent_output_list)",
        "(setState,node_igsagent_set_state)",
        "(serviceHasReply,node_igs_service_has_reply)",
        "(inputString,node_igsagent_input_string)",
        "(serviceReplyNames,node_igs_service_reply_names)",
        "(inputBool,node_igsagent_input_bool)",
        "(logConsoleColor,node_igs_log_console_color)",
        "(parameterSetDouble,node_igsagent_parameter_set_double)",
        "(netDevicesList,node_igs_net_devices_list)",
        "(serviceReplySetDescription,node_igsagent_service_reply_set_description)",
        "(inputList,node_igsagent_input_list)",
        "(monitorSetStartStop,node_igs_monitor_set_start_stop)",
        "(version,node_igs_version)",
        "(info,node_igs_info)",
        "(observeParameter,node_igsagent_observe_parameter)",
        "(inputAddConstraint,node_igs_input_add_constraint)",
        "(monitorStartWithNetwork,node_igs_monitor_start_with_network)",
        "(startWithDevice,node_igs_start_with_device)",
        "(clearMappingsForInput,node_igsagent_clear_mappings_for_input)",
        "(attributeString,node_igsagent_attribute_string)",
        "(outputData,node_igs_output_data)",
        "(serviceReplyArgSetDescription,node_igs_service_reply_arg_set_description)",
        "(inputSetInt,node_igsagent_input_set_int)",
        "(fatal,node_igsagent_fatal)",
        "(info,node_igsagent_info)",
        "(rtTime,node_igs_rt_time)",
        "(attributeSetInt,node_igs_attribute_set_int)",
        "(protocol,node_igs_protocol)",
        "(attributeList,node_igsagent_attribute_list)",
        "(parameterBool,node_igsagent_parameter_bool)",
        "(agentEventTypes,node_get_agent_event_types)",
        "(parameterSetInt,node_igsagent_parameter_set_int)",
        "(definitionLoadFile,node_igsagent_definition_load_file)",
        "(observeInput,node_igsagent_observe_input)",
        "(parameterRemove,node_igs_parameter_remove)",
        "(mappingSetOutputsRequest,node_igs_mapping_set_outputs_request)",
        "(parameterSetData,node_igsagent_parameter_set_data)",
        "(attributeData,node_igsagent_attribute_data)",
        "(outputSetInt,node_igs_output_set_int)",
        "(observeInput,node_igs_observe_input)",
        "(mute,node_igsagent_mute)",
        "(outputList,node_igs_output_list)",
        "(parameterList,node_igsagent_parameter_list)",
        "(netSetLogStreamPort,node_igs_net_set_log_stream_port)",
        "(attributeDouble,node_igs_attribute_double)",
        "(attributeSetInt,node_igsagent_attribute_set_int)",
        "(parameterCreate,node_igs_parameter_create)",
        "(netSetPublishingPort,node_igs_net_set_publishing_port)",
        "(definitionPackage,node_igs_definition_package)",
        "(parameterSetInt,node_igs_parameter_set_int)",
        "(inputSetDetailedType,node_igs_input_set_detailed_type)",
        "(parameterSetBool,node_igs_parameter_set_bool)",
        "(inputCount,node_igs_input_count)",
        "(clearContext,node_igs_clear_context)",
        "(mappingAdd,node_igsagent_mapping_add)",
        "(rtSetTimestamps,node_igs_rt_set_timestamps)",
        "(clearOutput,node_igsagent_clear_output)",
        "(definitionSetDescription,node_igsagent_definition_set_description)",
        "(serviceList,node_igs_service_list)",
        "(definitionVersion,node_igsagent_definition_version)",
        "(serviceReplyDescription,node_igsagent_service_reply_description)",
        "(attributeSetBool,node_igs_attribute_set_bool)",
        "(debug,node_igsagent_debug)",
        "(netAddressesList,node_igs_net_addresses_list)",
        "(clearOutput,node_igs_clear_output)",
        "(deactivate,node_igsagent_deactivate)",
        "(attributeData,node_igs_attribute_data)",
        "(logNoWarningIfUndefinedService,node_igs_log_no_warning_if_undefined_service)",
        "(serviceArgExists,node_igs_service_arg_exists)",
        "(debug,node_igs_debug)",
        "(parameterInt,node_igs_parameter_int)",
        "(parameterType,node_igs_parameter_type)",
        "(clearInput,node_igs_clear_input)",
        "(serviceRemove,node_igsagent_service_remove)",
        "(serviceRemove,node_igs_service_remove)",
        "(logSetFile,node_igs_log_set_file)",
        "(attributeSetData,node_igs_attribute_set_data)",
        "(attributeSetDouble,node_igs_attribute_set_double)",
        "(definitionSetPath,node_igs_definition_set_path)",
        "(outputExists,node_igsagent_output_exists)",
        "(mappingJson,node_igs_mapping_json)",
        "(mappingJson,node_igsagent_mapping_json)",
        "(serviceInit,node_igs_service_init)",
        "(attributeExists,node_igsagent_attribute_exists)",
        "(serviceArgsList,node_igs_service_args_list)",
        "(clearAttribute,node_igs_clear_attribute)",
        "(mappingAdd,node_igs_mapping_add)",
        "(ioValueTypes,node_get_io_types_js)",
        "(serviceArgsAddData,node_igs_service_args_add_data)",
        "(inputSetDetailedType,node_igsagent_input_set_detailed_type)",
        "(parameterSetString,node_igs_parameter_set_string)",
        "(inputType,node_igs_input_type)",
        "(outputSetDouble,node_igsagent_output_set_double)",
        "(parameterCount,node_igs_parameter_count)",
        "(attributeDescription,node_igsagent_attribute_description)",
        "(logSetFilePath,node_igs_log_set_file_path)",
        "(serviceArgsAddString,node_igs_service_args_add_string)",
        "(parameterList,node_igs_parameter_list)",
        "(mappingLoadFile,node_igs_mapping_load_file)",
        "(inputRemove,node_igs_input_remove)",
        "(serviceExists,node_igsagent_service_exists)",
        "(outputUnmute,node_igs_output_unmute)",
        "(observeMute,node_igs_observe_mute)",
        "(definitionDescription,node_igsagent_definition_description)",
        "(outputAddConstraint,node_igsagent_output_add_constraint)",
        "(attributeSetDescription,node_igs_attribute_set_description)",
        "(serviceReplyArgDescription,node_igsagent_service_reply_arg_description)",
        "(serviceCount,node_igs_service_count)",
        "(clearMappings,node_igs_clear_mappings)",
        "(outputSetData,node_igsagent_output_set_data)",
        "(inputSetBool,node_igsagent_input_set_bool)",
        "(observeAttribute,node_igsagent_observe_attribute)",
        "(mappingSave,node_igs_mapping_save)",
        "(serviceReplyAdd,node_igs_service_reply_add)",
        "(inputSetBool,node_igs_input_set_bool)",
        "(outputBool,node_igsagent_output_bool)",
        "(ipcDir,node_igs_ipc_dir)",
        "(definitionClass,node_igsagent_definition_class)",
        "(outputRemove,node_igs_output_remove)",
        "(logLevels,node_get_log_levels_js)",
        "(outputDescription,node_igsagent_output_description)",
        "(mappingOutputsRequest,node_igsagent_mapping_outputs_request)",
        "(definitionSetDescription,node_igs_definition_set_description)",
        "(serviceDescription,node_igs_service_description)",
        "(outputMute,node_igs_output_mute)",
        "(outputSetBool,node_igs_output_set_bool)",
        "(parameterSetDouble,node_igs_parameter_set_double)",
        "(parameterSetBool,node_igsagent_parameter_set_bool)",
        "(activate,node_igsagent_activate)",
        "(serviceReplyArgRemove,node_igs_service_reply_arg_remove)",
        "(definitionVersion,node_igs_definition_version)",
        "(clearMappingsForInput,node_igs_clear_mappings_for_input)",
        "(parameterDouble,node_igs_parameter_double)",
        "(serviceHasReplies,node_igs_service_has_replies)",
        "(inputType,node_igsagent_input_type)",
        "(definitionDescription,node_igs_definition_description)",
        "(clearMappings,node_igsagent_clear_mappings)",
        "(agentUnmute,node_igs_agent_unmute)",
        "(definitionSetClass,node_igs_definition_set_class)",
        "(inputData,node_igs_input_data)",
        "(rtSetSynchronousMode,node_igs_rt_set_synchronous_mode)",
        "(inputSetDescription,node_igsagent_input_set_description)",
        "(error,node_igs_error)",
        "(attributeCreate,node_igs_attribute_create)",
        "(parameterCount,node_igsagent_parameter_count)",
        "(netRaiseSocketsLimit,node_igs_net_raise_sockets_limit)",
        "(clearMappingsWithAgent,node_igs_clear_mappings_with_agent)",
        "(warn,node_igsagent_warn)",
        "(mappingCount,node_igs_mapping_count)",
        "(outputIsMuted,node_igsagent_output_is_muted)",
        "(splitRemoveWithName,node_igs_split_remove_with_name)",
        "(clearAttribute,node_igsagent_clear_attribute)",
        "(attributeSetString,node_igsagent_attribute_set_string)",
        "(outputAddConstraint,node_igs_output_add_constraint)",
        "(agentUuid,node_igs_agent_uuid)",
        "(setIpcDir,node_igs_set_ipc_dir)",
        "(definitionLoadStr,node_igsagent_definition_load_str)",
        "(parameterBool,node_igs_parameter_bool)",
        "(constraintsEnforce,node_igsagent_constraints_enforce)",
        "(electionJoin,node_igs_election_join)",
        "(destroy,destroy_agent_context)",
        "(inputString,node_igs_input_string)",
        "(parameterCreate,node_igsagent_parameter_create)",
        "(serviceArgRemove,node_igs_service_arg_remove)",
        "(outputSetDescription,node_igsagent_output_set_description)",
        "(definitionSetPackage,node_igsagent_definition_set_package)",
        "(timerStop,node_igs_timer_stop)",
        "(constraintsEnforce,node_igs_constraints_enforce)",
        "(serviceArgsAddInt,node_igs_service_args_add_int)",
        "(attributeAddConstraint,node_igs_attribute_add_constraint)",
        "(hasIpc,node_igs_has_ipc)",
        "(serviceReplyRemove,node_igsagent_service_reply_remove)",
        "(serviceArgDescription,node_igs_service_arg_description)",
        "(serviceArgsList,node_igsagent_service_args_list)",
        "(outputDouble,node_igs_output_double)",
        "(attributeDouble,node_igsagent_attribute_double)",
        "(clearDefinition,node_igsagent_clear_definition)",
        "(definitionLoadFile,node_igs_definition_load_file)",
        "(attributeSetDouble,node_igsagent_attribute_set_double)",
        "(attributeSetDescription,node_igsagent_attribute_set_description)",
        "(inputCreate,node_igsagent_input_create)",
        "(serviceArgsAddDouble,node_igs_service_args_add_double)",
        "(observeOutput,node_igs_observe_output)",
        "(outputSetDouble,node_igs_output_set_double)",
        "(outputCreate,node_igs_output_create)",
        "(serviceArgsCount,node_igs_service_args_count)",
        "(setName,node_igsagent_set_name)",
        "(outputDouble,node_igsagent_output_double)",
        "(outputSetImpulsion,node_igs_output_set_impulsion)",
        "(mappingCount,node_igsagent_mapping_count)",
        "(attributeString,node_igs_attribute_string)",
        "(setIpc,node_igs_set_ipc)",
        "(outputIsMuted,node_igs_output_is_muted)",
        "(serviceList,node_igsagent_service_list)",
        "(warn,node_igs_warn)",
        "(serviceCount,node_igsagent_service_count)",
        "(outputCreate,node_igsagent_output_create)",
        "(logIncludeServices,node_igs_log_include_services)",
        "(inputSetString,node_igsagent_input_set_string)",
        "(logStream,node_igs_log_stream)",
        "(electionLeave,node_igs_election_leave)",
        "(splitRemoveWithId,node_igsagent_split_remove_with_id)",
        "(rtGetCurrentTimestamp,node_igs_rt_get_current_timestamp)",
        "(clearBrokers,node_igs_clear_brokers)",
        "(inputSetInt,node_igs_input_set_int)",
        "(mappingLoadStr,node_igsagent_mapping_load_str)",
        "(attributeSetData,node_igsagent_attribute_set_data)",
        "(outputCount,node_igs_output_count)",
        "(outputType,node_igs_output_type)",
        "(serviceReplyArgDescription,node_igs_service_reply_arg_description)",
        "(clearParameter,node_igsagent_clear_parameter)",
        "(inputSetImpulsion,node_igsagent_input_set_impulsion)",
        "(serviceCall,node_igs_service_call)",
        "(definitionJson,node_igs_definition_json)",
        "(observeMute,node_igsagent_observe_mute)",
        "(attributeInt,node_igsagent_attribute_int)",
        "(attributeCount,node_igs_attribute_count)",
        "(fatal,node_igs_fatal)",
        "(isFrozen,node_igs_is_frozen)",
        "(parameterInt,node_igsagent_parameter_int)",
        "(clearParameter,node_igs_clear_parameter)",
        "(attributeSetDetailedType,node_igs_attribute_set_detailed_type)",
        "(mappingSetOutputsRequest,node_igsagent_mapping_set_outputs_request)",
        "(definitionSetVersion,node_igs_definition_set_version)",
        "(serviceSetDescription,node_igs_service_set_description)",
        "(agentState,node_igs_agent_state)",
        "(outputBool,node_igs_output_bool)",
        "(parameterString,node_igsagent_parameter_string)",
        "(agentSetName,node_igs_agent_set_name)",
        "(parameterType,node_igsagent_parameter_type)",
        "(mappingRemoveWithId,node_igs_mapping_remove_with_id)",
        "(brokerAddSecure,node_igs_broker_add_secure)",
        "(stop,node_igs_stop)",
        "(mappingRemoveWithName,node_igsagent_mapping_remove_with_name)",
        "(brokerSetAdvertizedEndpoint,node_igs_broker_set_advertized_endpoint)",
        "(inputSetDouble,node_igs_input_set_double)",
        "(outputInt,node_igs_output_int)",
        "(attributeSetString,node_igs_attribute_set_string)",
        "(observeAttribute,node_igs_observe_attribute)",
        "(splitAdd,node_igsagent_split_add)",
        "(outputUnmute,node_igsagent_output_unmute)",
        "(attributeList,node_igs_attribute_list)",
        "(mappingOutputsRequest,node_igs_mapping_outputs_request)",
        "(attributeBool,node_igs_attribute_bool)",
        "(inputInt,node_igs_input_int)",
        "(inputSetImpulsion,node_igs_input_set_impulsion)",
        "(agentFamily,node_igs_agent_family)",
        "(isActivated,node_igsagent_is_activated)",
        "(inputInt,node_igsagent_input_int)",
        "(outputDescription,node_igs_output_description)",
        "(parameterSetDescription,node_igs_parameter_set_description)",
        "(observeMonitor,node_igs_observe_monitor)",
        "(outputSetInt,node_igsagent_output_set_int)",
        "(monitorIsRunning,node_igs_monitor_is_running)",
        "(serviceExists,node_igs_service_exists)",
        "(netPerformanceCheck,node_igs_net_performance_check)",
        "(monitorStop,node_igs_monitor_stop)",
        "(outputSetImpulsion,node_igsagent_output_set_impulsion)",
        "(outputString,node_igsagent_output_string)",
        "(unmute,node_igsagent_unmute)",
        "(mappingRemoveWithId,node_igsagent_mapping_remove_with_id)",
        "(brokerEnableWithEndpoint,node_igs_broker_enable_with_endpoint)",
        "(definitionSetClass,node_igsagent_definition_set_class)",
        "(logIncludeData,node_igs_log_include_data)",
        "(observeParameter,node_igs_observe_parameter)",
        "(splitRemoveWithId,node_igs_split_remove_with_id)",
        "(definitionClass,node_igs_definition_class)",
        "(isMuted,node_igsagent_is_muted)",
        "(definitionSetVersion,node_igsagent_definition_set_version)",
        "(agentMute,node_igs_agent_mute)",
        "(timerStart,node_igs_timer_start)",
        "(definitionLoadStr,node_igs_definition_load_str)",
        "(attributeDescription,node_igs_attribute_description)",
        "(disableSecurity,node_igs_disable_security)",
        "(outputSetString,node_igsagent_output_set_string)",
        "(inputExists,node_igs_input_exists)",
        "(clearInput,node_igsagent_clear_input)",
        "(resultTypes,node_get_igs_result_types)",
        "(clearDefinition,node_igs_clear_definition)",
        "(agentSetState,node_igs_agent_set_state)"
      ],
      "Charon": []
    },
    "inotify-remastered": {
      "Gasket": [
        "(close,Close)",
        "(Inotify,New)",
        "(removeWatch,RemoveWatch)",
        "(addWatch,AddWatch)"
      ],
      "Charon": [
        "(addWatch,Inotify)",
        "(removeWatch,Inotify)",
        "(close,Inotify)",
        "(persistent,Inotify)"
      ]
    },
    "int64-transform": {
      "Gasket": [
        "(signedDecToHex,signedDecToHex)",
        "(signedHexToDec,signedHexToDec)"
      ],
      "Charon": []
    },
    "interruptor": {
      "Gasket": [
        "(interrupt,Interrupt)",
        "(runInterruptible,RunInterruptible)"
      ],
      "Charon": []
    },
    "ioctl": {
      "Gasket": [
        "(ioctl,Ioctl)"
      ],
      "Charon": [
        "(ioctl,Ioctl)"
      ]
    },
    "ioctl-napi": {
      "Gasket": [
        "(memAddress,napi_memAddress)",
        "(ioctl,napi_ioctl)"
      ],
      "Charon": []
    },
    "ioctl-native": {
      "Gasket": [
        "(ioctl,napi_ioctl)"
      ],
      "Charon": []
    },
    "@ionic/node-pty-prebuilt": {
      "Gasket": [
        "(open,PtyOpen)",
        "(resize,PtyResize)",
        "(fork,PtyFork)",
        "(process,PtyGetProc)"
      ],
      "Charon": []
    },
    "iot-util2": {
      "Gasket": [
        "(writeInt64LE,WriteInt64LE)",
        "(convertGcjToGps,convertGcjToGps)",
        "(readInt64LE,ReadInt64LE)",
        "(rightShift,RightShift)",
        "(and,AND)",
        "(writeInt64BE,WriteInt64BE)",
        "(readUInt24LE,ReadInt24LE)",
        "(writeUInt24LE,WriteInt24LE)",
        "(convertGpsToGcj,convertGpsToGcj)",
        "(leftShift,LeftShift)",
        "(readInt64BE,ReadInt64BE)",
        "(or,OR)",
        "(convertBaiduToGps,convertBaiduToGps)",
        "(readUInt24BE,ReadInt24BE)",
        "(convertGpsToBaidu,convertGpsToBaidu)",
        "(writeUInt24BE,WriteInt24BE)",
        "(distance,distance)"
      ],
      "Charon": [
        "(distance,distance)",
        "(convertBaiduToGps,convertBaiduToGps)",
        "(convertGpsToBaidu,convertGpsToBaidu)",
        "(convertGcjToGps,convertGcjToGps)",
        "(convertGpsToGcj,convertGpsToGcj)",
        "(readInt64BE,ReadInt64BE)",
        "(writeInt64BE,WriteInt64BE)",
        "(readInt64LE,ReadInt64LE)",
        "(writeInt64LE,WriteInt64LE)",
        "(readUInt24BE,ReadInt24BE)",
        "(writeUInt24BE,WriteInt24BE)",
        "(readUInt24LE,ReadInt24LE)",
        "(writeUInt24LE,WriteInt24LE)",
        "(rightShift,RightShift)",
        "(leftShift,LeftShift)",
        "(and,AND)",
        "(or,OR)"
      ]
    },
    "@ipshipyard/node-datachannel": {
      "Gasket": [
        "(sendMessageBinary,sendMessageBinary)",
        "(isClosed,isClosed)",
        "(hasSSRC,hasSSRC)",
        "(hasPayloadType,hasPayloadType)",
        "(remoteFingerprint,remoteFingerprint)",
        "(onError,onError)",
        "(removeFormat,removeFormat)",
        "(setLocalDescription,setLocalDescription)",
        "(port,port)",
        "(DataChannel,DataChannelWrapper)",
        "(isOpen,isOpen)",
        "(onOpen,onOpen)",
        "(setBitrate,setBitrate)",
        "(close,close)",
        "(Track,TrackWrapper)",
        "(onBufferedAmountLow,onBufferedAmountLow)",
        "(setDirection,setDirection)",
        "(sendMessage,sendMessage)",
        "(cleanup,cleanup)",
        "(addVP8Codec,addVP8Codec)",
        "(getSelectedCandidatePair,getSelectedCandidatePair)",
        "(addRemoteCandidate,addRemoteCandidate)",
        "(setSctpSettings,setSctpSettings)",
        "(description,description)",
        "(localDescription,localDescription)",
        "(path,path)",
        "(open,open)",
        "(getCNameForSsrc,getCNameForSsrc)",
        "(addRTPMap,addRTPMap)",
        "(addSSRC,addSSRC)",
        "(addRTXCodec,addRTXCodec)",
        "(getBitrate,getBitrate)",
        "(setBufferedAmountLowThreshold,setBufferedAmountLowThreshold)",
        "(initLogger,initLogger)",
        "(preload,preload)",
        "(onSignalingStateChange,onSignalingStateChange)",
        "(addVideoCodec,addVideoCodec)",
        "(hasMedia,hasMedia)",
        "(getLibraryVersion,getLibraryVersion)",
        "(onLocalCandidate,onLocalCandidate)",
        "(addVP9Codec,addVP9Codec)",
        "(generateSdp,generateSdp)",
        "(type,type)",
        "(getLabel,getLabel)",
        "(addH264Codec,addH264Codec)",
        "(rtt,rtt)",
        "(RtcpReceivingSession,RtcpReceivingSessionWrapper)",
        "(signalingState,signalingState)",
        "(requestBitrate,requestBitrate)",
        "(remoteDescription,remoteDescription)",
        "(onTrack,onTrack)",
        "(address,address)",
        "(forceClose,forceClose)",
        "(replaceSSRC,replaceSSRC)",
        "(onIceStateChange,onIceStateChange)",
        "(onUnhandledStunRequest,onUnhandledStunRequest)",
        "(createDataChannel,createDataChannel)",
        "(getId,getId)",
        "(bufferedAmount,bufferedAmount)",
        "(stop,stop)",
        "(onDataChannel,onDataChannel)",
        "(remoteAddress,remoteAddress)",
        "(onClosed,onClosed)",
        "(parseSdpLine,parseSdpLine)",
        "(mid,mid)",
        "(onClient,onClient)",
        "(addAudioCodec,addAudioCodec)",
        "(WebSocket,WebSocketWrapper)",
        "(Audio,AudioWrapper)",
        "(Video,VideoWrapper)",
        "(maxDataChannelId,maxDataChannelId)",
        "(maxMessageSize,maxMessageSize)",
        "(onMessage,onMessage)",
        "(iceState,iceState)",
        "(bytesSent,bytesSent)",
        "(getSSRCs,getSSRCs)",
        "(onLocalDescription,onLocalDescription)",
        "(bytesReceived,bytesReceived)",
        "(gatheringState,gatheringState)",
        "(WebSocketServer,WebSocketServerWrapper)",
        "(addTrack,addTrack)",
        "(requestKeyframe,requestKeyframe)",
        "(onGatheringStateChange,onGatheringStateChange)",
        "(addOpusCodec,addOpusCodec)",
        "(state,state)",
        "(direction,direction)",
        "(PeerConnection,PeerConnectionWrapper)",
        "(removeSSRC,removeSSRC)",
        "(onStateChange,onStateChange)",
        "(getProtocol,getProtocol)",
        "(IceUdpMuxListener,IceUdpMuxListenerWrapper)",
        "(setRemoteDescription,setRemoteDescription)",
        "(setMediaHandler,setMediaHandler)"
      ],
      "Charon": []
    },
    "isolated-vm": {
      "Gasket": [
        "(evalClosureIgnored,Callback)",
        "(stopCpuProfiler,Callback)",
        "(compileScript,Callback)",
        "(Callback,Entry)",
        "(compileScriptSync,Callback)",
        "(deleteSync,Callback)",
        "(set,Callback)",
        "(privateSymbol,Callback)",
        "(Reference,Entry)",
        "(release,Callback)",
        "(dispose,Callback)",
        "(testHang,Callback)",
        "(copySync,Callback)",
        "(Isolate,Entry)",
        "(NativeModule,Entry)",
        "(runSync,Callback)",
        "(applyIgnored,Callback)",
        "(compileModule,Callback)",
        "(getHeapStatistics,Callback)",
        "(applySyncPromise,Callback)",
        "(testOOM,Callback)",
        "(getHeapStatisticsSync,Callback)",
        "(get,Callback)",
        "(ExternalCopy,Entry)",
        "(hrtime,Callback)",
        "(createSnapshot,Callback)",
        "(apply,Callback)",
        "(evalSync,Callback)",
        "(getSync,Callback)",
        "(setIgnored,Callback)",
        "(createSync,Callback)",
        "(deref,Callback)",
        "(runIgnored,Callback)",
        "(evalIgnored,Callback)",
        "(Script,PrivateConstructor)",
        "(evalClosureSync,Callback)",
        "(startCpuProfiler,Callback)",
        "(derefInto,Callback)",
        "(createContextSync,Callback)",
        "(compileModuleSync,Callback)",
        "(delete,Callback)",
        "(run,Callback)",
        "(eval,Callback)",
        "(deleteIgnored,Callback)",
        "(evalClosure,Callback)",
        "(copy,Callback)",
        "(setSync,Callback)",
        "(constructor,PrivateConstructor)",
        "(copyInto,Callback)",
        "(applySync,Callback)",
        "(createContext,Callback)",
        "(createInspectorSession,Callback)",
        "(create,Callback)",
        "(Context,PrivateConstructor)"
      ],
      "Charon": []
    },
    "is-valid-window": {
      "Gasket": [
        "(isValidWindow,IsValidWindow)"
      ],
      "Charon": []
    },
    "iswasmfast": {
      "Gasket": [
        "(levenstein,Levenstein)",
        "(fermat,Fermat)",
        "(regression,Regression)",
        "(sha256,Sha256)",
        "(fibonacci,Fibonacci)"
      ],
      "Charon": [
        "(slope,Number)",
        "(intercept,Number)",
        "(r2,Number)",
        "(levenstein,Levenstein)",
        "(fibonacci,Fibonacci)",
        "(fermat,Fermat)",
        "(regression,Regression)",
        "(sha256,Sha256)"
      ]
    },
    "it8951": {
      "Gasket": [
        "(readPin,readPin)",
        "(writeWords,writeWords)",
        "(writeBytes,writeBytes)",
        "(init,Initialise)",
        "(readWords,readWords)",
        "(reset,reset)",
        "(waitForReady,waitForReady)",
        "(setPin,setPin)"
      ],
      "Charon": [
        "(init,Initialise)",
        "(writeWords,writeWords)",
        "(writeBytes,writeBytes)",
        "(readWords,readWords)",
        "(waitForReady,waitForReady)",
        "(readPin,readPin)",
        "(setPin,setPin)",
        "(reset,reset)"
      ]
    },
    "@itsananderson/electron-sqlite3": {
      "Gasket": [
        "(wait,Wait)",
        "(all,All)",
        "(finish,Finish)",
        "(Database,New)",
        "(finalize,Finalize)",
        "(get,Get)",
        "(parallelize,Parallelize)",
        "(serialize,Serialize)",
        "(Backup,New)",
        "(loadExtension,LoadExtension)",
        "(reset,Reset)",
        "(close,Close)",
        "(each,Each)",
        "(configure,Configure)",
        "(run,Run)",
        "(Statement,New)",
        "(step,Step)",
        "(exec,Exec)",
        "(bind,Bind)",
        "(interrupt,Interrupt)"
      ],
      "Charon": [
        "(step,Step)",
        "(finish,Finish)",
        "(idle,IdleGetter)",
        "(completed,CompletedGetter)",
        "(failed,FailedGetter)",
        "(remaining,RemainingGetter)",
        "(pageCount,PageCountGetter)",
        "(close,Close)",
        "(exec,Exec)",
        "(wait,Wait)",
        "(loadExtension,LoadExtension)",
        "(serialize,Serialize)",
        "(parallelize,Parallelize)",
        "(configure,Configure)",
        "(interrupt,Interrupt)",
        "(open,OpenGetter)",
        "(bind,Bind)",
        "(get,Get)",
        "(run,Run)",
        "(all,All)",
        "(each,Each)",
        "(reset,Reset)",
        "(finalize,Finalize)"
      ]
    },
    "ivm-inspect": {
      "Gasket": [
        "(makeBinding,binding)"
      ],
      "Charon": [
        "(isExternal,IsExternal)",
        "(isDate,IsDate)",
        "(isArgumentsObject,IsArgumentsObject)",
        "(isBigIntObject,IsBigIntObject)",
        "(isBooleanObject,IsBooleanObject)",
        "(isNumberObject,IsNumberObject)",
        "(isStringObject,IsStringObject)",
        "(isSymbolObject,IsSymbolObject)",
        "(isNativeError,IsNativeError)",
        "(isRegExp,IsRegExp)",
        "(isAsyncFunction,IsAsyncFunction)",
        "(isGeneratorFunction,IsGeneratorFunction)",
        "(isGeneratorObject,IsGeneratorObject)",
        "(isPromise,IsPromise)",
        "(isMap,IsMap)",
        "(isSet,IsSet)",
        "(isMapIterator,IsMapIterator)",
        "(isSetIterator,IsSetIterator)",
        "(isWeakMap,IsWeakMap)",
        "(isWeakSet,IsWeakSet)",
        "(isArrayBuffer,IsArrayBuffer)",
        "(isDataView,IsDataView)",
        "(isSharedArrayBuffer,IsSharedArrayBuffer)",
        "(isProxy,IsProxy)",
        "(isModuleNamespaceObject,IsModuleNamespaceObject)",
        "(isAnyArrayBuffer,IsAnyArrayBuffer)",
        "(isBoxedPrimitive,IsBoxedPrimitive)",
        "(getProxyDetails,GetProxyDetails)",
        "(getConstructorName,GetConstructorName)",
        "(getOwnNonIndexProperties,GetOwnNonIndexProperties)",
        "(previewEntries,PreviewEntries)",
        "(makeBinding,binding)"
      ]
    },
    "jackpkg": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": [
        "(hello,Method)"
      ]
    },
    "@jamesernator/weakref": {
      "Gasket": [
        "(target/WeakRef,WeakRef)",
        "(weakref/build/Debug/WeakRef,WeakRef)",
        "(deref,deref)"
      ],
      "Charon": []
    },
    "@jcoreio/i2c": {
      "Gasket": [
        "(open,Open)",
        "(writeBlock,WriteBlock)",
        "(close,Close)",
        "(writeByte,WriteByte)",
        "(write,Write)",
        "(readBlock,ReadBlock)",
        "(read,Read)",
        "(scan,Scan)",
        "(readByte,ReadByte)",
        "(setAddress,SetAddress)"
      ],
      "Charon": [
        "(setAddress,SetAddress)",
        "(scan,Scan)",
        "(open,Open)",
        "(close,Close)",
        "(write,Write)",
        "(writeByte,WriteByte)",
        "(writeBlock,WriteBlock)",
        "(read,Read)",
        "(readByte,ReadByte)",
        "(readBlock,ReadBlock)"
      ]
    },
    "@jcoreio/kexec": {
      "Gasket": [
        "(kexec,Kexec)"
      ],
      "Charon": [
        "(kexec,Kexec)"
      ]
    },
    "@jeeyah/nodeortools": {
      "Gasket": [
        "(TSP,New)",
        "(Solve,Solve)",
        "(VRP,New)"
      ],
      "Charon": [
        "(Solve,Solve)"
      ]
    },
    "@jeff-tian/sleep": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": []
    },
    "jittertrng": {
      "Gasket": [
        "(_readAsync,ReadEntropyWorker)",
        "(JitterTrng,New)",
        "(_read,ReadEntropy)",
        "(init,InitEngine)"
      ],
      "Charon": [
        "(_read,ReadEntropy)",
        "(_readAsync,ReadEntropyWorker)",
        "(init,InitEngine)"
      ]
    },
    "joamag-hello-node": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": [
        "(hello,Method)"
      ]
    },
    "@joeblanchard/tree-sitter-ablec": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "@joeblanchard/tree-sitter-ablec4pts": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "@joeblanchard/tree-sitter-ablec4ptsdemo": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "@joeblanchard/tree-sitter-oberon0": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "@joergmittaglawo/dmvconfig": {
      "Gasket": [
        "(mask,Mask)",
        "(unmask,Unmask)",
        "(napi,IsValidUTF8)"
      ],
      "Charon": []
    },
    "@joshtwc/robotjs": {
      "Gasket": [
        "(getMousePos,getMousePos)",
        "(mouseToggle,mouseToggle)",
        "(setMouseDelay,setMouseDelay)",
        "(dragMouse,dragMouse)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(typeStringDelayed,typeStringDelayed)",
        "(captureScreen,captureScreen)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(mouseClick,mouseClick)",
        "(setXDisplayName,setXDisplayName)",
        "(keyTap,keyTap)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(moveMouse,moveMouse)",
        "(scrollMouse,scrollMouse)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(typeString,typeString)",
        "(keyToggle,keyToggle)",
        "(getXDisplayName,getXDisplayName)",
        "(getColor,getColor)",
        "(unicodeTap,unicodeTap)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(unicodeTap,unicodeTap)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getColor,getColor)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "@jovian/fourq": {
      "Gasket": [
        "(generateKeyPair,GenerateKeyPair)",
        "(verify,Verify)",
        "(generateFromSeedECDH,GenerateFromSeedECDH)",
        "(sign,Sign)",
        "(xorCryptSHA512,XorCryptSHA512)",
        "(generateKeyPairECDH,GenerateKeyPairECDH)",
        "(generateFromSeed,GenerateFromSeed)",
        "(getSharedSecretECDH,GetSharedSecretECDH)"
      ],
      "Charon": [
        "(generateFromSeed,GenerateFromSeed)",
        "(generateKeyPair,GenerateKeyPair)",
        "(sign,Sign)",
        "(verify,Verify)",
        "(generateFromSeedECDH,GenerateFromSeedECDH)",
        "(generateKeyPairECDH,GenerateKeyPairECDH)",
        "(getSharedSecretECDH,GetSharedSecretECDH)",
        "(xorCryptSHA512,XorCryptSHA512)"
      ]
    },
    "jsgui3-gfx-server": {
      "Gasket": [
        "(resize_ta_colorspace_24bipp$superpixel$inline$locals$inline,inline)",
        "(resize_ta_colorspace_24bipp$subpixel$inline,inline)",
        "(color_whole,Set_Pixel_Buffer_Single_Color)",
        "(read_gt3x3_weight_write_24bipp,NAPI_read_gt3x3_weight_write_24bipp)"
      ],
      "Charon": []
    },
    "js-inv-mpu": {
      "Gasket": [
        "(setDlpf,setDlpf)",
        "(setSampleFreq,setSampleFreq)",
        "(startMpu,startMpu)",
        "(readMpu,readMpu)"
      ],
      "Charon": [
        "(startMpu,startMpu)",
        "(readMpu,readMpu)",
        "(setSampleFreq,setSampleFreq)",
        "(setDlpf,setDlpf)"
      ]
    },
    "js-native-ternary-buffer-tree": {
      "Gasket": [
        "(findAllMatches,FindAllMatches)",
        "(contains,Contains)",
        "(TernaryBufferTree,TernaryBufferTree)",
        "(get,Get)"
      ],
      "Charon": []
    },
    "@jsxt/weakref": {
      "Gasket": [
        "(target/WeakRef,WeakRef)",
        "(weakref/build/Debug/WeakRef,WeakRef)",
        "(deref,deref)"
      ],
      "Charon": []
    },
    "@julusian/freetype2": {
      "Gasket": [
        "(NewMemoryFace,NewMemoryFace)",
        "(NewFace,NewFace)"
      ],
      "Charon": [
        "(setCharSize,FontFace)",
        "(setPixelSizes,FontFace)",
        "(setTransform,FontFace)",
        "(NewFace,NewFace)",
        "(NewMemoryFace,NewMemoryFace)",
        "(0,f)"
      ]
    },
    "@julusian/jpeg-turbo": {
      "Gasket": [
        "(decompress,DecompressAsync)",
        "(compress,CompressAsync)",
        "(bufferSize,BufferSize)",
        "(compressSync,CompressSync)",
        "(decompressSync,DecompressSync)"
      ],
      "Charon": [
        "(bufferSize,BufferSize)",
        "(compress,CompressAsync)",
        "(compressSync,CompressSync)",
        "(decompress,DecompressAsync)",
        "(decompressSync,DecompressSync)"
      ]
    },
    "@junsiklee/vscode-sqlite3": {
      "Gasket": [
        "(finish,Finish)",
        "(wait,Wait)",
        "(reset,Reset)",
        "(configure,Configure)",
        "(bind,Bind)",
        "(step,Step)",
        "(finalize,Finalize_)",
        "(close,Close)",
        "(interrupt,Interrupt)",
        "(exec,Exec)",
        "(get,Get)",
        "(Backup,Backup)",
        "(Statement,Statement)",
        "(serialize,Serialize)",
        "(each,Each)",
        "(all,All)",
        "(run,Run)",
        "(loadExtension,LoadExtension)",
        "(Database,Database)",
        "(parallelize,Parallelize)"
      ],
      "Charon": [
        "(lastID,Number)",
        "(changes,Number)"
      ]
    },
    "@kabbi/aes-ccm": {
      "Gasket": [
        "(encrypt,CcmEncrypt)",
        "(decrypt,CcmDecrypt)"
      ],
      "Charon": [
        "(encrypt,CcmEncrypt)",
        "(decrypt,CcmDecrypt)"
      ]
    },
    "@karlsen/process-list": {
      "Gasket": [
        "(snapshot,snapshot)"
      ],
      "Charon": [
        "(snapshot,snapshot)"
      ]
    },
    "keccak": {
      "Gasket": [
        "(initialize,Initialize)",
        "(squeeze,Squeeze)",
        "(absorbLastFewBits,AbsorbLastFewBits)",
        "(copy,Copy)",
        "(glibc,KeccakWrapper)",
        "(absorb,Absorb)"
      ],
      "Charon": []
    },
    "kepler-display": {
      "Gasket": [
        "(KeplerEntities,Method)",
        "(KeplerEntities2,Method2)"
      ],
      "Charon": [
        "(KeplerEntities,Method)",
        "(KeplerEntities2,Method2)"
      ]
    },
    "kepler-entities": {
      "Gasket": [
        "(KeplerEntities,Method)",
        "(KeplerEntities2,Method2)"
      ],
      "Charon": [
        "(KeplerEntities,Method)",
        "(KeplerEntities2,Method2)"
      ]
    },
    "keras-predict": {
      "Gasket": [
        "(predict,PredictAsyncCallback)"
      ],
      "Charon": [
        "(predict,PredictAsyncCallback)"
      ]
    },
    "kerberos": {
      "Gasket": [
        "(initializeClient,InitializeClient)",
        "(step,Step)",
        "(initializeServer,InitializeServer)",
        "(wrap,WrapData)",
        "(_testMethod,TestMethod)",
        "(principalDetails,PrincipalDetails)",
        "(unwrap,UnwrapData)",
        "(KerberosClient,KerberosClient)",
        "(KerberosServer,KerberosServer)",
        "(checkPassword,CheckPassword)"
      ],
      "Charon": []
    },
    "keyboard-layout": {
      "Gasket": [
        "(KeyboardLayoutManager,New)",
        "(getCurrentKeyboardLanguage,GetCurrentKeyboardLanguage)",
        "(getCurrentKeymap,GetCurrentKeymap)",
        "(getInstalledKeyboardLanguages,GetInstalledKeyboardLanguages)",
        "(getCurrentKeyboardLayout,GetCurrentKeyboardLayout)"
      ],
      "Charon": [
        "(getCurrentKeyboardLayout,KeyboardLayoutManager)",
        "(getCurrentKeyboardLanguage,KeyboardLayoutManager)",
        "(getInstalledKeyboardLanguages,KeyboardLayoutManager)",
        "(getCurrentKeymap,KeyboardLayoutManager)"
      ]
    },
    "keyboardrobotjs": {
      "Gasket": [
        "(getMousePos,getMousePos)",
        "(mouseToggle,mouseToggle)",
        "(setMouseDelay,setMouseDelay)",
        "(dragMouse,dragMouse)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(typeStringDelayed,typeStringDelayed)",
        "(captureScreen,captureScreen)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(mouseClick,mouseClick)",
        "(setXDisplayName,setXDisplayName)",
        "(keyTap,keyTap)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(moveMouse,moveMouse)",
        "(scrollMouse,scrollMouse)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(typeString,typeString)",
        "(keyToggle,keyToggle)",
        "(getXDisplayName,getXDisplayName)",
        "(getColor,getColor)",
        "(unicodeTap,unicodeTap)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(unicodeTap,unicodeTap)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getColor,getColor)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "keytar-pass": {
      "Gasket": [
        "(findCredentials,FindCredentials)",
        "(findPassword,FindPassword)",
        "(setPassword,SetPassword)",
        "(deletePassword,DeletePassword)",
        "(getPassword,GetPassword)"
      ],
      "Charon": [
        "(getPassword,GetPassword)",
        "(setPassword,SetPassword)",
        "(deletePassword,DeletePassword)",
        "(findPassword,FindPassword)",
        "(findCredentials,FindCredentials)",
        "(password,password)"
      ]
    },
    "kf-node-addon": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": [
        "(hello,Method)"
      ]
    },
    "kill-dash-nine": {
      "Gasket": [
        "(kill,Kill)"
      ],
      "Charon": [
        "(kill,Kill)"
      ]
    },
    "klsudoku": {
      "Gasket": [
        "(generate,methodGenerate)",
        "(solutioncount,methodSolutionCount)",
        "(gethints,methodHints)",
        "(solvername,methodSolverName)",
        "(solve,methodSolve)"
      ],
      "Charon": []
    },
    "@kmamal/gl": {
      "Gasket": [
        "(vertexAttrib2f,VertexAttrib2f)",
        "(deleteTexture,DeleteTexture)",
        "(useProgram,UseProgram)",
        "(renderbufferStorage,RenderbufferStorage)",
        "(framebufferRenderbuffer,FramebufferRenderbuffer)",
        "(frontFace,FrontFace)",
        "(scissor,Scissor)",
        "(uniform3f,Uniform3f)",
        "(getBufferParameter,GetBufferParameter)",
        "(setError,SetError)",
        "(bindTexture,BindTexture)",
        "(copyTexImage2D,CopyTexImage2D)",
        "(enableVertexAttribArray,EnableVertexAttribArray)",
        "(vertexAttrib1f,VertexAttrib1f)",
        "(readPixels,ReadPixels)",
        "(createFramebuffer,CreateFramebuffer)",
        "(drawBuffersWEBGL,DrawBuffersWEBGL)",
        "(deleteProgram,DeleteProgram)",
        "(destroy,Destroy)",
        "(lineWidth,LineWidth)",
        "(texImage2D,TexImage2D)",
        "(deleteVertexArrayOES,DeleteVertexArrayOES)",
        "(blendFuncSeparate,BlendFuncSeparate)",
        "(isEnabled,IsEnabled)",
        "(drawElements,DrawElements)",
        "(isVertexArrayOES,IsVertexArrayOES)",
        "(generateMipmap,GenerateMipmap)",
        "(depthFunc,DepthFunc)",
        "(stencilMaskSeparate,StencilMaskSeparate)",
        "(blendColor,BlendColor)",
        "(uniformMatrix4fv,UniformMatrix4fv)",
        "(getShaderPrecisionFormat,GetShaderPrecisionFormat)",
        "(activeTexture,ActiveTexture)",
        "(bindAttribLocation,BindAttribLocation)",
        "(flush,Flush)",
        "(stencilMask,StencilMask)",
        "(validateProgram,ValidateProgram)",
        "(getShaderSource,GetShaderSource)",
        "(deleteRenderbuffer,DeleteRenderbuffer)",
        "(_drawArraysInstanced,DrawArraysInstanced)",
        "(uniformMatrix2fv,UniformMatrix2fv)",
        "(stencilFunc,StencilFunc)",
        "(colorMask,ColorMask)",
        "(getUniform,GetUniform)",
        "(blendEquationSeparate,BlendEquationSeparate)",
        "(getFramebufferAttachmentParameter,GetFramebufferAttachmentParameter)",
        "(getParameter,GetParameter)",
        "(getRenderbufferParameter,GetRenderbufferParameter)",
        "(getUniformLocation,GetUniformLocation)",
        "(vertexAttrib3f,VertexAttrib3f)",
        "(createRenderbuffer,CreateRenderbuffer)",
        "(uniform4f,Uniform4f)",
        "(copyTexSubImage2D,CopyTexSubImage2D)",
        "(clearDepth,ClearDepth)",
        "(disableVertexAttribArray,DisableVertexAttribArray)",
        "(clearColor,ClearColor)",
        "(stencilOpSeparate,StencilOpSeparate)",
        "(texSubImage2D,TexSubImage2D)",
        "(getSupportedExtensions,GetSupportedExtensions)",
        "(WebGLRenderingContext,New)",
        "(isProgram,IsProgram)",
        "(drawArrays,DrawArrays)",
        "(uniformMatrix3fv,UniformMatrix3fv)",
        "(uniform1i,Uniform1i)",
        "(swap,Swap)",
        "(deleteBuffer,DeleteBuffer)",
        "(depthRange,DepthRange)",
        "(getVertexAttribOffset,GetVertexAttribOffset)",
        "(enable,Enable)",
        "(deleteShader,DeleteShader)",
        "(isBuffer,IsBuffer)",
        "(bindVertexArrayOES,BindVertexArrayOES)",
        "(isRenderbuffer,IsRenderbuffer)",
        "(bindBuffer,BindBuffer)",
        "(shaderSource,ShaderSource)",
        "(bufferSubData,BufferSubData)",
        "(blendEquation,BlendEquation)",
        "(getShaderParameter,GetShaderParameter)",
        "(uniform2i,Uniform2i)",
        "(attachShader,AttachShader)",
        "(texParameterf,TexParameterf)",
        "(blendFunc,BlendFunc)",
        "(vertexAttribPointer,VertexAttribPointer)",
        "(extWEBGL_draw_buffers,EXTWEBGL_draw_buffers)",
        "(polygonOffset,PolygonOffset)",
        "(createBuffer,CreateBuffer)",
        "(getActiveAttrib,GetActiveAttrib)",
        "(vertexAttrib4f,VertexAttrib4f)",
        "(uniform3i,Uniform3i)",
        "(cleanup,DisposeAll)",
        "(createTexture,CreateTexture)",
        "(compileShader,CompileShader)",
        "(framebufferTexture2D,FramebufferTexture2D)",
        "(viewport,Viewport)",
        "(cullFace,CullFace)",
        "(_drawElementsInstanced,DrawElementsInstanced)",
        "(getError,GetError)",
        "(detachShader,DetachShader)",
        "(depthMask,DepthMask)",
        "(isShader,IsShader)",
        "(getAttachedShaders,GetAttachedShaders)",
        "(clear,Clear)",
        "(isTexture,IsTexture)",
        "(uniform1f,Uniform1f)",
        "(deleteFramebuffer,DeleteFramebuffer)",
        "(getActiveUniform,GetActiveUniform)",
        "(linkProgram,LinkProgram)",
        "(finish,Finish)",
        "(createVertexArrayOES,CreateVertexArrayOES)",
        "(disable,Disable)",
        "(hint,Hint)",
        "(stencilOp,StencilOp)",
        "(getExtension,GetExtension)",
        "(checkFramebufferStatus,CheckFramebufferStatus)",
        "(getProgramInfoLog,GetProgramInfoLog)",
        "(getTexParameter,GetTexParameter)",
        "(uniform4i,Uniform4i)",
        "(bindFramebuffer,BindFramebuffer)",
        "(pixelStorei,PixelStorei)",
        "(uniform2f,Uniform2f)",
        "(getVertexAttrib,GetVertexAttrib)",
        "(createShader,CreateShader)",
        "(bindRenderbuffer,BindRenderbuffer)",
        "(getShaderInfoLog,GetShaderInfoLog)",
        "(getAttribLocation,GetAttribLocation)",
        "(_vertexAttribDivisor,VertexAttribDivisor)",
        "(stencilFuncSeparate,StencilFuncSeparate)",
        "(isFramebuffer,IsFramebuffer)",
        "(sampleCoverage,SampleCoverage)",
        "(bufferData,BufferData)",
        "(texParameteri,TexParameteri)",
        "(createProgram,CreateProgram)",
        "(getProgramParameter,GetProgramParameter)",
        "(clearStencil,ClearStencil)"
      ],
      "Charon": [
        "(setError,WebGLRenderingContext)",
        "(size,size)",
        "(type,type)",
        "(name,name)",
        "(cleanup,WebGLRenderingContext)"
      ]
    },
    "@knagyorg/node-firebird-native-api": {
      "Gasket": [
        "(getNameAsync,getNameAsync)",
        "(removeAsync,removeAsync)",
        "(detachAsync,detachAsync)",
        "(setOffsetAsync,setOffsetAsync)",
        "(getMetadataBuilderSync,getMetadataBuilderSync)",
        "(Transaction,Transaction)",
        "(newItemSync,newItemSync)",
        "(TraceBLRStatement,TraceBLRStatement)",
        "(startAndSendSync,startAndSendSync)",
        "(getFbVersionAsync,getFbVersionAsync)",
        "(queEventsAsync,queEventsAsync)",
        "(getOutputMetadataAsync,getOutputMetadataAsync)",
        "(nextAsync,nextAsync)",
        "(fetchNextSync,fetchNextSync)",
        "(getRemoteProtocolAsync,getRemoteProtocolAsync)",
        "(Master,Master)",
        "(setOffsetsSync,setOffsetsSync)",
        "(getSubConfigSync,getSubConfigSync)",
        "(getLengthAsync,getLengthAsync)",
        "(MetadataBuilder,MetadataBuilder)",
        "(isEofAsync,isEofAsync)",
        "(createDatabaseAsync,createDatabaseAsync)",
        "(UdrPlugin,UdrPlugin)",
        "(roleAsync,roleAsync)",
        "(setCharSetAsync,setCharSetAsync)",
        "(attachDatabaseSync,attachDatabaseSync)",
        "(getBufferAsync,getBufferAsync)",
        "(insertIntAsync,insertIntAsync)",
        "(Provider,Provider)",
        "(releasePluginAsync,releasePluginAsync)",
        "(handlerAsync,handlerAsync)",
        "(MessageMetadata,MessageMetadata)",
        "(registerTransactionAsync,registerTransactionAsync)",
        "(resetAsync,resetAsync)",
        "(getTagSync,getTagSync)",
        "(getRelationSync,getRelationSync)",
        "(fetchLastSync,fetchLastSync)",
        "(setScaleSync,setScaleSync)",
        "(getRemoteProcessNameSync,getRemoteProcessNameSync)",
        "(getKindAsync,getKindAsync)",
        "(networkProtocolAsync,networkProtocolAsync)",
        "(insertTagSync,insertTagSync)",
        "(setKeySync,setKeySync)",
        "(fetchLastAsync,fetchLastAsync)",
        "(getIntSync,getIntSync)",
        "(userNameSync,userNameSync)",
        "(insertStringAsync,insertStringAsync)",
        "(putSegmentAsync,putSegmentAsync)",
        "(createBlobAsync,createBlobAsync)",
        "(insertIntSync,insertIntSync)",
        "(TraceFactory,TraceFactory)",
        "(OffsetsCallback,OffsetsCallback)",
        "(shutdownAsync,shutdownAsync)",
        "(registerAttachmentSync,registerAttachmentSync)",
        "(getPluginAsync,getPluginAsync)",
        "(moveNameToIndexAsync,moveNameToIndexAsync)",
        "(IntUserField,IntUserField)",
        "(attachServiceManagerAsync,attachServiceManagerAsync)",
        "(getMetadataAsync,getMetadataAsync)",
        "(TraceTransaction,TraceTransaction)",
        "(eventCallbackFunctionSync,eventCallbackFunctionSync)",
        "(closeSync,closeSync)",
        "(resetSync,resetSync)",
        "(registerModuleAsync,registerModuleAsync)",
        "(moveNextSync,moveNextSync)",
        "(ClientBlock,ClientBlock)",
        "(unregisterModuleAsync,unregisterModuleAsync)",
        "(registerTransactionSync,registerTransactionSync)",
        "(getInfoSync,getInfoSync)",
        "(getCharSetSync,getCharSetSync)",
        "(fetchPriorSync,fetchPriorSync)",
        "(getBodyAsync,getBodyAsync)",
        "(TraceContextVariable,TraceContextVariable)",
        "(fetchSync,fetchSync)",
        "(setSync,setSync)",
        "(getTypeSync,getTypeSync)",
        "(UdrFunctionFactory,UdrFunctionFactory)",
        "(getXpbBuilderAsync,getXpbBuilderAsync)",
        "(insertBytesSync,insertBytesSync)",
        "(unwindAsync,unwindAsync)",
        "(networkProtocolSync,networkProtocolSync)",
        "(getRoleNameAsync,getRoleNameAsync)",
        "(TimerControl,TimerControl)",
        "(specifiedSync,specifiedSync)",
        "(openBlobSync,openBlobSync)",
        "(queEventsSync,queEventsSync)",
        "(startAndSendAsync,startAndSendAsync)",
        "(getSegmentAsync,getSegmentAsync)",
        "(encryptAsync,encryptAsync)",
        "(doCleanSync,doCleanSync)",
        "(ExternalTrigger,ExternalTrigger)",
        "(executeAsync,executeAsync)",
        "(getTagAsync,getTagAsync)",
        "(roleSync,roleSync)",
        "(ExternalProcedure,ExternalProcedure)",
        "(cloneSync,cloneSync)",
        "(getStatusSync,getStatusSync)",
        "(getKeySync,getKeySync)",
        "(shutdownSync,shutdownSync)",
        "(getDatabaseNameSync,getDatabaseNameSync)",
        "(PluginFactory,PluginFactory)",
        "(LogonInfo,LogonInfo)",
        "(registerTriggerSync,registerTriggerSync)",
        "(disposeAsync,disposeAsync)",
        "(getEntryPointAsync,getEntryPointAsync)",
        "(newKeyAsync,newKeyAsync)",
        "(CryptKey,CryptKey)",
        "(getRootDirectoryAsync,getRootDirectoryAsync)",
        "(getDefaultConfigAsync,getDefaultConfigAsync)",
        "(getStatusAsync,getStatusAsync)",
        "(getXpbBuilderSync,getXpbBuilderSync)",
        "(enterDtcSync,enterDtcSync)",
        "(callbackSync,callbackSync)",
        "(Status,Status)",
        "(getProcessIDSync,getProcessIDSync)",
        "(queueEvent,queueEvent)",
        "(CharUserField,CharUserField)",
        "(getInputMetadataSync,getInputMetadataSync)",
        "(getIntValueSync,getIntValueSync)",
        "(Pointer,Pointer)",
        "(setTypeAsync,setTypeAsync)",
        "(getRemoteProcessNameAsync,getRemoteProcessNameAsync)",
        "(commitAsync,commitAsync)",
        "(registerProcedureSync,registerProcedureSync)",
        "(getClientVersionAsync,getClientVersionAsync)",
        "(setOffsetSync,setOffsetSync)",
        "(getSubTypeAsync,getSubTypeAsync)",
        "(setCharSetSync,setCharSetSync)",
        "(TraceLogWriter,TraceLogWriter)",
        "(asStringAsync,asStringAsync)",
        "(fetchAsync,fetchAsync)",
        "(receiveSync,receiveSync)",
        "(getBytesSync,getBytesSync)",
        "(Timer,Timer)",
        "(getDataAsync,getDataAsync)",
        "(adminAsync,adminAsync)",
        "(getRemoteAddressSync,getRemoteAddressSync)",
        "(getProcessExitingAsync,getProcessExitingAsync)",
        "(releaseSync,releaseSync)",
        "(getPlanAsync,getPlanAsync)",
        "(Util,Util)",
        "(getAliasAsync,getAliasAsync)",
        "(getPluginsAsync,getPluginsAsync)",
        "(createDatabaseSync,createDatabaseSync)",
        "(getBufferSync,getBufferSync)",
        "(getUserNameAsync,getUserNameAsync)",
        "(validateAsync,validateAsync)",
        "(userNameAsync,userNameAsync)",
        "(closeAsync,closeAsync)",
        "(lastNameSync,lastNameSync)",
        "(receiveAsync,receiveAsync)",
        "(decryptAsync,decryptAsync)",
        "(decodeTimeSync,decodeTimeSync)",
        "(Auth,Auth)",
        "(compileRequestSync,compileRequestSync)",
        "(stopSync,stopSync)",
        "(encodeDateAsync,encodeDateAsync)",
        "(ConfigManager,ConfigManager)",
        "(VersionCallback,VersionCallback)",
        "(findNextSync,findNextSync)",
        "(getCharSetAsync,getCharSetAsync)",
        "(setReleaseDelaySync,setReleaseDelaySync)",
        "(getConfigManagerSync,getConfigManagerSync)",
        "(ResultSet,ResultSet)",
        "(TraceProcedure,TraceProcedure)",
        "(releasePluginSync,releasePluginSync)",
        "(decodeDateSync,decodeDateSync)",
        "(unwindSync,unwindSync)",
        "(getRemoteProcessIDSync,getRemoteProcessIDSync)",
        "(Config,Config)",
        "(ExternalFunction,ExternalFunction)",
        "(getScaleSync,getScaleSync)",
        "(rewindSync,rewindSync)",
        "(executeSync,executeSync)",
        "(startTransactionAsync,startTransactionAsync)",
        "(pingAsync,pingAsync)",
        "(authBlockAsync,authBlockAsync)",
        "(activeSync,activeSync)",
        "(isNullableAsync,isNullableAsync)",
        "(getPackageSync,getPackageSync)",
        "(Disposable,Disposable)",
        "(getConnectionIDSync,getConnectionIDSync)",
        "(TraceParams,TraceParams)",
        "(seekSync,seekSync)",
        "(stopAsync,stopAsync)",
        "(TraceTrigger,TraceTrigger)",
        "(getBoolValueAsync,getBoolValueAsync)",
        "(encodeTimeSync,encodeTimeSync)",
        "(DbCryptPlugin,DbCryptPlugin)",
        "(getDispatcherAsync,getDispatcherAsync)",
        "(commitRetainingSync,commitRetainingSync)",
        "(registerPluginFactoryAsync,registerPluginFactoryAsync)",
        "(asStringSync,asStringSync)",
        "(User,User)",
        "(getPasswordSync,getPasswordSync)",
        "(unregisterModuleSync,unregisterModuleSync)",
        "(startBuilderAsync,startBuilderAsync)",
        "(findValueSync,findValueSync)",
        "(getBuilderSync,getBuilderSync)",
        "(DtcStart,DtcStart)",
        "(dropDatabaseSync,dropDatabaseSync)",
        "(initSync,initSync)",
        "(getUtilInterfaceSync,getUtilInterfaceSync)",
        "(setDbCryptCallbackSync,setDbCryptCallbackSync)",
        "(getAffectedRecordsAsync,getAffectedRecordsAsync)",
        "(enteredSync,enteredSync)",
        "(UdrTriggerFactory,UdrTriggerFactory)",
        "(fetchRelativeSync,fetchRelativeSync)",
        "(TraceConnection,TraceConnection)",
        "(FirebirdConf,FirebirdConf)",
        "(TraceDYNRequest,TraceDYNRequest)",
        "(UserField,UserField)",
        "(getEntryPointSync,getEntryPointSync)",
        "(setReleaseDelayAsync,setReleaseDelayAsync)",
        "(getLengthSync,getLengthSync)",
        "(cancelOperationAsync,cancelOperationAsync)",
        "(getRemoteAddressAsync,getRemoteAddressAsync)",
        "(getRootDirectorySync,getRootDirectorySync)",
        "(findPosAsync,findPosAsync)",
        "(addAttachmentAsync,addAttachmentAsync)",
        "(getProcessIDAsync,getProcessIDAsync)",
        "(Events,Events)",
        "(getSubTypeSync,getSubTypeSync)",
        "(getPluginConfigSync,getPluginConfigSync)",
        "(passwordSync,passwordSync)",
        "(setKeyAsync,setKeyAsync)",
        "(enterDtcAsync,enterDtcAsync)",
        "(registerFunctionSync,registerFunctionSync)",
        "(encodeDateSync,encodeDateSync)",
        "(attachServiceManagerSync,attachServiceManagerSync)",
        "(compileRequestAsync,compileRequestAsync)",
        "(getStateAsync,getStateAsync)",
        "(setupSync,setupSync)",
        "(getConfigFileNameSync,getConfigFileNameSync)",
        "(operationAsync,operationAsync)",
        "(moveNextAsync,moveNextAsync)",
        "(keyHandleAsync,keyHandleAsync)",
        "(removeCurrentAsync,removeCurrentAsync)",
        "(getAffectedRecordsSync,getAffectedRecordsSync)",
        "(getConfigAsync,getConfigAsync)",
        "(getDtcSync,getDtcSync)",
        "(validateSync,validateSync)",
        "(findFirstAsync,findFirstAsync)",
        "(getIntAsync,getIntAsync)",
        "(TraceStatusVector,TraceStatusVector)",
        "(getDispatcherSync,getDispatcherSync)",
        "(getModuleNameSync,getModuleNameSync)",
        "(freeAsync,freeAsync)",
        "(getDatabaseConfAsync,getDatabaseConfAsync)",
        "(getValueAsync,getValueAsync)",
        "(seekAsync,seekAsync)",
        "(registerModuleSync,registerModuleSync)",
        "(freeSync,freeSync)",
        "(getOffsetAsync,getOffsetAsync)",
        "(openCursorSync,openCursorSync)",
        "(registerAttachmentAsync,registerAttachmentAsync)",
        "(Request,Request)",
        "(getRemoteProcessIDAsync,getRemoteProcessIDAsync)",
        "(getMasterSync,getMasterSync)",
        "(getProcessExitingSync,getProcessExitingSync)",
        "(getAliasSync,getAliasSync)",
        "(PluginSet,PluginSet)",
        "(ExternalEngine,ExternalEngine)",
        "(fetchFirstSync,fetchFirstSync)",
        "(releaseAsync,releaseAsync)",
        "(encodeTimeAsync,encodeTimeAsync)",
        "(CryptKeyCallback,CryptKeyCallback)",
        "(getOwnerSync,getOwnerSync)",
        "(getPluginsSync,getPluginsSync)",
        "(findValueAsync,findValueAsync)",
        "(getTimerControlSync,getTimerControlSync)",
        "(prepareSync,prepareSync)",
        "(executeCreateDatabaseAsync,executeCreateDatabaseAsync)",
        "(setDelayedOutputFormatSync,setDelayedOutputFormatSync)",
        "(getInfoAsync,getInfoAsync)",
        "(fetchPriorAsync,fetchPriorAsync)",
        "(Versioned,Versioned)",
        "(commitSync,commitSync)",
        "(queryAsync,queryAsync)",
        "(getBufferLengthAsync,getBufferLengthAsync)",
        "(getFirebirdConfAsync,getFirebirdConfAsync)",
        "(getTriggerMetadataSync,getTriggerMetadataSync)",
        "(getModuleNameAsync,getModuleNameAsync)",
        "(findSync,findSync)",
        "(disconnectAsync,disconnectAsync)",
        "(keyCallbackAsync,keyCallbackAsync)",
        "(getValueSync,getValueSync)",
        "(getTriggerTypeSync,getTriggerTypeSync)",
        "(Writer,Writer)",
        "(startAsync,startAsync)",
        "(getFieldSync,getFieldSync)",
        "(firstNameSync,firstNameSync)",
        "(getAsync,getAsync)",
        "(setOwnerSync,setOwnerSync)",
        "(activeAsync,activeAsync)",
        "(addFieldSync,addFieldSync)",
        "(remoteAddressAsync,remoteAddressAsync)",
        "(insertTagAsync,insertTagAsync)",
        "(getNameSync,getNameSync)",
        "(getMessageLengthSync,getMessageLengthSync)",
        "(insertStringSync,insertStringSync)",
        "(decodeDateAsync,decodeDateAsync)",
        "(attributesAsync,attributesAsync)",
        "(getSegmentSync,getSegmentSync)",
        "(nameAsync,nameAsync)",
        "(findFirstSync,findFirstSync)",
        "(dropDatabaseAsync,dropDatabaseAsync)",
        "(commitRetainingAsync,commitRetainingAsync)",
        "(EventCallback,EventCallback)",
        "(setEnteredSync,setEnteredSync)",
        "(isBofAsync,isBofAsync)",
        "(getBufferLengthSync,getBufferLengthSync)",
        "(getInstallDirectorySync,getInstallDirectorySync)",
        "(executeDynAsync,executeDynAsync)",
        "(truncateSync,truncateSync)",
        "(getDefaultConfigSync,getDefaultConfigSync)",
        "(disconnectSync,disconnectSync)",
        "(callbackAsync,callbackAsync)",
        "(isNullableSync,isNullableSync)",
        "(addAttachmentSync,addAttachmentSync)",
        "(getPackageAsync,getPackageAsync)",
        "(authBlockSync,authBlockSync)",
        "(getBuilderAsync,getBuilderAsync)",
        "(disposeMaster,disposeMaster)",
        "(ConfigEntry,ConfigEntry)",
        "(getIntValueAsync,getIntValueAsync)",
        "(joinSync,joinSync)",
        "(findPosSync,findPosSync)",
        "(ReferenceCounted,ReferenceCounted)",
        "(decodeTimeAsync,decodeTimeAsync)",
        "(asBooleanSync,asBooleanSync)",
        "(getMetadataBuilderAsync,getMetadataBuilderAsync)",
        "(getRelationAsync,getRelationAsync)",
        "(getPlanSync,getPlanSync)",
        "(nextSync,nextSync)",
        "(getBodySync,getBodySync)",
        "(getPluginManagerAsync,getPluginManagerAsync)",
        "(setSubTypeSync,setSubTypeSync)",
        "(startSync,startSync)",
        "(isBofSync,isBofSync)",
        "(asIntegerSync,asIntegerSync)",
        "(getCountAsync,getCountAsync)",
        "(getStringAsync,getStringAsync)",
        "(putSegmentSync,putSegmentSync)",
        "(getMaster,getMaster)",
        "(cancelAsync,cancelAsync)",
        "(createPluginSync,createPluginSync)",
        "(createPluginAsync,createPluginAsync)",
        "(getStringSync,getStringSync)",
        "(WireCryptPlugin,WireCryptPlugin)",
        "(getConfigFileNameAsync,getConfigFileNameAsync)",
        "(remoteAddressSync,remoteAddressSync)",
        "(getSubConfigAsync,getSubConfigAsync)",
        "(operationSync,operationSync)",
        "(TraceSweepInfo,TraceSweepInfo)",
        "(newItemAsync,newItemAsync)",
        "(addFieldAsync,addFieldAsync)",
        "(startTransactionSync,startTransactionSync)",
        "(PluginManager,PluginManager)",
        "(authenticateAsync,authenticateAsync)",
        "(setSubTypeAsync,setSubTypeAsync)",
        "(moveNameToIndexSync,moveNameToIndexSync)",
        "(getMetadataSync,getMetadataSync)",
        "(cancelOperationSync,cancelOperationSync)",
        "(getInstallDirectoryAsync,getInstallDirectoryAsync)",
        "(Service,Service)",
        "(openCursorAsync,openCursorAsync)",
        "(rollbackAsync,rollbackAsync)",
        "(fetchFirstAsync,fetchFirstAsync)",
        "(registerFunctionAsync,registerFunctionAsync)",
        "(ServerBlock,ServerBlock)",
        "(cancelSync,cancelSync)",
        "(Management,Management)",
        "(adminSync,adminSync)",
        "(removeSync,removeSync)",
        "(setEnteredAsync,setEnteredAsync)",
        "(commentAsync,commentAsync)",
        "(pingSync,pingSync)",
        "(XpbBuilder,XpbBuilder)",
        "(getRemoteProtocolSync,getRemoteProtocolSync)",
        "(encryptSync,encryptSync)",
        "(setOwnerAsync,setOwnerAsync)",
        "(setDbAsync,setDbAsync)",
        "(middleNameAsync,middleNameAsync)",
        "(rollbackSync,rollbackSync)",
        "(ExternalContext,ExternalContext)",
        "(getLoginSync,getLoginSync)",
        "(getDatabaseConfSync,getDatabaseConfSync)",
        "(setLengthSync,setLengthSync)",
        "(TraceServiceConnection,TraceServiceConnection)",
        "(getMessageLengthAsync,getMessageLengthAsync)",
        "(isEofSync,isEofSync)",
        "(TraceDatabaseConnection,TraceDatabaseConnection)",
        "(clearSync,clearSync)",
        "(sendSync,sendSync)",
        "(getPluginSync,getPluginSync)",
        "(getBigIntSync,getBigIntSync)",
        "(rollbackRetainingSync,rollbackRetainingSync)",
        "(rewindAsync,rewindAsync)",
        "(getFbVersionSync,getFbVersionSync)",
        "(TracePlugin,TracePlugin)",
        "(setScaleAsync,setScaleAsync)",
        "(truncateAsync,truncateAsync)",
        "(getNullOffsetAsync,getNullOffsetAsync)",
        "(Dtc,Dtc)",
        "(setupAsync,setupAsync)",
        "(findNextAsync,findNextAsync)",
        "(getUtilInterfaceAsync,getUtilInterfaceAsync)",
        "(transactRequestSync,transactRequestSync)",
        "(getDataSync,getDataSync)",
        "(listSync,listSync)",
        "(lastNameAsync,lastNameAsync)",
        "(setDelayedOutputFormatAsync,setDelayedOutputFormatAsync)",
        "(cloneAsync,cloneAsync)",
        "(getSync,getSync)",
        "(specifiedAsync,specifiedAsync)",
        "(transactRequestAsync,transactRequestAsync)",
        "(getTriggerMetadataAsync,getTriggerMetadataAsync)",
        "(disposeSync,disposeSync)",
        "(Server,Server)",
        "(getConfigSync,getConfigSync)",
        "(executeCreateDatabaseSync,executeCreateDatabaseSync)",
        "(startBuilderSync,startBuilderSync)",
        "(handlerSync,handlerSync)",
        "(getTriggerTableAsync,getTriggerTableAsync)",
        "(getDtcAsync,getDtcAsync)",
        "(reconnectTransactionAsync,reconnectTransactionAsync)",
        "(getKnownTypesAsync,getKnownTypesAsync)",
        "(TraceInitInfo,TraceInitInfo)",
        "(middleNameSync,middleNameSync)",
        "(openBlobAsync,openBlobAsync)",
        "(getPasswordAsync,getPasswordAsync)",
        "(initAsync,initAsync)",
        "(addRefSync,addRefSync)",
        "(registerPluginFactorySync,registerPluginFactorySync)",
        "(getTriggerTypeAsync,getTriggerTypeAsync)",
        "(getOffsetSync,getOffsetSync)",
        "(getTypeAsync,getTypeAsync)",
        "(serverModeAsync,serverModeAsync)",
        "(getScaleAsync,getScaleAsync)",
        "(setDbSync,setDbSync)",
        "(enteredAsync,enteredAsync)",
        "(getOwnerAsync,getOwnerAsync)",
        "(asBooleanAsync,asBooleanAsync)",
        "(getBigIntAsync,getBigIntAsync)",
        "(prepareAsync,prepareAsync)",
        "(getUserNameSync,getUserNameSync)",
        "(keyCallbackSync,keyCallbackSync)",
        "(getConnectionIDAsync,getConnectionIDAsync)",
        "(findAsync,findAsync)",
        "(getFirebirdConfSync,getFirebirdConfSync)",
        "(firstNameAsync,firstNameAsync)",
        "(insertBigIntSync,insertBigIntSync)",
        "(getBytesAsync,getBytesAsync)",
        "(Blob,Blob)",
        "(addSync,addSync)",
        "(TraceFunction,TraceFunction)",
        "(UdrProcedureFactory,UdrProcedureFactory)",
        "(createBlobSync,createBlobSync)",
        "(addAsync,addAsync)",
        "(getPluginManagerSync,getPluginManagerSync)",
        "(listAsync,listAsync)",
        "(RoutineMetadata,RoutineMetadata)",
        "(addRefAsync,addRefAsync)",
        "(getTriggerTableSync,getTriggerTableSync)",
        "(commentSync,commentSync)",
        "(reconnectTransactionSync,reconnectTransactionSync)",
        "(getKindSync,getKindSync)",
        "(getClientVersionSync,getClientVersionSync)",
        "(getConfigManagerAsync,getConfigManagerAsync)",
        "(querySync,querySync)",
        "(executeDynSync,executeDynSync)",
        "(Attachment,Attachment)",
        "(TraceStatement,TraceStatement)",
        "(getNullOffsetSync,getNullOffsetSync)",
        "(decryptSync,decryptSync)",
        "(getOutputMetadataSync,getOutputMetadataSync)",
        "(ListUsers,ListUsers)",
        "(attributesSync,attributesSync)",
        "(fetchAbsoluteSync,fetchAbsoluteSync)",
        "(setDbCryptCallbackAsync,setDbCryptCallbackAsync)",
        "(doCleanAsync,doCleanAsync)",
        "(passwordAsync,passwordAsync)",
        "(PluginConfig,PluginConfig)",
        "(fetchNextAsync,fetchNextAsync)",
        "(removeCurrentSync,removeCurrentSync)",
        "(getBoolValueSync,getBoolValueSync)",
        "(Statement,Statement)",
        "(Client,Client)",
        "(serverModeSync,serverModeSync)",
        "(getKeyAsync,getKeyAsync)",
        "(insertBigIntAsync,insertBigIntAsync)",
        "(getLoginAsync,getLoginAsync)",
        "(newKeySync,newKeySync)",
        "(authenticateSync,authenticateSync)",
        "(insertBytesAsync,insertBytesAsync)",
        "(getMasterAsync,getMasterAsync)",
        "(PluginBase,PluginBase)",
        "(cancelEvent,cancelEvent)",
        "(eventCallbackFunctionAsync,eventCallbackFunctionAsync)",
        "(clearAsync,clearAsync)",
        "(getStateSync,getStateSync)",
        "(rollbackRetainingAsync,rollbackRetainingAsync)",
        "(keyHandleSync,keyHandleSync)",
        "(TraceSQLStatement,TraceSQLStatement)",
        "(KeyHolderPlugin,KeyHolderPlugin)",
        "(ExternalResultSet,ExternalResultSet)",
        "(setTypeSync,setTypeSync)",
        "(getCountSync,getCountSync)",
        "(getFlagsAsync,getFlagsAsync)",
        "(getDirectoryAsync,getDirectoryAsync)",
        "(setCursorNameSync,setCursorNameSync)",
        "(setAsync,setAsync)",
        "(getFieldAsync,getFieldAsync)",
        "(PluginModule,PluginModule)",
        "(getRoleNameSync,getRoleNameSync)",
        "(getInputMetadataAsync,getInputMetadataAsync)",
        "(getPluginConfigAsync,getPluginConfigAsync)",
        "(getFlagsSync,getFlagsSync)",
        "(fetchAbsoluteAsync,fetchAbsoluteAsync)",
        "(getKnownTypesSync,getKnownTypesSync)",
        "(detachSync,detachSync)",
        "(attachDatabaseAsync,attachDatabaseAsync)",
        "(putDataAsync,putDataAsync)",
        "(registerProcedureAsync,registerProcedureAsync)",
        "(fetchRelativeAsync,fetchRelativeAsync)",
        "(addWithTpbAsync,addWithTpbAsync)",
        "(joinAsync,joinAsync)",
        "(asIntegerAsync,asIntegerAsync)",
        "(sendAsync,sendAsync)",
        "(getTimerControlAsync,getTimerControlAsync)",
        "(putDataSync,putDataSync)",
        "(setCursorNameAsync,setCursorNameAsync)",
        "(getDirectorySync,getDirectorySync)",
        "(setOffsetsAsync,setOffsetsAsync)",
        "(nameSync,nameSync)",
        "(registerTriggerAsync,registerTriggerAsync)",
        "(getDatabaseNameAsync,getDatabaseNameAsync)",
        "(addWithTpbSync,addWithTpbSync)",
        "(setLengthAsync,setLengthAsync)"
      ],
      "Charon": [
        "(getMaster,getMaster)"
      ]
    },
    "kociemba": {
      "Gasket": [
        "(solve,solve)"
      ],
      "Charon": []
    },
    "@kore/net": {
      "Gasket": [
        "(turbo_net_tcp_init,turbo_net_tcp_init)",
        "(turbo_net_tcp_destroy,turbo_net_tcp_destroy)",
        "(turbo_net_tcp_read,turbo_net_tcp_read)",
        "(turbo_net_tcp_close,turbo_net_tcp_close)",
        "(turbo_net_tcp_connect,turbo_net_tcp_connect)",
        "(turbo_net_tcp_write,turbo_net_tcp_write)",
        "(turbo_net_tcp_write_two,turbo_net_tcp_write_two)",
        "(turbo_net_tcp_port,turbo_net_tcp_port)",
        "(turbo_net_tcp_listen,turbo_net_tcp_listen)",
        "(turbo_net_tcp_shutdown,turbo_net_tcp_shutdown)",
        "(turbo_net_tcp_writev,turbo_net_tcp_writev)",
        "(turbo_net_on_fatal_exception,turbo_net_on_fatal_exception)"
      ],
      "Charon": []
    },
    "koru": {
      "Gasket": [
        "(execv,_execv)"
      ],
      "Charon": []
    },
    "@koush/sharp": {
      "Gasket": [
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(counters,counters)",
        "(concurrency,concurrency)",
        "(_maxColourDistance,_maxColourDistance)",
        "(pipeline,pipeline)",
        "(cache,cache)",
        "(block,block)",
        "(simd,simd)",
        "(libvipsVersion,libvipsVersion)",
        "(stats,stats)",
        "(metadata,metadata)",
        "(format,format)"
      ],
      "Charon": [
        "(metadata,metadata)",
        "(pipeline,pipeline)",
        "(cache,cache)",
        "(concurrency,concurrency)",
        "(counters,counters)",
        "(simd,simd)",
        "(libvipsVersion,libvipsVersion)",
        "(format,format)",
        "(block,block)",
        "(_maxColourDistance,_maxColourDistance)",
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(stats,stats)"
      ]
    },
    "krb5": {
      "Gasket": [
        "(generate_spnego_token,_generate_spnego_token)",
        "(krb5_build_principal,_krb5_build_principal)",
        "(krb5_free_principal_sync,_krb5_free_principal_sync)",
        "(krb5_cc_store_cred,_krb5_cc_store_cred)",
        "(krb5_kt_resolve,_krb5_kt_resolve)",
        "(krb5_cc_close,_krb5_cc_close)",
        "(krb5_free_creds_sync,_krb5_free_creds_sync)",
        "(krb5_cc_initialize,_krb5_cc_initialize)",
        "(krb5_cc_get_name_sync,_krb5_cc_get_name_sync)",
        "(krb5_get_init_creds_keytab,_krb5_get_init_creds_keytab)",
        "(krb5_cc_initialize_sync,_krb5_cc_initialize_sync)",
        "(krb5_get_init_creds_password,_krb5_get_init_creds_password)",
        "(krb5_init_context,_krb5_init_context)",
        "(krb5_free_context_sync,_krb5_free_context_sync)",
        "(krb5_cc_resolve,_krb5_cc_resolve)",
        "(krb5_get_default_realm,_krb5_get_default_realm)",
        "(krb5_cc_default,_krb5_cc_default)",
        "(krb5_cc_destroy,_krb5_cc_destroy)",
        "(krb5_free_context,_krb5_free_context)",
        "(krb5_get_error_message_sync,_krb5_get_error_message_sync)"
      ],
      "Charon": [
        "(krb5_build_principal,_krb5_build_principal)",
        "(krb5_cc_close,_krb5_cc_close)",
        "(krb5_cc_default,_krb5_cc_default)",
        "(krb5_cc_destroy,_krb5_cc_destroy)",
        "(krb5_cc_get_name_sync,_krb5_cc_get_name_sync)",
        "(krb5_cc_initialize,_krb5_cc_initialize)",
        "(krb5_cc_initialize_sync,_krb5_cc_initialize_sync)",
        "(krb5_cc_resolve,_krb5_cc_resolve)",
        "(krb5_cc_store_cred,_krb5_cc_store_cred)",
        "(krb5_free_context,_krb5_free_context)",
        "(krb5_free_context_sync,_krb5_free_context_sync)",
        "(krb5_free_creds_sync,_krb5_free_creds_sync)",
        "(krb5_free_principal_sync,_krb5_free_principal_sync)",
        "(krb5_get_default_realm,_krb5_get_default_realm)",
        "(krb5_get_error_message_sync,_krb5_get_error_message_sync)",
        "(krb5_get_init_creds_keytab,_krb5_get_init_creds_keytab)",
        "(krb5_get_init_creds_password,_krb5_get_init_creds_password)",
        "(krb5_init_context,_krb5_init_context)",
        "(krb5_kt_resolve,_krb5_kt_resolve)",
        "(generate_spnego_token,_generate_spnego_token)"
      ]
    },
    "kryptokrona-crypto": {
      "Gasket": [
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(calculateSharedPrivateKey,calculateSharedPrivateKey)",
        "(tree_branch,tree_branch)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(calculateMultisigPrivateKeys,calculateMultisigPrivateKeys)",
        "(chukwa_slow_hash_v2,chukwa_slow_hash_v2)",
        "(scalarmultKey,scalarmultKey)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(completeRingSignatures,completeRingSignatures)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(tree_hash,tree_hash)",
        "(deriveSecretKey,deriveSecretKey)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(checkKey,checkKey)",
        "(generatePartialSigningKey,generatePartialSigningKey)",
        "(restoreKeyImage,restoreKeyImage)",
        "(restoreRingSignatures,restoreRingSignatures)",
        "(tree_depth,tree_depth)",
        "(checkRingSignature,checkRingSignature)",
        "(generateSignature,generateSignature)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(generateKeyDerivationScalar,generateKeyDerivationScalar)",
        "(generateRingSignatures,generateRingSignatures)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(hashToScalar,hashToScalar)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(prepareRingSignatures,prepareRingSignatures)",
        "(scReduce32,scReduce32)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(calculateSharedPublicKey,calculateSharedPublicKey)",
        "(derivePublicKey,derivePublicKey)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(scalarDeriveSecretKey,scalarDeriveSecretKey)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(chukwa_slow_hash_v1,chukwa_slow_hash_v1)",
        "(derivationToScalar,derivationToScalar)",
        "(generateKeys,generateKeys)",
        "(scalarDerivePublicKey,scalarDerivePublicKey)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(cnFastHash,cn_fast_hash)",
        "(chukwa_slow_hash_base,chukwa_slow_hash_base)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(checkSignature,checkSignature)",
        "(generateKeyImage,generateKeyImage)",
        "(underivePublicKey,underivePublicKey)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)"
      ],
      "Charon": [
        "(calculateMultisigPrivateKeys,calculateMultisigPrivateKeys)",
        "(calculateSharedPrivateKey,calculateSharedPrivateKey)",
        "(calculateSharedPublicKey,calculateSharedPublicKey)",
        "(generatePartialSigningKey,generatePartialSigningKey)",
        "(prepareRingSignatures,prepareRingSignatures)",
        "(completeRingSignatures,completeRingSignatures)",
        "(restoreRingSignatures,restoreRingSignatures)",
        "(restoreKeyImage,restoreKeyImage)",
        "(checkKey,checkKey)",
        "(checkRingSignature,checkRingSignature)",
        "(checkSignature,checkSignature)",
        "(derivationToScalar,derivationToScalar)",
        "(derivePublicKey,derivePublicKey)",
        "(deriveSecretKey,deriveSecretKey)",
        "(generateKeys,generateKeys)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(generateKeyDerivationScalar,generateKeyDerivationScalar)",
        "(generateKeyImage,generateKeyImage)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(generateRingSignatures,generateRingSignatures)",
        "(generateSignature,generateSignature)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(hashToScalar,hashToScalar)",
        "(scalarDerivePublicKey,scalarDerivePublicKey)",
        "(scalarDeriveSecretKey,scalarDeriveSecretKey)",
        "(scalarmultKey,scalarmultKey)",
        "(scReduce32,scReduce32)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(tree_depth,tree_depth)",
        "(tree_hash,tree_hash)",
        "(tree_branch,tree_branch)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(underivePublicKey,underivePublicKey)",
        "(cnFastHash,cn_fast_hash)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(chukwa_slow_hash_base,chukwa_slow_hash_base)",
        "(chukwa_slow_hash_v1,chukwa_slow_hash_v1)",
        "(chukwa_slow_hash_v2,chukwa_slow_hash_v2)"
      ]
    },
    "kuzu": {
      "Gasket": [
        "(initSync,InitSync)",
        "(NodeDatabase,NodeDatabase)",
        "(getStorageVersion,GetStorageVersion)",
        "(executeSync,ExecuteSync)",
        "(getNextQueryResultAsync,GetNextQueryResultAsync)",
        "(getNextAsync,GetNextAsync)",
        "(getErrorMessage,GetErrorMessage)",
        "(NodeConnection,NodeConnection)",
        "(getColumnDataTypesAsync,GetColumnDataTypesAsync)",
        "(getColumnNamesAsync,GetColumnNamesAsync)",
        "(getColumnNamesSync,GetColumnNamesSync)",
        "(getNumTuples,GetNumTuples)",
        "(getColumnDataTypesSync,GetColumnDataTypesSync)",
        "(initAsync,InitAsync)",
        "(getNextSync,GetNextSync)",
        "(querySync,QuerySync)",
        "(resetIterator,ResetIterator)",
        "(setQueryTimeout,SetQueryTimeout)",
        "(setMaxNumThreadForExec,SetMaxNumThreadForExec)",
        "(queryAsync,QueryAsync)",
        "(close,Close)",
        "(executeAsync,ExecuteAsync)",
        "(hasNextQueryResult,HasNextQueryResult)",
        "(hasNext,HasNext)",
        "(NodePreparedStatement,NodePreparedStatement)",
        "(getNextQueryResultSync,GetNextQueryResultSync)",
        "(NodeQueryResult,NodeQueryResult)",
        "(isSuccess,IsSuccess)",
        "(getVersion,GetVersion)"
      ],
      "Charon": []
    },
    "@lamassu/supyo": {
      "Gasket": [
        "(detectFaces,DetectFaces)"
      ],
      "Charon": [
        "(detectFaces,DetectFaces)"
      ]
    },
    "lame-private-no-maintainence-shrug2": {
      "Gasket": [
        "(lame_get_copyright,node_lame_get_copyright)",
        "(lame_get_VBR_min_bitrate_kbps,node_lame_get_VBR_min_bitrate_kbps)",
        "(lame_get_lowpassfreq,node_lame_get_lowpassfreq)",
        "(lame_get_VBR_mean_bitrate_kbps,node_lame_get_VBR_mean_bitrate_kbps)",
        "(lame_set_bWriteVbrTag,node_lame_set_bWriteVbrTag)",
        "(mpg123_current_decoder,node_mpg123_current_decoder)",
        "(lame_set_disable_reservoir,node_lame_set_disable_reservoir)",
        "(lame_set_mode,node_lame_set_mode)",
        "(lame_set_exp_nspsytune,node_lame_set_exp_nspsytune)",
        "(mpg123_supported_decoders,node_mpg123_supported_decoders)",
        "(lame_set_VBR_min_bitrate_kbps,node_lame_set_VBR_min_bitrate_kbps)",
        "(lame_set_num_channels,node_lame_set_num_channels)",
        "(lame_init_params,node_lame_init_params)",
        "(lame_set_compression_ratio,node_lame_set_compression_ratio)",
        "(mpg123_id3,node_mpg123_id3)",
        "(lame_set_highpassfreq,node_lame_set_highpassfreq)",
        "(lame_close,node_lame_close)",
        "(lame_get_lowpasswidth,node_lame_get_lowpasswidth)",
        "(mpg123_init,node_mpg123_init)",
        "(mpg123_open_feed,node_mpg123_open_feed)",
        "(mpg123_getformat,node_mpg123_getformat)",
        "(mpg123_decoders,node_mpg123_decoders)",
        "(lame_set_highpasswidth,node_lame_set_highpasswidth)",
        "(lame_get_mode,node_lame_get_mode)",
        "(lame_get_quant_comp,node_lame_get_quant_comp)",
        "(mpg123_tellframe,node_mpg123_tellframe)",
        "(lame_get_id3v1_tag,node_lame_get_id3v1_tag)",
        "(lame_set_strict_ISO,node_lame_set_strict_ISO)",
        "(lame_get_VBR_max_bitrate_kbps,node_lame_get_VBR_max_bitrate_kbps)",
        "(lame_samplerates,node_lame_samplerates)",
        "(lame_get_quant_comp_short,node_lame_get_quant_comp_short)",
        "(lame_set_VBR_max_bitrate_kbps,node_lame_set_VBR_max_bitrate_kbps)",
        "(lame_get_num_channels,node_lame_get_num_channels)",
        "(lame_bitrates,node_lame_bitrates)",
        "(lame_set_original,node_lame_set_original)",
        "(mpg123_safe_buffer,node_mpg123_safe_buffer)",
        "(lame_set_analysis,node_lame_set_analysis)",
        "(get_lame_version,node_get_lame_version)",
        "(lame_get_brate,node_lame_get_brate)",
        "(lame_get_scale,node_lame_get_scale)",
        "(lame_get_disable_reservoir,node_lame_get_disable_reservoir)",
        "(mpg123_tell_stream,node_mpg123_tell_stream)",
        "(lame_set_copyright,node_lame_set_copyright)",
        "(mpg123_feed,node_mpg123_feed)",
        "(lame_set_VBR_hard_min,node_lame_set_VBR_hard_min)",
        "(lame_get_highpassfreq,node_lame_get_highpassfreq)",
        "(lame_get_VBR_quality,node_lame_get_VBR_quality)",
        "(mpg123_framepos,node_mpg123_framepos)",
        "(lame_get_highpasswidth,node_lame_get_highpasswidth)",
        "(lame_print_internals,node_lame_print_internals)",
        "(mpg123_outblock,node_mpg123_outblock)",
        "(mpg123_tell,node_mpg123_tell)",
        "(lame_set_quant_comp,node_lame_set_quant_comp)",
        "(mpg123_read,node_mpg123_read)",
        "(lame_set_VBR_q,node_lame_set_VBR_q)",
        "(lame_set_quality,node_lame_set_quality)",
        "(lame_get_bWriteVbrTag,node_lame_get_bWriteVbrTag)",
        "(lame_get_exp_nspsytune,node_lame_get_exp_nspsytune)",
        "(lame_set_lowpassfreq,node_lame_set_lowpassfreq)",
        "(lame_get_analysis,node_lame_get_analysis)",
        "(lame_get_VBR_hard_min,node_lame_get_VBR_hard_min)",
        "(lame_get_scale_left,node_lame_get_scale_left)",
        "(lame_set_scale_left,node_lame_set_scale_left)",
        "(lame_get_compression_ratio,node_lame_get_compression_ratio)",
        "(lame_init,node_lame_init)",
        "(lame_get_extension,node_lame_get_extension)",
        "(lame_get_VBR_q,node_lame_get_VBR_q)",
        "(lame_set_quant_comp_short,node_lame_set_quant_comp_short)",
        "(lame_get_in_samplerate,node_lame_get_in_samplerate)",
        "(lame_set_in_samplerate,node_lame_set_in_samplerate)",
        "(lame_get_error_protection,node_lame_get_error_protection)",
        "(lame_encode_buffer,node_lame_encode_buffer)",
        "(lame_set_error_protection,node_lame_set_error_protection)",
        "(lame_set_num_samples,node_lame_set_num_samples)",
        "(lame_get_num_samples,node_lame_get_num_samples)",
        "(mpg123_exit,node_mpg123_exit)",
        "(lame_get_quality,node_lame_get_quality)",
        "(lame_set_extension,node_lame_set_extension)",
        "(get_lame_os_bitness,node_get_lame_os_bitness)",
        "(lame_get_original,node_lame_get_original)",
        "(lame_set_VBR,node_lame_set_VBR)",
        "(lame_set_brate,node_lame_set_brate)",
        "(lame_get_VBR,node_lame_get_VBR)",
        "(lame_set_scale_right,node_lame_set_scale_right)",
        "(lame_set_VBR_mean_bitrate_kbps,node_lame_set_VBR_mean_bitrate_kbps)",
        "(lame_get_id3v2_tag,node_lame_get_id3v2_tag)",
        "(lame_get_out_samplerate,node_lame_get_out_samplerate)",
        "(lame_encode_flush_nogap,node_lame_encode_flush_nogap)",
        "(lame_get_strict_ISO,node_lame_get_strict_ISO)",
        "(lame_get_scale_right,node_lame_get_scale_right)",
        "(lame_set_out_samplerate,node_lame_set_out_samplerate)",
        "(lame_set_lowpasswidth,node_lame_set_lowpasswidth)",
        "(lame_set_VBR_quality,node_lame_set_VBR_quality)",
        "(mpg123_new,node_mpg123_new)",
        "(lame_print_config,node_lame_print_config)",
        "(lame_set_scale,node_lame_set_scale)"
      ],
      "Charon": []
    },
    "language-act-r": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "@lastos/dbus": {
      "Gasket": [
        "(sendMessageReply,SendMessageReply)",
        "(setSignalHandler,SetSignalHandler)",
        "(parseIntrospectSource,ParseIntrospectSource)",
        "(sendErrorMessageReply,SendErrorMessageReply)",
        "(unregisterObjectPath,UnregisterObjectPath)",
        "(registerObjectPath,RegisterObjectPath)",
        "(getBus,GetBus)",
        "(emitSignal,EmitSignal)",
        "(setObjectHandler,SetObjectHandler)",
        "(releaseBus,ReleaseBus)",
        "(addSignalFilter,AddSignalFilter)",
        "(setMaxMessageSize,SetMaxMessageSize)",
        "(callMethod,CallMethod)",
        "(requestName,RequestName)"
      ],
      "Charon": [
        "(getBus,GetBus)",
        "(releaseBus,ReleaseBus)",
        "(callMethod,CallMethod)",
        "(requestName,RequestName)",
        "(parseIntrospectSource,ParseIntrospectSource)",
        "(setSignalHandler,Signal)",
        "(addSignalFilter,AddSignalFilter)",
        "(setMaxMessageSize,SetMaxMessageSize)",
        "(emitSignal,Signal)"
      ]
    },
    "lbj_process_addon": {
      "Gasket": [
        "(nativeCrash,NativeCrash)",
        "(sleep,Sleep)",
        "(gettid,GetTid)"
      ],
      "Charon": []
    },
    "ldll": {
      "Gasket": [
        "(dlopen,dlopen)",
        "(dlclose,dlclose)",
        "(dlsym,dlsym)"
      ],
      "Charon": []
    },
    "left-clicky": {
      "Gasket": [
        "(click,ClickWrapped)"
      ],
      "Charon": []
    },
    "leo-test-cpp-module": {
      "Gasket": [
        "(hello,Hello)"
      ],
      "Charon": []
    },
    "leveldown": {
      "Gasket": [
        "(iterator_next,iterator_next)",
        "(destroy_db,destroy_db)",
        "(db_close,db_close)",
        "(db_get_many,db_get_many)",
        "(db_init,db_init)",
        "(iterator_end,iterator_end)",
        "(repair_db,repair_db)",
        "(db_approximate_size,db_approximate_size)",
        "(iterator_seek,iterator_seek)",
        "(iterator_init,iterator_init)",
        "(db_open,db_open)",
        "(batch_write,batch_write)",
        "(batch_init,batch_init)",
        "(batch_do,batch_do)",
        "(db_put,db_put)",
        "(batch_clear,batch_clear)",
        "(db_del,db_del)",
        "(db_clear,db_clear)",
        "(batch_put,batch_put)",
        "(db_compact_range,db_compact_range)",
        "(db_get_property,db_get_property)",
        "(db_get,db_get)",
        "(batch_del,batch_del)"
      ],
      "Charon": []
    },
    "leveldown-nodejs-mobile": {
      "Gasket": [
        "(db_open,db_open)",
        "(batch_clear,batch_clear)",
        "(db_put,db_put)",
        "(iterator_end,iterator_end)",
        "(db_get,db_get)",
        "(destroy_db,destroy_db)",
        "(db_get_property,db_get_property)",
        "(iterator_next,iterator_next)",
        "(db_approximate_size,db_approximate_size)",
        "(db_compact_range,db_compact_range)",
        "(batch_do,batch_do)",
        "(batch_put,batch_put)",
        "(iterator_seek,iterator_seek)",
        "(db_close,db_close)",
        "(db_del,db_del)",
        "(batch_write,batch_write)",
        "(batch_init,batch_init)",
        "(db_init,db_init)",
        "(iterator_init,iterator_init)",
        "(repair_db,repair_db)",
        "(batch_del,batch_del)"
      ],
      "Charon": []
    },
    "@lgeiger/napi-prebuild-starter": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": []
    },
    "libcoreso_demo": {
      "Gasket": [
        "(OpenLog,NodeOpenLog)",
        "(LogDebug,NodeLogDebug)",
        "(LogErr,NodeLogErr)",
        "(OpenLogFull,NodeOpenLogFull)",
        "(LogInfo,NodeLogInfo)",
        "(LogImpt,NodeLogImpt)",
        "(test,Test)",
        "(CloseLog,NodeCloseLog)"
      ],
      "Charon": [
        "(OpenLogFull,NodeOpenLogFull)",
        "(OpenLog,NodeOpenLog)",
        "(CloseLog,NodeCloseLog)",
        "(LogImpt,NodeLogImpt)",
        "(LogErr,NodeLogErr)",
        "(LogDebug,NodeLogDebug)",
        "(LogInfo,NodeLogInfo)",
        "(test,Test)"
      ]
    },
    "libjq": {
      "Gasket": [
        "(run,Run)"
      ],
      "Charon": [
        "(run,Run)"
      ]
    },
    "libmaxminddb": {
      "Gasket": [
        "(open,Open)",
        "(close,Close)",
        "(MmdbReader,PrivateConstructor)",
        "(_ImportFromNode,ImportFromNode)",
        "(lookup,Lookup)"
      ],
      "Charon": [
        "(open,Open)",
        "(close,Close)",
        "(lookup,Lookup)",
        "(_ImportFromNode,ImportFromNode)"
      ]
    },
    "libpg-query": {
      "Gasket": [
        "(parseQuerySync,ParseQuerySync)",
        "(parsePlPgSQLSync,ParsePlPgSQLSync)",
        "(parseQueryAsync,ParseQueryAsync)",
        "(parsePlPgSQLAsync,ParsePlPgSQLAsync)",
        "(fingerprintSync,FingerprintSync)",
        "(fingerprintAsync,FingerprintAsync)"
      ],
      "Charon": [
        "(parseQuerySync,ParseQuerySync)",
        "(parseQueryAsync,ParseQueryAsync)",
        "(parsePlPgSQLSync,ParsePlPgSQLSync)",
        "(parsePlPgSQLAsync,ParsePlPgSQLAsync)",
        "(fingerprintSync,FingerprintSync)",
        "(fingerprintAsync,FingerprintAsync)",
        "(lineNumber,Value)",
        "(cursorPosition,Value)",
        "(context,Value)"
      ]
    },
    "libpg-query-m1-native": {
      "Gasket": [
        "(fingerprintSync,FingerprintSync)",
        "(parseQueryAsync,ParseQueryAsync)",
        "(parsePlPgSQLSync,ParsePlPgSQLSync)",
        "(fingerprintAsync,FingerprintAsync)",
        "(parsePlPgSQLAsync,ParsePlPgSQLAsync)",
        "(parseQuerySync,ParseQuerySync)"
      ],
      "Charon": [
        "(parseQuery,Method)",
        "(parseQueryAsync,MethodAsync)",
        "(parsePlPgSQL,MethodPlPgSQL)",
        "(parsePlPgSQLAsync,MethodPlPgSQLAsync)",
        "(message,String)",
        "(fileName,String)",
        "(functionName,String)",
        "(lineNumber,Integer)",
        "(cursorPosition,Integer)",
        "(context,String)",
        "(stderr,String)",
        "(lineNumber,Value)",
        "(cursorPosition,Value)",
        "(context,Value)",
        "(parseQuerySync,ParseQuerySync)",
        "(parseQueryAsync,ParseQueryAsync)",
        "(parsePlPgSQLSync,ParsePlPgSQLSync)",
        "(parsePlPgSQLAsync,ParsePlPgSQLAsync)",
        "(fingerprintSync,FingerprintSync)",
        "(fingerprintAsync,FingerprintAsync)"
      ]
    },
    "libpq": {
      "Gasket": [
        "($connect,Connect)",
        "($startWrite,StartWrite)",
        "($ftablecol,Ftablecol)",
        "($ftype,Ftype)",
        "($getLastErrorMessage,GetLastErrorMessage)",
        "($putCopyEnd,PutCopyEnd)",
        "($clear,Clear)",
        "($sendQueryParams,SendQueryParams)",
        "($serverVersion,ServerVersion)",
        "($getisnull,Getisnull)",
        "($cmdStatus,CmdStatus)",
        "($isBusy,IsBusy)",
        "($exec,Exec)",
        "($prepare,Prepare)",
        "($ftable,Ftable)",
        "($ntuples,Ntuples)",
        "($setNonBlocking,SetNonBlocking)",
        "($escapeLiteral,EscapeLiteral)",
        "($connectSync,ConnectSync)",
        "($escapeIdentifier,EscapeIdentifier)",
        "($consumeInput,ConsumeInput)",
        "($nfields,Nfields)",
        "($stopRead,StopRead)",
        "($finish,Finish)",
        "($nparams,Nparams)",
        "($resultErrorMessage,ResultErrorMessage)",
        "($putCopyData,PutCopyData)",
        "($resultErrorFields,ResultErrorFields)",
        "($sendQuery,SendQuery)",
        "($cancel,Cancel)",
        "($sendQueryPrepared,SendQueryPrepared)",
        "($notifies,Notifies)",
        "($sendPrepare,SendPrepare)",
        "($describePrepared,DescribePrepared)",
        "($getCopyData,GetCopyData)",
        "(PQ,Create)",
        "($getResult,GetResult)",
        "($execPrepared,ExecPrepared)",
        "($getvalue,Getvalue)",
        "($socket,Socket)",
        "($fname,Fname)",
        "($paramtype,Paramtype)",
        "($startRead,StartRead)",
        "($flush,Flush)",
        "($cmdTuples,CmdTuples)",
        "($execParams,ExecParams)",
        "($resultStatus,ResultStatus)",
        "($isNonBlocking,IsNonBlocking)"
      ],
      "Charon": [
        "($connectSync,Connection)",
        "($connect,Connection)",
        "($finish,Connection)",
        "($getLastErrorMessage,Connection)",
        "($resultErrorFields,Connection)",
        "($socket,Connection)",
        "($serverVersion,Connection)",
        "($exec,Connection)",
        "($execParams,Connection)",
        "($prepare,Connection)",
        "($execPrepared,Connection)",
        "($describePrepared,Connection)",
        "($sendQuery,Connection)",
        "($sendQueryParams,Connection)",
        "($sendPrepare,Connection)",
        "($sendQueryPrepared,Connection)",
        "($getResult,Connection)",
        "($startRead,Connection)",
        "($stopRead,Connection)",
        "($startWrite,Connection)",
        "($consumeInput,Connection)",
        "($isBusy,Connection)",
        "($setNonBlocking,Connection)",
        "($isNonBlocking,Connection)",
        "($flush,Connection)",
        "($clear,Connection)",
        "($ntuples,Connection)",
        "($nfields,Connection)",
        "($fname,Connection)",
        "($ftable,Connection)",
        "($ftablecol,Connection)",
        "($ftype,Connection)",
        "($getvalue,Connection)",
        "($getisnull,Connection)",
        "($nparams,Connection)",
        "($paramtype,Connection)",
        "($cmdStatus,Connection)",
        "($cmdTuples,Connection)",
        "($resultStatus,Connection)",
        "($resultErrorMessage,Connection)",
        "($notifies,Connection)",
        "($putCopyData,Connection)",
        "($putCopyEnd,Connection)",
        "($getCopyData,Connection)",
        "($cancel,Connection)",
        "(relname,msg)",
        "(extra,msg)",
        "(be_pid,msg)"
      ]
    },
    "libraw.js": {
      "Gasket": [
        "(unpack_thumb,UnpackThumb)",
        "(strerror,StrError)",
        "(LibRawWrapper,LibRawWrapper)",
        "(version,Version)",
        "(open_buffer,OpenBuffer)",
        "(getMetadata,GetMetadata)",
        "(getThumbnail,GetThumbnail)",
        "(cameraList,CameraList)",
        "(cameraCount,CameraCount)",
        "(getXmp,GetXmpData)",
        "(recycle_datastream,RecycleDatastream)",
        "(unpack,Unpack)",
        "(error_count,ErrorCount)",
        "(versionNumber,VersionNumber)",
        "(recycle,Recycle)",
        "(open_file,OpenFile)"
      ],
      "Charon": []
    },
    "libscp": {
      "Gasket": [
        "(run,Method)"
      ],
      "Charon": [
        "(run,Method)"
      ]
    },
    "libtidy": {
      "Gasket": [
        "(saveBufferSync,saveBufferSync)",
        "(optGetCurrPick,optGetCurrPick)",
        "(optGet,optGet)",
        "(optSet,optSet)",
        "(_async2,async)",
        "(TidyOption,New)",
        "(optGetDocLinksList,optGetDocLinksList)",
        "(runDiagnosticsSync,runDiagnosticsSync)",
        "(getOption,getOption)",
        "(getOptionList,getOptionList)",
        "(TidyDoc,New)",
        "(parseBufferSync,parseBufferSync)",
        "(optResetToDefault,optResetToDefault)",
        "(optGetDoc,optGetDoc)",
        "(getErrorLog,getErrorLog)",
        "(cleanAndRepairSync,cleanAndRepairSync)",
        "(toString,toString)"
      ],
      "Charon": []
    },
    "libtidy-updated": {
      "Gasket": [
        "(TidyOption,New)",
        "(optGet,optGet)",
        "(cleanAndRepairSync,cleanAndRepairSync)",
        "(toString,toString)",
        "(_async2,async)",
        "(parseBufferSync,parseBufferSync)",
        "(getOption,getOption)",
        "(optResetToDefault,optResetToDefault)",
        "(optGetDocLinksList,optGetDocLinksList)",
        "(optSet,optSet)",
        "(getErrorLog,getErrorLog)",
        "(runDiagnosticsSync,runDiagnosticsSync)",
        "(optGetCurrPick,optGetCurrPick)",
        "(saveBufferSync,saveBufferSync)",
        "(optGetDoc,optGetDoc)",
        "(TidyDoc,New)",
        "(getOptionList,getOptionList)"
      ],
      "Charon": []
    },
    "libxml2-nodejs": {
      "Gasket": [
        "(xmlNode_parent,_xmlNode_parent)",
        "(xmlAddPrevSibling,_xmlAddPrevSibling)",
        "(xmlNodeAddContent,_xmlNodeAddContent)",
        "(xmlNode_next,_xmlNode_next)",
        "(xmlC14NDocDumpMemory,_xmlC14NDocDumpMemory)",
        "(xmlXPathObject_nodesetval,_xmlXPathObject_nodesetval)",
        "(xmlNewProp,_xmlNewProp)",
        "(xmlOutputBufferGetContent,_xmlOutputBufferGetContent)",
        "(xmlSetNs,_xmlSetNs)",
        "(xmlFindCharEncodingHandler,_xmlFindCharEncodingHandler)",
        "(xmlNodeSet_nodeMax,_xmlNodeSet_nodeMax)",
        "(xmlNode_children,_xmlNode_children)",
        "(xmlNode_name,_xmlNode_name)",
        "(xmlXPathNewContext,_xmlXPathNewContext)",
        "(xmlAllocOutputBuffer,_xmlAllocOutputBuffer)",
        "(xmlDoc_encoding,_xmlDoc_encoding)",
        "(xmlNode_type,_xmlNode_type)",
        "(xmlNewNode,_xmlNewNode)",
        "(xmlGetProp,_xmlGetProp)",
        "(xmlDocGetRootElement,_xmlDocGetRootElement)",
        "(xmlNodeSet_nodeNr,_xmlNodeSet_nodeNr)",
        "(xmlNodeSet_pos_nodeTab,_xmlNodeSet_pos_nodeTab)",
        "(xmlXPathContext_set_node,_xmlXPathContext_set_node)",
        "(xmlNode_eq,_xmlNode_eq)",
        "(xmlNode_prev,_xmlNode_prev)",
        "(xmlXPathEvalExpression,_xmlXPathEvalExpression)",
        "(xmlOutputBufferGetSize,_xmlOutputBufferGetSize)",
        "(xmlAddNextSibling,_xmlAddNextSibling)",
        "(xmlOutputBufferFlush,_xmlOutputBufferFlush)",
        "(xmlDocDumpMemory,_xmlDocDumpMemory)",
        "(xmlNodeDumpOutput,_xmlNodeDumpOutput)",
        "(xmlAddChild,_xmlAddChild)",
        "(xmlXPathRegisterNs,_xmlXPathRegisterNs)",
        "(xmlReadDoc,_xmlReadDoc)",
        "(xmlNode_content,_xmlNode_content)",
        "(xmlNewNs,_xmlNewNs)"
      ],
      "Charon": []
    },
    "libxmljs": {
      "Gasket": [
        "(xmlUCSIsCJKRadicalsSupplement,_wrap_xmlUCSIsCJKRadicalsSupplement)",
        "(xmlPopOutputCallbacks,_wrap_xmlPopOutputCallbacks)",
        "(xmlNextElementSibling,_wrap_xmlNextElementSibling)",
        "(xmlCreateEnumeration,_wrap_xmlCreateEnumeration)",
        "(xmlSchemaGetParserErrors,_wrap_xmlSchemaGetParserErrors)",
        "(xmlUCSIsTaiLe,_wrap_xmlUCSIsTaiLe)",
        "(xmlUCSIsCyrillicSupplement,_wrap_xmlUCSIsCyrillicSupplement)",
        "(xmlNewDocNodeEatName,_wrap_xmlNewDocNodeEatName)",
        "(xmlXPathIsNodeType,_wrap_xmlXPathIsNodeType)",
        "(htmlNewParserCtxt,_wrap_htmlNewParserCtxt)",
        "(xmlCopyDoc,_wrap_xmlCopyDoc)",
        "(xmlXPtrLocationSetRemove,_wrap_xmlXPtrLocationSetRemove)",
        "(xmlCtxtUseOptions,_wrap_xmlCtxtUseOptions)",
        "(xmlCharInRange,_wrap_xmlCharInRange)",
        "(xmlRegexpPrint,_wrap_xmlRegexpPrint)",
        "(_xmlParserNodeInfo,_wrap_new__xmlParserNodeInfo)",
        "(__xmlSubstituteEntitiesDefaultValue,_wrap___xmlSubstituteEntitiesDefaultValue)",
        "(xmlXPathConvertString,_wrap_xmlXPathConvertString)",
        "(xmlHashRemoveEntry3,_wrap_xmlHashRemoveEntry3)",
        "(xmlParseCatalogFile,_wrap_xmlParseCatalogFile)",
        "(xmlXPathCastStringToBoolean,_wrap_xmlXPathCastStringToBoolean)",
        "(xmlHashCopy,_wrap_xmlHashCopy)",
        "(xmlXPathNodeSetDel,_wrap_xmlXPathNodeSetDel)",
        "(xmlMemFree,_wrap_xmlMemFree)",
        "(xmlListReverseWalk,_wrap_xmlListReverseWalk)",
        "(xmlParseQuotedString,_wrap_xmlParseQuotedString)",
        "(xmlBufEnd,_wrap_xmlBufEnd)",
        "(xmlUCSIsBuhid,_wrap_xmlUCSIsBuhid)",
        "(xmlRelaxNGFreeParserCtxt,_wrap_xmlRelaxNGFreeParserCtxt)",
        "(xmlUCSIsCatSo,_wrap_xmlUCSIsCatSo)",
        "(xmlExpNewCtxt,_wrap_xmlExpNewCtxt)",
        "(UTF8ToHtml,_wrap_UTF8ToHtml)",
        "(xmlDOMWrapAdoptNode,_wrap_xmlDOMWrapAdoptNode)",
        "(xmlInitializeCatalog,_wrap_xmlInitializeCatalog)",
        "(xmlSAX2GetSystemId,_wrap_xmlSAX2GetSystemId)",
        "(xmlValidateAttributeValue,_wrap_xmlValidateAttributeValue)",
        "(xmlXPathCastNodeSetToBoolean,_wrap_xmlXPathCastNodeSetToBoolean)",
        "(xmlUCSIsCJKCompatibility,_wrap_xmlUCSIsCJKCompatibility)",
        "(htmlSaveFile,_wrap_htmlSaveFile)",
        "(xmlXPathIdFunction,_wrap_xmlXPathIdFunction)",
        "(xmlStreamPushAttr,_wrap_xmlStreamPushAttr)",
        "(xmlFreeCatalog,_wrap_xmlFreeCatalog)",
        "(xmlSchemaValidCtxtGetOptions,_wrap_xmlSchemaValidCtxtGetOptions)",
        "(xmlParsePEReference,_wrap_xmlParsePEReference)",
        "(xmlUCSIsRunic,_wrap_xmlUCSIsRunic)",
        "(xmlRegExecPushString2,_wrap_xmlRegExecPushString2)",
        "(xmlParsePubidLiteral,_wrap_xmlParsePubidLiteral)",
        "(xmlParseNotationType,_wrap_xmlParseNotationType)",
        "(xmlChildElementCount,_wrap_xmlChildElementCount)",
        "(withStructuredErrors,withStructuredErrors)",
        "(xmlRelaxNGFreeValidCtxt,_wrap_xmlRelaxNGFreeValidCtxt)",
        "(xmlXPathIsInf,_wrap_xmlXPathIsInf)",
        "(processingInstruction,_wrap_processingInstruction)",
        "(xmlUCSIsKanbun,_wrap_xmlUCSIsKanbun)",
        "(xmlParserAddNodeInfo,_wrap_xmlParserAddNodeInfo)",
        "(xmlGcMemSetup,_wrap_xmlGcMemSetup)",
        "(xmlCanonicPath,_wrap_xmlCanonicPath)",
        "(xmlNodeGetSpacePreserve,_wrap_xmlNodeGetSpacePreserve)",
        "(xmlListInsert,_wrap_xmlListInsert)",
        "(xmlCatalogLocalResolve,_wrap_xmlCatalogLocalResolve)",
        "(xmlSAX2NotationDecl,_wrap_xmlSAX2NotationDecl)",
        "(reference,_wrap_reference)",
        "(htmlSetMetaEncoding,_wrap_htmlSetMetaEncoding)",
        "(xmlXPathNextDescendant,_wrap_xmlXPathNextDescendant)",
        "(resolveEntity,_wrap_resolveEntity)",
        "(xmlSAX2GetParameterEntity,_wrap_xmlSAX2GetParameterEntity)",
        "(htmlParseChunk,_wrap_htmlParseChunk)",
        "(xmlXPathSubValues,_wrap_xmlXPathSubValues)",
        "(xmlParserPrintFileContext,_wrap_xmlParserPrintFileContext)",
        "(xmlSetProp,_wrap_xmlSetProp)",
        "(xmlParseSystemLiteral,_wrap_xmlParseSystemLiteral)",
        "(xmlListPopFront,_wrap_xmlListPopFront)",
        "(xmlNewNs,_wrap_xmlNewNs)",
        "(htmlReadFile,_wrap_htmlReadFile)",
        "(xmlGetNsList,_wrap_xmlGetNsList)",
        "(xmlIsXHTML,_wrap_xmlIsXHTML)",
        "(xmlParseCtxtExternalEntity,_wrap_xmlParseCtxtExternalEntity)",
        "(xmlUCSIsCatCc,_wrap_xmlUCSIsCatCc)",
        "(xmlAutomataNewAllTrans,_wrap_xmlAutomataNewAllTrans)",
        "(xmlHashSize,_wrap_xmlHashSize)",
        "(xmlUCSIsTagalog,_wrap_xmlUCSIsTagalog)",
        "(xmlXPathLeadingSorted,_wrap_xmlXPathLeadingSorted)",
        "(xmlAutomataNewTransition,_wrap_xmlAutomataNewTransition)",
        "(xmlXPtrNewRangeNodePoint,_wrap_xmlXPtrNewRangeNodePoint)",
        "(xmlSAX2GetColumnNumber,_wrap_xmlSAX2GetColumnNumber)",
        "(xmlXPathCountFunction,_wrap_xmlXPathCountFunction)",
        "(push,Push)",
        "(xmlGetCharEncodingHandler,_wrap_xmlGetCharEncodingHandler)",
        "(xmlXPathFalseFunction,_wrap_xmlXPathFalseFunction)",
        "(xmlXPathDistinct,_wrap_xmlXPathDistinct)",
        "(xmlSchemaSAXPlug,_wrap_xmlSchemaSAXPlug)",
        "(xmlSetListDoc,_wrap_xmlSetListDoc)",
        "(xmlStringGetNodeList,_wrap_xmlStringGetNodeList)",
        "(xmlUCSIsCatZs,_wrap_xmlUCSIsCatZs)",
        "(xmlValidateNMToken,_wrap_xmlValidateNMToken)",
        "(xmlXPathDifference,_wrap_xmlXPathDifference)",
        "(xmlNodeBufGetContent,_wrap_xmlNodeBufGetContent)",
        "(xmlParseNotationDecl,_wrap_xmlParseNotationDecl)",
        "(xmlSetDocCompressMode,_wrap_xmlSetDocCompressMode)",
        "(xmlParseElementMixedContentDecl,_wrap_xmlParseElementMixedContentDecl)",
        "(xmlSAXParseFileWithData,_wrap_xmlSAXParseFileWithData)",
        "(xmlXPathIntersection,_wrap_xmlXPathIntersection)",
        "(xmlParseElementDecl,_wrap_xmlParseElementDecl)",
        "(xmlRelaxNGNewDocParserCtxt,_wrap_xmlRelaxNGNewDocParserCtxt)",
        "(xmlNewChild,_wrap_xmlNewChild)",
        "(xmlIsMixedElement,_wrap_xmlIsMixedElement)",
        "(_xmlParserInputBuffer,_wrap_new__xmlParserInputBuffer)",
        "(xmlParserPrintFileInfo,_wrap_xmlParserPrintFileInfo)",
        "(xlinkIsLink,_wrap_xlinkIsLink)",
        "(xmlThrDefPedanticParserDefaultValue,_wrap_xmlThrDefPedanticParserDefaultValue)",
        "(xmlDocGetRootElement,_wrap_xmlDocGetRootElement)",
        "(xmlOutputBufferCreateFd,_wrap_xmlOutputBufferCreateFd)",
        "(xmlParseAttValue,_wrap_xmlParseAttValue)",
        "(xmlSAX2UnparsedEntityDecl,_wrap_xmlSAX2UnparsedEntityDecl)",
        "(xmlXPtrNewLocationSetNodes,_wrap_xmlXPtrNewLocationSetNodes)",
        "(xmlValidateDtdFinal,_wrap_xmlValidateDtdFinal)",
        "(xmlUCSIsCatPf,_wrap_xmlUCSIsCatPf)",
        "(xmlNormalizeURIPath,_wrap_xmlNormalizeURIPath)",
        "(xmlXPathCompiledEval,_wrap_xmlXPathCompiledEval)",
        "(xmlNewDocPI,_wrap_xmlNewDocPI)",
        "(htmlCtxtReadMemory,_wrap_htmlCtxtReadMemory)",
        "(xmlXPathPopExternal,_wrap_xmlXPathPopExternal)",
        "(xmlValidateOneNamespace,_wrap_xmlValidateOneNamespace)",
        "(xmlXPathModValues,_wrap_xmlXPathModValues)",
        "(xmlThrDefSetStructuredErrorFunc,_wrap_xmlThrDefSetStructuredErrorFunc)",
        "(xmlCreateURLParserCtxt,_wrap_xmlCreateURLParserCtxt)",
        "(xmlThrDefOutputBufferCreateFilenameDefault,_wrap_xmlThrDefOutputBufferCreateFilenameDefault)",
        "(xmlNewTextLen,_wrap_xmlNewTextLen)",
        "(hasExternalSubset,_wrap_hasExternalSubset)",
        "(xmlDictOwns,_wrap_xmlDictOwns)",
        "(xmlMallocLoc,_wrap_xmlMallocLoc)",
        "(xmlNewDocFragment,_wrap_xmlNewDocFragment)",
        "(xmlDictSetLimit,_wrap_xmlDictSetLimit)",
        "(xmlParseURI,_wrap_xmlParseURI)",
        "(xmlStrcat,_wrap_xmlStrcat)",
        "(xmlPopInput,_wrap_xmlPopInput)",
        "(xmlUCSIsMyanmar,_wrap_xmlUCSIsMyanmar)",
        "(xmlThrDefSubstituteEntitiesDefaultValue,_wrap_xmlThrDefSubstituteEntitiesDefaultValue)",
        "(xmlSchemaValueGetAsBoolean,_wrap_xmlSchemaValueGetAsBoolean)",
        "(xmlUCSIsTaiXuanJingSymbols,_wrap_xmlUCSIsTaiXuanJingSymbols)",
        "(xmlUTF8Strlen,_wrap_xmlUTF8Strlen)",
        "(xmlParseMarkupDecl,_wrap_xmlParseMarkupDecl)",
        "(xmlNodeSetBase,_wrap_xmlNodeSetBase)",
        "(xmlClearParserCtxt,_wrap_xmlClearParserCtxt)",
        "(xmlRelaxNGNewParserCtxt,_wrap_xmlRelaxNGNewParserCtxt)",
        "(xmlUCSIsPrivateUse,_wrap_xmlUCSIsPrivateUse)",
        "(xmlSchemaSetParserStructuredErrors,_wrap_xmlSchemaSetParserStructuredErrors)",
        "(xmlSAX2Characters,_wrap_xmlSAX2Characters)",
        "(xmlOutputBufferGetContent,_wrap_xmlOutputBufferGetContent)",
        "(xmlUCSIsCherokee,_wrap_xmlUCSIsCherokee)",
        "(xmlSAX2Reference,_wrap_xmlSAX2Reference)",
        "(xmlSetNsProp,_wrap_xmlSetNsProp)",
        "(xmlHashScan3,_wrap_xmlHashScan3)",
        "(xmlXPathErr,_wrap_xmlXPathErr)",
        "(xmlUCSIsCatPi,_wrap_xmlUCSIsCatPi)",
        "(xmlNewDocRawNode,_wrap_xmlNewDocRawNode)",
        "(xmlScanName,_wrap_xmlScanName)",
        "(htmlCtxtReadFile,_wrap_htmlCtxtReadFile)",
        "(xmlXPathNodeSetAdd,_wrap_xmlXPathNodeSetAdd)",
        "(xmlNodeAddContentLen,_wrap_xmlNodeAddContentLen)",
        "(xmlXPathParseName,_wrap_xmlXPathParseName)",
        "(xmlUCSIsIdeographicDescriptionCharacters,_wrap_xmlUCSIsIdeographicDescriptionCharacters)",
        "(xmlCharEncInFunc,_wrap_xmlCharEncInFunc)",
        "(xmlSAX2HasExternalSubset,_wrap_xmlSAX2HasExternalSubset)",
        "(xmlBufferCreate,_wrap_xmlBufferCreate)",
        "(xmlLoadExternalEntity,_wrap_xmlLoadExternalEntity)",
        "(xmlUCSIsBlock,_wrap_xmlUCSIsBlock)",
        "(htmlGetMetaEncoding,_wrap_htmlGetMetaEncoding)",
        "(xmlRegexpCompile,_wrap_xmlRegexpCompile)",
        "(xmlCatalogSetDefaults,_wrap_xmlCatalogSetDefaults)",
        "(xmlUCSIsBopomofo,_wrap_xmlUCSIsBopomofo)",
        "(xmlInitGlobals,_wrap_xmlInitGlobals)",
        "(xmlXPathPopNumber,_wrap_xmlXPathPopNumber)",
        "(xmlRecoverMemory,_wrap_xmlRecoverMemory)",
        "(_xmlXPathType,_wrap_new__xmlXPathType)",
        "(xmlXPathNodeSetSort,_wrap_xmlXPathNodeSetSort)",
        "(_htmlElemDesc,_wrap_new__htmlElemDesc)",
        "(getPublicId,_wrap_getPublicId)",
        "(xmlSaveFileTo,_wrap_xmlSaveFileTo)",
        "(xmlXPathConcatFunction,_wrap_xmlXPathConcatFunction)",
        "(xmlDumpEntitiesTable,_wrap_xmlDumpEntitiesTable)",
        "(_xmlParserCtxt,_wrap_new__xmlParserCtxt)",
        "(_xmlSchemaAttributeGroup,_wrap_new__xmlSchemaAttributeGroup)",
        "(xmlHashUpdateEntry2,_wrap_xmlHashUpdateEntry2)",
        "(htmlEncodeEntities,_wrap_htmlEncodeEntities)",
        "(_xmlDtd,_wrap_new__xmlDtd)",
        "(xmlAddNextSibling,_wrap_xmlAddNextSibling)",
        "(htmlDefaultSAXHandlerInit,_wrap_htmlDefaultSAXHandlerInit)",
        "(xmlXPathNodeSetCreate,_wrap_xmlXPathNodeSetCreate)",
        "(xmlCopyProp,_wrap_xmlCopyProp)",
        "(__xmlKeepBlanksDefaultValue,_wrap___xmlKeepBlanksDefaultValue)",
        "(xmlXPathRegisterFuncLookup,_wrap_xmlXPathRegisterFuncLookup)",
        "(xmlUCSIsOldItalic,_wrap_xmlUCSIsOldItalic)",
        "(xmlCopyDocElementContent,_wrap_xmlCopyDocElementContent)",
        "(xmlNamespaceParseNCName,_wrap_xmlNamespaceParseNCName)",
        "(xmlSAX2ProcessingInstruction,_wrap_xmlSAX2ProcessingInstruction)",
        "(xmlUCSIsKannada,_wrap_xmlUCSIsKannada)",
        "(xmlSaveToFilename,_wrap_xmlSaveToFilename)",
        "(xmlParseElement,_wrap_xmlParseElement)",
        "(xmlNodeSetName,_wrap_xmlNodeSetName)",
        "(xmlUCSIsTagbanwa,_wrap_xmlUCSIsTagbanwa)",
        "(xmlBufferCreateSize,_wrap_xmlBufferCreateSize)",
        "(xmlValidBuildContentModel,_wrap_xmlValidBuildContentModel)",
        "(xmlListReverse,_wrap_xmlListReverse)",
        "(xmlXPathPopBoolean,_wrap_xmlXPathPopBoolean)",
        "(xmlXPathNodeSetContains,_wrap_xmlXPathNodeSetContains)",
        "(xmlSAX2AttributeDecl,_wrap_xmlSAX2AttributeDecl)",
        "(xmlOutputBufferCreateIO,_wrap_xmlOutputBufferCreateIO)",
        "(xmlParseEntityValue,_wrap_xmlParseEntityValue)",
        "(xmlCreatePushParserCtxt,_wrap_xmlCreatePushParserCtxt)",
        "(xmlNodeListGetRawString,_wrap_xmlNodeListGetRawString)",
        "(xmlGetNoNsProp,_wrap_xmlGetNoNsProp)",
        "(xmlDumpAttributeTable,_wrap_xmlDumpAttributeTable)",
        "(xmlThrDefIndentTreeOutput,_wrap_xmlThrDefIndentTreeOutput)",
        "(xmlCopyEntitiesTable,_wrap_xmlCopyEntitiesTable)",
        "(htmlDocDumpMemory,_wrap_htmlDocDumpMemory)",
        "(cdataBlock,_wrap_cdataBlock)",
        "(xmlNewNsProp,_wrap_xmlNewNsProp)",
        "(xmlXPathCastStringToNumber,_wrap_xmlXPathCastStringToNumber)",
        "(xmlHashFree,_wrap_xmlHashFree)",
        "(xmlSchemaValidateDoc,_wrap_xmlSchemaValidateDoc)",
        "(xmlNextChar,_wrap_xmlNextChar)",
        "(__xmlDeregisterNodeDefaultValue,_wrap___xmlDeregisterNodeDefaultValue)",
        "(getParameterEntity,_wrap_getParameterEntity)",
        "(xmlExpGetStart,_wrap_xmlExpGetStart)",
        "(xmlModuleSymbol,_wrap_xmlModuleSymbol)",
        "(_xmlSchemaFacet,_wrap_new__xmlSchemaFacet)",
        "(xmlSchemaGetBuiltInListSimpleTypeItemType,_wrap_xmlSchemaGetBuiltInListSimpleTypeItemType)",
        "(xmlModuleClose,_wrap_xmlModuleClose)",
        "(xmlRegisterDefaultInputCallbacks,_wrap_xmlRegisterDefaultInputCallbacks)",
        "(attributeDecl,_wrap_attributeDecl)",
        "(xmlXPathNextNamespace,_wrap_xmlXPathNextNamespace)",
        "(xmlGetNodePath,_wrap_xmlGetNodePath)",
        "(xmlCopyElementTable,_wrap_xmlCopyElementTable)",
        "(xmlNodeIsText,_wrap_xmlNodeIsText)",
        "(htmlNodeDumpOutput,_wrap_htmlNodeDumpOutput)",
        "(_xmlSchemaAttributeLink,_wrap_new__xmlSchemaAttributeLink)",
        "(xmlUCSIsMusicalSymbols,_wrap_xmlUCSIsMusicalSymbols)",
        "(__xmlRegisterNodeDefaultValue,_wrap___xmlRegisterNodeDefaultValue)",
        "(xmlNewDtd,_wrap_xmlNewDtd)",
        "(xmlBufferCat,_wrap_xmlBufferCat)",
        "(xmlSplitQName,_wrap_xmlSplitQName)",
        "(xmlParserInputBufferCreateMem,_wrap_xmlParserInputBufferCreateMem)",
        "(xmlParserInputBufferRead,_wrap_xmlParserInputBufferRead)",
        "(xmlNewNsPropEatName,_wrap_xmlNewNsPropEatName)",
        "(xmlCatalogRemove,_wrap_xmlCatalogRemove)",
        "(xmlIsMainThread,_wrap_xmlIsMainThread)",
        "(_xmlDoc,_wrap_new__xmlDoc)",
        "(xmlCatalogAdd,_wrap_xmlCatalogAdd)",
        "(xmlUCSIsGujarati,_wrap_xmlUCSIsGujarati)",
        "(htmlCreateFileParserCtxt,_wrap_htmlCreateFileParserCtxt)",
        "(xmlParseBalancedChunkMemory,_wrap_xmlParseBalancedChunkMemory)",
        "(xmlXPathConvertNumber,_wrap_xmlXPathConvertNumber)",
        "(htmlNodeDump,_wrap_htmlNodeDump)",
        "(xmlXPtrNewLocationSetNodeSet,_wrap_xmlXPtrNewLocationSetNodeSet)",
        "(xmlCopyDtd,_wrap_xmlCopyDtd)",
        "(xmlSAXParseDoc,_wrap_xmlSAXParseDoc)",
        "(xmlCatalogAddLocal,_wrap_xmlCatalogAddLocal)",
        "(xmlXPathCtxtCompile,_wrap_xmlXPathCtxtCompile)",
        "(xmlCheckUTF8,_wrap_xmlCheckUTF8)",
        "(nodePop,_wrap_nodePop)",
        "(xmlParserHandleReference,_wrap_xmlParserHandleReference)",
        "(xmlSchemaGetPredefinedType,_wrap_xmlSchemaGetPredefinedType)",
        "(_xmlLocationSet,_wrap_new__xmlLocationSet)",
        "(xmlSchemaGetCanonValueWhtsp,_wrap_xmlSchemaGetCanonValueWhtsp)",
        "(xmlXPathPositionFunction,_wrap_xmlXPathPositionFunction)",
        "(xmlDecodeEntities,_wrap_xmlDecodeEntities)",
        "(_xmlRef,_wrap_new__xmlRef)",
        "(xmlBufferCCat,_wrap_xmlBufferCCat)",
        "(xmlUCSIsMalayalam,_wrap_xmlUCSIsMalayalam)",
        "(xmlUCSIsLatinExtendedB,_wrap_xmlUCSIsLatinExtendedB)",
        "(startDocument,_wrap_startDocument)",
        "(_xmlSchemaWildcardNs,_wrap_new__xmlSchemaWildcardNs)",
        "(xmlIsPubidChar,_wrap_xmlIsPubidChar)",
        "(xmlStrdup,_wrap_xmlStrdup)",
        "(xmlSaveUri,_wrap_xmlSaveUri)",
        "(xmlNewDocComment,_wrap_xmlNewDocComment)",
        "(xmlRegisterDefaultOutputCallbacks,_wrap_xmlRegisterDefaultOutputCallbacks)",
        "(xmlCopyElementContent,_wrap_xmlCopyElementContent)",
        "(xmlSAX2InitHtmlDefaultSAXHandler,_wrap_xmlSAX2InitHtmlDefaultSAXHandler)",
        "(xmlParserFindNodeInfoIndex,_wrap_xmlParserFindNodeInfoIndex)",
        "(xmlNodeAddContent,_wrap_xmlNodeAddContent)",
        "(xmlAllocParserInputBuffer,_wrap_xmlAllocParserInputBuffer)",
        "(xmlIsIdeographic,_wrap_xmlIsIdeographic)",
        "(xmlHasNsProp,_wrap_xmlHasNsProp)",
        "(xmlExpNewSeq,_wrap_xmlExpNewSeq)",
        "(__xmlDefaultSAXHandler,_wrap___xmlDefaultSAXHandler)",
        "(xmlSchemaValidateSetFilename,_wrap_xmlSchemaValidateSetFilename)",
        "(xmlXPathSubstringAfterFunction,_wrap_xmlXPathSubstringAfterFunction)",
        "(htmlReadMemory,_wrap_htmlReadMemory)",
        "(xmlNewCharEncodingHandler,_wrap_xmlNewCharEncodingHandler)",
        "(xmlNewElementContent,_wrap_xmlNewElementContent)",
        "(xmlSwitchEncoding,_wrap_xmlSwitchEncoding)",
        "(xmlXPathTrueFunction,_wrap_xmlXPathTrueFunction)",
        "(endElement,_wrap_endElement)",
        "(xmlDocDumpMemoryEnc,_wrap_xmlDocDumpMemoryEnc)",
        "(xmlNodeListGetString,_wrap_xmlNodeListGetString)",
        "(nodePush,_wrap_nodePush)",
        "(xmlXPathNextParent,_wrap_xmlXPathNextParent)",
        "(xmlUCSIsCatPc,_wrap_xmlUCSIsCatPc)",
        "(xmlSchemaValPredefTypeNode,_wrap_xmlSchemaValPredefTypeNode)",
        "(xmlRelaxNGSetValidStructuredErrors,_wrap_xmlRelaxNGSetValidStructuredErrors)",
        "(xmlUCSIsGreekExtended,_wrap_xmlUCSIsGreekExtended)",
        "(xmlRMutexUnlock,_wrap_xmlRMutexUnlock)",
        "(getLineNumber,_wrap_getLineNumber)",
        "(xmlFirstElementChild,_wrap_xmlFirstElementChild)",
        "(xmlUCSIsKhmer,_wrap_xmlUCSIsKhmer)",
        "(xlinkSetDefaultDetect,_wrap_xlinkSetDefaultDetect)",
        "(xmlFreeElementContent,_wrap_xmlFreeElementContent)",
        "(getMemUsed,_wrap_getMemUsed)",
        "(xmlUCSIsAegeanNumbers,_wrap_xmlUCSIsAegeanNumbers)",
        "(initGenericErrorDefaultFunc,_wrap_initGenericErrorDefaultFunc)",
        "(__xmlParserInputBufferCreateFilename,_wrap___xmlParserInputBufferCreateFilename)",
        "(xmlSchemaCompareValuesWhtsp,_wrap_xmlSchemaCompareValuesWhtsp)",
        "(_xmlNodeSet,_wrap_new__xmlNodeSet)",
        "(xmlUTF8Size,_wrap_xmlUTF8Size)",
        "(xmlRemoveProp,_wrap_xmlRemoveProp)",
        "(xmlUCSIsHighSurrogates,_wrap_xmlUCSIsHighSurrogates)",
        "(xmlGetPredefinedEntity,_wrap_xmlGetPredefinedEntity)",
        "(htmlReadIO,_wrap_htmlReadIO)",
        "(_xmlSchemaAnnot,_wrap_new__xmlSchemaAnnot)",
        "(xmlValidateOneAttribute,_wrap_xmlValidateOneAttribute)",
        "(xmlListReverseSearch,_wrap_xmlListReverseSearch)",
        "(xmlListPushFront,_wrap_xmlListPushFront)",
        "(xmlUCSIsCatCf,_wrap_xmlUCSIsCatCf)",
        "(xmlPreviousElementSibling,_wrap_xmlPreviousElementSibling)",
        "(xmlParserInputBufferCreateFilename,_wrap_xmlParserInputBufferCreateFilename)",
        "(xmlRegExecNextValues,_wrap_xmlRegExecNextValues)",
        "(xmlInitializeDict,_wrap_xmlInitializeDict)",
        "(xmlSAX2IsStandalone,_wrap_xmlSAX2IsStandalone)",
        "(xmlUCSIsCatSm,_wrap_xmlUCSIsCatSm)",
        "(xmlXPathDistinctSorted,_wrap_xmlXPathDistinctSorted)",
        "(xmlRelaxNGGetParserErrors,_wrap_xmlRelaxNGGetParserErrors)",
        "(xmlInitializeGlobalState,_wrap_xmlInitializeGlobalState)",
        "(xmlDOMWrapNewCtxt,_wrap_xmlDOMWrapNewCtxt)",
        "(xmlCheckFilename,_wrap_xmlCheckFilename)",
        "(xmlOutputBufferCreateFilenameDefault,_wrap_xmlOutputBufferCreateFilenameDefault)",
        "(xmlOutputBufferWrite,_wrap_xmlOutputBufferWrite)",
        "(equals,_SWIGV8_wrap_equals)",
        "(xmlXPathCompile,_wrap_xmlXPathCompile)",
        "(xmlParseComment,_wrap_xmlParseComment)",
        "(_xmlSAXHandlerV1,_wrap_new__xmlSAXHandlerV1)",
        "(xmlGetThreadId,_wrap_xmlGetThreadId)",
        "(xmlSchemaGetFacetValueAsULong,_wrap_xmlSchemaGetFacetValueAsULong)",
        "(xmlFreeValidCtxt,_wrap_xmlFreeValidCtxt)",
        "(xmlXPathNamespaceURIFunction,_wrap_xmlXPathNamespaceURIFunction)",
        "(xmlUTF8Strpos,_wrap_xmlUTF8Strpos)",
        "(xmlParserInputBufferCreateFile,_wrap_xmlParserInputBufferCreateFile)",
        "(xmlInitParserCtxt,_wrap_xmlInitParserCtxt)",
        "(unparsedEntityDecl,_wrap_unparsedEntityDecl)",
        "(xmlIsRef,_wrap_xmlIsRef)",
        "(xmlUCSIsCatLm,_wrap_xmlUCSIsCatLm)",
        "(xmlSaveSetEscape,_wrap_xmlSaveSetEscape)",
        "(xmlSetEntityReferenceFunc,_wrap_xmlSetEntityReferenceFunc)",
        "(htmlCreateMemoryParserCtxt,_wrap_htmlCreateMemoryParserCtxt)",
        "(xmlThrDefDefaultBufferSize,_wrap_xmlThrDefDefaultBufferSize)",
        "(xmlListWalk,_wrap_xmlListWalk)",
        "(xmlOutputBufferClose,_wrap_xmlOutputBufferClose)",
        "(xmlXPathLeading,_wrap_xmlXPathLeading)",
        "(htmlParseDocument,_wrap_htmlParseDocument)",
        "(xmlXPathVariableLookup,_wrap_xmlXPathVariableLookup)",
        "(xmlXPtrRangeToFunction,_wrap_xmlXPtrRangeToFunction)",
        "(xmlNewCharRef,_wrap_xmlNewCharRef)",
        "(xmlTextMerge,_wrap_xmlTextMerge)",
        "(xmlHashLookup3,_wrap_xmlHashLookup3)",
        "(xmlValidNormalizeAttributeValue,_wrap_xmlValidNormalizeAttributeValue)",
        "(xmlRelaxNGValidatePopElement,_wrap_xmlRelaxNGValidatePopElement)",
        "(xmlXPathInit,_wrap_xmlXPathInit)",
        "(xmlIsCombining,_wrap_xmlIsCombining)",
        "(xmlCatalogFreeLocal,_wrap_xmlCatalogFreeLocal)",
        "(xmlClearNodeInfoSeq,_wrap_xmlClearNodeInfoSeq)",
        "(xmlSaveFlush,_wrap_xmlSaveFlush)",
        "(xmlParseStartTag,_wrap_xmlParseStartTag)",
        "(xmlXPathNormalizeFunction,_wrap_xmlXPathNormalizeFunction)",
        "(xmlCopyEnumeration,_wrap_xmlCopyEnumeration)",
        "(xmlSAXUserParseMemory,_wrap_xmlSAXUserParseMemory)",
        "(xmlUnsetNsProp,_wrap_xmlUnsetNsProp)",
        "(xmlDumpElementTable,_wrap_xmlDumpElementTable)",
        "(xmlAllocOutputBuffer,_wrap_xmlAllocOutputBuffer)",
        "(xmlSchemaGetBuiltInType,_wrap_xmlSchemaGetBuiltInType)",
        "(xmlReconciliateNs,_wrap_xmlReconciliateNs)",
        "(xmlXPathNodeLeadingSorted,_wrap_xmlXPathNodeLeadingSorted)",
        "(xmlUCSIsLatinExtendedAdditional,_wrap_xmlUCSIsLatinExtendedAdditional)",
        "(xmlUCSIsBasicLatin,_wrap_xmlUCSIsBasicLatin)",
        "(xmlGetDtdQElementDesc,_wrap_xmlGetDtdQElementDesc)",
        "(xmlPedanticParserDefault,_wrap_xmlPedanticParserDefault)",
        "(xmlXPathNodeSetAddUnique,_wrap_xmlXPathNodeSetAddUnique)",
        "(xmlUCSIsControlPictures,_wrap_xmlUCSIsControlPictures)",
        "(htmlSAXParseFile,_wrap_htmlSAXParseFile)",
        "(xmlStrstr,_wrap_xmlStrstr)",
        "(xmlSchemaWhiteSpaceReplace,_wrap_xmlSchemaWhiteSpaceReplace)",
        "(xmlReadMemory,_wrap_xmlReadMemory)",
        "(xmlUCSIsSpacingModifierLetters,_wrap_xmlUCSIsSpacingModifierLetters)",
        "(xmlUCSIsCombiningHalfMarks,_wrap_xmlUCSIsCombiningHalfMarks)",
        "(xmlSchemaCompareValues,_wrap_xmlSchemaCompareValues)",
        "(xmlCatalogConvert,_wrap_xmlCatalogConvert)",
        "(xmlLineNumbersDefault,_wrap_xmlLineNumbersDefault)",
        "(htmlEntityLookup,_wrap_htmlEntityLookup)",
        "(xmlUCSIsVariationSelectorsSupplement,_wrap_xmlUCSIsVariationSelectorsSupplement)",
        "(xmlConvertSGMLCatalog,_wrap_xmlConvertSGMLCatalog)",
        "(__xmlDefaultBufferSize,_wrap___xmlDefaultBufferSize)",
        "(xmlParserInputGrow,_wrap_xmlParserInputGrow)",
        "(xmlXPathLocalNameFunction,_wrap_xmlXPathLocalNameFunction)",
        "(xmlSchemaNewValidCtxt,_wrap_xmlSchemaNewValidCtxt)",
        "(xmlSAXParseMemory,_wrap_xmlSAXParseMemory)",
        "(__xmlParserVersion,_wrap___xmlParserVersion)",
        "(xmlSAX2ResolveEntity,_wrap_xmlSAX2ResolveEntity)",
        "(xmlXPathStringEvalNumber,_wrap_xmlXPathStringEvalNumber)",
        "(xmlCleanupInputCallbacks,_wrap_xmlCleanupInputCallbacks)",
        "(xmlUCSIsLetterlikeSymbols,_wrap_xmlUCSIsLetterlikeSymbols)",
        "(xmlStrEqual,_wrap_xmlStrEqual)",
        "(xmlOutputBufferCreateFilename,_wrap_xmlOutputBufferCreateFilename)",
        "(xmlSwitchToEncoding,_wrap_xmlSwitchToEncoding)",
        "(xmlXPathRoot,_wrap_xmlXPathRoot)",
        "(xmlXPathLastFunction,_wrap_xmlXPathLastFunction)",
        "(xmlStrPrintf,_wrap_xmlStrPrintf)",
        "(xmlBufUse,_wrap_xmlBufUse)",
        "(xmlCopyNotationTable,_wrap_xmlCopyNotationTable)",
        "(__xmlBufferAllocScheme,_wrap___xmlBufferAllocScheme)",
        "(xmlTextConcat,_wrap_xmlTextConcat)",
        "(xmlGetCharEncodingName,_wrap_xmlGetCharEncodingName)",
        "(xmlNamespaceParseNSDef,_wrap_xmlNamespaceParseNSDef)",
        "(xmlBufferWriteQuotedString,_wrap_xmlBufferWriteQuotedString)",
        "(xmlDocDumpFormatMemoryEnc,_wrap_xmlDocDumpFormatMemoryEnc)",
        "(xmlSaveClose,_wrap_xmlSaveClose)",
        "(__xmlTreeIndentString,_wrap___xmlTreeIndentString)",
        "(xmlSchemaNewMemParserCtxt,_wrap_xmlSchemaNewMemParserCtxt)",
        "(xmlSchemaValPredefTypeNodeNoNorm,_wrap_xmlSchemaValPredefTypeNodeNoNorm)",
        "(xmlNewRMutex,_wrap_xmlNewRMutex)",
        "(htmlCtxtReadDoc,_wrap_htmlCtxtReadDoc)",
        "(_xmlXPathParserContext,_wrap_new__xmlXPathParserContext)",
        "(xmlThrDefParserInputBufferCreateFilenameDefault,_wrap_xmlThrDefParserInputBufferCreateFilenameDefault)",
        "(xmlRegExecErrInfo,_wrap_xmlRegExecErrInfo)",
        "(xmlParseElementContentDecl,_wrap_xmlParseElementContentDecl)",
        "(__xmlStructuredError,_wrap___xmlStructuredError)",
        "(xmlUCSIsCombiningDiacriticalMarks,_wrap_xmlUCSIsCombiningDiacriticalMarks)",
        "(xmlXPathCastBooleanToString,_wrap_xmlXPathCastBooleanToString)",
        "(htmlIsAutoClosed,_wrap_htmlIsAutoClosed)",
        "(xmlSaveToBuffer,_wrap_xmlSaveToBuffer)",
        "(xmlUCSIsCJKSymbolsandPunctuation,_wrap_xmlUCSIsCJKSymbolsandPunctuation)",
        "(xmlBufferFree,_wrap_xmlBufferFree)",
        "(xmlXPathSubstringBeforeFunction,_wrap_xmlXPathSubstringBeforeFunction)",
        "(xmlUCSIsShavian,_wrap_xmlUCSIsShavian)",
        "(xmlUCSIsCatP,_wrap_xmlUCSIsCatP)",
        "(xmlUCSIsCatPe,_wrap_xmlUCSIsCatPe)",
        "(xmlSchemaGetValType,_wrap_xmlSchemaGetValType)",
        "(endDocument,_wrap_endDocument)",
        "(xmlAutomataNewCountTrans2,_wrap_xmlAutomataNewCountTrans2)",
        "(xmlCleanupCharEncodingHandlers,_wrap_xmlCleanupCharEncodingHandlers)",
        "(xmlExpExpDerive,_wrap_xmlExpExpDerive)",
        "(xmlUCSIsHighPrivateUseSurrogates,_wrap_xmlUCSIsHighPrivateUseSurrogates)",
        "(xmlGetFeaturesList,_wrap_xmlGetFeaturesList)",
        "(xmlGetDocEntity,_wrap_xmlGetDocEntity)",
        "(xmlUCSIsGeneralPunctuation,_wrap_xmlUCSIsGeneralPunctuation)",
        "(xmlListAppend,_wrap_xmlListAppend)",
        "(hasInternalSubset,_wrap_hasInternalSubset)",
        "(xmlSaveToFd,_wrap_xmlSaveToFd)",
        "(xmlRegisterNodeDefault,_wrap_xmlRegisterNodeDefault)",
        "(__xmlLineNumbersDefaultValue,_wrap___xmlLineNumbersDefaultValue)",
        "(htmlCtxtReadFd,_wrap_htmlCtxtReadFd)",
        "(xmlNamespaceParseQName,_wrap_xmlNamespaceParseQName)",
        "(xmlSchemaValidateFile,_wrap_xmlSchemaValidateFile)",
        "(xmlXPathStartsWithFunction,_wrap_xmlXPathStartsWithFunction)",
        "(xmlUCSIsYiRadicals,_wrap_xmlUCSIsYiRadicals)",
        "(xmlDumpNotationTable,_wrap_xmlDumpNotationTable)",
        "(xmlCtxtReadMemory,_wrap_xmlCtxtReadMemory)",
        "(xmlThrDefSaveNoEmptyTags,_wrap_xmlThrDefSaveNoEmptyTags)",
        "(xmlStrQEqual,_wrap_xmlStrQEqual)",
        "(xmlRelaxNGValidateDoc,_wrap_xmlRelaxNGValidateDoc)",
        "(xmlSchemaInitTypes,_wrap_xmlSchemaInitTypes)",
        "(xmlParseEncodingDecl,_wrap_xmlParseEncodingDecl)",
        "(xmlCreateIOParserCtxt,_wrap_xmlCreateIOParserCtxt)",
        "(attribute,_wrap_attribute)",
        "(xmlDumpNotationDecl,_wrap_xmlDumpNotationDecl)",
        "(parseString,ParseString)",
        "(xmlSetTreeDoc,_wrap_xmlSetTreeDoc)",
        "(xmlListDelete,_wrap_xmlListDelete)",
        "(xmlUCSIsVariationSelectors,_wrap_xmlUCSIsVariationSelectors)",
        "(xmlNewDocNode,_wrap_xmlNewDocNode)",
        "(xmlExpCtxtNbCons,_wrap_xmlExpCtxtNbCons)",
        "(__htmlDefaultSAXHandler,_wrap___htmlDefaultSAXHandler)",
        "(xmlSAX2IgnorableWhitespace,_wrap_xmlSAX2IgnorableWhitespace)",
        "(xmlUCSIsLatin1Supplement,_wrap_xmlUCSIsLatin1Supplement)",
        "(__oldXMLWDcompatibility,_wrap___oldXMLWDcompatibility)",
        "(xmlXPathRegisterAllFunctions,_wrap_xmlXPathRegisterAllFunctions)",
        "(xmlExpFree,_wrap_xmlExpFree)",
        "(xmlCheckLanguageID,_wrap_xmlCheckLanguageID)",
        "(htmlNewDoc,_wrap_htmlNewDoc)",
        "(xmlRegFreeExecCtxt,_wrap_xmlRegFreeExecCtxt)",
        "(xmlUCSIsCatNo,_wrap_xmlUCSIsCatNo)",
        "(xmlCleanupMemory,_wrap_xmlCleanupMemory)",
        "(xmlSAX2ExternalSubset,_wrap_xmlSAX2ExternalSubset)",
        "(xmlValidateNmtokensValue,_wrap_xmlValidateNmtokensValue)",
        "(xmlUCSIsMathematicalOperators,_wrap_xmlUCSIsMathematicalOperators)",
        "(__xmlOutputBufferCreateFilename,_wrap___xmlOutputBufferCreateFilename)",
        "(xmlIsExtender,_wrap_xmlIsExtender)",
        "(xmlUCSIsArmenian,_wrap_xmlUCSIsArmenian)",
        "(xmlUCSIsCatNl,_wrap_xmlUCSIsCatNl)",
        "(xmlIsBaseChar,_wrap_xmlIsBaseChar)",
        "(xmlSchemaFreeWildcard,_wrap_xmlSchemaFreeWildcard)",
        "(xmlMemUsed,_wrap_xmlMemUsed)",
        "(__xmlParserInputBufferCreateFilenameValue,_wrap___xmlParserInputBufferCreateFilenameValue)",
        "(xmlXPtrLocationSetAdd,_wrap_xmlXPtrLocationSetAdd)",
        "(xmlCharStrdup,_wrap_xmlCharStrdup)",
        "(xmlXPathNewValueTree,_wrap_xmlXPathNewValueTree)",
        "(xmlExpStringDerive,_wrap_xmlExpStringDerive)",
        "(SaxParser,NewParser)",
        "(xmlParseNmtoken,_wrap_xmlParseNmtoken)",
        "(xmlStrsub,_wrap_xmlStrsub)",
        "(xmlXPathCastToString,_wrap_xmlXPathCastToString)",
        "(xmlNodeSetLang,_wrap_xmlNodeSetLang)",
        "(xmlHasProp,_wrap_xmlHasProp)",
        "(xmlSAXDefaultVersion,_wrap_xmlSAXDefaultVersion)",
        "(xmlSAX2EndElementNs,_wrap_xmlSAX2EndElementNs)",
        "(xmlACatalogResolveURI,_wrap_xmlACatalogResolveURI)",
        "(globalNamespace,_wrap_globalNamespace)",
        "(xmlXPathCastNodeToNumber,_wrap_xmlXPathCastNodeToNumber)",
        "(xmlUCSIsCatLl,_wrap_xmlUCSIsCatLl)",
        "(xmlNodeSetContent,_wrap_xmlNodeSetContent)",
        "(_xmlNode,_wrap_new__xmlNode)",
        "(xmlNewNode,_wrap_xmlNewNode)",
        "(xmlXPathWrapCString,_wrap_xmlXPathWrapCString)",
        "(xmlLinkGetData,_wrap_xmlLinkGetData)",
        "(xmlStringLenGetNodeList,_wrap_xmlStringLenGetNodeList)",
        "(xmlExpCtxtNbNodes,_wrap_xmlExpCtxtNbNodes)",
        "(__xmlParserDebugEntities,_wrap___xmlParserDebugEntities)",
        "(xmlSchemaSAXUnplug,_wrap_xmlSchemaSAXUnplug)",
        "(xmlDumpEntityDecl,_wrap_xmlDumpEntityDecl)",
        "(xmlAutomataNewState,_wrap_xmlAutomataNewState)",
        "(_xmlAttr,_wrap_new__xmlAttr)",
        "(xmlXPathRegisteredVariablesCleanup,_wrap_xmlXPathRegisteredVariablesCleanup)",
        "(xmlXPathNodeSetFreeNs,_wrap_xmlXPathNodeSetFreeNs)",
        "(xmlUCSIsCatLo,_wrap_xmlUCSIsCatLo)",
        "(_xmlSchemaFacetLink,_wrap_new__xmlSchemaFacetLink)",
        "(xmlUCSIsCatS,_wrap_xmlUCSIsCatS)",
        "(xmlDocDumpMemory,_wrap_xmlDocDumpMemory)",
        "(xmlSchemaParse,_wrap_xmlSchemaParse)",
        "(xmlUCSIsSupplementaryPrivateUseAreaA,_wrap_xmlUCSIsSupplementaryPrivateUseAreaA)",
        "(htmlTagLookup,_wrap_htmlTagLookup)",
        "(xmlUCSIsSyriac,_wrap_xmlUCSIsSyriac)",
        "(xmlXPathEvalPredicate,_wrap_xmlXPathEvalPredicate)",
        "(xmlUTF8Strloc,_wrap_xmlUTF8Strloc)",
        "(xmlUCSIsSuperscriptsandSubscripts,_wrap_xmlUCSIsSuperscriptsandSubscripts)",
        "(xmlXPathPopString,_wrap_xmlXPathPopString)",
        "(xmlSchemaValueAppend,_wrap_xmlSchemaValueAppend)",
        "(xmlStrlen,_wrap_xmlStrlen)",
        "(xmlStrndup,_wrap_xmlStrndup)",
        "(xmlXPtrNewRange,_wrap_xmlXPtrNewRange)",
        "(xmlHashScanFull3,_wrap_xmlHashScanFull3)",
        "(xmlXPtrNewRangePointNode,_wrap_xmlXPtrNewRangePointNode)",
        "(xmlXPathTrailingSorted,_wrap_xmlXPathTrailingSorted)",
        "(xmlDictLookup,_wrap_xmlDictLookup)",
        "(xmlRegexpIsDeterminist,_wrap_xmlRegexpIsDeterminist)",
        "(xmlParseInNodeContext,_wrap_xmlParseInNodeContext)",
        "(xmlSearchNsByHref,_wrap_xmlSearchNsByHref)",
        "(xmlUnlinkNode,_wrap_xmlUnlinkNode)",
        "(xmlNewCatalog,_wrap_xmlNewCatalog)",
        "(getColumnNumber,_wrap_getColumnNumber)",
        "(xmlUCSIsMiscellaneousTechnical,_wrap_xmlUCSIsMiscellaneousTechnical)",
        "(xmlSAX2ElementDecl,_wrap_xmlSAX2ElementDecl)",
        "(xmlParseMisc,_wrap_xmlParseMisc)",
        "(xmlRecoverFile,_wrap_xmlRecoverFile)",
        "(xmlHashAddEntry2,_wrap_xmlHashAddEntry2)",
        "(xmlUCSIsEnclosedAlphanumerics,_wrap_xmlUCSIsEnclosedAlphanumerics)",
        "(xmlUCSIsKatakanaPhoneticExtensions,_wrap_xmlUCSIsKatakanaPhoneticExtensions)",
        "(htmlFreeParserCtxt,_wrap_htmlFreeParserCtxt)",
        "(xmlRegExecPushString,_wrap_xmlRegExecPushString)",
        "(xmlXPathOrderDocElems,_wrap_xmlXPathOrderDocElems)",
        "(xmlInitNodeInfoSeq,_wrap_xmlInitNodeInfoSeq)",
        "(xmlPatternMatch,_wrap_xmlPatternMatch)",
        "(externalSubset,_wrap_externalSubset)",
        "(_xmlXPathVariable,_wrap_new__xmlXPathVariable)",
        "(xmlXPathEvaluatePredicateResult,_wrap_xmlXPathEvaluatePredicateResult)",
        "(xmlFreeURI,_wrap_xmlFreeURI)",
        "(xmlValidateRoot,_wrap_xmlValidateRoot)",
        "(entityDecl,_wrap_entityDecl)",
        "(xmlIsLetter,_wrap_xmlIsLetter)",
        "(xmlSAX2StartElementNs,_wrap_xmlSAX2StartElementNs)",
        "(xmlNodeDump,_wrap_xmlNodeDump)",
        "(xmlSearchNs,_wrap_xmlSearchNs)",
        "(xmlNewIOInputStream,_wrap_xmlNewIOInputStream)",
        "(xmlSAX2InternalSubset,_wrap_xmlSAX2InternalSubset)",
        "(xmlIsBlank,_wrap_xmlIsBlank)",
        "(htmlIsBooleanAttr,_wrap_htmlIsBooleanAttr)",
        "(xmlUTF8Strsize,_wrap_xmlUTF8Strsize)",
        "(xmlBufferGrow,_wrap_xmlBufferGrow)",
        "(xmlXPathRegisterFuncNS,_wrap_xmlXPathRegisterFuncNS)",
        "(xmlValidateOneElement,_wrap_xmlValidateOneElement)",
        "(xmlAutomataSetFinalState,_wrap_xmlAutomataSetFinalState)",
        "(xmlCtxtReadIO,_wrap_xmlCtxtReadIO)",
        "(xmlCatalogResolve,_wrap_xmlCatalogResolve)",
        "(xmlBufferAddHead,_wrap_xmlBufferAddHead)",
        "(xmlRemoveRef,_wrap_xmlRemoveRef)",
        "(xmlValidateNmtokenValue,_wrap_xmlValidateNmtokenValue)",
        "(xmlSchemaCopyValue,_wrap_xmlSchemaCopyValue)",
        "(xmlUCSIsCatSc,_wrap_xmlUCSIsCatSc)",
        "(xmlUCSIsCatLu,_wrap_xmlUCSIsCatLu)",
        "(xmlRelaxNGNewValidCtxt,_wrap_xmlRelaxNGNewValidCtxt)",
        "(xmlSchemaValidateListSimpleTypeFacet,_wrap_xmlSchemaValidateListSimpleTypeFacet)",
        "(xmlXPathNewNodeSet,_wrap_xmlXPathNewNodeSet)",
        "(xmlXPtrEvalRangePredicate,_wrap_xmlXPtrEvalRangePredicate)",
        "(xmlFreeEntitiesTable,_wrap_xmlFreeEntitiesTable)",
        "(xmlSchemaFreeFacet,_wrap_xmlSchemaFreeFacet)",
        "(xmlAutomataNewOnceTrans2,_wrap_xmlAutomataNewOnceTrans2)",
        "(xmlXPathNewFloat,_wrap_xmlXPathNewFloat)",
        "(xmlParseDocument,_wrap_xmlParseDocument)",
        "(xmlUCSIsHangulSyllables,_wrap_xmlUCSIsHangulSyllables)",
        "(xmlXPathNewContext,_wrap_xmlXPathNewContext)",
        "(xmlListDup,_wrap_xmlListDup)",
        "(elementDecl,_wrap_elementDecl)",
        "(xmlSetFeature,_wrap_xmlSetFeature)",
        "(htmlCreatePushParserCtxt,_wrap_htmlCreatePushParserCtxt)",
        "(getNodeCount,_wrap_getNodeCount)",
        "(xmlXPathTranslateFunction,_wrap_xmlXPathTranslateFunction)",
        "(xmlParseContent,_wrap_xmlParseContent)",
        "(xmlUCSIsCJKCompatibilityIdeographsSupplement,_wrap_xmlUCSIsCJKCompatibilityIdeographsSupplement)",
        "(xmlXPathNextSelf,_wrap_xmlXPathNextSelf)",
        "(xmlXPathEqualValues,_wrap_xmlXPathEqualValues)",
        "(xmlStrncat,_wrap_xmlStrncat)",
        "(xmlStrncatNew,_wrap_xmlStrncatNew)",
        "(htmlAutoCloseTag,_wrap_htmlAutoCloseTag)",
        "(xmlCopyPropList,_wrap_xmlCopyPropList)",
        "(xmlHashLookup2,_wrap_xmlHashLookup2)",
        "(xmlSAX2EntityDecl,_wrap_xmlSAX2EntityDecl)",
        "(xmlXPathConvertBoolean,_wrap_xmlXPathConvertBoolean)",
        "(xmlUCSIsCJKCompatibilityForms,_wrap_xmlUCSIsCJKCompatibilityForms)",
        "(xmlPatternMaxDepth,_wrap_xmlPatternMaxDepth)",
        "(xmlExpNewRange,_wrap_xmlExpNewRange)",
        "(xmlBufferEmpty,_wrap_xmlBufferEmpty)",
        "(xmlGetDtdQAttrDesc,_wrap_xmlGetDtdQAttrDesc)",
        "(xmlAutomataNewNegTrans,_wrap_xmlAutomataNewNegTrans)",
        "(xmlAddElementDecl,_wrap_xmlAddElementDecl)",
        "(xmlUCSIsNumberForms,_wrap_xmlUCSIsNumberForms)",
        "(xmlDumpAttributeDecl,_wrap_xmlDumpAttributeDecl)",
        "(xmlRelaxNGCleanupTypes,_wrap_xmlRelaxNGCleanupTypes)",
        "(UTF8Toisolat1,_wrap_UTF8Toisolat1)",
        "(__xmlIndentTreeOutput,_wrap___xmlIndentTreeOutput)",
        "(xmlCatalogResolvePublic,_wrap_xmlCatalogResolvePublic)",
        "(xmlReadIO,_wrap_xmlReadIO)",
        "(xmlUCSIsLinearBSyllabary,_wrap_xmlUCSIsLinearBSyllabary)",
        "(xmlDictQLookup,_wrap_xmlDictQLookup)",
        "(xmlMemRealloc,_wrap_xmlMemRealloc)",
        "(xmlNewTextChild,_wrap_xmlNewTextChild)",
        "(xmlSchemaValidateLengthFacetWhtsp,_wrap_xmlSchemaValidateLengthFacetWhtsp)",
        "(xmlUCSIsLatinExtendedA,_wrap_xmlUCSIsLatinExtendedA)",
        "(xmlStrcmp,_wrap_xmlStrcmp)",
        "(xmlCleanupPredefinedEntities,_wrap_xmlCleanupPredefinedEntities)",
        "(xmlDefaultSAXHandlerInit,_wrap_xmlDefaultSAXHandlerInit)",
        "(xmlXPathCastToNumber,_wrap_xmlXPathCastToNumber)",
        "(xmlUCSIsThai,_wrap_xmlUCSIsThai)",
        "(xmlUCSIsLowSurrogates,_wrap_xmlUCSIsLowSurrogates)",
        "(xmlValidCtxtNormalizeAttributeValue,_wrap_xmlValidCtxtNormalizeAttributeValue)",
        "(xmlFreePropList,_wrap_xmlFreePropList)",
        "(xmlDocHasRootElement,_wrap_xmlDocHasRootElement)",
        "(htmlCtxtReset,_wrap_htmlCtxtReset)",
        "(xmlExpSubsume,_wrap_xmlExpSubsume)",
        "(_xmlValidCtxt,_wrap_new__xmlValidCtxt)",
        "(xmlSAXParseFile,_wrap_xmlSAXParseFile)",
        "(xmlNewDoc,_wrap_xmlNewDoc)",
        "(xmlHashUpdateEntry3,_wrap_xmlHashUpdateEntry3)",
        "(xmlXPathNumberFunction,_wrap_xmlXPathNumberFunction)",
        "(xmlUCSIsMongolian,_wrap_xmlUCSIsMongolian)",
        "(xmlAddDocEntity,_wrap_xmlAddDocEntity)",
        "(htmlParseEntityRef,_wrap_htmlParseEntityRef)",
        "(xmlListCopy,_wrap_xmlListCopy)",
        "(xmlMemShow,_wrap_xmlMemShow)",
        "(xmlParserInputBufferCreateFilenameDefault,_wrap_xmlParserInputBufferCreateFilenameDefault)",
        "(xmlParserValidityError,_wrap_xmlParserValidityError)",
        "(xmlDOMWrapCloneNode,_wrap_xmlDOMWrapCloneNode)",
        "(xmlXPathFreeContext,_wrap_xmlXPathFreeContext)",
        "(xmlStringCurrentChar,_wrap_xmlStringCurrentChar)",
        "(xmlRelaxParserSetFlag,_wrap_xmlRelaxParserSetFlag)",
        "(xmlXPathFreeCompExpr,_wrap_xmlXPathFreeCompExpr)",
        "(xmlXPathNewString,_wrap_xmlXPathNewString)",
        "(xmlFreeAutomata,_wrap_xmlFreeAutomata)",
        "(xmlStreamPop,_wrap_xmlStreamPop)",
        "(xmlAutomataNewEpsilon,_wrap_xmlAutomataNewEpsilon)",
        "(htmlParseFile,_wrap_htmlParseFile)",
        "(xmlBufferDetach,_wrap_xmlBufferDetach)",
        "(xmlSchemaNewDocParserCtxt,_wrap_xmlSchemaNewDocParserCtxt)",
        "(xmlValidateElement,_wrap_xmlValidateElement)",
        "(xmlFreeDoc,_wrap_xmlFreeDoc)",
        "(xmlURIEscape,_wrap_xmlURIEscape)",
        "(xmlACatalogResolveSystem,_wrap_xmlACatalogResolveSystem)",
        "(xmlCopyNamespace,_wrap_xmlCopyNamespace)",
        "(xmlUCSIsCatPs,_wrap_xmlUCSIsCatPs)",
        "(htmlNewDocNoDtD,_wrap_htmlNewDocNoDtD)",
        "(xmlParserValidityWarning,_wrap_xmlParserValidityWarning)",
        "(xmlParseReference,_wrap_xmlParseReference)",
        "(xmlListRemoveAll,_wrap_xmlListRemoveAll)",
        "(xmlUCSIsEnclosedCJKLettersandMonths,_wrap_xmlUCSIsEnclosedCJKLettersandMonths)",
        "(htmlNodeStatus,_wrap_htmlNodeStatus)",
        "(xmlInitializePredefinedEntities,_wrap_xmlInitializePredefinedEntities)",
        "(xmlParseName,_wrap_xmlParseName)",
        "(__xmlGenericErrorContext,_wrap___xmlGenericErrorContext)",
        "(xmlSAX2StartElement,_wrap_xmlSAX2StartElement)",
        "(xmlXPathSubstringFunction,_wrap_xmlXPathSubstringFunction)",
        "(xmlDocFormatDump,_wrap_xmlDocFormatDump)",
        "(xmlEncodeEntities,_wrap_xmlEncodeEntities)",
        "(xmlFileMatch,_wrap_xmlFileMatch)",
        "(xmlXPathWrapNodeSet,_wrap_xmlXPathWrapNodeSet)",
        "(xmlInitParser,_wrap_xmlInitParser)",
        "(setNamespace,_wrap_setNamespace)",
        "(xmlCtxtResetPush,_wrap_xmlCtxtResetPush)",
        "(xmlXPathNodeEval,_wrap_xmlXPathNodeEval)",
        "(xmlPopInputCallbacks,_wrap_xmlPopInputCallbacks)",
        "(SaxPushParser,NewPushParser)",
        "(xmlCtxtReadFd,_wrap_xmlCtxtReadFd)",
        "(_xmlXPathObject,_wrap_new__xmlXPathObject)",
        "(xmlGetIntSubset,_wrap_xmlGetIntSubset)",
        "(xmlUCSIsCatMn,_wrap_xmlUCSIsCatMn)",
        "(htmlSAXParseDoc,_wrap_htmlSAXParseDoc)",
        "(xmlUTF8Charcmp,_wrap_xmlUTF8Charcmp)",
        "(xmlMemStrdupLoc,_wrap_xmlMemStrdupLoc)",
        "(fromBufferAsync,fromBufferAsync)",
        "(xmlCopyNamespaceList,_wrap_xmlCopyNamespaceList)",
        "(xmlDocDumpFormatMemory,_wrap_xmlDocDumpFormatMemory)",
        "(xmlAutomataNewCountedTrans,_wrap_xmlAutomataNewCountedTrans)",
        "(valuePop,_wrap_valuePop)",
        "(xmlParseCharRef,_wrap_xmlParseCharRef)",
        "(xmlStringDecodeEntities,_wrap_xmlStringDecodeEntities)",
        "(xmlUCSIsGothic,_wrap_xmlUCSIsGothic)",
        "(xmlSaveFile,_wrap_xmlSaveFile)",
        "(xmlNewValidCtxt,_wrap_xmlNewValidCtxt)",
        "(xmlXPathFunctionLookupNS,_wrap_xmlXPathFunctionLookupNS)",
        "(xmlSAX2HasInternalSubset,_wrap_xmlSAX2HasInternalSubset)",
        "(htmlDocContentDumpFormatOutput,_wrap_htmlDocContentDumpFormatOutput)",
        "(xmlUCSIsCatCs,_wrap_xmlUCSIsCatCs)",
        "(xmlDictCleanup,_wrap_xmlDictCleanup)",
        "(xmlDOMWrapReconcileNamespaces,_wrap_xmlDOMWrapReconcileNamespaces)",
        "(xmlHashQLookup,_wrap_xmlHashQLookup)",
        "(_xmlSchema,_wrap_new__xmlSchema)",
        "(xmlPatternMinDepth,_wrap_xmlPatternMinDepth)",
        "(valuePush,_wrap_valuePush)",
        "(xmlThrDefKeepBlanksDefaultValue,_wrap_xmlThrDefKeepBlanksDefaultValue)",
        "(xmlHashRemoveEntry2,_wrap_xmlHashRemoveEntry2)",
        "(xmlDictExists,_wrap_xmlDictExists)",
        "(xmlUTF8Strsub,_wrap_xmlUTF8Strsub)",
        "(xmlGetCompressMode,_wrap_xmlGetCompressMode)",
        "(xmlHashLookup,_wrap_xmlHashLookup)",
        "(xmlUCSIsYiSyllables,_wrap_xmlUCSIsYiSyllables)",
        "(xmlSaveFileEnc,_wrap_xmlSaveFileEnc)",
        "(xmlCleanupOutputCallbacks,_wrap_xmlCleanupOutputCallbacks)",
        "(xmlXPathRegisterVariableNS,_wrap_xmlXPathRegisterVariableNS)",
        "(xmlBuildRelativeURI,_wrap_xmlBuildRelativeURI)",
        "(xmlExpParse,_wrap_xmlExpParse)",
        "(xmlBufferShrink,_wrap_xmlBufferShrink)",
        "(xmlPatternGetStreamCtxt,_wrap_xmlPatternGetStreamCtxt)",
        "(htmlAttrAllowed,_wrap_htmlAttrAllowed)",
        "(__xmlDoValidityCheckingDefaultValue,_wrap___xmlDoValidityCheckingDefaultValue)",
        "(xmlNewEntityInputStream,_wrap_xmlNewEntityInputStream)",
        "(xmlParserFindNodeInfo,_wrap_xmlParserFindNodeInfo)",
        "(xmlParseSDDecl,_wrap_xmlParseSDDecl)",
        "(xmlXPathCompareValues,_wrap_xmlXPathCompareValues)",
        "(xmlXPathValueFlipSign,_wrap_xmlXPathValueFlipSign)",
        "(xmlStrchr,_wrap_xmlStrchr)",
        "(xmlParserInputBufferCreateIO,_wrap_xmlParserInputBufferCreateIO)",
        "(xmlMemDisplayLast,_wrap_xmlMemDisplayLast)",
        "(xmlGetID,_wrap_xmlGetID)",
        "(xmlBuildURI,_wrap_xmlBuildURI)",
        "(xmlUnsetProp,_wrap_xmlUnsetProp)",
        "(xmlXPathCastNumberToString,_wrap_xmlXPathCastNumberToString)",
        "(xmlCopyNode,_wrap_xmlCopyNode)",
        "(xmlSetGenericErrorFunc,_wrap_xmlSetGenericErrorFunc)",
        "(xmlXPathRegisterVariable,_wrap_xmlXPathRegisterVariable)",
        "(xmlHashCreateDict,_wrap_xmlHashCreateDict)",
        "(xmlFreePatternList,_wrap_xmlFreePatternList)",
        "(xmlUCSIsDeseret,_wrap_xmlUCSIsDeseret)",
        "(xmlStrcasestr,_wrap_xmlStrcasestr)",
        "(xmlCatalogSetDebug,_wrap_xmlCatalogSetDebug)",
        "(xmlSchemaFreeType,_wrap_xmlSchemaFreeType)",
        "(xmlPatternStreamable,_wrap_xmlPatternStreamable)",
        "(xmlExpMaxToken,_wrap_xmlExpMaxToken)",
        "(htmlInitAutoClose,_wrap_htmlInitAutoClose)",
        "(xmlExpDump,_wrap_xmlExpDump)",
        "(xmlRelaxNGInitTypes,_wrap_xmlRelaxNGInitTypes)",
        "(xmlValidateNotationDecl,_wrap_xmlValidateNotationDecl)",
        "(xmlXPathParseNCName,_wrap_xmlXPathParseNCName)",
        "(xmlCreateMemoryParserCtxt,_wrap_xmlCreateMemoryParserCtxt)",
        "(xmlDictCreateSub,_wrap_xmlDictCreateSub)",
        "(xmlModuleFree,_wrap_xmlModuleFree)",
        "(xmlMutexUnlock,_wrap_xmlMutexUnlock)",
        "(xmlHashRemoveEntry,_wrap_xmlHashRemoveEntry)",
        "(xmlDictFree,_wrap_xmlDictFree)",
        "(xmlRelaxNGGetValidErrors,_wrap_xmlRelaxNGGetValidErrors)",
        "(xmlLastElementChild,_wrap_xmlLastElementChild)",
        "(xmlCreateURI,_wrap_xmlCreateURI)",
        "(xmlNewGlobalNs,_wrap_xmlNewGlobalNs)",
        "(xmlListSort,_wrap_xmlListSort)",
        "(htmlEntityValueLookup,_wrap_htmlEntityValueLookup)",
        "(xmlNewDocProp,_wrap_xmlNewDocProp)",
        "(xmlUCSIsGreekandCoptic,_wrap_xmlUCSIsGreekandCoptic)",
        "(xmlRelaxNGParse,_wrap_xmlRelaxNGParse)",
        "(xmlFreeIDTable,_wrap_xmlFreeIDTable)",
        "(ignorableWhitespace,_wrap_ignorableWhitespace)",
        "(xmlUCSIsCJKCompatibilityIdeographs,_wrap_xmlUCSIsCJKCompatibilityIdeographs)",
        "(xmlXPathNextFollowing,_wrap_xmlXPathNextFollowing)",
        "(htmlSaveFileFormat,_wrap_htmlSaveFileFormat)",
        "(xmlLoadACatalog,_wrap_xmlLoadACatalog)",
        "(htmlElementAllowedHere,_wrap_htmlElementAllowedHere)",
        "(xmlFreeNs,_wrap_xmlFreeNs)",
        "(xmlParserInputBufferGrow,_wrap_xmlParserInputBufferGrow)",
        "(xmlParseAttributeListDecl,_wrap_xmlParseAttributeListDecl)",
        "(xmlUCSIsCypriotSyllabary,_wrap_xmlUCSIsCypriotSyllabary)",
        "(xmlReplaceNode,_wrap_xmlReplaceNode)",
        "(namePop,_wrap_namePop)",
        "(xmlAutomataCompile,_wrap_xmlAutomataCompile)",
        "(checkNamespace,_wrap_checkNamespace)",
        "(xmlXPathNextDescendantOrSelf,_wrap_xmlXPathNextDescendantOrSelf)",
        "(xmlStreamPush,_wrap_xmlStreamPush)",
        "(xmlUCSIsUnifiedCanadianAboriginalSyllabics,_wrap_xmlUCSIsUnifiedCanadianAboriginalSyllabics)",
        "(xmlReadFile,_wrap_xmlReadFile)",
        "(xmlNewNodeEatName,_wrap_xmlNewNodeEatName)",
        "(xmlUCSIsTamil,_wrap_xmlUCSIsTamil)",
        "(xmlSAX2EndElement,_wrap_xmlSAX2EndElement)",
        "(_xmlXPathFunct,_wrap_new__xmlXPathFunct)",
        "(xmlURIEscapeStr,_wrap_xmlURIEscapeStr)",
        "(xmlThrDefBufferAllocScheme,_wrap_xmlThrDefBufferAllocScheme)",
        "(xmlValidatePopElement,_wrap_xmlValidatePopElement)",
        "(xmlPatternFromRoot,_wrap_xmlPatternFromRoot)",
        "(xmlUCSIsHiragana,_wrap_xmlUCSIsHiragana)",
        "(xmlMemBlocks,_wrap_xmlMemBlocks)",
        "(xmlXPathCastNumberToBoolean,_wrap_xmlXPathCastNumberToBoolean)",
        "(xmlStrncmp,_wrap_xmlStrncmp)",
        "(xmlXPtrLocationSetCreate,_wrap_xmlXPtrLocationSetCreate)",
        "(xmlCtxtReset,_wrap_xmlCtxtReset)",
        "(xmlSchemaIsBuiltInTypeFacet,_wrap_xmlSchemaIsBuiltInTypeFacet)",
        "(xmlUCSIsGeometricShapes,_wrap_xmlUCSIsGeometricShapes)",
        "(xmlParseAttributeType,_wrap_xmlParseAttributeType)",
        "(xmlXPathNewNodeSetList,_wrap_xmlXPathNewNodeSetList)",
        "(xmlUCSIsOsmanya,_wrap_xmlUCSIsOsmanya)",
        "(xmlThrDefDoValidityCheckingDefaultValue,_wrap_xmlThrDefDoValidityCheckingDefaultValue)",
        "(xmlCatalogDump,_wrap_xmlCatalogDump)",
        "(xmlParseCDSect,_wrap_xmlParseCDSect)",
        "(xmlUCSIsHebrew,_wrap_xmlUCSIsHebrew)",
        "(xmlIsID,_wrap_xmlIsID)",
        "(xmlCatalogResolveSystem,_wrap_xmlCatalogResolveSystem)",
        "(xmlExpFreeCtxt,_wrap_xmlExpFreeCtxt)",
        "(xmlBufContent,_wrap_xmlBufContent)",
        "(xmlCatalogGetPublic,_wrap_xmlCatalogGetPublic)",
        "(xmlUTF8Strndup,_wrap_xmlUTF8Strndup)",
        "(xmlParserInputRead,_wrap_xmlParserInputRead)",
        "(_xmlCharEncodingHandler,_wrap_new__xmlCharEncodingHandler)",
        "(xmlSchemaGetValidErrors,_wrap_xmlSchemaGetValidErrors)",
        "(xmlStrcasecmp,_wrap_xmlStrcasecmp)",
        "(htmlReadFd,_wrap_htmlReadFd)",
        "(xmlXPtrWrapLocationSet,_wrap_xmlXPtrWrapLocationSet)",
        "(xmlHashQLookup2,_wrap_xmlHashQLookup2)",
        "(xmlParseEnumerationType,_wrap_xmlParseEnumerationType)",
        "(xmlSetBufferAllocationScheme,_wrap_xmlSetBufferAllocationScheme)",
        "(xmlListPushBack,_wrap_xmlListPushBack)",
        "(xmlSchemaValidateFacet,_wrap_xmlSchemaValidateFacet)",
        "(xmlXPathNextFollowingSibling,_wrap_xmlXPathNextFollowingSibling)",
        "(xmlXPathAddValues,_wrap_xmlXPathAddValues)",
        "(xmlExpNewOr,_wrap_xmlExpNewOr)",
        "(xmlUCSIsDevanagari,_wrap_xmlUCSIsDevanagari)",
        "(xmlParseElementChildrenContentDecl,_wrap_xmlParseElementChildrenContentDecl)",
        "(xmlUCSIsKangxiRadicals,_wrap_xmlUCSIsKangxiRadicals)",
        "(_xmlNs,_wrap_new__xmlNs)",
        "(__xmlGenericError,_wrap___xmlGenericError)",
        "(xmlXPathNodeTrailing,_wrap_xmlXPathNodeTrailing)",
        "(xmlParseMemory,_wrap_xmlParseMemory)",
        "(xmlUCSIsUgaritic,_wrap_xmlUCSIsUgaritic)",
        "(xmlFreeProp,_wrap_xmlFreeProp)",
        "(xmlSAX2GetPublicId,_wrap_xmlSAX2GetPublicId)",
        "(xmlXPtrFreeLocationSet,_wrap_xmlXPtrFreeLocationSet)",
        "(_xmlParserInput,_wrap_new__xmlParserInput)",
        "(xmlSetupParserForBuffer,_wrap_xmlSetupParserForBuffer)",
        "(xmlSaveTree,_wrap_xmlSaveTree)",
        "(xmlHashScanFull,_wrap_xmlHashScanFull)",
        "(xmlXPathPopNodeSet,_wrap_xmlXPathPopNodeSet)",
        "(xmlSchemaSetValidStructuredErrors,_wrap_xmlSchemaSetValidStructuredErrors)",
        "(htmlDocDump,_wrap_htmlDocDump)",
        "(xmlNewPI,_wrap_xmlNewPI)",
        "(xmlUCSIsSupplementalMathematicalOperators,_wrap_xmlUCSIsSupplementalMathematicalOperators)",
        "(xmlXPathNodeSetRemove,_wrap_xmlXPathNodeSetRemove)",
        "(isolat1ToUTF8,_wrap_isolat1ToUTF8)",
        "(xmlNewInputStream,_wrap_xmlNewInputStream)",
        "(xmlDictSize,_wrap_xmlDictSize)",
        "(xmlACatalogRemove,_wrap_xmlACatalogRemove)",
        "(xmlDocCopyNode,_wrap_xmlDocCopyNode)",
        "(xmlXPathRegisterNs,_wrap_xmlXPathRegisterNs)",
        "(xmlCopyCharMultiByte,_wrap_xmlCopyCharMultiByte)",
        "(xmlValidateDocumentFinal,_wrap_xmlValidateDocumentFinal)",
        "(xmlCleanupEncodingAliases,_wrap_xmlCleanupEncodingAliases)",
        "(xmlUCSIsSupplementalArrowsA,_wrap_xmlUCSIsSupplementalArrowsA)",
        "(notationDecl,_wrap_notationDecl)",
        "(xmlRelaxNGValidatePushCData,_wrap_xmlRelaxNGValidatePushCData)",
        "(xmlUCSIsArabic,_wrap_xmlUCSIsArabic)",
        "(xmlUCSIsPrivateUseArea,_wrap_xmlUCSIsPrivateUseArea)",
        "(xmlXPtrNewRangeNodeObject,_wrap_xmlXPtrNewRangeNodeObject)",
        "(xmlXPathNextChild,_wrap_xmlXPathNextChild)",
        "(xmlParserInputBufferPush,_wrap_xmlParserInputBufferPush)",
        "(internalSubset,_wrap_internalSubset)",
        "(xmlXPathCeilingFunction,_wrap_xmlXPathCeilingFunction)",
        "(xmlDelEncodingAlias,_wrap_xmlDelEncodingAlias)",
        "(xmlUCSIsCatSk,_wrap_xmlUCSIsCatSk)",
        "(xmlDocSetRootElement,_wrap_xmlDocSetRootElement)",
        "(xmlCurrentChar,_wrap_xmlCurrentChar)",
        "(xmlSchemaIsValid,_wrap_xmlSchemaIsValid)",
        "(xmlCatalogGetSystem,_wrap_xmlCatalogGetSystem)",
        "(xmlParseURIRaw,_wrap_xmlParseURIRaw)",
        "(xmlRMutexLock,_wrap_xmlRMutexLock)",
        "(xmlXPathContainsFunction,_wrap_xmlXPathContainsFunction)",
        "(xmlParseExtParsedEnt,_wrap_xmlParseExtParsedEnt)",
        "(_xmlOutputBuffer,_wrap_new__xmlOutputBuffer)",
        "(_xmlChLRange,_wrap_new__xmlChLRange)",
        "(xmlUCSIsHangulJamo,_wrap_xmlUCSIsHangulJamo)",
        "(_xmlSchemaTypeLink,_wrap_new__xmlSchemaTypeLink)",
        "(xmlRegisterInputCallbacks,_wrap_xmlRegisterInputCallbacks)",
        "(xmlResetError,_wrap_xmlResetError)",
        "(xmlFindCharEncodingHandler,_wrap_xmlFindCharEncodingHandler)",
        "(xmlSchemaValueGetNext,_wrap_xmlSchemaValueGetNext)",
        "(xmlNewDocText,_wrap_xmlNewDocText)",
        "(xmlSAXParseDTD,_wrap_xmlSAXParseDTD)",
        "(xmlXPathStringFunction,_wrap_xmlXPathStringFunction)",
        "(xmlCleanupParser,_wrap_xmlCleanupParser)",
        "(xmlXPathNextAncestorOrSelf,_wrap_xmlXPathNextAncestorOrSelf)",
        "(xmlRelaxNGNewMemParserCtxt,_wrap_xmlRelaxNGNewMemParserCtxt)",
        "(xmlSetStructuredErrorFunc,_wrap_xmlSetStructuredErrorFunc)",
        "(_xmlEnumeration,_wrap_new__xmlEnumeration)",
        "(xmlSchemaNewQNameValue,_wrap_xmlSchemaNewQNameValue)",
        "(xmlSaveFormatFile,_wrap_xmlSaveFormatFile)",
        "(xmlRegisterCharEncodingHandler,_wrap_xmlRegisterCharEncodingHandler)",
        "(xmlUCSIsHangulCompatibilityJamo,_wrap_xmlUCSIsHangulCompatibilityJamo)",
        "(xmlSkipBlankChars,_wrap_xmlSkipBlankChars)",
        "(xmlCtxtGetLastError,_wrap_xmlCtxtGetLastError)",
        "(xmlNewText,_wrap_xmlNewText)",
        "(xmlUCSIsCatMc,_wrap_xmlUCSIsCatMc)",
        "(xmlSetCompressMode,_wrap_xmlSetCompressMode)",
        "(xmlBufferWriteCHAR,_wrap_xmlBufferWriteCHAR)",
        "(htmlParseCharRef,_wrap_htmlParseCharRef)",
        "(xmlSaveSetAttrEscape,_wrap_xmlSaveSetAttrEscape)",
        "(xmlSAX2Comment,_wrap_xmlSAX2Comment)",
        "(xmlGetBufferAllocationScheme,_wrap_xmlGetBufferAllocationScheme)",
        "(xmlBufNodeDump,_wrap_xmlBufNodeDump)",
        "(xmlGetLineNo,_wrap_xmlGetLineNo)",
        "(xmlOutputBufferCreateBuffer,_wrap_xmlOutputBufferCreateBuffer)",
        "(xmlUCSIsBraillePatterns,_wrap_xmlUCSIsBraillePatterns)",
        "(_xmlSchemaNotation,_wrap_new__xmlSchemaNotation)",
        "(htmlCtxtReadIO,_wrap_htmlCtxtReadIO)",
        "(xmlUCSIsIPAExtensions,_wrap_xmlUCSIsIPAExtensions)",
        "(xmlUCSIsOpticalCharacterRecognition,_wrap_xmlUCSIsOpticalCharacterRecognition)",
        "(xmlAddNotationDecl,_wrap_xmlAddNotationDecl)",
        "(xmlGetLastChild,_wrap_xmlGetLastChild)",
        "(xmlHasFeature,_wrap_xmlHasFeature)",
        "(xmlXPathHasSameNodes,_wrap_xmlXPathHasSameNodes)",
        "(xmlParseEntityRef,_wrap_xmlParseEntityRef)",
        "(xmlUCSIsCatZl,_wrap_xmlUCSIsCatZl)",
        "(htmlIsScriptAttribute,_wrap_htmlIsScriptAttribute)",
        "(xmlParserError,_wrap_xmlParserError)",
        "(xmlHashCreate,_wrap_xmlHashCreate)",
        "(__xmlSaveNoEmptyTags,_wrap___xmlSaveNoEmptyTags)",
        "(xmlParsePI,_wrap_xmlParsePI)",
        "(xmlCreateDocParserCtxt,_wrap_xmlCreateDocParserCtxt)",
        "(xmlParseEntityDecl,_wrap_xmlParseEntityDecl)",
        "(xmlSchemaNewParserCtxt,_wrap_xmlSchemaNewParserCtxt)",
        "(xmlUCSIsLimbu,_wrap_xmlUCSIsLimbu)",
        "(xmlUCSIsKhmerSymbols,_wrap_xmlUCSIsKhmerSymbols)",
        "(xmlAutomataNewCounterTrans,_wrap_xmlAutomataNewCounterTrans)",
        "(xmlParseURIReference,_wrap_xmlParseURIReference)",
        "(xmlFreeDtd,_wrap_xmlFreeDtd)",
        "(xmlOutputBufferWriteString,_wrap_xmlOutputBufferWriteString)",
        "(xmlSchemaSetValidOptions,_wrap_xmlSchemaSetValidOptions)",
        "(xmlValidateNamesValue,_wrap_xmlValidateNamesValue)",
        "(xmlThrDefGetWarningsDefaultValue,_wrap_xmlThrDefGetWarningsDefaultValue)",
        "(xmlXPtrBuildNodeList,_wrap_xmlXPtrBuildNodeList)",
        "(xmlRelaxNGSetValidErrors,_wrap_xmlRelaxNGSetValidErrors)",
        "(xmlStrncasecmp,_wrap_xmlStrncasecmp)",
        "(inithtmlDefaultSAXHandler,_wrap_inithtmlDefaultSAXHandler)",
        "(xmlThrDefLineNumbersDefaultValue,_wrap_xmlThrDefLineNumbersDefaultValue)",
        "(xmlParseExternalID,_wrap_xmlParseExternalID)",
        "(xmlUCSIsCatPo,_wrap_xmlUCSIsCatPo)",
        "(xmlCopyError,_wrap_xmlCopyError)",
        "(xmlGetRefs,_wrap_xmlGetRefs)",
        "(__xmlGetWarningsDefaultValue,_wrap___xmlGetWarningsDefaultValue)",
        "(xmlXPtrEval,_wrap_xmlXPtrEval)",
        "(xmlEncodeEntitiesReentrant,_wrap_xmlEncodeEntitiesReentrant)",
        "(xmlUCSIsKatakana,_wrap_xmlUCSIsKatakana)",
        "(xmlSchemaNewNOTATIONValue,_wrap_xmlSchemaNewNOTATIONValue)",
        "(_xmlID,_wrap_new__xmlID)",
        "(xmlMemDisplay,_wrap_xmlMemDisplay)",
        "(xmlAutomataNewOnceTrans,_wrap_xmlAutomataNewOnceTrans)",
        "(xmlSchemaFreeValidCtxt,_wrap_xmlSchemaFreeValidCtxt)",
        "(xmlUCSIsCatZ,_wrap_xmlUCSIsCatZ)",
        "(xmlXPathRegisterVariableLookup,_wrap_xmlXPathRegisterVariableLookup)",
        "(xmlParseDTD,_wrap_xmlParseDTD)",
        "(xmlListCreate,_wrap_xmlListCreate)",
        "(_xmlNotation,_wrap_new__xmlNotation)",
        "(xmlCatalogGetDefaults,_wrap_xmlCatalogGetDefaults)",
        "(xmlHandleEntity,_wrap_xmlHandleEntity)",
        "(xmlUCSIsCJKUnifiedIdeographs,_wrap_xmlUCSIsCJKUnifiedIdeographs)",
        "(xmlRelaxNGValidateFullElement,_wrap_xmlRelaxNGValidateFullElement)",
        "(xmlXPathCastBooleanToNumber,_wrap_xmlXPathCastBooleanToNumber)",
        "(xmlNodeGetLang,_wrap_xmlNodeGetLang)",
        "(xmlValidateDocument,_wrap_xmlValidateDocument)",
        "(xmlUCSIsArrows,_wrap_xmlUCSIsArrows)",
        "(xmlFreeEnumeration,_wrap_xmlFreeEnumeration)",
        "(xmlStreamPushNode,_wrap_xmlStreamPushNode)",
        "(xmlACatalogResolve,_wrap_xmlACatalogResolve)",
        "(xmlSnprintfElementContent,_wrap_xmlSnprintfElementContent)",
        "(xmlUCSIsPhoneticExtensions,_wrap_xmlUCSIsPhoneticExtensions)",
        "(xmlCtxtReadDoc,_wrap_xmlCtxtReadDoc)",
        "(xmlSAX2StartDocument,_wrap_xmlSAX2StartDocument)",
        "(xmlElemDump,_wrap_xmlElemDump)",
        "(xmlResetLastError,_wrap_xmlResetLastError)",
        "(xmlSaveToIO,_wrap_xmlSaveToIO)",
        "(xmlSAXVersion,_wrap_xmlSAXVersion)",
        "(xmlValidGetPotentialChildren,_wrap_xmlValidGetPotentialChildren)",
        "(xmlStreamWantsAnyNode,_wrap_xmlStreamWantsAnyNode)",
        "(xmlSAXUserParseFile,_wrap_xmlSAXUserParseFile)",
        "(xmlUCSIsGreek,_wrap_xmlUCSIsGreek)",
        "(__xmlLastError,_wrap___xmlLastError)",
        "(xmlListFront,_wrap_xmlListFront)",
        "(xmlAddChildList,_wrap_xmlAddChildList)",
        "(xmlSchemaFreeValue,_wrap_xmlSchemaFreeValue)",
        "(xmlXPathSumFunction,_wrap_xmlXPathSumFunction)",
        "(initdocbDefaultSAXHandler,_wrap_initdocbDefaultSAXHandler)",
        "(xmlXPathFreeObject,_wrap_xmlXPathFreeObject)",
        "(xmlSchemaValidateSetLocator,_wrap_xmlSchemaValidateSetLocator)",
        "(xmlParsePITarget,_wrap_xmlParsePITarget)",
        "(xmlGetUTF8Char,_wrap_xmlGetUTF8Char)",
        "(xmlFreeStreamCtxt,_wrap_xmlFreeStreamCtxt)",
        "(xmlParseEnumeratedType,_wrap_xmlParseEnumeratedType)",
        "(xmlXPathTrailing,_wrap_xmlXPathTrailing)",
        "(xmlListSize,_wrap_xmlListSize)",
        "(xmlSAX2InitDocbDefaultSAXHandler,_wrap_xmlSAX2InitDocbDefaultSAXHandler)",
        "(xmlUCSIsDingbats,_wrap_xmlUCSIsDingbats)",
        "(xmlSchemaValueGetAsString,_wrap_xmlSchemaValueGetAsString)",
        "(xmlFreeNotationTable,_wrap_xmlFreeNotationTable)",
        "(xmlValidateDtd,_wrap_xmlValidateDtd)",
        "(inputPush,_wrap_inputPush)",
        "(xmlUCSIsCatM,_wrap_xmlUCSIsCatM)",
        "(xmlAutomataIsDeterminist,_wrap_xmlAutomataIsDeterminist)",
        "(xmlBufShrink,_wrap_xmlBufShrink)",
        "(xmlXPathNewCString,_wrap_xmlXPathNewCString)",
        "(xmlRelaxNGSetParserStructuredErrors,_wrap_xmlRelaxNGSetParserStructuredErrors)",
        "(xmlPrintURI,_wrap_xmlPrintURI)",
        "(xmlParseVersionNum,_wrap_xmlParseVersionNum)",
        "(_xmlSchemaElement,_wrap_new__xmlSchemaElement)",
        "(xmlSchemaSetParserErrors,_wrap_xmlSchemaSetParserErrors)",
        "(xmlSplitQName2,_wrap_xmlSplitQName2)",
        "(xmlParseChunk,_wrap_xmlParseChunk)",
        "(xmlNodeGetContent,_wrap_xmlNodeGetContent)",
        "(xmlUCSIsCatLt,_wrap_xmlUCSIsCatLt)",
        "(_xmlElementContent,_wrap_new__xmlElementContent)",
        "(xmlHashDefaultDeallocator,_wrap_xmlHashDefaultDeallocator)",
        "(xmlSetNs,_wrap_xmlSetNs)",
        "(xmlUCSIsTags,_wrap_xmlUCSIsTags)",
        "(xmlCopyAttributeTable,_wrap_xmlCopyAttributeTable)",
        "(setDebugEnable,_wrap_setDebugEnable)",
        "(xmlPushInput,_wrap_xmlPushInput)",
        "(xmlNewStringInputStream,_wrap_xmlNewStringInputStream)",
        "(xmlGetDtdNotationDesc,_wrap_xmlGetDtdNotationDesc)",
        "(xmlHashUpdateEntry,_wrap_xmlHashUpdateEntry)",
        "(xmlUCSIsCJKUnifiedIdeographsExtensionA,_wrap_xmlUCSIsCJKUnifiedIdeographsExtensionA)",
        "(xmlListClear,_wrap_xmlListClear)",
        "(setDocumentLocator,_wrap_setDocumentLocator)",
        "(xmlNodeGetBase,_wrap_xmlNodeGetBase)",
        "(xmlXPathContextSetCache,_wrap_xmlXPathContextSetCache)",
        "(xmlUCSIsTelugu,_wrap_xmlUCSIsTelugu)",
        "(xmlUCSIsBopomofoExtended,_wrap_xmlUCSIsBopomofoExtended)",
        "(xmlParseDocTypeDecl,_wrap_xmlParseDocTypeDecl)",
        "(xmlBufGetNodeContent,_wrap_xmlBufGetNodeContent)",
        "(xmlRegFreeRegexp,_wrap_xmlRegFreeRegexp)",
        "(xmlParseEndTag,_wrap_xmlParseEndTag)",
        "(xmlGetGlobalState,_wrap_xmlGetGlobalState)",
        "(xmlGetDtdEntity,_wrap_xmlGetDtdEntity)",
        "(xmlUCSIsSpecials,_wrap_xmlUCSIsSpecials)",
        "(xmlListRemoveLast,_wrap_xmlListRemoveLast)",
        "(xmlMemoryDump,_wrap_xmlMemoryDump)",
        "(xmlSchemaValidateFacetWhtsp,_wrap_xmlSchemaValidateFacetWhtsp)",
        "(xmlXPathFreeNodeSetList,_wrap_xmlXPathFreeNodeSetList)",
        "(xmlXPtrNewCollapsedRange,_wrap_xmlXPtrNewCollapsedRange)",
        "(xmlParseCharData,_wrap_xmlParseCharData)",
        "(xmlParserInputBufferCreateStatic,_wrap_xmlParserInputBufferCreateStatic)",
        "(xmlSchemaValidatePredefinedType,_wrap_xmlSchemaValidatePredefinedType)",
        "(_xlinkHandler,_wrap_new__xlinkHandler)",
        "(xmlGetLastError,_wrap_xmlGetLastError)",
        "(xmlValidateNotationUse,_wrap_xmlValidateNotationUse)",
        "(xmlNewMutex,_wrap_xmlNewMutex)",
        "(xmlAutomataGetInitState,_wrap_xmlAutomataGetInitState)",
        "(xmlSAX2InitDefaultSAXHandler,_wrap_xmlSAX2InitDefaultSAXHandler)",
        "(xmlParseExternalEntity,_wrap_xmlParseExternalEntity)",
        "(xmlDictReference,_wrap_xmlDictReference)",
        "(xmlReadFd,_wrap_xmlReadFd)",
        "(xmlNewProp,_wrap_xmlNewProp)",
        "(xmlAddChild,_wrap_xmlAddChild)",
        "(xmlUCSIsCJKUnifiedIdeographsExtensionB,_wrap_xmlUCSIsCJKUnifiedIdeographsExtensionB)",
        "(xmlReadDoc,_wrap_xmlReadDoc)",
        "(xmlNewDocElementContent,_wrap_xmlNewDocElementContent)",
        "(xmlThrDefDeregisterNodeDefault,_wrap_xmlThrDefDeregisterNodeDefault)",
        "(xmlOutputBufferFlush,_wrap_xmlOutputBufferFlush)",
        "(xmlRegisterOutputCallbacks,_wrap_xmlRegisterOutputCallbacks)",
        "(xmlXPathNotFunction,_wrap_xmlXPathNotFunction)",
        "(xmlFreeInputStream,_wrap_xmlFreeInputStream)",
        "(_xmlSAXHandler,_wrap_new__xmlSAXHandler)",
        "(xmlSAX2GetEntity,_wrap_xmlSAX2GetEntity)",
        "(xmlSAXParseMemoryWithData,_wrap_xmlSAXParseMemoryWithData)",
        "(xmlAddID,_wrap_xmlAddID)",
        "(xmlGetNsProp,_wrap_xmlGetNsProp)",
        "(xmlParseEntity,_wrap_xmlParseEntity)",
        "(xmlUCSIsOriya,_wrap_xmlUCSIsOriya)",
        "(xmlStopParser,_wrap_xmlStopParser)",
        "(xmlAddRef,_wrap_xmlAddRef)",
        "(xmlCtxtResetLastError,_wrap_xmlCtxtResetLastError)",
        "(xmlReallocLoc,_wrap_xmlReallocLoc)",
        "(xmlXPtrNewRangeNodes,_wrap_xmlXPtrNewRangeNodes)",
        "(htmlCtxtUseOptions,_wrap_htmlCtxtUseOptions)",
        "(xmlDeregisterNodeDefault,_wrap_xmlDeregisterNodeDefault)",
        "(xmlCreateEntitiesTable,_wrap_xmlCreateEntitiesTable)",
        "(xmlListSearch,_wrap_xmlListSearch)",
        "(xmlMemMalloc,_wrap_xmlMemMalloc)",
        "(xmlXPathNsLookup,_wrap_xmlXPathNsLookup)",
        "(xmlSAX2GetLineNumber,_wrap_xmlSAX2GetLineNumber)",
        "(xmlHashAddEntry3,_wrap_xmlHashAddEntry3)",
        "(xmlInitMemory,_wrap_xmlInitMemory)",
        "(xmlRelaxNGValidatePushElement,_wrap_xmlRelaxNGValidatePushElement)",
        "(xmlNoNetExternalEntityLoader,_wrap_xmlNoNetExternalEntityLoader)",
        "(xmlUCSIsCurrencySymbols,_wrap_xmlUCSIsCurrencySymbols)",
        "(xmlCreateIntSubset,_wrap_xmlCreateIntSubset)",
        "(xmlXPathBooleanFunction,_wrap_xmlXPathBooleanFunction)",
        "(xmlSubstituteEntitiesDefault,_wrap_xmlSubstituteEntitiesDefault)",
        "(__xmlPedanticParserDefaultValue,_wrap___xmlPedanticParserDefaultValue)",
        "(_xmlDOMWrapCtxt,_wrap_new__xmlDOMWrapCtxt)",
        "(xmlXPathIsNaN,_wrap_xmlXPathIsNaN)",
        "(xmlXPathFreeNodeSet,_wrap_xmlXPathFreeNodeSet)",
        "(xmlUnlockLibrary,_wrap_xmlUnlockLibrary)",
        "(xmlNodeSetContentLen,_wrap_xmlNodeSetContentLen)",
        "(xmlXPathStringLengthFunction,_wrap_xmlXPathStringLengthFunction)",
        "(xmlSchemaFree,_wrap_xmlSchemaFree)",
        "(xmlCheckHTTPInput,_wrap_xmlCheckHTTPInput)",
        "(__xmlDefaultSAXLocator,_wrap___xmlDefaultSAXLocator)",
        "(xmlDocCopyNodeList,_wrap_xmlDocCopyNodeList)",
        "(xmlNewComment,_wrap_xmlNewComment)",
        "(xmlAutomataNewCountTrans,_wrap_xmlAutomataNewCountTrans)",
        "(xmlUCSIsMiscellaneousMathematicalSymbolsA,_wrap_xmlUCSIsMiscellaneousMathematicalSymbolsA)",
        "(_xmlSchemaAttribute,_wrap_new__xmlSchemaAttribute)",
        "(xmlXPathWrapExternal,_wrap_xmlXPathWrapExternal)",
        "(_xmlChRangeGroup,_wrap_new__xmlChRangeGroup)",
        "(xmlFreeParserInputBuffer,_wrap_xmlFreeParserInputBuffer)",
        "(xmlXPathCastNodeToString,_wrap_xmlXPathCastNodeToString)",
        "(xmlFreeMutex,_wrap_xmlFreeMutex)",
        "(xmlUCSIsTibetan,_wrap_xmlUCSIsTibetan)",
        "(xmlParserHandlePEReference,_wrap_xmlParserHandlePEReference)",
        "(xmlParseFile,_wrap_xmlParseFile)",
        "(xmlBufferLength,_wrap_xmlBufferLength)",
        "(xmlXPathFunctionLookup,_wrap_xmlXPathFunctionLookup)",
        "(xmlIsBlankNode,_wrap_xmlIsBlankNode)",
        "(xmlValidateElementDecl,_wrap_xmlValidateElementDecl)",
        "(htmlHandleOmittedElem,_wrap_htmlHandleOmittedElem)",
        "(xmlParserWarning,_wrap_xmlParserWarning)",
        "(xmlCreateEntityParserCtxt,_wrap_xmlCreateEntityParserCtxt)",
        "(xmlSchemaValidateOneElement,_wrap_xmlSchemaValidateOneElement)",
        "(xmlParseAttribute,_wrap_xmlParseAttribute)",
        "(xmlXPtrNewRangePoints,_wrap_xmlXPtrNewRangePoints)",
        "(xmlParseEncName,_wrap_xmlParseEncName)",
        "(__xmlStructuredErrorContext,_wrap___xmlStructuredErrorContext)",
        "(xmlXPtrLocationSetMerge,_wrap_xmlXPtrLocationSetMerge)",
        "(_xmlAttribute,_wrap_new__xmlAttribute)",
        "(xmlSchemaNewFacet,_wrap_xmlSchemaNewFacet)",
        "(xmlUCSIsCyrillic,_wrap_xmlUCSIsCyrillic)",
        "(xmlCatalogIsEmpty,_wrap_xmlCatalogIsEmpty)",
        "(xmlCtxtReadFile,_wrap_xmlCtxtReadFile)",
        "(xmlAutomataNewCounter,_wrap_xmlAutomataNewCounter)",
        "(xmlXPathFreeParserContext,_wrap_xmlXPathFreeParserContext)",
        "(htmlParseElement,_wrap_htmlParseElement)",
        "(xmlThrDefSetGenericErrorFunc,_wrap_xmlThrDefSetGenericErrorFunc)",
        "(xmlUCSIsBlockElements,_wrap_xmlUCSIsBlockElements)",
        "(xmlGetExternalEntityLoader,_wrap_xmlGetExternalEntityLoader)",
        "(__docbDefaultSAXHandler,_wrap___docbDefaultSAXHandler)",
        "(htmlElementStatusHere,_wrap_htmlElementStatusHere)",
        "(xmlExpNewAtom,_wrap_xmlExpNewAtom)",
        "(xmlBufferContent,_wrap_xmlBufferContent)",
        "(xmlHashQLookup3,_wrap_xmlHashQLookup3)",
        "(xmlXPathNextAncestor,_wrap_xmlXPathNextAncestor)",
        "(xmlSAXParseEntity,_wrap_xmlSAXParseEntity)",
        "(xmlParseDefaultDecl,_wrap_xmlParseDefaultDecl)",
        "(xmlUCSIsThaana,_wrap_xmlUCSIsThaana)",
        "(xmlUCSIsMiscellaneousMathematicalSymbolsB,_wrap_xmlUCSIsMiscellaneousMathematicalSymbolsB)",
        "(xmlExpIsNillable,_wrap_xmlExpIsNillable)",
        "(xmlSchemaGetCanonValue,_wrap_xmlSchemaGetCanonValue)",
        "(namespaceDecl,_wrap_namespaceDecl)",
        "(xmlUCSIsCatPd,_wrap_xmlUCSIsCatPd)",
        "(xmlMemGet,_wrap_xmlMemGet)",
        "(xmlSplitQName3,_wrap_xmlSplitQName3)",
        "(xmlThrDefTreeIndentString,_wrap_xmlThrDefTreeIndentString)",
        "(_xmlParserNodeInfoSeq,_wrap_new__xmlParserNodeInfoSeq)",
        "(xmlACatalogAdd,_wrap_xmlACatalogAdd)",
        "(xmlValidateNameValue,_wrap_xmlValidateNameValue)",
        "(xmlXPathObjectCopy,_wrap_xmlXPathObjectCopy)",
        "(xmlSchemaCollapseString,_wrap_xmlSchemaCollapseString)",
        "(xmlXPathFloorFunction,_wrap_xmlXPathFloorFunction)",
        "(getSystemId,_wrap_getSystemId)",
        "(_xmlSAXLocator,_wrap_new__xmlSAXLocator)",
        "(xmlCheckVersion,_wrap_xmlCheckVersion)",
        "(xmlCatalogLocalResolveURI,_wrap_xmlCatalogLocalResolveURI)",
        "(htmlNodeDumpFormatOutput,_wrap_htmlNodeDumpFormatOutput)",
        "(htmlDocContentDumpOutput,_wrap_htmlDocContentDumpOutput)",
        "(xmlCleanupThreads,_wrap_xmlCleanupThreads)",
        "(xmlNodeSetSpacePreserve,_wrap_xmlNodeSetSpacePreserve)",
        "(xmlNewCDataBlock,_wrap_xmlNewCDataBlock)",
        "(xmlUCSIsCombiningDiacriticalMarksforSymbols,_wrap_xmlUCSIsCombiningDiacriticalMarksforSymbols)",
        "(xmlGetDtdElementDesc,_wrap_xmlGetDtdElementDesc)",
        "(xmlGcMemGet,_wrap_xmlGcMemGet)",
        "(xmlListEmpty,_wrap_xmlListEmpty)",
        "(xmlUCSIsSupplementalArrowsB,_wrap_xmlUCSIsSupplementalArrowsB)",
        "(xmlUCSIsCatC,_wrap_xmlUCSIsCatC)",
        "(xmlXPathEvalExpression,_wrap_xmlXPathEvalExpression)",
        "(xmlSchemaValidateStream,_wrap_xmlSchemaValidateStream)",
        "(xmlFileRead,_wrap_xmlFileRead)",
        "(xmlOutputBufferCreateFile,_wrap_xmlOutputBufferCreateFile)",
        "(xmlFreeNodeList,_wrap_xmlFreeNodeList)",
        "(xmlUCSIsOgham,_wrap_xmlUCSIsOgham)",
        "(htmlReadDoc,_wrap_htmlReadDoc)",
        "(xmlNormalizeWindowsPath,_wrap_xmlNormalizeWindowsPath)",
        "(withGenericErrors,withGenericErrors)",
        "(xmlSchemaValidCtxtGetParserCtxt,_wrap_xmlSchemaValidCtxtGetParserCtxt)",
        "(xmlUCSIsMathematicalAlphanumericSymbols,_wrap_xmlUCSIsMathematicalAlphanumericSymbols)",
        "(xmlGetFeature,_wrap_xmlGetFeature)",
        "(xmlXPathNotEqualValues,_wrap_xmlXPathNotEqualValues)",
        "(xmlListRemoveFirst,_wrap_xmlListRemoveFirst)",
        "(xmlCreateFileParserCtxt,_wrap_xmlCreateFileParserCtxt)",
        "(xmlLockLibrary,_wrap_xmlLockLibrary)",
        "(xmlDictCreate,_wrap_xmlDictCreate)",
        "(xmlRecoverDoc,_wrap_xmlRecoverDoc)",
        "(xmlIOParseDTD,_wrap_xmlIOParseDTD)",
        "(xmlParseBalancedChunkMemoryRecover,_wrap_xmlParseBalancedChunkMemoryRecover)",
        "(xmlOutputBufferGetSize,_wrap_xmlOutputBufferGetSize)",
        "(namePush,_wrap_namePush)",
        "(xmlEncodeSpecialChars,_wrap_xmlEncodeSpecialChars)",
        "(inputPop,_wrap_inputPop)",
        "(xmlIsChar,_wrap_xmlIsChar)",
        "(xmlSAX2SetDocumentLocator,_wrap_xmlSAX2SetDocumentLocator)",
        "(xmlAddDtdEntity,_wrap_xmlAddDtdEntity)",
        "(xmlSchemaCleanupTypes,_wrap_xmlSchemaCleanupTypes)",
        "(__xmlLoadExtDtdDefaultValue,_wrap___xmlLoadExtDtdDefaultValue)",
        "(xmlCatalogCleanup,_wrap_xmlCatalogCleanup)",
        "(xmlSchemaValidateLengthFacet,_wrap_xmlSchemaValidateLengthFacet)",
        "(xmlInitCharEncodingHandlers,_wrap_xmlInitCharEncodingHandlers)",
        "(xmlDOMWrapRemoveNode,_wrap_xmlDOMWrapRemoveNode)",
        "(xmlUCSIsCatNd,_wrap_xmlUCSIsCatNd)",
        "(xmlXPathNewBoolean,_wrap_xmlXPathNewBoolean)",
        "(xmlInitThreads,_wrap_xmlInitThreads)",
        "(xmlNewAutomata,_wrap_xmlNewAutomata)",
        "(htmlSaveFileEnc,_wrap_htmlSaveFileEnc)",
        "(_xmlError,_wrap_new__xmlError)",
        "(xmlCatalogResolveURI,_wrap_xmlCatalogResolveURI)",
        "(xmlUCSIsAlphabeticPresentationForms,_wrap_xmlUCSIsAlphabeticPresentationForms)",
        "(xmlSaveFormatFileTo,_wrap_xmlSaveFormatFileTo)",
        "(xmlUCSIsGeorgian,_wrap_xmlUCSIsGeorgian)",
        "(_xmlXPathAxis,_wrap_new__xmlXPathAxis)",
        "(xmlMemoryStrdup,_wrap_xmlMemoryStrdup)",
        "(xmlValidatePushElement,_wrap_xmlValidatePushElement)",
        "(xmlBufferWriteChar,_wrap_xmlBufferWriteChar)",
        "(xmlParseExternalSubset,_wrap_xmlParseExternalSubset)",
        "(xmlRegNewExecCtxt,_wrap_xmlRegNewExecCtxt)",
        "(xmlACatalogResolvePublic,_wrap_xmlACatalogResolvePublic)",
        "(xmlUCSIsSmallFormVariants,_wrap_xmlUCSIsSmallFormVariants)",
        "(xmlUCSIsLao,_wrap_xmlUCSIsLao)",
        "(xmlCatalogSetDefaultPrefer,_wrap_xmlCatalogSetDefaultPrefer)",
        "(xmlParseNamespace,_wrap_xmlParseNamespace)",
        "(xmlXPathVariableLookupNS,_wrap_xmlXPathVariableLookupNS)",
        "(xmlSchemaNewStringValue,_wrap_xmlSchemaNewStringValue)",
        "(xmlSchemaCheckFacet,_wrap_xmlSchemaCheckFacet)",
        "(xmlThrDefParserDebugEntities,_wrap_xmlThrDefParserDebugEntities)",
        "(getWrapCount,_wrap_getWrapCount)",
        "(xmlUCSIsBoxDrawing,_wrap_xmlUCSIsBoxDrawing)",
        "(xmlUCSIsCombiningMarksforSymbols,_wrap_xmlUCSIsCombiningMarksforSymbols)",
        "(xmlXPathRegisteredNsCleanup,_wrap_xmlXPathRegisteredNsCleanup)",
        "(xmlXPathEvalExpr,_wrap_xmlXPathEvalExpr)",
        "(xmlParseCharEncoding,_wrap_xmlParseCharEncoding)",
        "(xmlUCSIsArabicPresentationFormsA,_wrap_xmlUCSIsArabicPresentationFormsA)",
        "(_htmlEntityDesc,_wrap_new__htmlEntityDesc)",
        "(xmlNewDocTextLen,_wrap_xmlNewDocTextLen)",
        "(xmlSetExternalEntityLoader,_wrap_xmlSetExternalEntityLoader)",
        "(xmlLoadCatalog,_wrap_xmlLoadCatalog)",
        "(xmlThrDefRegisterNodeDefault,_wrap_xmlThrDefRegisterNodeDefault)",
        "(xmlXPathNodeTrailingSorted,_wrap_xmlXPathNodeTrailingSorted)",
        "(xmlUCSIsByzantineMusicalSymbols,_wrap_xmlUCSIsByzantineMusicalSymbols)",
        "(xmlDOMWrapFreeCtxt,_wrap_xmlDOMWrapFreeCtxt)",
        "(htmlParseDoc,_wrap_htmlParseDoc)",
        "(xmlValidateAttributeDecl,_wrap_xmlValidateAttributeDecl)",
        "(xmlRemoveID,_wrap_xmlRemoveID)",
        "(xmlXPathNodeSetMerge,_wrap_xmlXPathNodeSetMerge)",
        "(xmlListPopBack,_wrap_xmlListPopBack)",
        "(xlinkGetDefaultDetect,_wrap_xlinkGetDefaultDetect)",
        "(xmlXPathEval,_wrap_xmlXPathEval)",
        "(xmlSchemaDump,_wrap_xmlSchemaDump)",
        "(xmlBufferResize,_wrap_xmlBufferResize)",
        "(xmlFreeRefTable,_wrap_xmlFreeRefTable)",
        "(xmlXPathWrapString,_wrap_xmlXPathWrapString)",
        "(xmlRelaxNGFree,_wrap_xmlRelaxNGFree)",
        "(xmlUCSIsSinhala,_wrap_xmlUCSIsSinhala)",
        "(xmlXPathRoundFunction,_wrap_xmlXPathRoundFunction)",
        "(xmlXPathCompiledEvalToBoolean,_wrap_xmlXPathCompiledEvalToBoolean)",
        "(xmlNewReference,_wrap_xmlNewReference)",
        "(xmlDumpElementDecl,_wrap_xmlDumpElementDecl)",
        "(initxmlDefaultSAXHandler,_wrap_initxmlDefaultSAXHandler)",
        "(xmlGetDtdAttrDesc,_wrap_xmlGetDtdAttrDesc)",
        "(xmlFreePattern,_wrap_xmlFreePattern)",
        "(xmlFreeParserCtxt,_wrap_xmlFreeParserCtxt)",
        "(xmlXPathCastNodeSetToString,_wrap_xmlXPathCastNodeSetToString)",
        "(xmlSchemaFreeParserCtxt,_wrap_xmlSchemaFreeParserCtxt)",
        "(xmlUCSIsHalfwidthandFullwidthForms,_wrap_xmlUCSIsHalfwidthandFullwidthForms)",
        "(_xmlElement,_wrap_new__xmlElement)",
        "(xmlBufferSetAllocationScheme,_wrap_xmlBufferSetAllocationScheme)",
        "(xmlRelaxNGDump,_wrap_xmlRelaxNGDump)",
        "(xmlFreeNode,_wrap_xmlFreeNode)",
        "(xmlParseVersionInfo,_wrap_xmlParseVersionInfo)",
        "(xmlValidGetValidElements,_wrap_xmlValidGetValidElements)",
        "(docbDefaultSAXHandlerInit,_wrap_docbDefaultSAXHandlerInit)",
        "(xmlCharEncOutFunc,_wrap_xmlCharEncOutFunc)",
        "(xmlAddSibling,_wrap_xmlAddSibling)",
        "(comment,_wrap_comment)",
        "(_xmlChSRange,_wrap_new__xmlChSRange)",
        "(xmlUCSIsMiscellaneousSymbolsandArrows,_wrap_xmlUCSIsMiscellaneousSymbolsandArrows)",
        "(xmlMallocAtomicLoc,_wrap_xmlMallocAtomicLoc)",
        "(_xmlURI,_wrap_new__xmlURI)",
        "(xmlXPathNodeLeading,_wrap_xmlXPathNodeLeading)",
        "(xmlNodeDumpOutput,_wrap_xmlNodeDumpOutput)",
        "(xmlParserInputShrink,_wrap_xmlParserInputShrink)",
        "(xmlUCSIsCat,_wrap_xmlUCSIsCat)",
        "(xmlRegexpExec,_wrap_xmlRegexpExec)",
        "(xlinkGetDefaultHandler,_wrap_xlinkGetDefaultHandler)",
        "(xmlSaveFormatFileEnc,_wrap_xmlSaveFormatFileEnc)",
        "(xmlUCSIsCatN,_wrap_xmlUCSIsCatN)",
        "(htmlNodeDumpFileFormat,_wrap_htmlNodeDumpFileFormat)",
        "(xmlSAX2EndDocument,_wrap_xmlSAX2EndDocument)",
        "(xmlOutputBufferWriteEscape,_wrap_xmlOutputBufferWriteEscape)",
        "(xmlXPtrLocationSetDel,_wrap_xmlXPtrLocationSetDel)",
        "(xmlXPathNextPreceding,_wrap_xmlXPathNextPreceding)",
        "(xmlBuildQName,_wrap_xmlBuildQName)",
        "(xmlUCSIsGurmukhi,_wrap_xmlUCSIsGurmukhi)",
        "(xmlModuleOpen,_wrap_xmlModuleOpen)",
        "(__xmlOutputBufferCreateFilenameValue,_wrap___xmlOutputBufferCreateFilenameValue)",
        "(xmlXPathNodeSetAddNs,_wrap_xmlXPathNodeSetAddNs)",
        "(xmlValidateName,_wrap_xmlValidateName)",
        "(xmlMemSetup,_wrap_xmlMemSetup)",
        "(xmlPatterncompile,_wrap_xmlPatterncompile)",
        "(xmlLoadCatalogs,_wrap_xmlLoadCatalogs)",
        "(xmlUCSIsCatZp,_wrap_xmlUCSIsCatZp)",
        "(xmlXPathCmpNodes,_wrap_xmlXPathCmpNodes)",
        "(setDebugDisable,_wrap_setDebugDisable)",
        "(xmlListEnd,_wrap_xmlListEnd)",
        "(xmlBufferCreateStatic,_wrap_xmlBufferCreateStatic)",
        "(htmlNodeDumpFile,_wrap_htmlNodeDumpFile)",
        "(xmlCharEncCloseFunc,_wrap_xmlCharEncCloseFunc)",
        "(xlinkSetDefaultHandler,_wrap_xlinkSetDefaultHandler)",
        "(xmlXPathSetContextNode,_wrap_xmlXPathSetContextNode)",
        "(xmlValidateNCName,_wrap_xmlValidateNCName)",
        "(xmlNewParserCtxt,_wrap_xmlNewParserCtxt)",
        "(xmlParserInputBufferCreateFd,_wrap_xmlParserInputBufferCreateFd)",
        "(xmlExpRef,_wrap_xmlExpRef)",
        "(xmlFileClose,_wrap_xmlFileClose)",
        "(xmlUCSIsSupplementaryPrivateUseAreaB,_wrap_xmlUCSIsSupplementaryPrivateUseAreaB)",
        "(xmlHashAddEntry,_wrap_xmlHashAddEntry)",
        "(xmlAddEncodingAlias,_wrap_xmlAddEncodingAlias)",
        "(xmlDocDump,_wrap_xmlDocDump)",
        "(xmlCleanupGlobals,_wrap_xmlCleanupGlobals)",
        "(xmlGetParameterEntity,_wrap_xmlGetParameterEntity)",
        "(xmlXPathMultValues,_wrap_xmlXPathMultValues)",
        "(xmlValidateQName,_wrap_xmlValidateQName)",
        "(xmlXPathRegisterFunc,_wrap_xmlXPathRegisterFunc)",
        "(xmlXPtrNewContext,_wrap_xmlXPtrNewContext)",
        "(xmlIsDigit,_wrap_xmlIsDigit)",
        "(xmlXPathDivValues,_wrap_xmlXPathDivValues)",
        "(xmlParserGetDirectory,_wrap_xmlParserGetDirectory)",
        "(xmlUCSIsYijingHexagramSymbols,_wrap_xmlUCSIsYijingHexagramSymbols)",
        "(xmlFreeElementTable,_wrap_xmlFreeElementTable)",
        "(xmlUCSIsLinearBIdeograms,_wrap_xmlUCSIsLinearBIdeograms)",
        "(xmlParseXMLDecl,_wrap_xmlParseXMLDecl)",
        "(xmlDictGetUsage,_wrap_xmlDictGetUsage)",
        "(xmlParseDoc,_wrap_xmlParseDoc)",
        "(_xmlEntity,_wrap_new__xmlEntity)",
        "(xmlCopyNodeList,_wrap_xmlCopyNodeList)",
        "(xmlKeepBlanksDefault,_wrap_xmlKeepBlanksDefault)",
        "(startElement,_wrap_startElement)",
        "(xmlGetEncodingAlias,_wrap_xmlGetEncodingAlias)",
        "(xmlAttrSerializeTxtContent,_wrap_xmlAttrSerializeTxtContent)",
        "(getCPtr,_wrap_getCPtr)",
        "(xmlListMerge,_wrap_xmlListMerge)",
        "(xmlRelaxNGDumpTree,_wrap_xmlRelaxNGDumpTree)",
        "(xmlGetDocCompressMode,_wrap_xmlGetDocCompressMode)",
        "(getNamespace,_wrap_getNamespace)",
        "(xmlURIUnescapeString,_wrap_xmlURIUnescapeString)",
        "(xmlACatalogDump,_wrap_xmlACatalogDump)",
        "(xmlUCSIsArabicPresentationFormsB,_wrap_xmlUCSIsArabicPresentationFormsB)",
        "(xmlUCSIsHanunoo,_wrap_xmlUCSIsHanunoo)",
        "(xmlAutomataNewTransition2,_wrap_xmlAutomataNewTransition2)",
        "(xmlSchemaSetValidErrors,_wrap_xmlSchemaSetValidErrors)",
        "(xmlFreeAttributeTable,_wrap_xmlFreeAttributeTable)",
        "(_xmlSchemaType,_wrap_new__xmlSchemaType)",
        "(xmlXPathCastNodeSetToNumber,_wrap_xmlXPathCastNodeSetToNumber)",
        "(xmlXPathCastToBoolean,_wrap_xmlXPathCastToBoolean)",
        "(xmlPathToURI,_wrap_xmlPathToURI)",
        "(xmlXPathRegisteredFuncsCleanup,_wrap_xmlXPathRegisteredFuncsCleanup)",
        "(xmlFreeRMutex,_wrap_xmlFreeRMutex)",
        "(xmlRelaxNGSetParserErrors,_wrap_xmlRelaxNGSetParserErrors)",
        "(xmlUCSIsBengali,_wrap_xmlUCSIsBengali)",
        "(getEntity,_wrap_getEntity)",
        "(isStandalone,_wrap_isStandalone)",
        "(xmlBufferAdd,_wrap_xmlBufferAdd)",
        "(xmlNewEntity,_wrap_xmlNewEntity)",
        "(xmlCopyChar,_wrap_xmlCopyChar)",
        "(xmlHashScan,_wrap_xmlHashScan)",
        "(htmlDocDumpMemoryFormat,_wrap_htmlDocDumpMemoryFormat)",
        "(xmlUCSIsMiscellaneousSymbols,_wrap_xmlUCSIsMiscellaneousSymbols)",
        "(_xmlXPathContext,_wrap_new__xmlXPathContext)",
        "(xmlXPathNextPrecedingSibling,_wrap_xmlXPathNextPrecedingSibling)",
        "(xmlAddAttributeDecl,_wrap_xmlAddAttributeDecl)",
        "(xmlFreeNsList,_wrap_xmlFreeNsList)",
        "(xmlCharStrndup,_wrap_xmlCharStrndup)",
        "(xmlXPatherror,_wrap_xmlXPatherror)",
        "(xmlXPathNextAttribute,_wrap_xmlXPathNextAttribute)",
        "(xmlXPathNewParserContext,_wrap_xmlXPathNewParserContext)",
        "(xmlNewInputFromFile,_wrap_xmlNewInputFromFile)",
        "(xmlBufferDump,_wrap_xmlBufferDump)",
        "(xmlAddPrevSibling,_wrap_xmlAddPrevSibling)",
        "(xmlByteConsumed,_wrap_xmlByteConsumed)",
        "(xmlSaveDoc,_wrap_xmlSaveDoc)",
        "(xmlMutexLock,_wrap_xmlMutexLock)",
        "(xmlValidatePushCData,_wrap_xmlValidatePushCData)",
        "(xmlUCSIsCatMe,_wrap_xmlUCSIsCatMe)",
        "(xmlUCSIsCatL,_wrap_xmlUCSIsCatL)",
        "(characters,_wrap_characters)",
        "(xmlStringLenDecodeEntities,_wrap_xmlStringLenDecodeEntities)",
        "(xmlXPathLangFunction,_wrap_xmlXPathLangFunction)",
        "(xmlLoadSGMLSuperCatalog,_wrap_xmlLoadSGMLSuperCatalog)",
        "(xmlUCSIsEthiopic,_wrap_xmlUCSIsEthiopic)",
        "(xmlSAX2CDataBlock,_wrap_xmlSAX2CDataBlock)",
        "(xmlGetProp,_wrap_xmlGetProp)",
        "(xmlThrDefLoadExtDtdDefaultValue,_wrap_xmlThrDefLoadExtDtdDefaultValue)",
        "(xmlParseTextDecl,_wrap_xmlParseTextDecl)",
        "(xmlExpGetLanguage,_wrap_xmlExpGetLanguage)",
        "(xmlUCSIsCatCo,_wrap_xmlUCSIsCatCo)",
        "(_xmlBuffer,_wrap_new__xmlBuffer)",
        "(xmlSprintfElementContent,_wrap_xmlSprintfElementContent)",
        "(xmlCharEncFirstLine,_wrap_xmlCharEncFirstLine)",
        "(xmlFileOpen,_wrap_xmlFileOpen)",
        "(xmlFreeDocElementContent,_wrap_xmlFreeDocElementContent)",
        "(_xmlSchemaWildcard,_wrap_new__xmlSchemaWildcard)",
        "(xmlDetectCharEncoding,_wrap_xmlDetectCharEncoding)",
        "(xmlSwitchInputEncoding,_wrap_xmlSwitchInputEncoding)"
      ],
      "Charon": [
        "(parseString,XmlSaxParser)",
        "(push,XmlSaxParser)",
        "(0,result)",
        "(fromBufferAsync,fromBufferAsync)",
        "(withStructuredErrors,withStructuredErrors)",
        "(withGenericErrors,withGenericErrors)",
        "(0,set)",
        "(1,set)",
        "(equals,_SWIGV8_wrap_equals)",
        "(getCPtr,_wrap_getCPtr)",
        "(this,ErrorFunc)"
      ]
    },
    "libxmljs2": {
      "Gasket": [
        "(nextSibling,NextSibling)",
        "(node,Node)",
        "(toString,BufferContent)",
        "(cdata,AddCData)",
        "(namespaces,Namespaces)",
        "(SaxParser,NewParser)",
        "(fromXml,FromXml)",
        "(startComment,StartComment)",
        "(nextElement,NextElement)",
        "(namespace,Namespace)",
        "(addChild,AddChild)",
        "(writeString,WriteString)",
        "(Comment,New)",
        "(getDtd,GetDtd)",
        "(type,type)",
        "(Element,New)",
        "(xmlNodeCount,XmlNodeCount)",
        "(attrs,Attrs)",
        "(remove,Remove)",
        "(clone,Clone)",
        "(addPrevSibling,AddPrevSibling)",
        "(href,Href)",
        "(find,Find)",
        "(text,Text)",
        "(Attribute,New)",
        "(parent,Parent)",
        "(startAttributeNS,StartAttributeNS)",
        "(xmlMemUsed,XmlMemUsed)",
        "(push,Push)",
        "(endComment,EndComment)",
        "(fromHtml,FromHtml)",
        "(rngValidate,RngValidate)",
        "(line,LineNumber)",
        "(ProcessingInstruction,New)",
        "(startElementNS,StartElementNS)",
        "(root,Root)",
        "(child,Child)",
        "(replace,Replace)",
        "(doc,Doc)",
        "(version,Version)",
        "(childNodes,ChildNodes)",
        "(parseString,ParseString)",
        "(prefix,Prefix)",
        "(Text,New)",
        "(Document,New)",
        "(prevElement,PrevElement)",
        "(endElement,EndElement)",
        "(endAttribute,EndAttribute)",
        "(path,Path)",
        "(startDocument,StartDocument)",
        "(TextWriter,NewTextWriter)",
        "(value,Value)",
        "(SaxPushParser,NewPushParser)",
        "(endCdata,EndCdata)",
        "(validate,Validate)",
        "(clear,BufferEmpty)",
        "(type,Type)",
        "(endDocument,EndDocument)",
        "(Namespace,New)",
        "(addNextSibling,AddNextSibling)",
        "(startCdata,StartCdata)",
        "(_setDtd,SetDtd)",
        "(encoding,Encoding)",
        "(name,Name)",
        "(toString,ToString)",
        "(schematronValidate,SchematronValidate)",
        "(outputMemory,OutputMemory)",
        "(prevSibling,PrevSibling)",
        "(_attr,Attr)"
      ],
      "Charon": [
        "(addChild,XmlElement)",
        "(cdata,XmlElement)",
        "(_attr,XmlElement)",
        "(attrs,XmlElement)",
        "(child,XmlElement)",
        "(childNodes,XmlElement)",
        "(find,XmlElement)",
        "(nextElement,XmlElement)",
        "(prevElement,XmlElement)",
        "(name,XmlElement)",
        "(path,XmlElement)",
        "(text,XmlElement)",
        "(addPrevSibling,XmlElement)",
        "(addNextSibling,XmlElement)",
        "(replace,XmlElement)",
        "(name,XmlProcessingInstruction)",
        "(text,XmlProcessingInstruction)",
        "(root,XmlDocument)",
        "(version,XmlDocument)",
        "(encoding,XmlDocument)",
        "(toString,XmlDocument)",
        "(validate,XmlDocument)",
        "(rngValidate,XmlDocument)",
        "(schematronValidate,XmlDocument)",
        "(_setDtd,XmlDocument)",
        "(getDtd,XmlDocument)",
        "(type,XmlDocument)",
        "(fromXml,XmlDocument)",
        "(fromHtml,XmlDocument)",
        "(parseString,XmlSaxParser)",
        "(push,XmlSaxParser)",
        "(doc,XmlNode)",
        "(parent,XmlNode)",
        "(namespace,XmlNode)",
        "(namespaces,XmlNode)",
        "(prevSibling,XmlNode)",
        "(nextSibling,XmlNode)",
        "(line,XmlNode)",
        "(type,XmlNode)",
        "(remove,XmlNode)",
        "(clone,XmlNode)",
        "(toString,XmlNode)",
        "(href,XmlNamespace)",
        "(prefix,XmlNamespace)",
        "(toString,XmlTextWriter)",
        "(outputMemory,XmlTextWriter)",
        "(clear,XmlTextWriter)",
        "(startDocument,XmlTextWriter)",
        "(endDocument,XmlTextWriter)",
        "(startElementNS,XmlTextWriter)",
        "(endElement,XmlTextWriter)",
        "(startAttributeNS,XmlTextWriter)",
        "(endAttribute,XmlTextWriter)",
        "(startCdata,XmlTextWriter)",
        "(endCdata,XmlTextWriter)",
        "(startComment,XmlTextWriter)",
        "(endComment,XmlTextWriter)",
        "(writeString,XmlTextWriter)",
        "(text,XmlComment)",
        "(name,XmlAttribute)",
        "(value,XmlAttribute)",
        "(node,XmlAttribute)",
        "(namespace,XmlAttribute)",
        "(nextElement,XmlText)",
        "(prevElement,XmlText)",
        "(text,XmlText)",
        "(replace,XmlText)",
        "(path,XmlText)",
        "(name,XmlText)",
        "(addPrevSibling,XmlText)",
        "(addNextSibling,XmlText)",
        "(ns,ctxt)",
        "(xmlMemUsed,XmlMemUsed)",
        "(xmlNodeCount,XmlNodeCount)",
        "(0,set)",
        "(1,set)"
      ]
    },
    "@lifbi_tbt/win-audio": {
      "Gasket": [
        "(mute,mute)",
        "(isMuted,isMuted)",
        "(set,set)",
        "(get,get)"
      ],
      "Charon": []
    },
    "lightning-spell": {
      "Gasket": [
        "(createDictionaryEntry,CreateDictionaryEntry)",
        "(getSuggestions,GetSuggestions)",
        "(LightningSpell,LightningSpell)",
        "(isCorrectlySpelled,IsCorrectlySpelled)"
      ],
      "Charon": [
        "(distance,Number)",
        "(count,Number)",
        "(word,String)"
      ]
    },
    "linux-device": {
      "Gasket": [
        "(ioctl,IOCtl)",
        "(ioctlRaw,IOCtlRaw)",
        "(writeRepeated,WriteRepeated)"
      ],
      "Charon": []
    },
    "linux-devnode": {
      "Gasket": [
        "(opendev,opendev_native)"
      ],
      "Charon": []
    },
    "linux-perf": {
      "Gasket": [
        "(stop,Stop)",
        "(start,Start)",
        "(LinuxPerf,New)"
      ],
      "Charon": [
        "(start,LinuxPerf)",
        "(stop,LinuxPerf)"
      ]
    },
    "linux-xorg-screencapture": {
      "Gasket": [
        "(connect,connect)",
        "(stopAutoCapture,stopAutoCapture)",
        "(getMonitorCount,getMonitorCount)",
        "(startAutoCapture,startAutoCapture)",
        "(getImage,wrap_getImage)",
        "(XScreencap,XScreencap)",
        "(getImageAsync,getImageAsync)"
      ],
      "Charon": [
        "(width,Number)",
        "(height,Number)"
      ]
    },
    "litl-parser": {
      "Gasket": [
        "(__parse_internal,parse_internal)",
        "(__format_error_internal,format_error_internal)"
      ],
      "Charon": []
    },
    "live-elements-js-compiler": {
      "Gasket": [
        "(compile,compileWrap)",
        "(runCompiler,runCompilerWrap)",
        "(createCompiler,createCompilerWrap)",
        "(compileModule,compileModuleWrap)",
        "(CompilerHandle,CompilerHandle)"
      ],
      "Charon": []
    },
    "@lockshi/myaddon": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": [
        "(hello,Method)"
      ]
    },
    "lodepng": {
      "Gasket": [
        "(decode,decode)",
        "(encode,encode)"
      ],
      "Charon": []
    },
    "@logigator/logigator-simulation": {
      "Gasket": [
        "(getBoard,getBoard)",
        "(stop,stop)",
        "(getStatus,getStatus)",
        "(start,start)",
        "(getLinks,getLinks)",
        "(init,init)",
        "(triggerInput,triggerInput)",
        "(destroy,destroy)"
      ],
      "Charon": [
        "(init,init)",
        "(destroy,destroy)",
        "(start,start)",
        "(stop,stop)",
        "(getStatus,getStatus)",
        "(getBoard,getBoard)",
        "(getLinks,getLinks)",
        "(triggerInput,triggerInput)"
      ]
    },
    "logpp": {
      "Gasket": [
        "(setMsgSlotLimit,SetMsgSlotLimit)",
        "(initializeLogger,InitializeLogger)",
        "(processMsgsReserveBlock,ProcessMsgsReserveBlock)",
        "(hasWorkPending,HasWorkPending)",
        "(registerFormat,RegisterFormat)",
        "(addCategory,AddCategory)",
        "(formatMsgsAsync,FormatMsgsAsync)",
        "(setEmitLevel,SetEmitLevel)",
        "(processMsgsComplete,ProcessMsgsComplete)",
        "(getEmitLevel,GetEmitLevel)",
        "(getMsgTimeLimit,GetMsgTimeLimit)",
        "(getMsgSlotLimit,GetMsgSlotLimit)",
        "(processMsgsForEmit,ProcessMsgs)",
        "(formatMsgsSync,FormatMsgsSync)",
        "(setMsgTimeLimit,SetMsgTimeLimit)",
        "(abortAsyncWork,AbortAsyncWork)"
      ],
      "Charon": [
        "(spos,Number)",
        "(initializeLogger,InitializeLogger)",
        "(registerFormat,RegisterFormat)",
        "(addCategory,AddCategory)",
        "(getEmitLevel,GetEmitLevel)",
        "(setEmitLevel,SetEmitLevel)",
        "(getMsgTimeLimit,GetMsgTimeLimit)",
        "(setMsgTimeLimit,SetMsgTimeLimit)",
        "(getMsgSlotLimit,GetMsgSlotLimit)",
        "(setMsgSlotLimit,SetMsgSlotLimit)",
        "(processMsgsReserveBlock,ProcessMsgsReserveBlock)",
        "(processMsgsForEmit,ProcessMsgs)",
        "(processMsgsComplete,ProcessMsgsComplete)",
        "(abortAsyncWork,AbortAsyncWork)",
        "(formatMsgsSync,FormatMsgsSync)",
        "(formatMsgsAsync,FormatMsgsAsync)",
        "(hasWorkPending,HasWorkPending)"
      ]
    },
    "loole": {
      "Gasket": [
        "(createPipe,createPipe)",
        "(createFifo,createFifo)"
      ],
      "Charon": [
        "(createFifo,createFifo)",
        "(createPipe,createPipe)"
      ]
    },
    "@lotuz/jsminify": {
      "Gasket": [
        "(jsminify,jsminify)"
      ],
      "Charon": []
    },
    "lp_solve": {
      "Gasket": [
        "(lp_solve_version,getVersion)",
        "(read_mps,read_mps)",
        "(read_LP,read_LP)",
        "(read_freeMPS,read_freeMPS)",
        "(read_lp,read_lp)",
        "(read_freemps,read_freemps)",
        "(read_XLI,read_XLI)",
        "(make_lp,make_lp)",
        "(read_MPS,read_MPS)"
      ],
      "Charon": []
    },
    "lru-native2": {
      "Gasket": [
        "(size,Size)",
        "(set,Set)",
        "(LRUCache,New)",
        "(stats,Stats)",
        "(setMaxAge,SetMaxAge)",
        "(remove,Remove)",
        "(clear,Clear)",
        "(setMaxElements,SetMaxElements)",
        "(get,Get)"
      ],
      "Charon": [
        "(get,Get)",
        "(set,Set)",
        "(remove,Remove)",
        "(clear,Clear)",
        "(size,Size)",
        "(stats,Stats)",
        "(setMaxAge,SetMaxAge)",
        "(setMaxElements,SetMaxElements)"
      ]
    },
    "lru-node-addon": {
      "Gasket": [
        "(List,List)",
        "(Search,Search)",
        "(Print,Print)",
        "(SetMax,SetMax)",
        "(getMax,getMax)",
        "(Insert,Insert)"
      ],
      "Charon": [
        "(SetMax,List)"
      ]
    },
    "ls-trace": {
      "Gasket": [
        "(stop,stop)",
        "(stats,stats)",
        "(finish,finish)",
        "(start,start)",
        "(track,track)"
      ],
      "Charon": []
    },
    "luckzhiwei-lib": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": []
    },
    "@luminati-io/gc-stats": {
      "Gasket": [
        "(afterGC,AfterGC)"
      ],
      "Charon": [
        "(startTime,data)",
        "(endTime,data)",
        "(pause,data)",
        "(pauseMS,data)",
        "(gctype,data)",
        "(afterGC,AfterGC)"
      ]
    },
    "@luminati-io/mmap-io": {
      "Gasket": [
        "(advise,mmap_advise)",
        "(sync_lib_private__,mmap_sync_lib_private_)",
        "(map,mmap_map)",
        "(incore,mmap_incore)"
      ],
      "Charon": []
    },
    "@luminati-io/node-crypt3": {
      "Gasket": [
        "(crypt,crypt_fn)"
      ],
      "Charon": [
        "(crypt,crypt_fn)"
      ]
    },
    "@luminati-io/node-diskusage": {
      "Gasket": [
        "(getDiskUsage,GetDiskUsage)"
      ],
      "Charon": [
        "(getDiskUsage,GetDiskUsage)"
      ]
    },
    "@luminati-io/node-time": {
      "Gasket": [
        "(tzset,Tzset)",
        "(mktime,Mktime)",
        "(localtime,Localtime)",
        "(time,Time_)"
      ],
      "Charon": [
        "(time,Time_)",
        "(tzset,Tzset)",
        "(localtime,Localtime)",
        "(mktime,Mktime)"
      ]
    },
    "@luminati-io/node-unlisten": {
      "Gasket": [
        "(pause,pause)",
        "(resume,resume)"
      ],
      "Charon": [
        "(pause,pause)",
        "(resume,resume)"
      ]
    },
    "@lydiaswap/lydia-swap-periphery": {
      "Gasket": [
        "(publicKeyCreate,PublicKeyCreate)",
        "(publicKeyTweakAdd,PublicKeyTweakAdd)",
        "(signatureNormalize,SignatureNormalize)",
        "(Secp256k1,Secp256k1Addon)",
        "(privateKeyNegate,PrivateKeyNegate)",
        "(squeeze,Squeeze)",
        "(publicKeyVerify,PublicKeyVerify)",
        "(ecdh,ECDH)",
        "(ecdsaRecover,ECDSARecover)",
        "(publicKeyTweakMul,PublicKeyTweakMul)",
        "(ecdsaSign,ECDSASign)",
        "(initialize,Initialize)",
        "(signatureExport,SignatureExport)",
        "(napi,IsValidUTF8)",
        "(absorbLastFewBits,AbsorbLastFewBits)",
        "(privateKeyVerify,PrivateKeyVerify)",
        "(signatureImport,SignatureImport)",
        "(contextRandomize,ContextRandomize)",
        "(privateKeyTweakAdd,PrivateKeyTweakAdd)",
        "(copy,Copy)",
        "(publicKeyCombine,PublicKeyCombine)",
        "(mask,Mask)",
        "(publicKeyConvert,PublicKeyConvert)",
        "(publicKeyNegate,PublicKeyNegate)",
        "(ecdsaVerify,ECDSAVerify)",
        "(privateKeyTweakMul,PrivateKeyTweakMul)",
        "(glibc,KeccakWrapper)",
        "(absorb,Absorb)",
        "(unmask,Unmask)"
      ],
      "Charon": [
        "(Secp256k1,Secp256k1Addon)"
      ]
    },
    "lymui-node": {
      "Gasket": [
        "(fromXYZ,fromXYZ)",
        "(toXYZ,toXYZ)",
        "(toRGB,toRGB)",
        "(fromRGB,fromRGB)"
      ],
      "Charon": []
    },
    "lz4": {
      "Gasket": [
        "(init,xxHash_init)",
        "(digest,xxHash_digest)",
        "(compressHCLimited,LZ4CompressHCLimited)",
        "(xxHash,xxHash)",
        "(uncompress,LZ4Uncompress)",
        "(uncompress_fast,LZ4Uncompress_fast)",
        "(update,xxHash_update)",
        "(compressHC,LZ4CompressHC)",
        "(compress,LZ4Compress)",
        "(compressBound,LZ4CompressBound)",
        "(compressLimited,LZ4CompressLimited)"
      ],
      "Charon": [
        "(xxHash,xxHash)",
        "(init,xxHash_init)",
        "(update,xxHash_update)",
        "(digest,xxHash_digest)",
        "(compressBound,LZ4CompressBound)",
        "(compress,LZ4Compress)",
        "(compressLimited,LZ4CompressLimited)",
        "(compressHC,LZ4CompressHC)",
        "(compressHCLimited,LZ4CompressHCLimited)",
        "(uncompress,LZ4Uncompress)",
        "(uncompress_fast,LZ4Uncompress_fast)"
      ]
    },
    "lzma-native": {
      "Gasket": [
        "(setBufsize,SetBufsize)",
        "(code,Code)",
        "(feed,Feed)",
        "(streamEncoder_,StreamEncoder)",
        "(rawEncoder_,RawEncoder)",
        "(modeIsSupported,lzmaModeIsSupported)",
        "(parse,Parse)",
        "(mtEncoder_,MTEncoder)",
        "(init,Init)",
        "(versionNumber,lzmaVersionNumber)",
        "(crc32_,lzmaCRC32)",
        "(memusage,Memusage)",
        "(filterDecoderIsSupported,lzmaFilterDecoderIsSupported)",
        "(memlimitSet,MemlimitSet)",
        "(checkSize,lzmaCheckSize)",
        "(filtersUpdate,FiltersUpdate)",
        "(rawDecoderMemusage,lzmaRawDecoderMemusage)",
        "(rawDecoder_,RawDecoder)",
        "(filterEncoderIsSupported,lzmaFilterEncoderIsSupported)",
        "(aloneDecoder_,AloneDecoder)",
        "(versionString,lzmaVersionString)",
        "(checkIsSupported,lzmaCheckIsSupported)",
        "(IndexParser,IndexParser)",
        "(easyEncoder_,EasyEncoder)",
        "(autoDecoder_,AutoDecoder)",
        "(easyEncoderMemusage,lzmaEasyEncoderMemusage)",
        "(memlimitGet,MemlimitGet)",
        "(rawEncoderMemusage,lzmaRawEncoderMemusage)",
        "(resetUnderlying,ResetUnderlying)",
        "(Stream,LZMAStream)",
        "(mfIsSupported,lzmaMfIsSupported)",
        "(aloneEncoder,AloneEncoder)",
        "(streamDecoder_,StreamDecoder)",
        "(easyDecoderMemusage,lzmaEasyDecoderMemusage)"
      ],
      "Charon": [
        "(code,Number)",
        "(name,String)",
        "(desc,String)",
        "(Stream,LZMAStream)",
        "(setBufsize,LZMAStream)",
        "(memlimitSet,LZMAStream)"
      ]
    },
    "lzo": {
      "Gasket": [
        "(decompress,js_decompress)",
        "(compress,js_compress)"
      ],
      "Charon": []
    },
    "lzo-decompress": {
      "Gasket": [
        "(decompress,decompress)"
      ],
      "Charon": []
    },
    "malgo": {
      "Gasket": [
        "(MJCalcTing,MJCalcTing)",
        "(WMCalcHu,WMCalcHu)",
        "(MJCalcHu,MJCalcHu)",
        "(WMCalcTing,WMCalcTing)"
      ],
      "Charon": []
    },
    "mano10": {
      "Gasket": [
        "(derive,Derive)"
      ],
      "Charon": [
        "(derive,Derive)"
      ]
    },
    "mao_test_hello": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": [
        "(hello,Method)"
      ]
    },
    "@mapbox/vtquery": {
      "Gasket": [
        "(vtquery,vtquery)"
      ],
      "Charon": []
    },
    "@mapbox/vtvalidate": {
      "Gasket": [
        "(isValid,isValid)"
      ],
      "Charon": []
    },
    "@markusjx/shared_memory": {
      "Gasket": [
        "(read,readString)",
        "(readBuffer,readBuffer)",
        "(generateIdAsync,generateIdAsync)",
        "(write,writeData)",
        "(generateId,generateId)",
        "(shared_memory,shared_memory)"
      ],
      "Charon": []
    },
    "@markusjx/shared_mutex": {
      "Gasket": [
        "(lock,lock)",
        "(shared_mutex,node_shared_mutex)",
        "(try_lock,try_lock)",
        "(lock_blocking,lockBlocking)",
        "(unlock,unlock)",
        "(process_mutex,process_mutex)",
        "(try_create,try_create)",
        "(destroy,destroy)"
      ],
      "Charon": []
    },
    "@marshallofsound/native-keymap": {
      "Gasket": [
        "(getCurrentKeyboardLayout,_GetCurrentKeyboardLayout)",
        "(ignoreAllEvents,_ignoreAllEvents)",
        "(getKeyMap,_GetKeyMap)",
        "(onDidChangeKeyboardLayout,_OnDidChangeKeyboardLayout)",
        "(isISOKeyboard,_isISOKeyboard)"
      ],
      "Charon": []
    },
    "@mateuszzajacs/bindings": {
      "Gasket": [
        "(get,Get)",
        "(flush,Flush)",
        "(open,Open)",
        "(stop,stop)",
        "(close,Close)",
        "(Poller,New)",
        "(set,Set)",
        "(poll,poll)",
        "(update,Update)",
        "(drain,Drain)",
        "(destroy,destroy)",
        "(getBaudRate,GetBaudRate)"
      ],
      "Charon": [
        "(cts,data)",
        "(dsr,data)",
        "(dcd,data)",
        "(baudRate,data)",
        "(set,Set)",
        "(get,Get)",
        "(getBaudRate,GetBaudRate)",
        "(open,Open)",
        "(update,Update)",
        "(close,Close)",
        "(flush,Flush)",
        "(drain,Drain)",
        "(poll,poll)",
        "(stop,stop)",
        "(destroy,destroy)"
      ]
    },
    "@mathquis/crfsuite": {
      "Gasket": [
        "(tag,Tag)",
        "(open,Open)",
        "(train,Train)",
        "(get_params,GetParams)",
        "(Tagger,TaggerClass)",
        "(init,InitTrainer)",
        "(append,Append)",
        "(close,Close)",
        "(Trainer,TrainerClass)",
        "(set_params,SetParams)",
        "(get_labels,GetLabels)"
      ],
      "Charon": [
        "(set_params,TrainerClass)",
        "(Trainer,func)",
        "(Tagger,func)"
      ]
    },
    "@mathquis/node-gist": {
      "Gasket": [
        "(setSamplingFrequency,setSamplingFrequency)",
        "(getSamplingFrequency,getSamplingFrequency)",
        "(getMelFrequencySpectrum,getMelFrequencySpectrum)",
        "(complexSpectralDifference,complexSpectralDifference)",
        "(highFrequencyContent,highFrequencyContent)",
        "(Gist,GistNative)",
        "(setAudioFrameSize,setAudioFrameSize)",
        "(spectralRolloff,spectralRolloff)",
        "(spectralDifferenceHWR,spectralDifferenceHWR)",
        "(energyDifference,energyDifference)",
        "(getAudioFrameSize,getAudioFrameSize)",
        "(peakEnergy,peakEnergy)",
        "(pitch,pitch)",
        "(spectralDifference,spectralDifference)",
        "(rootMeanSquare,rootMeanSquare)",
        "(getMelFrequencyCepstralCoefficients,getMelFrequencyCepstralCoefficients)",
        "(zeroCrossingRate,zeroCrossingRate)",
        "(spectralCentroid,spectralCentroid)",
        "(spectralKurtosis,spectralKurtosis)",
        "(getMagnitudeSpectrum,getMagnitudeSpectrum)",
        "(processAudioFrame,processAudioFrame)",
        "(spectralFlatness,spectralFlatness)",
        "(spectralCrest,spectralCrest)"
      ],
      "Charon": []
    },
    "@mathquis/node-snowboy": {
      "Gasket": [
        "(GetSensitivity,GetSensitivity)",
        "(NumChannels,NumChannels)",
        "(UpdateModel,UpdateModel)",
        "(BitsPerSample,BitsPerSample)",
        "(SampleRate,SampleRate)",
        "(RunDetection,RunDetection)",
        "(SnowboyDetect,New)",
        "(Reset,Reset)",
        "(SetAudioGain,SetAudioGain)",
        "(NumHotwords,NumHotwords)",
        "(ApplyFrontend,ApplyFrontend)",
        "(SetSensitivity,SetSensitivity)"
      ],
      "Charon": [
        "(Reset,Reset)",
        "(RunDetection,RunDetection)",
        "(SetSensitivity,SetSensitivity)",
        "(GetSensitivity,GetSensitivity)",
        "(SetAudioGain,SetAudioGain)",
        "(UpdateModel,UpdateModel)",
        "(NumHotwords,NumHotwords)",
        "(SampleRate,SampleRate)",
        "(NumChannels,NumChannels)",
        "(BitsPerSample,BitsPerSample)",
        "(ApplyFrontend,ApplyFrontend)"
      ]
    },
    "matrix-seshat-prebuild": {
      "Gasket": [
        "(searchSync,h6baf0ac522d44313)",
        "(shutdown,h919e67d5fb88b713)",
        "(isEmpty,h919e67d5fb88b713)",
        "(deleteEvent,h919e67d5fb88b713)",
        "(commitSync,h919e67d5fb88b713)",
        "(reload,h919e67d5fb88b713)",
        "(getUserVersion,h919e67d5fb88b713)",
        "(createRecoveryDb,hb713a18724da0137)",
        "(addHistoricEvents,h919e67d5fb88b713)",
        "(getStats,h919e67d5fb88b713)",
        "(setUserVersion,h919e67d5fb88b713)",
        "(createDb,h7109d9b9bc64edd0)",
        "(getUserVersionRecoveryDb,h919e67d5fb88b713)",
        "(reindexRecoveryDb,h919e67d5fb88b713)",
        "(loadCheckpoints,h919e67d5fb88b713)",
        "(commit,h919e67d5fb88b713)",
        "(isRoomIndexed,h919e67d5fb88b713)",
        "(addHistoricEventsSync,h6a6188b3f61ddb63)",
        "(search,h919e67d5fb88b713)",
        "(deleteDb,h919e67d5fb88b713)",
        "(getSize,h919e67d5fb88b713)",
        "(shutdownRecoveryDb,h919e67d5fb88b713)",
        "(getInfoRecoveryDb,h6baf0ac522d44313)",
        "(addEvent,h919e67d5fb88b713)",
        "(loadFileEvents,h919e67d5fb88b713)",
        "(changePassphrase,h919e67d5fb88b713)"
      ],
      "Charon": []
    },
    "@matteodisabatino/gc_info": {
      "Gasket": [
        "(on,On)",
        "(off,Off)"
      ],
      "Charon": [
        "(on,On)",
        "(off,Off)"
      ]
    },
    "mc-nodegit": {
      "Gasket": [
        "(updateTips,UpdateTips)",
        "(pushRef,PushRef)",
        "(FetchOptions,JSNewFunction)",
        "(analysisForRef,AnalysisForRef)",
        "(opts,Opts)",
        "(commitRemove,CommitRemove)",
        "(origStartLineNumber,OrigStartLineNumber)",
        "(type,Type)",
        "(DiffLine,JSNewFunction)",
        "(getHunkCount,GetHunkCount)",
        "(isUnmodified,IsUnmodified)",
        "(diffEntry,DiffEntry)",
        "(addSetup,AddSetup)",
        "(failedEntrycount,FailedEntrycount)",
        "(pruneRefs,PruneRefs)",
        "(newLines,NewLines)",
        "(filemodeRaw,FilemodeRaw)",
        "(version,Version)",
        "(applyToBlob,ApplyToBlob)",
        "(enableThreadSafety,LockMasterEnable)",
        "(finalSignature,FinalSignature)",
        "(wrapOdb,WrapOdb)",
        "(IndexIterator,JSNewFunction)",
        "(setCaps,SetCaps)",
        "(symbolicSetTarget,SymbolicSetTarget)",
        "(header,Header)",
        "(readTree,ReadTree)",
        "(indexToIndex,IndexToIndex)",
        "(CheckoutOptions,JSNewFunction)",
        "(hashSha1,HashSha1)",
        "(Odb,JSNewFunction)",
        "(email,Email)",
        "(hasUsername,HasUsername)",
        "(RepositoryInitOptions,JSNewFunction)",
        "(copy,Copy)",
        "(findGlobal,FindGlobal)",
        "(detachHead,DetachHead)",
        "(usernameNew,UsernameNew)",
        "(_entryByIndex,EntryByindex)",
        "(commits,Commits)",
        "(defaultBranch,DefaultBranch)",
        "(isNote,IsNote)",
        "(IndexReucEntry,JSNewFunction)",
        "(ConfigEntry,JSNewFunction)",
        "(setInt32,SetInt32)",
        "(DiffFile,JSNewFunction)",
        "(BlameOptions,JSNewFunction)",
        "(StatusOptions,JSNewFunction)",
        "(finalCommitId,FinalCommitId)",
        "(getStats,GetStats)",
        "(isDeleted,IsDeleted)",
        "(PathspecMatchList,JSNewFunction)",
        "(workdir,Workdir)",
        "(add,Add)",
        "(type2String,Type2string)",
        "(createDetached,CreateDetached)",
        "(resolve,Resolve)",
        "(ids,Ids)",
        "(Time,JSNewFunction)",
        "(symbolicCreateMatching,SymbolicCreateMatching)",
        "(insertions,Insertions)",
        "(upstreamRemote,UpstreamRemote)",
        "(operationEntrycount,OperationEntrycount)",
        "(tree,Tree)",
        "(isAdded,IsAdded)",
        "(exec,Exec)",
        "(setOom,SetOom)",
        "(indexedDeltas,IndexedDeltas)",
        "(lookup,Lookup)",
        "(getSubmodules,GetSubmodules)",
        "(location,Location)",
        "(fetch,Fetch)",
        "(analysis,Analysis)",
        "(isBinary,IsBinary)",
        "(MergeFileInput,JSNewFunction)",
        "(PushUpdate,JSNewFunction)",
        "(annotationCreate,AnnotationCreate)",
        "(numLinesInHunk,NumLinesInHunk)",
        "(setBool,SetBool)",
        "(direction,Direction)",
        "(foreach,Foreach)",
        "(oldFile,OldFile)",
        "(Wrapper,JSNewFunction)",
        "(oldLineno,OldLineno)",
        "(Diff,JSNewFunction)",
        "(getSelfFreeingInstanceCount,GetSelfFreeingInstanceCount)",
        "(create,Create)",
        "(messageRaw,MessageRaw)",
        "(treeToIndex,TreeToIndex)",
        "(getNamespace,GetNamespace)",
        "(IndexTime,JSNewFunction)",
        "(drop,Drop)",
        "(cherrypick,Cherrypick)",
        "(append,Append)",
        "(indexedObjects,IndexedObjects)",
        "(Signature,JSNewFunction)",
        "(getHunkByIndex,GetHunkByindex)",
        "(toBuf,DiffStatsToBuf)",
        "(dup,Dup)",
        "(failedEntry,FailedEntry)",
        "(upstreamName,UpstreamName)",
        "(ptr,Ptr)",
        "(message,Message)",
        "(getThreadSafetyStatus,LockMasterGetStatus)",
        "(buffer,Buffer)",
        "(repo,Repo)",
        "(conflictGet,ConflictGet)",
        "(hasLog,HasLog)",
        "(defaultNew,DefaultNew)",
        "(deleteMultivar,DeleteMultivar)",
        "(addByPath,AddBypath)",
        "(updateAll,UpdateAll)",
        "(cmp,Cmp)",
        "(parentcount,Parentcount)",
        "(setHeadDetached,SetHeadDetached)",
        "(pathIsIgnored,PathIsIgnored)",
        "(move,Move)",
        "(deletions,Deletions)",
        "(createAnonymous,CreateAnonymous)",
        "(grow,Grow)",
        "(referenceList,ReferenceList)",
        "(createFromDisk,CreateFromDisk)",
        "(matchWorkdir,MatchWorkdir)",
        "(prune,Prune)",
        "(symbolicTarget,SymbolicTarget)",
        "(addRule,AddRule)",
        "(typeisloose,Typeisloose)",
        "(DescribeFormatOptions,JSNewFunction)",
        "(NoteIterator,JSNewFunction)",
        "(getBool,GetBool)",
        "(isCopied,IsCopied)",
        "(findSimilar,FindSimilar)",
        "(Error,JSNewFunction)",
        "(isBranch,IsBranch)",
        "(ext,Ext)",
        "(BlameHunk,JSNewFunction)",
        "(entryByIndex,EntryByindex)",
        "(fastWalk,FastWalk)",
        "(newLineno,NewLineno)",
        "(headForWorktree,HeadForWorktree)",
        "(conflictRemove,ConflictRemove)",
        "(Blob,JSNewFunction)",
        "(setTarget,SetTarget)",
        "(findPrefix,FindPrefix)",
        "(openFromRepository,OpenFromRepository)",
        "(updateStrategy,UpdateStrategy)",
        "(lookupByPath,LookupBypath)",
        "(sync,Sync)",
        "(Clone,Clone)",
        "(isPrunable,IsPrunable)",
        "(nfiles,Nfiles)",
        "(addAll,AddAll)",
        "(dstMatches,DstMatches)",
        "(setIdent,SetIdent)",
        "(parse,Parse)",
        "(Refdb,JSNewFunction)",
        "(read,Read)",
        "(openBare,OpenBare)",
        "(receivedObjects,ReceivedObjects)",
        "(origSignature,OrigSignature)",
        "(mkdirCalls,MkdirCalls)",
        "(time,Time)",
        "(IndexConflictIterator,JSNewFunction)",
        "(isWorktree,IsWorktree)",
        "(clone,Clone)",
        "(fromString,Fromstrp)",
        "(getRemotes,GetRemotes)",
        "(getByIndex,GetByIndex)",
        "(setBranch,SetBranch)",
        "(fromFetchhead,FromFetchhead)",
        "(extractSignature,ExtractSignature)",
        "(conflictAdd,ConflictAdd)",
        "(idAbbrev,IdAbbrev)",
        "(TreeEntry,JSNewFunction)",
        "(isSortedIcase,IsSortedIcase)",
        "(shortId,ShortId)",
        "(targetId,TargetId)",
        "(symbolicCreate,SymbolicCreate)",
        "(inmemoryIndex,InmemoryIndex)",
        "(Pathspec,JSNewFunction)",
        "(createGlob,GlobNew)",
        "(shouldIgnore,ShouldIgnore)",
        "(ApplyOptions,JSNewFunction)",
        "(BlobFilterOptions,JSNewFunction)",
        "(DiffBinary,JSNewFunction)",
        "(Index,JSNewFunction)",
        "(tagger,Tagger)",
        "(OdbObject,JSNewFunction)",
        "(repoInit,RepoInit)",
        "(entryCmp,EntryCmp)",
        "(register,GitFilterRegister)",
        "(rawcontent,Rawcontent)",
        "(getByPath,GetBypath)",
        "(getHunk,GetHunk)",
        "(headDetached,HeadDetached)",
        "(RemoteHead,JSNewFunction)",
        "(createBuffer,CreateBuffer)",
        "(name,Name)",
        "(insertTree,InsertTree)",
        "(newFile,NewFile)",
        "(isBare,IsBare)",
        "(commitRead,CommitRead)",
        "(target,Target)",
        "(openOndisk,OpenOndisk)",
        "(conflictCleanup,ConflictCleanup)",
        "(matchesPath,MatchesPath)",
        "(offset,Offset)",
        "(oidCalculations,OidCalculations)",
        "(isConflicted,IsConflicted)",
        "(blobToBuffer,BlobToBuffer)",
        "(setPushurl,SetPushurl)",
        "(oldStart,OldStart)",
        "(entryById,EntryByid)",
        "(Strarray,JSNewFunction)",
        "(isModified,IsModified)",
        "(caps,Caps)",
        "(setString,SetStr)",
        "(entryIsConflict,EntryIsConflict)",
        "(headToIndex,HeadToIndex)",
        "(similarity,Similarity)",
        "(push,Push)",
        "(commondir,Commondir)",
        "(DiffBinaryFile,JSNewFunction)",
        "(merge,Merge)",
        "(cleanup,Cleanup)",
        "(DiffStats,JSNewFunction)",
        "(Buf,JSNewFunction)",
        "(createFromFile,CreateFromfile)",
        "(convenientFromDiff,ConvenientFromDiff)",
        "(getRefspec,GetRefspec)",
        "(strings,Strings)",
        "(sorting,Sorting)",
        "(parentId,ParentId)",
        "(tostrS,TostrS)",
        "(contentLen,ContentLen)",
        "(operationByIndex,OperationByindex)",
        "(commitCreate,CommitCreate)",
        "(checksum,Checksum)",
        "(insertWalk,InsertWalk)",
        "(finish,Finish)",
        "(symrefTarget,SymrefTarget)",
        "(size,Size)",
        "(Tag,JSNewFunction)",
        "(fetchheadForeach,FetchheadForeach)",
        "(isCheckedOut,IsCheckedOut)",
        "(getByPath,GetByPath)",
        "(insertCommit,InsertCommit)",
        "(mode,Mode)",
        "(fetchRecurseSubmodules,FetchRecurseSubmodules)",
        "(byIndex,Byindex)",
        "(isIgnored,IsIgnored)",
        "(addEntry,AddEntry)",
        "(amend,Amend)",
        "(openExt,OpenExt)",
        "(snapshot,Snapshot)",
        "(writeTreeTo,WriteTreeTo)",
        "(patchid,Patchid)",
        "(createFromWorkdir,CreateFromWorkdir)",
        "(reset,Reset)",
        "(submoduleCacheAll,SubmoduleCacheAll)",
        "(ignore,Ignore)",
        "(toTree,ToTree)",
        "(dwim,Dwim)",
        "(DiffHunk,JSNewFunction)",
        "(SubmoduleUpdateOptions,JSNewFunction)",
        "(foreachExt,ForeachExt)",
        "(treeId,TreeId)",
        "(when,When)",
        "(oldLines,OldLines)",
        "(ConvenientPatch,JSNewFunction)",
        "(loid,Loid)",
        "(author,Author)",
        "(summary,Summary)",
        "(init,Init)",
        "(len,Len)",
        "(inflatedlen,Inflatedlen)",
        "(readPrefix,ReadPrefix)",
        "(removeDirectory,RemoveDirectory)",
        "(setThreadSafetyStatus,LockMasterSetStatus)",
        "(CloneOptions,JSNewFunction)",
        "(RebaseOptions,JSNewFunction)",
        "(removeAll,RemoveAll)",
        "(lookupPrefix,LookupPrefix)",
        "(openDefault,OpenDefault)",
        "(id,Id)",
        "(peel,Peel)",
        "(rawHeader,RawHeader)",
        "(cpy,Cpy)",
        "(srcMatches,SrcMatches)",
        "(setUpdate,SetUpdate)",
        "(ConfigIterator,JSNewFunction)",
        "(now,Now)",
        "(next,Next)",
        "(oid,Oid)",
        "(stats,Stats)",
        "(Oidarray,JSNewFunction)",
        "(filter,Filter)",
        "(nthGenAncestor,NthGenAncestor)",
        "(isZero,IsZero)",
        "(toObject,ToObject)",
        "(MergeFileOptions,JSNewFunction)",
        "(Mailmap,JSNewFunction)",
        "(single,Single)",
        "(Reference,JSNewFunction)",
        "(isUnreadable,IsUnreadable)",
        "(addDiskAlternate,AddDiskAlternate)",
        "(indexToWorkdir,IndexToWorkdir)",
        "(getInt32,GetInt32)",
        "(addPush,AddPush)",
        "(write,Write)",
        "(clear,Clear)",
        "(level,Level)",
        "(state,State)",
        "(flags,Flags)",
        "(findSystem,FindSystem)",
        "(getNonSelfFreeingConstructedCount,GetNonSelfFreeingConstructedCount)",
        "(IndexerProgress,JSNewFunction)",
        "(cacheFlush,CacheFlush)",
        "(written,Written)",
        "(PushOptions,JSNewFunction)",
        "(ReflogEntry,JSNewFunction)",
        "(applyToFile,ApplyToFile)",
        "(existsPrefix,ExistsPrefix)",
        "(chmodCalls,ChmodCalls)",
        "(RevertOptions,JSNewFunction)",
        "(localObjects,LocalObjects)",
        "(receivedBytes,ReceivedBytes)",
        "(string2Type,String2type)",
        "(data,Data)",
        "(setWorkdir,SetWorkdir)",
        "(FilterList,JSNewFunction)",
        "(shorthand,Shorthand)",
        "(Blame,JSNewFunction)",
        "(containsNul,ContainsNul)",
        "(validate,Validate)",
        "(unlock,Unlock)",
        "(treeToTree,TreeToTree)",
        "(ancestor,Ancestor)",
        "(Apply,Apply)",
        "(finalStartLineNumber,FinalStartLineNumber)",
        "(objectCount,ObjectCount)",
        "(CheckoutPerfdata,JSNewFunction)",
        "(get,Get)",
        "(RemoteCreateOptions,JSNewFunction)",
        "(CherrypickOptions,JSNewFunction)",
        "(matchDiff,MatchDiff)",
        "(refdb,Refdb)",
        "(Oid,JSNewFunction)",
        "(timeOffset,TimeOffset)",
        "(StatusList,JSNewFunction)",
        "(headerLen,HeaderLen)",
        "(isTag,IsTag)",
        "(sshKeyFromAgent,SshKeyFromAgent)",
        "(next,GitConfigNext)",
        "(Cherrypick,Cherrypick)",
        "(committerWithMailmap,CommitterWithMailmap)",
        "(ours,Ours)",
        "(setMultivar,SetMultivar)",
        "(isGitfile,IsGitfile)",
        "(CertX509,JSNewFunction)",
        "(index,Index)",
        "(setIgnore,SetIgnore)",
        "(initExt,InitExt)",
        "(setUrl,SetUrl)",
        "(Transaction,JSNewFunction)",
        "(isRemote,IsRemote)",
        "(lockRef,LockRef)",
        "(repository,Repository)",
        "(pushRange,PushRange)",
        "(read,OdbRead)",
        "(getFetchRefspecs,GetFetchRefspecs)",
        "(operationCurrent,OperationCurrent)",
        "(entryStage,EntryStage)",
        "(DiffOptions,JSNewFunction)",
        "(newStart,NewStart)",
        "(aheadBehind,AheadBehind)",
        "(ensureLog,EnsureLog)",
        "(DescribeOptions,JSNewFunction)",
        "(Tree,JSNewFunction)",
        "(save,Save)",
        "(createFromBuffer,CreateFromBuffer)",
        "(setHeadDetachedFromAnnotated,SetHeadDetachedFromAnnotated)",
        "(RebaseOperation,JSNewFunction)",
        "(Revwalk,JSNewFunction)",
        "(apply,Apply)",
        "(setVersion,SetVersion)",
        "(url,Url)",
        "(unregister,GitFilterUnregister)",
        "(Merge,Merge)",
        "(parent,Parent)",
        "(submoduleCacheClear,SubmoduleCacheClear)",
        "(load,Load)",
        "(stop,Stop)",
        "(RemoteCallbacks,JSNewFunction)",
        "(fromAnnotated,FromAnnotated)",
        "(remove,Remove)",
        "(refspecCount,RefspecCount)",
        "(DescribeResult,JSNewFunction)",
        "(linesInHunk,LinesInHunk)",
        "(seconds,Seconds)",
        "(default,Default)",
        "(listMatch,ListMatch)",
        "(messageRemove,MessageRemove)",
        "(createV,CreateV)",
        "(insert,Insert)",
        "(getThreadSafetyDiagnostics,LockMasterGetDiagnostics)",
        "(itemPath,ItemPath)",
        "(fromRef,FromRef)",
        "(nanoseconds,Nanoseconds)",
        "(StashApplyOptions,JSNewFunction)",
        "(sshKeyMemoryNew,SshKeyMemoryNew)",
        "(setString,SetString)",
        "(connected,Connected)",
        "(origin,Origin)",
        "(DiffDelta,JSNewFunction)",
        "(shutdown,Shutdown)",
        "(count,Count)",
        "(createLightweight,CreateLightweight)",
        "(upload,Upload)",
        "(Reflog,JSNewFunction)",
        "(WorktreePruneOptions,JSNewFunction)",
        "(setHead,SetHead)",
        "(Writestream,JSNewFunction)",
        "(MergeOptions,JSNewFunction)",
        "(value,Value)",
        "(commit,Commit)",
        "(wdId,WdId)",
        "(numHunks,NumHunks)",
        "(committer,Committer)",
        "(Repository,JSNewFunction)",
        "(hashMd5,HashMd5)",
        "(FilterSource,JSNewFunction)",
        "(ncmp,Ncmp)",
        "(pushHead,PushHead)",
        "(Revert,Revert)",
        "(toBuffer,ToBuffer)",
        "(head,Head)",
        "(nameToId,NameToId)",
        "(deleteEntry,DeleteEntry)",
        "(targetType,TargetType)",
        "(commitIteratorNew,CommitIteratorNew)",
        "(resolveSignature,ResolveSignature)",
        "(Reset,Reset)",
        "(getLineInHunk,GetLineInHunk)",
        "(equal,Equal)",
        "(config,Config)",
        "(DiffPerfdata,JSNewFunction)",
        "(entrycount,Entrycount)",
        "(bases,Bases)",
        "(idNew,IdNew)",
        "(addToIndex,AddToIndex)",
        "(_entryByName,EntryByname)",
        "(isTypeChange,IsTypeChange)",
        "(simplifyFirstParent,SimplifyFirstParent)",
        "(fromBuffer,FromBuffer)",
        "(toBuf,ToBuf)",
        "(Filter,JSNewFunction)",
        "(DiffFindOptions,JSNewFunction)",
        "(list,List)",
        "(open,Open)",
        "(lineStats,LineStats)",
        "(headUnborn,HeadUnborn)",
        "(Config,JSNewFunction)",
        "(isHead,IsHead)",
        "(normalizeName,NormalizeName)",
        "(TreeUpdate,JSNewFunction)",
        "(discover,Discover)",
        "(WorktreeAddOptions,JSNewFunction)",
        "(hideGlob,HideGlob)",
        "(hideHead,HideHead)",
        "(theirs,Theirs)",
        "(setNamespace,SetNamespace)",
        "(fromRepository,FromRepository)",
        "(getHunkByLine,GetHunkByline)",
        "(path,Path)",
        "(remoteName,RemoteName)",
        "(Configmap,JSNewFunction)",
        "(targetPeel,TargetPeel)",
        "(headId,HeadId)",
        "(idOld,IdOld)",
        "(hideRef,HideRef)",
        "(statCalls,StatCalls)",
        "(autotag,Autotag)",
        "(StatusEntry,JSNewFunction)",
        "(Cred,JSNewFunction)",
        "(numLines,NumLines)",
        "(Hashsig,JSNewFunction)",
        "(asize,Asize)",
        "(features,Features)",
        "(fromDiff,FromDiff)",
        "(origCommitId,OrigCommitId)",
        "(createMatching,CreateMatching)",
        "(Transport,JSNewFunction)",
        "(treeToWorkdirWithIndex,TreeToWorkdirWithIndex)",
        "(Packbuilder,JSNewFunction)",
        "(connect,Connect)",
        "(Remote,JSNewFunction)",
        "(getStringBuf,GetStringBuf)",
        "(filemode,Filemode)",
        "(src,Src)",
        "(resolveUrl,ResolveUrl)",
        "(Submodule,JSNewFunction)",
        "(Treebuilder,JSNewFunction)",
        "(update,Update)",
        "(rename,Rename)",
        "(ontoName,OntoName)",
        "(lock,Lock)",
        "(datalen,Datalen)",
        "(Note,JSNewFunction)",
        "(Worktree,JSNewFunction)",
        "(Object,JSNewFunction)",
        "(sshKeyNew,SshKeyNew)",
        "(addFetch,AddFetch)",
        "(AnnotatedCommit,JSNewFunction)",
        "(ontoId,OntoId)",
        "(file,File)",
        "(removeByPath,RemoveBypath)",
        "(odb,Odb)",
        "(getEntry,GetEntry)",
        "(isUntracked,IsUntracked)",
        "(rawsize,Rawsize)",
        "(createUpdated,CreateUpdated)",
        "(mergeheadForeach,MergeheadForeach)",
        "(findProgramdata,FindProgramdata)",
        "(getReferences,GetReferences)",
        "(IndexEntry,JSNewFunction)",
        "(fromRevspec,FromRevspec)",
        "(createFromAnnotated,CreateFromAnnotated)",
        "(Patch,JSNewFunction)",
        "(body,Body)",
        "(Rebase,JSNewFunction)",
        "(ref,Ref)",
        "(dst,Dst)",
        "(fileHistoryWalk,FileHistoryWalk)",
        "(dispose,Dispose)",
        "(set,Set)",
        "(getUsername,GetUsername)",
        "(createWithFetchspec,CreateWithFetchspec)",
        "(upstream,Upstream)",
        "(setIndex,SetIndex)",
        "(getPushRefspecs,GetPushRefspecs)",
        "(setReflog,SetReflog)",
        "(setInt64,SetInt64)",
        "(writeTree,WriteTree)",
        "(ProxyOptions,JSNewFunction)",
        "(userpassPlaintextNew,UserpassPlaintextNew)",
        "(origHeadName,OrigHeadName)",
        "(clearInternalRules,ClearInternalRules)",
        "(getMany,GetMany)",
        "(setUpstream,SetUpstream)",
        "(entryByPath,EntryBypath)",
        "(getDelta,GetDelta)",
        "(totalObjects,TotalObjects)",
        "(isShallow,IsShallow)",
        "(OidShorten,JSNewFunction)",
        "(hashfile,Hashfile)",
        "(setFetchRecurseSubmodules,SetFetchRecurseSubmodules)",
        "(headDetachedForWorktree,HeadDetachedForWorktree)",
        "(abort,Abort)",
        "(origPath,OrigPath)",
        "(hide,Hide)",
        "(branch,Branch)",
        "(filteredContent,FilteredContent)",
        "(owner,Owner)",
        "(origHeadId,OrigHeadId)",
        "(descendantOf,DescendantOf)",
        "(certType,CertType)",
        "(srcRefname,SrcRefname)",
        "(isLocked,IsLocked)",
        "(hunks,Hunks)",
        "(delete,Delete)",
        "(strMatch,StrMatch)",
        "(isEmpty,IsEmpty)",
        "(createWithSignature,CreateWithSignature)",
        "(setAutotag,SetAutotag)",
        "(getByIndex,GetByindex)",
        "(isValidName,IsValidName)",
        "(hash,Hash)",
        "(setSymbolicTarget,SetSymbolicTarget)",
        "(createMultivar,GitConfigMultivarIteratorNew)",
        "(revert,Revert)",
        "(Cert,JSNewFunction)",
        "(treeToWorkdir,TreeToWorkdir)",
        "(Commit,JSNewFunction)",
        "(pushurl,Pushurl)",
        "(pushGlob,PushGlob)",
        "(addFinalize,AddFinalize)",
        "(lines,Lines)",
        "(DiffPatchidOptions,JSNewFunction)",
        "(base,Base)",
        "(klass,Klass)",
        "(compare,Compare)",
        "(iszero,Iszero)",
        "(find,Find)",
        "(Refspec,JSNewFunction)",
        "(headerField,HeaderField)",
        "(getPath,GetPath)",
        "(matchTree,MatchTree)",
        "(force,Force)",
        "(contentOffset,ContentOffset)",
        "(content,Content)",
        "(indexId,IndexId)",
        "(filesChanged,FilesChanged)",
        "(local,Local)",
        "(status,Status)",
        "(strcmp,Strcmp)",
        "(entry,Entry)",
        "(disconnect,Disconnect)",
        "(mapValue,MapValue)",
        "(isRenamed,IsRenamed)",
        "(entryCount,Entrycount)",
        "(dstRefname,DstRefname)",
        "(sign,Sign)",
        "(defaultRef,DefaultRef)",
        "(hashSha256,HashSha256)",
        "(last,Last)",
        "(BranchIterator,JSNewFunction)",
        "(addMacro,AddMacro)",
        "(getInt64,GetInt64)",
        "(applyToData,ApplyToData)",
        "(pop,Pop)",
        "(fromBlobs,FromBlobs)",
        "(hasConflicts,HasConflicts)",
        "(insertRecur,InsertRecur)",
        "(authorWithMailmap,AuthorWithMailmap)",
        "(matchIndex,MatchIndex)",
        "(string,String)",
        "(totalDeltas,TotalDeltas)",
        "(compress,Compress)",
        "(containsData,ContainsData)",
        "(refreshReferences,RefreshReferences)",
        "(ConvenientHunk,JSNewFunction)",
        "(CertHostkey,JSNewFunction)",
        "(openFromWorktree,OpenFromWorktree)",
        "(stateCleanup,StateCleanup)",
        "(download,Download)",
        "(messageEncoding,MessageEncoding)",
        "(setThreads,SetThreads)",
        "(findXdg,FindXdg)",
        "(ident,Ident)",
        "(streq,Streq)",
        "(trees,Trees)",
        "(numDeltas,NumDeltas)",
        "(createWithOpts,CreateWithOpts)",
        "(commitWalk,CommitWalk)",
        "(getPerfdata,GetPerfdata)",
        "(IndexNameEntry,JSNewFunction)",
        "(reload,Reload)"
      ],
      "Charon": [
        "(enableThreadSafety,LockMasterEnable)",
        "(setThreadSafetyStatus,LockMasterSetStatus)",
        "(getThreadSafetyStatus,LockMasterGetStatus)",
        "(getThreadSafetyDiagnostics,LockMasterGetDiagnostics)",
        "(getSelfFreeingInstanceCount,GetSelfFreeingInstanceCount)",
        "(getNonSelfFreeingConstructedCount,GetNonSelfFreeingConstructedCount)",
        "(type,Type)",
        "(strMatch,StrMatch)",
        "(mapValue,MapValue)",
        "(ext,Ext)",
        "(single,Single)",
        "(errno,baton)",
        "(filemode,Filemode)",
        "(filemodeRaw,FilemodeRaw)",
        "(id,Id)",
        "(name,Name)",
        "(toObject,ToObject)",
        "(diffEntry,DiffEntry)",
        "(entry,Entry)",
        "(entrycount,Entrycount)",
        "(failedEntry,FailedEntry)",
        "(failedEntrycount,FailedEntrycount)",
        "(add,Add)",
        "(isLocked,IsLocked)",
        "(isPrunable,IsPrunable)",
        "(list,List)",
        "(lock,Lock)",
        "(lookup,Lookup)",
        "(openFromRepository,OpenFromRepository)",
        "(path,Path)",
        "(prune,Prune)",
        "(unlock,Unlock)",
        "(validate,Validate)",
        "(commit,Commit)",
        "(lockRef,LockRef)",
        "(create,Create)",
        "(remove,Remove)",
        "(setReflog,SetReflog)",
        "(setSymbolicTarget,SetSymbolicTarget)",
        "(setTarget,SetTarget)",
        "(size,Size)",
        "(flags,Flags)",
        "(mode,Mode)",
        "(idAbbrev,IdAbbrev)",
        "(linesInHunk,LinesInHunk)",
        "(finalCommitId,FinalCommitId)",
        "(finalStartLineNumber,FinalStartLineNumber)",
        "(finalSignature,FinalSignature)",
        "(origCommitId,OrigCommitId)",
        "(origPath,OrigPath)",
        "(origStartLineNumber,OrigStartLineNumber)",
        "(origSignature,OrigSignature)",
        "(buffer,Buffer)",
        "(file,File)",
        "(getHunkByIndex,GetHunkByindex)",
        "(getHunkByLine,GetHunkByline)",
        "(getHunkCount,GetHunkCount)",
        "(createGlob,GlobNew)",
        "(createMultivar,GitConfigMultivarIteratorNew)",
        "(next,GitConfigNext)",
        "(totalObjects,TotalObjects)",
        "(indexedObjects,IndexedObjects)",
        "(receivedObjects,ReceivedObjects)",
        "(localObjects,LocalObjects)",
        "(totalDeltas,TotalDeltas)",
        "(indexedDeltas,IndexedDeltas)",
        "(receivedBytes,ReceivedBytes)",
        "(addDiskAlternate,AddDiskAlternate)",
        "(existsPrefix,ExistsPrefix)",
        "(hashfile,Hashfile)",
        "(open,Open)",
        "(read,OdbRead)",
        "(readPrefix,ReadPrefix)",
        "(write,Write)",
        "(compare,Compare)",
        "(createFromFile,CreateFromfile)",
        "(default,Default)",
        "(fromBuffer,FromBuffer)",
        "(now,Now)",
        "(email,Email)",
        "(when,When)",
        "(containsData,ContainsData)",
        "(oldFile,OldFile)",
        "(newFile,NewFile)",
        "(hunks,Hunks)",
        "(lineStats,LineStats)",
        "(status,Status)",
        "(isUnmodified,IsUnmodified)",
        "(isAdded,IsAdded)",
        "(isDeleted,IsDeleted)",
        "(isModified,IsModified)",
        "(isRenamed,IsRenamed)",
        "(isCopied,IsCopied)",
        "(isIgnored,IsIgnored)",
        "(isUntracked,IsUntracked)",
        "(isTypeChange,IsTypeChange)",
        "(isUnreadable,IsUnreadable)",
        "(isConflicted,IsConflicted)",
        "(amend,Amend)",
        "(author,Author)",
        "(authorWithMailmap,AuthorWithMailmap)",
        "(body,Body)",
        "(committer,Committer)",
        "(committerWithMailmap,CommitterWithMailmap)",
        "(createBuffer,CreateBuffer)",
        "(createV,CreateV)",
        "(createWithSignature,CreateWithSignature)",
        "(dup,Dup)",
        "(extractSignature,ExtractSignature)",
        "(headerField,HeaderField)",
        "(lookupPrefix,LookupPrefix)",
        "(message,Message)",
        "(messageEncoding,MessageEncoding)",
        "(messageRaw,MessageRaw)",
        "(nthGenAncestor,NthGenAncestor)",
        "(owner,Owner)",
        "(parent,Parent)",
        "(parentId,ParentId)",
        "(parentcount,Parentcount)",
        "(rawHeader,RawHeader)",
        "(summary,Summary)",
        "(time,Time)",
        "(timeOffset,TimeOffset)",
        "(tree,Tree)",
        "(treeId,TreeId)",
        "(signature,baton)",
        "(signedData,baton)",
        "(addEntry,AddEntry)",
        "(fromRepository,FromRepository)",
        "(resolve,Resolve)",
        "(resolveSignature,ResolveSignature)",
        "(version,Version)",
        "(data,Data)",
        "(len,Len)",
        "(createFromAnnotated,CreateFromAnnotated)",
        "(delete,Delete)",
        "(isCheckedOut,IsCheckedOut)",
        "(isHead,IsHead)",
        "(move,Move)",
        "(remoteName,RemoteName)",
        "(setUpstream,SetUpstream)",
        "(upstream,Upstream)",
        "(upstreamName,UpstreamName)",
        "(upstreamRemote,UpstreamRemote)",
        "(features,Features)",
        "(init,Init)",
        "(opts,Opts)",
        "(shutdown,Shutdown)",
        "(origin,Origin)",
        "(oldLineno,OldLineno)",
        "(newLineno,NewLineno)",
        "(numLines,NumLines)",
        "(contentLen,ContentLen)",
        "(contentOffset,ContentOffset)",
        "(content,Content)",
        "(append,Append)",
        "(drop,Drop)",
        "(entryByIndex,EntryByindex)",
        "(read,Read)",
        "(rename,Rename)",
        "(oldStart,OldStart)",
        "(oldLines,OldLines)",
        "(newStart,NewStart)",
        "(newLines,NewLines)",
        "(headerLen,HeaderLen)",
        "(header,Header)",
        "(local,Local)",
        "(oid,Oid)",
        "(loid,Loid)",
        "(symrefTarget,SymrefTarget)",
        "(clear,Clear)",
        "(last,Last)",
        "(setOom,SetOom)",
        "(setString,SetStr)",
        "(klass,Klass)",
        "(srcRefname,SrcRefname)",
        "(dstRefname,DstRefname)",
        "(src,Src)",
        "(dst,Dst)",
        "(matchDiff,MatchDiff)",
        "(matchIndex,MatchIndex)",
        "(matchTree,MatchTree)",
        "(matchWorkdir,MatchWorkdir)",
        "(matchesPath,MatchesPath)",
        "(next,Next)",
        "(defaultNew,DefaultNew)",
        "(getUsername,GetUsername)",
        "(hasUsername,HasUsername)",
        "(sshKeyFromAgent,SshKeyFromAgent)",
        "(sshKeyMemoryNew,SshKeyMemoryNew)",
        "(sshKeyNew,SshKeyNew)",
        "(usernameNew,UsernameNew)",
        "(userpassPlaintextNew,UserpassPlaintextNew)",
        "(storedMutexesCount,diagnostics)",
        "(setThreadSafetyStatus,LockMasterSetStatus)",
        "(DISABLED,LockMaster)",
        "(ENABLED_FOR_ASYNC_ONLY,LockMaster)",
        "(ENABLED,LockMaster)",
        "(similarity,Similarity)",
        "(nfiles,Nfiles)",
        "(entryCount,Entrycount)",
        "(getByIndex,GetByIndex)",
        "(ancestor,Ancestor)",
        "(ours,Ours)",
        "(theirs,Theirs)",
        "(addMacro,AddMacro)",
        "(cacheFlush,CacheFlush)",
        "(get,Get)",
        "(getMany,GetMany)",
        "(value,Value)",
        "(seconds,Seconds)",
        "(nanoseconds,Nanoseconds)",
        "(containsNul,ContainsNul)",
        "(dispose,Dispose)",
        "(grow,Grow)",
        "(isBinary,IsBinary)",
        "(set,Set)",
        "(ptr,Ptr)",
        "(asize,Asize)",
        "(fromBlobs,FromBlobs)",
        "(fromDiff,FromDiff)",
        "(getDelta,GetDelta)",
        "(getHunk,GetHunk)",
        "(getLineInHunk,GetLineInHunk)",
        "(numHunks,NumHunks)",
        "(numLinesInHunk,NumLinesInHunk)",
        "(convenientFromDiff,ConvenientFromDiff)",
        "(addFinalize,AddFinalize)",
        "(addSetup,AddSetup)",
        "(addToIndex,AddToIndex)",
        "(branch,Branch)",
        "(clone,Clone)",
        "(fetchRecurseSubmodules,FetchRecurseSubmodules)",
        "(foreach,Foreach)",
        "(headId,HeadId)",
        "(ignore,Ignore)",
        "(indexId,IndexId)",
        "(location,Location)",
        "(reload,Reload)",
        "(repoInit,RepoInit)",
        "(resolveUrl,ResolveUrl)",
        "(setBranch,SetBranch)",
        "(setFetchRecurseSubmodules,SetFetchRecurseSubmodules)",
        "(setIgnore,SetIgnore)",
        "(setUpdate,SetUpdate)",
        "(setUrl,SetUrl)",
        "(sync,Sync)",
        "(update,Update)",
        "(updateStrategy,UpdateStrategy)",
        "(url,Url)",
        "(wdId,WdId)",
        "(find,Find)",
        "(getByPath,GetByPath)",
        "(applyToBlob,ApplyToBlob)",
        "(applyToData,ApplyToData)",
        "(applyToFile,ApplyToFile)",
        "(load,Load)",
        "(reset,Reset)",
        "(fromAnnotated,FromAnnotated)",
        "(apply,Apply)",
        "(pop,Pop)",
        "(save,Save)",
        "(revert,Revert)",
        "(commitCreate,CommitCreate)",
        "(commitIteratorNew,CommitIteratorNew)",
        "(commitRead,CommitRead)",
        "(commitRemove,CommitRemove)",
        "(defaultRef,DefaultRef)",
        "(aheadBehind,AheadBehind)",
        "(descendantOf,DescendantOf)",
        "(register,GitFilterRegister)",
        "(unregister,GitFilterUnregister)",
        "(merge,Merge)",
        "(analysis,Analysis)",
        "(analysisForRef,AnalysisForRef)",
        "(base,Base)",
        "(bases,Bases)",
        "(commits,Commits)",
        "(trees,Trees)",
        "(ids,Ids)",
        "(count,Count)",
        "(byIndex,Byindex)",
        "(foreachExt,ForeachExt)",
        "(shouldIgnore,ShouldIgnore)",
        "(datalen,Datalen)",
        "(inflatedlen,Inflatedlen)",
        "(compress,Compress)",
        "(cmp,Cmp)",
        "(createMatching,CreateMatching)",
        "(dwim,Dwim)",
        "(ensureLog,EnsureLog)",
        "(hasLog,HasLog)",
        "(isBranch,IsBranch)",
        "(isNote,IsNote)",
        "(isRemote,IsRemote)",
        "(isTag,IsTag)",
        "(isValidName,IsValidName)",
        "(nameToId,NameToId)",
        "(normalizeName,NormalizeName)",
        "(peel,Peel)",
        "(shorthand,Shorthand)",
        "(symbolicCreate,SymbolicCreate)",
        "(symbolicCreateMatching,SymbolicCreateMatching)",
        "(symbolicSetTarget,SymbolicSetTarget)",
        "(symbolicTarget,SymbolicTarget)",
        "(target,Target)",
        "(targetPeel,TargetPeel)",
        "(lines,Lines)",
        "(cherrypick,Cherrypick)",
        "(mkdirCalls,MkdirCalls)",
        "(statCalls,StatCalls)",
        "(chmodCalls,ChmodCalls)",
        "(exec,Exec)",
        "(hide,Hide)",
        "(hideGlob,HideGlob)",
        "(hideHead,HideHead)",
        "(hideRef,HideRef)",
        "(push,Push)",
        "(pushGlob,PushGlob)",
        "(pushHead,PushHead)",
        "(pushRange,PushRange)",
        "(pushRef,PushRef)",
        "(repository,Repository)",
        "(simplifyFirstParent,SimplifyFirstParent)",
        "(sorting,Sorting)",
        "(commitWalk,CommitWalk)",
        "(fastWalk,FastWalk)",
        "(fileHistoryWalk,FileHistoryWalk)",
        "(name,signature)",
        "(email,signature)",
        "(date,signature)",
        "(sha,commit)",
        "(message,commit)",
        "(author,commit)",
        "(committer,commit)",
        "(signature,signature)",
        "(commit,GitCommit)",
        "(reachedEndOfHistory,baton)",
        "(insert,Insert)",
        "(copy,Copy)",
        "(strings,Strings)",
        "(idNew,IdNew)",
        "(idOld,IdOld)",
        "(head,Head)",
        "(index,Index)",
        "(blobToBuffer,BlobToBuffer)",
        "(findSimilar,FindSimilar)",
        "(getStats,GetStats)",
        "(indexToIndex,IndexToIndex)",
        "(indexToWorkdir,IndexToWorkdir)",
        "(isSortedIcase,IsSortedIcase)",
        "(numDeltas,NumDeltas)",
        "(patchid,Patchid)",
        "(toBuf,ToBuf)",
        "(treeToIndex,TreeToIndex)",
        "(treeToTree,TreeToTree)",
        "(treeToWorkdir,TreeToWorkdir)",
        "(treeToWorkdirWithIndex,TreeToWorkdirWithIndex)",
        "(getPerfdata,GetPerfdata)",
        "(offset,Offset)",
        "(sign,Sign)",
        "(oidCalculations,OidCalculations)",
        "(commondir,Commondir)",
        "(config,Config)",
        "(detachHead,DetachHead)",
        "(discover,Discover)",
        "(fetchheadForeach,FetchheadForeach)",
        "(getNamespace,GetNamespace)",
        "(headDetached,HeadDetached)",
        "(headDetachedForWorktree,HeadDetachedForWorktree)",
        "(headForWorktree,HeadForWorktree)",
        "(headUnborn,HeadUnborn)",
        "(ident,Ident)",
        "(initExt,InitExt)",
        "(isBare,IsBare)",
        "(isEmpty,IsEmpty)",
        "(isShallow,IsShallow)",
        "(isWorktree,IsWorktree)",
        "(itemPath,ItemPath)",
        "(mergeheadForeach,MergeheadForeach)",
        "(messageRemove,MessageRemove)",
        "(odb,Odb)",
        "(openBare,OpenBare)",
        "(openExt,OpenExt)",
        "(openFromWorktree,OpenFromWorktree)",
        "(refdb,Refdb)",
        "(setHead,SetHead)",
        "(setHeadDetached,SetHeadDetached)",
        "(setHeadDetachedFromAnnotated,SetHeadDetachedFromAnnotated)",
        "(setIdent,SetIdent)",
        "(setNamespace,SetNamespace)",
        "(setWorkdir,SetWorkdir)",
        "(state,State)",
        "(stateCleanup,StateCleanup)",
        "(workdir,Workdir)",
        "(wrapOdb,WrapOdb)",
        "(cleanup,Cleanup)",
        "(getReferences,GetReferences)",
        "(getSubmodules,GetSubmodules)",
        "(getRemotes,GetRemotes)",
        "(refreshReferences,RefreshReferences)",
        "(setIndex,SetIndex)",
        "(submoduleCacheAll,SubmoduleCacheAll)",
        "(submoduleCacheClear,SubmoduleCacheClear)",
        "(annotationCreate,AnnotationCreate)",
        "(createFromBuffer,CreateFromBuffer)",
        "(createLightweight,CreateLightweight)",
        "(listMatch,ListMatch)",
        "(tagger,Tagger)",
        "(targetId,TargetId)",
        "(targetType,TargetType)",
        "(direction,Direction)",
        "(dstMatches,DstMatches)",
        "(force,Force)",
        "(parse,Parse)",
        "(srcMatches,SrcMatches)",
        "(string,String)",
        "(level,Level)",
        "(abort,Abort)",
        "(finish,Finish)",
        "(inmemoryIndex,InmemoryIndex)",
        "(ontoId,OntoId)",
        "(ontoName,OntoName)",
        "(operationByIndex,OperationByindex)",
        "(operationCurrent,OperationCurrent)",
        "(operationEntrycount,OperationEntrycount)",
        "(origHeadId,OrigHeadId)",
        "(origHeadName,OrigHeadName)",
        "(addAll,AddAll)",
        "(addByPath,AddBypath)",
        "(caps,Caps)",
        "(checksum,Checksum)",
        "(conflictAdd,ConflictAdd)",
        "(conflictCleanup,ConflictCleanup)",
        "(conflictGet,ConflictGet)",
        "(conflictRemove,ConflictRemove)",
        "(entryIsConflict,EntryIsConflict)",
        "(entryStage,EntryStage)",
        "(findPrefix,FindPrefix)",
        "(getByIndex,GetByindex)",
        "(getByPath,GetBypath)",
        "(hasConflicts,HasConflicts)",
        "(readTree,ReadTree)",
        "(removeAll,RemoveAll)",
        "(removeByPath,RemoveBypath)",
        "(removeDirectory,RemoveDirectory)",
        "(setCaps,SetCaps)",
        "(setVersion,SetVersion)",
        "(updateAll,UpdateAll)",
        "(writeTree,WriteTree)",
        "(writeTreeTo,WriteTreeTo)",
        "(createFromDisk,CreateFromDisk)",
        "(createFromWorkdir,CreateFromWorkdir)",
        "(filter,Filter)",
        "(filteredContent,FilteredContent)",
        "(rawcontent,Rawcontent)",
        "(rawsize,Rawsize)",
        "(toTree,ToTree)",
        "(addFetch,AddFetch)",
        "(addPush,AddPush)",
        "(autotag,Autotag)",
        "(connect,Connect)",
        "(connected,Connected)",
        "(createAnonymous,CreateAnonymous)",
        "(createDetached,CreateDetached)",
        "(createWithFetchspec,CreateWithFetchspec)",
        "(createWithOpts,CreateWithOpts)",
        "(defaultBranch,DefaultBranch)",
        "(disconnect,Disconnect)",
        "(download,Download)",
        "(fetch,Fetch)",
        "(getFetchRefspecs,GetFetchRefspecs)",
        "(getPushRefspecs,GetPushRefspecs)",
        "(getRefspec,GetRefspec)",
        "(pruneRefs,PruneRefs)",
        "(pushurl,Pushurl)",
        "(refspecCount,RefspecCount)",
        "(setAutotag,SetAutotag)",
        "(setPushurl,SetPushurl)",
        "(stats,Stats)",
        "(stop,Stop)",
        "(updateTips,UpdateTips)",
        "(upload,Upload)",
        "(referenceList,ReferenceList)",
        "(isGitfile,IsGitfile)",
        "(lookupByPath,LookupBypath)",
        "(shortId,ShortId)",
        "(string2Type,String2type)",
        "(type2String,Type2string)",
        "(typeisloose,Typeisloose)",
        "(hashMd5,HashMd5)",
        "(hashSha1,HashSha1)",
        "(hashSha256,HashSha256)",
        "(fromFetchhead,FromFetchhead)",
        "(fromRef,FromRef)",
        "(fromRevspec,FromRevspec)",
        "(ref,Ref)",
        "(hash,Hash)",
        "(insertCommit,InsertCommit)",
        "(insertRecur,InsertRecur)",
        "(insertTree,InsertTree)",
        "(insertWalk,InsertWalk)",
        "(objectCount,ObjectCount)",
        "(setThreads,SetThreads)",
        "(written,Written)",
        "(addRule,AddRule)",
        "(clearInternalRules,ClearInternalRules)",
        "(pathIsIgnored,PathIsIgnored)",
        "(certType,CertType)",
        "(cpy,Cpy)",
        "(equal,Equal)",
        "(fromString,Fromstrp)",
        "(isZero,IsZero)",
        "(iszero,Iszero)",
        "(ncmp,Ncmp)",
        "(strcmp,Strcmp)",
        "(streq,Streq)",
        "(tostrS,TostrS)",
        "(filesChanged,FilesChanged)",
        "(insertions,Insertions)",
        "(deletions,Deletions)",
        "(toBuf,DiffStatsToBuf)",
        "(deleteEntry,DeleteEntry)",
        "(deleteMultivar,DeleteMultivar)",
        "(findGlobal,FindGlobal)",
        "(findProgramdata,FindProgramdata)",
        "(findSystem,FindSystem)",
        "(findXdg,FindXdg)",
        "(getBool,GetBool)",
        "(getEntry,GetEntry)",
        "(getInt32,GetInt32)",
        "(getInt64,GetInt64)",
        "(getPath,GetPath)",
        "(getStringBuf,GetStringBuf)",
        "(openDefault,OpenDefault)",
        "(openOndisk,OpenOndisk)",
        "(setBool,SetBool)",
        "(setInt32,SetInt32)",
        "(setInt64,SetInt64)",
        "(setMultivar,SetMultivar)",
        "(setString,SetString)",
        "(snapshot,Snapshot)",
        "(headToIndex,HeadToIndex)",
        "(toBuffer,ToBuffer)",
        "(createUpdated,CreateUpdated)",
        "(entryById,EntryByid)",
        "(_entryByIndex,EntryByindex)",
        "(_entryByName,EntryByname)",
        "(entryByPath,EntryBypath)",
        "(entryCmp,EntryCmp)",
        "(repo,Repo)"
      ]
    },
    "mcrypt": {
      "Gasket": [
        "(validateKeySize,ValidateKeySize)",
        "(getModeNames,GetModeNames)",
        "(getIvSize,GetIvSize)",
        "(isBlockAlgorithm,IsBlockAlgorithm)",
        "(open,Open)",
        "(selfTest,SelfTest)",
        "(hasIv,HasIv)",
        "(getBlockSize,GetBlockSize)",
        "(isBlockMode,IsBlockMode)",
        "(validateIvSize,ValidateIvSize)",
        "(generateIv,GenerateIv)",
        "(MCrypt,New)",
        "(getAlgorithmNames,GetAlgorithmNames)",
        "(getKeySize,GetKeySize)",
        "(isBlockAlgorithmMode,IsBlockAlgorithmMode)",
        "(encrypt,Encrypt)",
        "(getSupportedKeySizes,GetSupportedKeySizes)",
        "(getModeName,GetModeName)",
        "(decrypt,Decrypt)",
        "(getAlgorithmName,GetAlgorithmName)"
      ],
      "Charon": []
    },
    "megahash": {
      "Gasket": [
        "(_get,Get)",
        "(_set,Set)",
        "(_firstKey,FirstKey)",
        "(stats,Stats)",
        "(MegaHash,MegaHash)",
        "(_has,Has)",
        "(clear,Clear)",
        "(_nextKey,NextKey)",
        "(_remove,Remove)"
      ],
      "Charon": [
        "(_set,MegaHash)",
        "(numIndexes,Index)"
      ]
    },
    "@meteorjs/pathwatcher": {
      "Gasket": [
        "(get,Get)",
        "(has,Has)",
        "(unwatch,Unwatch)",
        "(remove,Remove)",
        "(HandleMap,New)",
        "(setCallback,SetCallback)",
        "(values,Values)",
        "(clear,Clear)",
        "(add,Add)",
        "(watch,Watch)"
      ],
      "Charon": [
        "(add,Add)",
        "(get,Get)",
        "(has,Has)",
        "(values,Values)",
        "(remove,Remove)",
        "(clear,Clear)",
        "(setCallback,SetCallback)",
        "(watch,Watch)",
        "(unwatch,Unwatch)",
        "(0,handle)"
      ]
    },
    "@meza/curseforge-fingerprint": {
      "Gasket": [
        "(fingerprint,HashIt)"
      ],
      "Charon": []
    },
    "mfont": {
      "Gasket": [
        "(installFont,InstallFont)",
        "(removeFont,RemoveFont)",
        "(getError,GetError)",
        "(hasFont,HasFont)"
      ],
      "Charon": [
        "(hasFont,HasFont)",
        "(installFont,InstallFont)",
        "(removeFont,RemoveFont)",
        "(getError,GetError)"
      ]
    },
    "mg-dbx": {
      "Gasket": [
        "(execute,Execute)",
        "(setloglevel,SetLogLevel)",
        "(mglobalquery,MGlobalQuery)",
        "(merge,Merge)",
        "(getproperty,GetProperty)",
        "(method,Method)",
        "(logmessage,LogMessage)",
        "(mglobalquery_close,MGlobalQuery_Close)",
        "(mclass,New)",
        "(sleep,Sleep)",
        "(delete,Delete)",
        "(function_bx,ExtFunction_bx)",
        "(mcursor,New)",
        "(set,Set)",
        "(benchmark,Benchmark)",
        "(defined,Defined)",
        "(tstart,TStart)",
        "(tlevel,TLevel)",
        "(classmethod_close,ClassMethod_Close)",
        "(mglobal_close,MGlobal_Close)",
        "(function,ExtFunction)",
        "(lock,Lock)",
        "(charset,Charset)",
        "(trollback,TRollback)",
        "(version,Version)",
        "(increment,Increment)",
        "(method_bx,Method_bx)",
        "(get_bx,Get_bx)",
        "(mglobal,MGlobal)",
        "(namespace,Namespace)",
        "(dbx,New)",
        "(setproperty,SetProperty)",
        "(close,Close)",
        "(sql_close,SQL_Close)",
        "(tcommit,TCommit)",
        "(classmethod_bx,ClassMethod_bx)",
        "(next,Next)",
        "(mglobal,New)",
        "(classmethod,ClassMethod)",
        "(unlock,Unlock)",
        "(geterrormessage,GetErrorMessage)",
        "(sql,SQL)",
        "(reset,Reset)",
        "(open,Open)",
        "(getproperty_bx,GetProperty_bx)",
        "(_close,Close)",
        "(settimeout,SetTimeout)",
        "(previous,Previous)",
        "(get,Get)",
        "(cleanup,Cleanup)"
      ],
      "Charon": [
        "(execute,Execute)",
        "(cleanup,Cleanup)",
        "(next,Next)",
        "(previous,Previous)",
        "(reset,Reset)",
        "(_close,Close)",
        "(get,Get)",
        "(get_bx,Get_bx)",
        "(set,Set)",
        "(defined,Defined)",
        "(delete,Delete)",
        "(increment,Increment)",
        "(lock,Lock)",
        "(unlock,Unlock)",
        "(merge,Merge)",
        "(version,Version)",
        "(setloglevel,SetLogLevel)",
        "(settimeout,SetTimeout)",
        "(geterrormessage,GetErrorMessage)",
        "(logmessage,LogMessage)",
        "(charset,Charset)",
        "(open,Open)",
        "(close,Close)",
        "(namespace,Namespace)",
        "(mglobal,MGlobal)",
        "(mglobal_close,MGlobal_Close)",
        "(mglobalquery,MGlobalQuery)",
        "(mglobalquery_close,MGlobalQuery_Close)",
        "(function,ExtFunction)",
        "(function_bx,ExtFunction_bx)",
        "(classmethod,ClassMethod)",
        "(classmethod_bx,ClassMethod_bx)",
        "(classmethod_close,ClassMethod_Close)",
        "(sql,SQL)",
        "(sql_close,SQL_Close)",
        "(tstart,TStart)",
        "(tlevel,TLevel)",
        "(tcommit,TCommit)",
        "(trollback,TRollback)",
        "(sleep,Sleep)",
        "(benchmark,Benchmark)",
        "(method,Method)",
        "(method_bx,Method_bx)",
        "(setproperty,SetProperty)",
        "(getproperty,GetProperty)",
        "(getproperty_bx,GetProperty_bx)"
      ]
    },
    "@microcode/canary": {
      "Gasket": [
        "(start,start)",
        "(ping,ping)",
        "(stop,stop)"
      ],
      "Charon": []
    },
    "@microsoft/ads-kerberos": {
      "Gasket": [
        "(initializeClient,InitializeClient)",
        "(step,Step)",
        "(initializeServer,InitializeServer)",
        "(wrap,WrapData)",
        "(_testMethod,TestMethod)",
        "(principalDetails,PrincipalDetails)",
        "(unwrap,UnwrapData)",
        "(checkPassword,CheckPassword)"
      ],
      "Charon": [
        "(step,Step)",
        "(wrap,WrapData)",
        "(unwrap,UnwrapData)",
        "(username,KerberosClient)",
        "(response,KerberosClient)",
        "(responseConf,KerberosClient)",
        "(contextComplete,KerberosClient)",
        "(username,KerberosServer)",
        "(response,KerberosServer)",
        "(targetName,KerberosServer)",
        "(contextComplete,KerberosServer)",
        "(initializeClient,InitializeClient)",
        "(initializeServer,InitializeServer)",
        "(principalDetails,PrincipalDetails)",
        "(checkPassword,CheckPassword)",
        "(_testMethod,TestMethod)"
      ]
    },
    "microtime": {
      "Gasket": [
        "(nowDouble,NowDouble)",
        "(nowStruct,NowStruct)",
        "(now,Now)"
      ],
      "Charon": [
        "(syscall,String)",
        "(errno,Number)",
        "(code,Number)",
        "(now,Now)",
        "(nowDouble,NowDouble)",
        "(nowStruct,NowStruct)"
      ]
    },
    "microvium": {
      "Gasket": [
        "(call,call)",
        "(resolveExport,resolveExport)",
        "(newBoolean,newBoolean)",
        "(newString,newString)",
        "(getInstructionCountRemaining,getInstructionCountRemaining)",
        "(newNumber,newNumber)",
        "(deref,deref)",
        "(typeOf,typeOf)",
        "(WeakRef,WeakRef)",
        "(uint8ArrayFromBytes,uint8ArrayFromBytes)",
        "(setCoverageCallback,setCoverageCallback)",
        "(NativeVM,NativeVM)",
        "(runGC,runGC)",
        "(getMemoryStats,getMemoryStats)",
        "(createSnapshot,createSnapshot)",
        "(stopAfterNInstructions,stopAfterNInstructions)",
        "(asyncStart,asyncStart)"
      ],
      "Charon": [
        "(totalSize,Number)",
        "(fragmentCount,Number)",
        "(coreSize,Number)",
        "(importTableSize,Number)",
        "(globalVariablesSize,Number)",
        "(registersSize,Number)",
        "(stackHeight,Number)",
        "(stackAllocatedCapacity,Number)",
        "(stackHighWaterMark,Number)",
        "(virtualHeapUsed,Number)",
        "(virtualHeapHighWaterMark,Number)",
        "(virtualHeapAllocatedCapacity,Number)"
      ]
    },
    "midi": {
      "Gasket": [
        "(isPortOpen,IsPortOpen)",
        "(openPort,OpenPort)",
        "(ignoreTypes,IgnoreTypes)",
        "(getPortCount,GetPortCount)",
        "(Output,New)",
        "(openVirtualPort,OpenVirtualPort)",
        "(closePort,ClosePort)",
        "(send,Send)",
        "(Input,New)",
        "(getPortName,GetPortName)",
        "(sendMessage,Send)"
      ],
      "Charon": [
        "(getPortCount,GetPortCount)",
        "(getPortName,GetPortName)",
        "(openPort,OpenPort)",
        "(openVirtualPort,OpenVirtualPort)",
        "(closePort,ClosePort)",
        "(isPortOpen,IsPortOpen)",
        "(ignoreTypes,IgnoreTypes)",
        "(sendMessage,Send)",
        "(send,Send)"
      ]
    },
    "midi-test": {
      "Gasket": [
        "(emit,emit)",
        "(connect,connect)",
        "(MidiDst,MidiDst)",
        "(MidiSrc,MidiSrc)",
        "(disconnect,disconnect)"
      ],
      "Charon": []
    },
    "minimp3": {
      "Gasket": [
        "(decodeBuffer,DecodeBuffer)"
      ],
      "Charon": [
        "(decodeBuffer,DecodeBuffer)"
      ]
    },
    "minipg": {
      "Gasket": [
        "(connect,Connect)",
        "(finished,IsFinished)",
        "(lastError,LastError)",
        "(getResults,GetResults)",
        "(getResult,GetResult)",
        "(close,Close)",
        "(query,Query)",
        "(setNoticeProcessor,SetNoticeProcessor)",
        "(Client,New)"
      ],
      "Charon": [
        "(connect,Connect)",
        "(query,Query)",
        "(close,Close)",
        "(getResult,GetResult)",
        "(getResults,GetResults)",
        "(lastError,LastError)",
        "(finished,IsFinished)",
        "(setNoticeProcessor,SetNoticeProcessor)"
      ]
    },
    "minisqlite": {
      "Gasket": [
        "(Statement,New)",
        "(finished,IsFinished)",
        "(lastError,LastError)",
        "(getResults,GetResults)",
        "(Database,New)",
        "(close,Close)",
        "(open,Open)",
        "(query,Query)",
        "(lastInsertID,LastInsertID)",
        "(createFunction,CreateFunction)"
      ],
      "Charon": [
        "(open,Open)",
        "(lastError,LastError)",
        "(lastInsertID,LastInsertID)",
        "(close,Close)",
        "(createFunction,CreateFunction)",
        "(query,Query)",
        "(getResults,GetResults)",
        "(finished,IsFinished)",
        "(name,columnName)",
        "(type,columnType)"
      ]
    },
    "@minko-fe/sharp": {
      "Gasket": [
        "(counters,counters)",
        "(format,format)",
        "(pipeline,pipeline)",
        "(_maxColourDistance,_maxColourDistance)",
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(libvipsVersion,libvipsVersion)",
        "(cache,cache)",
        "(block,block)",
        "(stats,stats)",
        "(concurrency,concurrency)",
        "(simd,simd)",
        "(metadata,metadata)"
      ],
      "Charon": [
        "(semver,String)",
        "(isGlobal,Boolean)",
        "(isWasm,Boolean)",
        "(metadata,metadata)",
        "(pipeline,pipeline)",
        "(cache,cache)",
        "(concurrency,concurrency)",
        "(counters,counters)",
        "(simd,simd)",
        "(libvipsVersion,libvipsVersion)",
        "(format,format)",
        "(block,block)",
        "(_maxColourDistance,_maxColourDistance)",
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(stats,stats)"
      ]
    },
    "@mirror_cy/sharp": {
      "Gasket": [
        "(counters,counters)",
        "(format,format)",
        "(pipeline,pipeline)",
        "(_maxColourDistance,_maxColourDistance)",
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(libvipsVersion,libvipsVersion)",
        "(cache,cache)",
        "(stats,stats)",
        "(concurrency,concurrency)",
        "(simd,simd)",
        "(metadata,metadata)"
      ],
      "Charon": [
        "(metadata,metadata)",
        "(pipeline,pipeline)",
        "(cache,cache)",
        "(concurrency,concurrency)",
        "(counters,counters)",
        "(simd,simd)",
        "(libvipsVersion,libvipsVersion)",
        "(format,format)",
        "(_maxColourDistance,_maxColourDistance)",
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(stats,stats)"
      ]
    },
    "mishiro-core": {
      "Gasket": [
        "(setProgressCallback,_setProgressCallback)",
        "(wav2aac,_wav2aac)",
        "(getProgressCallback,_getProgressCallback)",
        "(lz4dec,_lz4dec)",
        "(wav2mp3,_wav2mp3)"
      ],
      "Charon": []
    },
    "@miup/napi-demo": {
      "Gasket": [
        "(HelloWord,HelloWord)"
      ],
      "Charon": [
        "(HelloWord,HelloWord)"
      ]
    },
    "mker": {
      "Gasket": [
        "(compile,compile)"
      ],
      "Charon": []
    },
    "mkfifo": {
      "Gasket": [
        "(mkfifoSync,MkfifoSync)",
        "(mkfifo,MkfifoAsync)"
      ],
      "Charon": [
        "(mkfifoSync,MkfifoSync)",
        "(mkfifo,MkfifoAsync)"
      ]
    },
    "mmap-mio": {
      "Gasket": [
        "(buffer,buffer)",
        "(sync,sync)",
        "(size,size)",
        "(isMapped,isMapped)",
        "(ReadOnlyMappedFile,0)",
        "(MappedFile,1)",
        "(unmap,unmap)"
      ],
      "Charon": []
    },
    "modern-syslog": {
      "Gasket": [
        "(setlogmask,SetLogMask)",
        "(syslog,SysLog)",
        "(closelog,CloseLog)",
        "(openlog,OpenLog)"
      ],
      "Charon": [
        "(setlogmask,SetLogMask)",
        "(openlog,OpenLog)",
        "(syslog,SysLog)",
        "(closelog,CloseLog)"
      ]
    },
    "@modum-io/bluetooth-hci-socket": {
      "Gasket": [
        "(BluetoothHciSocket,New)",
        "(bindRaw,BindRaw)",
        "(start,Start)",
        "(getDeviceList,GetDeviceList)",
        "(stop,Stop)",
        "(setFilter,SetFilter)",
        "(write,Write)",
        "(isDevUp,IsDevUp)",
        "(bindUser,BindUser)",
        "(bindControl,BindControl)"
      ],
      "Charon": [
        "(start,Start)",
        "(bindRaw,BindRaw)",
        "(bindUser,BindUser)",
        "(bindControl,BindControl)",
        "(isDevUp,IsDevUp)",
        "(getDeviceList,GetDeviceList)",
        "(setFilter,SetFilter)",
        "(stop,Stop)",
        "(write,Write)"
      ]
    },
    "moncoin-crypto": {
      "Gasket": [
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(derivePublicKey,derivePublicKey)",
        "(completeRingSignatures,completeRingSignatures)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(generatePartialSigningKey,generatePartialSigningKey)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(checkKey,checkKey)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(generateKeys,generateKeys)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(checkSignature,checkSignature)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(prepareRingSignatures,prepareRingSignatures)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(calculateSharedPublicKey,calculateSharedPublicKey)",
        "(scReduce32,scReduce32)",
        "(cnFastHash,cn_fast_hash)",
        "(calculateSharedPrivateKey,calculateSharedPrivateKey)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(tree_branch,tree_branch)",
        "(underivePublicKey,underivePublicKey)",
        "(generateSignature,generateSignature)",
        "(hashToScalar,hashToScalar)",
        "(tree_hash,tree_hash)",
        "(generateKeyImage,generateKeyImage)",
        "(deriveSecretKey,deriveSecretKey)",
        "(restoreRingSignatures,restoreRingSignatures)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(tree_depth,tree_depth)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(restoreKeyImage,restoreKeyImage)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(generateRingSignatures,generateRingSignatures)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(cn_fast_hash,cn_fast_hash)",
        "(chukwa_slow_hash,chukwa_slow_hash)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(calculateMultisigPrivateKeys,calculateMultisigPrivateKeys)",
        "(scalarmultKey,scalarmultKey)",
        "(checkRingSignature,checkRingSignature)",
        "(generateKeyDerivation,generateKeyDerivation)"
      ],
      "Charon": [
        "(calculateMultisigPrivateKeys,calculateMultisigPrivateKeys)",
        "(calculateSharedPrivateKey,calculateSharedPrivateKey)",
        "(calculateSharedPublicKey,calculateSharedPublicKey)",
        "(generatePartialSigningKey,generatePartialSigningKey)",
        "(prepareRingSignatures,prepareRingSignatures)",
        "(completeRingSignatures,completeRingSignatures)",
        "(restoreRingSignatures,restoreRingSignatures)",
        "(restoreKeyImage,restoreKeyImage)",
        "(checkKey,checkKey)",
        "(checkRingSignature,checkRingSignature)",
        "(checkSignature,checkSignature)",
        "(derivePublicKey,derivePublicKey)",
        "(deriveSecretKey,deriveSecretKey)",
        "(generateKeys,generateKeys)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(generateKeyImage,generateKeyImage)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(generateRingSignatures,generateRingSignatures)",
        "(generateSignature,generateSignature)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(hashToScalar,hashToScalar)",
        "(scalarmultKey,scalarmultKey)",
        "(scReduce32,scReduce32)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(tree_depth,tree_depth)",
        "(tree_hash,tree_hash)",
        "(tree_branch,tree_branch)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(underivePublicKey,underivePublicKey)",
        "(cnFastHash,cn_fast_hash)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(chukwa_slow_hash,chukwa_slow_hash)"
      ]
    },
    "mongodb-client-encryption": {
      "Gasket": [
        "(nextKMSRequest,NextKMSRequest)",
        "(finalize,FinalizeContext)",
        "(addMongoOperationResponse,AddMongoOperationResponse)",
        "(MongoCryptContextCtor,MongoCryptContext)",
        "(finishMongoOperation,FinishMongoOperation)",
        "(makeExplicitDecryptionContext,MakeExplicitDecryptionContext)",
        "(nextMongoOperation,NextMongoOperation)",
        "(makeExplicitEncryptionContext,MakeExplicitEncryptionContext)",
        "(makeDecryptionContext,MakeDecryptionContext)",
        "(provideKMSProviders,ProvideKMSProviders)",
        "(makeDataKeyContext,MakeDataKeyContext)",
        "(makeRewrapManyDataKeyContext,MakeRewrapManyDataKeyContext)",
        "(addResponse,AddResponse)",
        "(fail,Fail)",
        "(makeEncryptionContext,MakeEncryptionContext)",
        "(MongoCrypt,MongoCrypt)",
        "(finishKMSRequests,FinishKMSRequests)",
        "(MongoCryptKMSRequestCtor,MongoCryptKMSRequest)"
      ],
      "Charon": []
    },
    "@mongodb-js/zstd": {
      "Gasket": [
        "(compress,Compress)",
        "(decompress,Decompress)"
      ],
      "Charon": [
        "(compress,Compress)",
        "(decompress,Decompress)"
      ]
    },
    "mongo-dbx": {
      "Gasket": [
        "(retrieve,Retrieve)",
        "(command,Command)",
        "(server,New)",
        "(version,Version)",
        "(find,Retrieve)",
        "(object_id,Object_ID)",
        "(create_index,Create_Index)",
        "(insert,Insert)",
        "(about,About)",
        "(object_id_date,Object_ID_Date)",
        "(update,Update)",
        "(insert_batch,Insert_Batch)",
        "(close,Close)",
        "(remove,Remove)",
        "(open,Open)"
      ],
      "Charon": [
        "(about,About)",
        "(version,Version)",
        "(open,Open)",
        "(close,Close)",
        "(retrieve,Retrieve)",
        "(find,Retrieve)",
        "(insert,Insert)",
        "(insert_batch,Insert_Batch)",
        "(update,Update)",
        "(remove,Remove)",
        "(command,Command)",
        "(create_index,Create_Index)",
        "(object_id,Object_ID)",
        "(object_id_date,Object_ID_Date)"
      ]
    },
    "monoclock": {
      "Gasket": [
        "(getTime,GetTime)"
      ],
      "Charon": [
        "(getTime,GetTime)"
      ]
    },
    "@morajabi/robotjs": {
      "Gasket": [
        "(setKeyboardDelay,setKeyboardDelay)",
        "(dragMouse,dragMouse)",
        "(mouseToggle,mouseToggle)",
        "(typeString,typeString)",
        "(getPixelColor,getPixelColor)",
        "(setXDisplayName,setXDisplayName)",
        "(mouseClick,mouseClick)",
        "(typeStringDelayed,typeStringDelayed)",
        "(scrollMouse,scrollMouse)",
        "(getXDisplayName,getXDisplayName)",
        "(keyToggle,keyToggle)",
        "(keyTap,keyTap)",
        "(getMousePos,getMousePos)",
        "(captureScreen,captureScreen)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(setMouseDelay,setMouseDelay)",
        "(getScreenSize,getScreenSize)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "mountutils": {
      "Gasket": [
        "(eject,eject)",
        "(unmountDisk,unmountDisk)"
      ],
      "Charon": [
        "(unmountDisk,unmountDisk)",
        "(eject,eject)"
      ]
    },
    "mouse-forward-back": {
      "Gasket": [
        "(register,GetEvents)"
      ],
      "Charon": [
        "(register,GetEvents)"
      ]
    },
    "@movable/hash_ring": {
      "Gasket": [
        "(HashRing,HashRingWrap)",
        "(getNode,GetNode)",
        "(getBuckets,GetBuckets)"
      ],
      "Charon": []
    },
    "@movei/tree-sitter-move": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "mp4decrypt-buffer": {
      "Gasket": [
        "(decrypt,Decrypt)"
      ],
      "Charon": []
    },
    "mp4decryptjs": {
      "Gasket": [
        "(decrypt,Decrypt)"
      ],
      "Charon": []
    },
    "mpu6050-dmp": {
      "Gasket": [
        "(getAttitude,GetAttitude)",
        "(initialize,Initialize)",
        "(getRotation,GetRotation)"
      ],
      "Charon": [
        "(getAttitude,GetAttitude)",
        "(getRotation,GetRotation)",
        "(initialize,Initialize)"
      ]
    },
    "mpzjs": {
      "Gasket": [
        "(invert,Invert)",
        "(shiftLeft,ShiftLeft)",
        "(assignShiftRight,AssignShiftRight)",
        "(gcd,Gcd)",
        "(assignAnd,AssignAnd)",
        "(assignAdd,AssignAdd)",
        "(div,Div)",
        "(assignAddMul,AssignAddMul)",
        "(neg,Neg)",
        "(assignOr,AssignOr)",
        "(assignPowm,AssignPowm)",
        "(assignNot,AssignNot)",
        "(assignRoot,AssignRoot)",
        "(assignXor,AssignXor)",
        "(shiftRight,ShiftRight)",
        "(assignMod,AssignMod)",
        "(add,Add)",
        "(assignRand,AssignRand)",
        "(assignGcd,AssignGcd)",
        "(assignPow,AssignPow)",
        "(set,Set)",
        "(sub,Sub)",
        "(not,Not)",
        "(abs,Abs)",
        "(powm,Powm)",
        "(rand,Rand)",
        "(or,Or)",
        "(MPZInternal,MPZ)",
        "(assignMul,AssignMul)",
        "(sqrt,Sqrt)",
        "(toString,ToString)",
        "(compare,Compare)",
        "(mod,Mod)",
        "(xor,Xor)",
        "(assignSubMul,AssignSubMul)",
        "(assignSqrt,AssignSqrt)",
        "(probPrime,ProbPrime)",
        "(root,Root)",
        "(assignDiv,AssignDiv)",
        "(assignShiftLeft,AssignShiftLeft)",
        "(assignNeg,AssignNeg)",
        "(and,And)",
        "(bitLength,BitLength)",
        "(nextPrime,NextPrime)",
        "(assignSub,AssignSub)",
        "(assignNextPrime,AssignNextPrime)",
        "(pow,Pow)",
        "(assignAbs,AssignAbs)",
        "(assignInvert,AssignInvert)",
        "(toNumber,ToNumber)",
        "(mul,Mul)"
      ],
      "Charon": [
        "(set,MPZ)"
      ]
    },
    "mrchandler": {
      "Gasket": [
        "(getData,getData)",
        "(toPixels,toPixels)",
        "(getHeader,getHeader)"
      ],
      "Charon": [
        "(getHeader,getHeader)",
        "(getData,getData)",
        "(toPixels,toPixels)"
      ]
    },
    "mrmr": {
      "Gasket": [
        "(murmur3_tweak,mrmr_murmur3_tweak)",
        "(murmur3_sum,mrmr_murmur3_sum)"
      ],
      "Charon": []
    },
    "ms-flakeless": {
      "Gasket": [
        "(Flakeless,New)",
        "(next,Next)"
      ],
      "Charon": [
        "(next,Next)"
      ]
    },
    "msgpackr-extract": {
      "Gasket": [
        "(extractStrings,extractStrings)"
      ],
      "Charon": []
    },
    "msoconv": {
      "Gasket": [
        "(conv,conv)"
      ],
      "Charon": []
    },
    "mt-bsdiff-nodejs": {
      "Gasket": [
        "(diffSync,diffSync)",
        "(diff,diff)",
        "(patchSync,patchSync)",
        "(patch,patch)"
      ],
      "Charon": [
        "(diff,diff)",
        "(diffSync,diffSync)",
        "(patch,patch)",
        "(patchSync,patchSync)"
      ]
    },
    "mt-plugin-test": {
      "Gasket": [
        "(getUserName,getUserName)",
        "(getStrLength,getStrLength)",
        "(getTime,GetTimestamp)"
      ],
      "Charon": []
    },
    "mt-resource-diff-patch": {
      "Gasket": [
        "(diffSync,diffSync)",
        "(diff,diff)",
        "(patchSync,patchSync)",
        "(patch,patch)"
      ],
      "Charon": [
        "(diff,diff)",
        "(diffSync,diffSync)",
        "(patch,patch)",
        "(patchSync,patchSync)"
      ]
    },
    "mt-test-node-02": {
      "Gasket": [
        "(getUserName,getUserName)",
        "(getStrLength,getStrLength)",
        "(getTime,GetTimestamp)"
      ],
      "Charon": []
    },
    "@muchmore/opus": {
      "Gasket": [
        "(decode,Decode)",
        "(getBitrate,GetBitrate)",
        "(encode,Encode)",
        "(setBitrate,SetBitrate)",
        "(applyEncoderCTL,ApplyEncoderCTL)",
        "(OpusEncoder,OpusEncoder)",
        "(applyDecoderCTL,ApplyDecoderCTL)"
      ],
      "Charon": [
        "(setBitrate,OpusEncoder)"
      ]
    },
    "@muffinista/goto-sleep": {
      "Gasket": [
        "(gotoSleep,gotoSleep)",
        "(lockScreen,lockScreen)"
      ],
      "Charon": [
        "(gotoSleep,gotoSleep)",
        "(lockScreen,lockScreen)"
      ]
    },
    "muhammara": {
      "Gasket": [
        "(createReader,CreateReader)",
        "(InputFile,New)",
        "(getTypeLabel,GetTypeLabel)",
        "(mergePDFPagesToPage,MergePDFPagesToPage)",
        "(closeFile,CloseFile)",
        "(shutdown,Shutdown)",
        "(createImageXObjectFromJPG,CreateImageXObjectFromJPG)",
        "(createWriterToContinue,CreateWriterToContinue)",
        "(attachURLLinktoCurrentPage,AttachURLLinktoCurrentPage)",
        "(writePage,WritePage)",
        "(getDocumentContext,GetDocumentContext)",
        "(createPDFCopyingContextForModifiedFile,CreatePDFCopyingContextForModifiedFile)",
        "(writePageAndReturnID,WritePageAndReturnID)",
        "(getModifiedInputFile,GetModifiedInputFile)",
        "(PDFWriter,New)",
        "(pausePageContentContext,PausePageContentContext)",
        "(endFormXObject,EndFormXObject)",
        "(startPageContentContext,StartPageContentContext)",
        "(getOutputStream,GetOutputStream)",
        "(recrypt,Recrypt)",
        "(getContext,GetContext)",
        "(fromString,FromString)",
        "(getFileSize,GetFileSize)",
        "(createFormXObjectFromTIFF,CreateFormXObjectFromTIFF)",
        "(PDFPageModifier,New)",
        "(PDFPage,New)",
        "(PDFDate,New)",
        "(createFormXObject,CreateFormXObject)",
        "(createFormXObjectFromJPG,CreateformXObjectFromJPG)",
        "(appendPDFPagesFromPDF,AppendPDFPagesFromPDF)",
        "(retrieveJPGImageInformation,RetrieveJPGImageInformation)",
        "(getImagePagesCount,GetImagePagesCount)",
        "(end,End)",
        "(requireCatalogUpdate,RequireCatalogUpdate)",
        "(createFormXObjectsFromPDF,CreateFormXObjectsFromPDF)",
        "(openFile,OpenFile)",
        "(OutputFile,New)",
        "(createPDFDate,CreatePDFDate)",
        "(getInputStream,GetInputStream)",
        "(createPDFCopyingContext,CreatePDFCopyingContext)",
        "(getResourcesDictionary,GetResourcesDictionary)",
        "(createWriter,CreateWriter)",
        "(getObjectsContext,GetObjectsContext)",
        "(PDFTextString,New)",
        "(createPage,CreatePage)",
        "(setToCurrentTime,SetToCurrentTime)",
        "(createWriterToModify,CreateWriterToModify)",
        "(getFilePath,GetFilePath)",
        "(createPDFTextString,CreatePDFTextString)",
        "(getFontForFile,GetFontForFile)",
        "(startContext,StartContext)",
        "(getImageType,GetImageType)",
        "(createFormXObjectFromPNG,CreateFormXObjectFromPNG)",
        "(registerAnnotationReferenceForNextPageWrite,RegisterAnnotationReferenceForNextPageWrite)",
        "(endContext,EndContext)",
        "(getOutputFile,GetOutputFile)",
        "(toString,ToString)",
        "(getModifiedFileParser,GetModifiedFileParser)",
        "(toBytesArray,ToBytesArray)",
        "(getImageDimensions,GetImageDimensions)"
      ],
      "Charon": [
        "(end,End)",
        "(createPage,CreatePage)",
        "(writePage,WritePage)",
        "(writePageAndReturnID,WritePageAndReturnID)",
        "(startPageContentContext,StartPageContentContext)",
        "(pausePageContentContext,PausePageContentContext)",
        "(createFormXObject,CreateFormXObject)",
        "(endFormXObject,EndFormXObject)",
        "(createFormXObjectFromJPG,CreateformXObjectFromJPG)",
        "(getFontForFile,GetFontForFile)",
        "(attachURLLinktoCurrentPage,AttachURLLinktoCurrentPage)",
        "(shutdown,Shutdown)",
        "(createFormXObjectFromTIFF,CreateFormXObjectFromTIFF)",
        "(createImageXObjectFromJPG,CreateImageXObjectFromJPG)",
        "(createFormXObjectFromPNG,CreateFormXObjectFromPNG)",
        "(retrieveJPGImageInformation,RetrieveJPGImageInformation)",
        "(getObjectsContext,GetObjectsContext)",
        "(getDocumentContext,GetDocumentContext)",
        "(appendPDFPagesFromPDF,AppendPDFPagesFromPDF)",
        "(mergePDFPagesToPage,MergePDFPagesToPage)",
        "(createPDFCopyingContext,CreatePDFCopyingContext)",
        "(createFormXObjectsFromPDF,CreateFormXObjectsFromPDF)",
        "(createPDFCopyingContextForModifiedFile,CreatePDFCopyingContextForModifiedFile)",
        "(createPDFTextString,CreatePDFTextString)",
        "(createPDFDate,CreatePDFDate)",
        "(getImageDimensions,GetImageDimensions)",
        "(getImagePagesCount,GetImagePagesCount)",
        "(getImageType,GetImageType)",
        "(getModifiedFileParser,GetModifiedFileParser)",
        "(getModifiedInputFile,GetModifiedInputFile)",
        "(getOutputFile,GetOutputFile)",
        "(registerAnnotationReferenceForNextPageWrite,RegisterAnnotationReferenceForNextPageWrite)",
        "(requireCatalogUpdate,RequireCatalogUpdate)",
        "(getObjectID,GetObjectID)",
        "(getVersion,GetVersion)",
        "(openFile,OpenFile)",
        "(closeFile,CloseFile)",
        "(getFilePath,GetFilePath)",
        "(getOutputStream,GetOutputStream)",
        "(getCurrentPageContentStream,GetCurrentPageContentStream)",
        "(getAssociatedPage,GetAssociatedPage)",
        "(toText,ToText)",
        "(toBytesArray,ToBytesArray)",
        "(addFormXObjectMapping,AddFormXObjectMapping)",
        "(addImageXObjectMapping,AddImageXObjectMapping)",
        "(addProcsetResource,AddProcsetResource)",
        "(addExtGStateMapping,AddExtGStateMapping)",
        "(addFontMapping,AddFontMapping)",
        "(addColorSpaceMapping,AddColorSpaceMapping)",
        "(addPatternMapping,AddPatternMapping)",
        "(addPropertyMapping,AddPropertyMapping)",
        "(addXObjectMapping,AddXObjectMapping)",
        "(addShadingMapping,AddShadingMapping)",
        "(write,Write)",
        "(startContext,StartContext)",
        "(getContext,GetContext)",
        "(endContext,EndContext)",
        "(getCurrentPosition,GetCurrentPosition)",
        "(read,Read)",
        "(notEnded,NotEnded)",
        "(getPDFLevel,GetPDFLevel)",
        "(getPagesCount,GetPagesCount)",
        "(getTrailer,GetTrailer)",
        "(queryDictionaryObject,QueryDictionaryObject)",
        "(queryArrayObject,QueryArrayObject)",
        "(parseNewObject,ParseNewObject)",
        "(getPageObjectID,GetPageObjectID)",
        "(parsePageDictionary,ParsePageDictionary)",
        "(parsePage,ParsePage)",
        "(getObjectsCount,GetObjectsCount)",
        "(isEncrypted,IsEncrypted)",
        "(getXrefSize,GetXrefSize)",
        "(getXrefEntry,GetXrefEntry)",
        "(getXrefPosition,GetXrefPosition)",
        "(startReadingFromStream,StartReadingFromStream)",
        "(startReadingFromStreamForPlainCopying,StartReadingFromStreamForPlainCopying)",
        "(startReadingObjectsFromStream,StartReadingObjectsFromStream)",
        "(startReadingObjectsFromStreams,StartReadingObjectsFromStreams)",
        "(getParserStream,GetParserStream)",
        "(writeKey,WriteKey)",
        "(writeNameValue,WriteNameValue)",
        "(writeRectangleValue,WriteRectangleValue)",
        "(writeLiteralStringValue,WriteLiteralStringValue)",
        "(writeBooleanValue,WriteBooleanValue)",
        "(writeObjectReferenceValue,WriteObjectReferenceValue)",
        "(writeNumberValue,WriteNumberValue)",
        "(toJSObject,ToJSObject)",
        "(queryObject,QueryObject)",
        "(exists,Exists)",
        "(getDictionary,GetDictionary)",
        "(getMediaBox,GetMediaBox)",
        "(getCropBox,GetCropBox)",
        "(getTrimBox,GetTrimBox)",
        "(getBleedBox,GetBleedBox)",
        "(getArtBox,GetArtBox)",
        "(getRotate,GetRotate)",
        "(getResourcesDictionary,GetResourcesDictionary)",
        "(getStreamContentStart,GetStreamContentStart)",
        "(addAdditionalInfoEntry,AddAdditionalInfoEntry)",
        "(removeAdditionalInfoEntry,RemoveAdditionalInfoEntry)",
        "(clearAdditionalInfoEntries,ClearAdditionalInfoEntries)",
        "(getAdditionalInfoEntry,GetAdditionalInfoEntry)",
        "(getAdditionalInfoEntries,GetAdditionalInfoEntries)",
        "(setCreationDate,SetCreationDate)",
        "(setModDate,SetModDate)",
        "(getType,GetType)",
        "(toPDFIndirectObjectReference,ToPDFIndirectObjectReference)",
        "(toPDFArray,ToPDFArray)",
        "(toPDFDictionary,ToPDFDictionary)",
        "(toPDFStream,ToPDFStream)",
        "(toPDFBoolean,ToPDFBoolean)",
        "(toPDFLiteralString,ToPDFLiteralString)",
        "(toPDFHexString,ToPDFHexString)",
        "(toPDFNull,ToPDFNull)",
        "(toPDFName,ToPDFName)",
        "(toPDFInteger,ToPDFInteger)",
        "(toPDFReal,ToPDFReal)",
        "(toPDFSymbol,ToPDFSymbol)",
        "(toNumber,ToNumber)",
        "(toString,ToString)",
        "(getWriteStream,GetWriteStream)",
        "(createFormXObjectFromPDFPage,CreateFormXObjectFromPDFPage)",
        "(mergePDFPageToPage,MergePDFPageToPage)",
        "(appendPDFPageFromPDF,AppendPDFPageFromPDF)",
        "(mergePDFPageToFormXObject,MergePDFPageToFormXObject)",
        "(getSourceDocumentParser,GetSourceDocumentParser)",
        "(copyDirectObjectAsIs,CopyDirectObjectAsIs)",
        "(copyObject,CopyObject)",
        "(copyDirectObjectWithDeepCopy,CopyDirectObjectWithDeepCopy)",
        "(copyNewObjectsForDirectObject,CopyNewObjectsForDirectObject)",
        "(getCopiedObjectID,GetCopiedObjectID)",
        "(getCopiedObjects,GetCopiedObjects)",
        "(replaceSourceObjects,ReplaceSourceObjects)",
        "(getSourceDocumentStream,GetSourceDocumentStream)",
        "(getFileSize,GetFileSize)",
        "(getInputStream,GetInputStream)",
        "(getContentContext,GetContentContext)",
        "(getResourcesDictinary,GetResourcesDictionary)",
        "(getContentStream,GetContentStream)",
        "(allocateNewObjectID,AllocateNewObjectID)",
        "(startDictionary,StartDictionary)",
        "(startArray,StartArray)",
        "(writeNumber,WriteNumber)",
        "(endArray,EndArray)",
        "(endLine,EndLine)",
        "(endDictionary,EndDictionary)",
        "(endIndirectObject,EndIndirectObject)",
        "(writeIndirectObjectReference,WriteIndirectObjectReference)",
        "(startNewIndirectObject,StartNewIndirectObject)",
        "(startModifiedIndirectObject,StartModifiedIndirectObject)",
        "(deleteObject,DeleteObject)",
        "(writeName,WriteName)",
        "(writeLiteralString,WriteLiteralString)",
        "(writeHexString,WriteHexString)",
        "(writeBoolean,WriteBoolean)",
        "(writeKeyword,WriteKeyword)",
        "(writeComment,WriteComment)",
        "(setCompressStreams,SetCompressStreams)",
        "(startPDFStream,StartPDFStream)",
        "(startUnfilteredPDFStream,StartUnfilteredPDFStream)",
        "(endPDFStream,EndPDFStream)",
        "(startFreeContext,StartFreeContext)",
        "(endFreeContext,EndFreeContext)",
        "(b,b)",
        "(B,B)",
        "(bStar,bStar)",
        "(BStar,BStar)",
        "(s,s)",
        "(S,S)",
        "(f,f)",
        "(F,F)",
        "(fStar,fStar)",
        "(n,n)",
        "(m,m)",
        "(l,l)",
        "(c,c)",
        "(v,v)",
        "(y,y)",
        "(h,h)",
        "(re,re)",
        "(q,q)",
        "(Q,Q)",
        "(cm,cm)",
        "(w,w)",
        "(J,J)",
        "(j,j)",
        "(M,M)",
        "(d,d)",
        "(ri,ri)",
        "(i,i)",
        "(gs,gs)",
        "(CS,CS)",
        "(cs,cs)",
        "(SC,SC)",
        "(SCN,SCN)",
        "(sc,sc)",
        "(scn,scn)",
        "(G,G)",
        "(g,g)",
        "(RG,RG)",
        "(rg,rg)",
        "(K,K)",
        "(k,k)",
        "(W,W)",
        "(WStar,WStar)",
        "(doXObject,doXObject)",
        "(Tc,Tc)",
        "(Tw,Tw)",
        "(Tz,Tz)",
        "(TL,TL)",
        "(Tr,Tr)",
        "(Ts,Ts)",
        "(BT,BT)",
        "(ET,ET)",
        "(Td,Td)",
        "(TD,TD)",
        "(Tm,Tm)",
        "(TStar,TStar)",
        "(Tf,Tf)",
        "(Tj,Tj)",
        "(Quote,Quote)",
        "(DoubleQuote,DoubleQuote)",
        "(TJ,TJ)",
        "(writeFreeCode,WriteFreeCode)",
        "(drawPath,DrawPath)",
        "(drawCircle,DrawCircle)",
        "(drawSquare,DrawSquare)",
        "(drawRectangle,DrawRectangle)",
        "(writeText,WriteText)",
        "(drawImage,DrawImage)",
        "(toJSArray,ToJSArray)",
        "(getLength,GetLength)",
        "(setToCurrentTime,SetToCurrentTime)",
        "(fromString,FromString)",
        "(calculateTextDimensions,CalculateTextDimensions)",
        "(getFontMetrics,GetFontMetrics)",
        "(setPosition,SetPosition)",
        "(setPositionFromEnd,SetPositionFromEnd)",
        "(skip,Skip)",
        "(getInfoDictionary,GetInfoDictionary)"
      ]
    },
    "muhash": {
      "Gasket": [
        "(insert,Insert)",
        "(div,Div)",
        "(MuHashWrapper,MuHashWrapper)",
        "(remove,Remove)",
        "(finalizeBuffer,GetHash)",
        "(finalizeBase64,GetHashBase64)",
        "(mul,Mul)"
      ],
      "Charon": []
    },
    "murmurhash3": {
      "Gasket": [
        "(murmur32,murmur32_async)",
        "(murmur128Sync,murmur128_sync)",
        "(murmur32Sync,murmur32_sync)",
        "(murmur128,murmur128_async)"
      ],
      "Charon": [
        "(murmur32,murmur32_async)",
        "(murmur128,murmur128_async)",
        "(murmur32Sync,murmur32_sync)",
        "(murmur128Sync,murmur128_sync)"
      ]
    },
    "murmurhash-native": {
      "Gasket": [
        "(murmurHash128x64,PMurHash128x64)",
        "(MurmurHash,New)",
        "(toJSON,Serialize)",
        "(murmurHash64,MurmurHash2_x64_64)",
        "(MurmurHash128x64,New)",
        "(copy,Copy)",
        "(digest,Digest)",
        "(murmurHash128,PMurHash128x64)",
        "(murmurHash64x86,MurmurHash2_x86_64)",
        "(murmurHash64x64,MurmurHash2_x64_64)",
        "(MurmurHash128x86,New)",
        "(serialize,Serialize)",
        "(murmurHash128x86,PMurHash128x86)",
        "(update,Update)",
        "(murmurHash,PMurHash32)",
        "(murmurHash32,PMurHash32)"
      ],
      "Charon": [
        "(copy,Copy)",
        "(digest,Digest)",
        "(serialize,Serialize)",
        "(toJSON,Serialize)",
        "(update,Update)"
      ]
    },
    "mutou-node-plugin": {
      "Gasket": [
        "(getUserName,getUserName)",
        "(getStrLength,getStrLength)",
        "(getTime,GetTimestamp)"
      ],
      "Charon": []
    },
    "mutou-s": {
      "Gasket": [
        "(getsockopt,Getsockopt)",
        "(setsockopt,Setsockopt)"
      ],
      "Charon": [
        "(getsockopt,Getsockopt)",
        "(setsockopt,Setsockopt)"
      ]
    },
    "mutou-socket": {
      "Gasket": [
        "(getsockopt,Getsockopt)",
        "(setsockopt,Setsockopt)"
      ],
      "Charon": [
        "(getsockopt,Getsockopt)",
        "(setsockopt,Setsockopt)"
      ]
    },
    "mutou-test-node-01": {
      "Gasket": [
        "(getUserName,getUserName)",
        "(getStrLength,getStrLength)",
        "(getTime,GetTimestamp)"
      ],
      "Charon": []
    },
    "mv-exchange": {
      "Gasket": [
        "(swap,Swap)"
      ],
      "Charon": []
    },
    "myf-napi-example": {
      "Gasket": [
        "(print,print)"
      ],
      "Charon": []
    },
    "@myluluy/node-syslog": {
      "Gasket": [
        "(syslog,WriteSyslog)"
      ],
      "Charon": [
        "(syslog,WriteSyslog)",
        "(option,Option)",
        "(facility,Facility)",
        "(priority,Priority)"
      ]
    },
    "nan-async-example": {
      "Gasket": [
        "(async,RunCallback)"
      ],
      "Charon": [
        "(exports,RunCallback)"
      ]
    },
    "nan-demo": {
      "Gasket": [
        "(syncAdd,syncAdd)",
        "(asyncAdd,asyncAdd)"
      ],
      "Charon": [
        "(syncAdd,syncAdd)",
        "(asyncAdd,asyncAdd)"
      ]
    },
    "@nandoide/tree-sitter-thinp": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "nan-hello-world": {
      "Gasket": [
        "(say,say)"
      ],
      "Charon": []
    },
    "@nanobot248/linux-dedupe": {
      "Gasket": [
        "(ioctl_dedupe_range,IoctlDedupeRangeAsync)",
        "(ioctl_dedupe_range_sync,IoctlDedupeRangeSync)"
      ],
      "Charon": [
        "(ioctl_dedupe_range_sync,IoctlDedupeRangeSync)",
        "(ioctl_dedupe_range,IoctlDedupeRangeAsync)"
      ]
    },
    "@nanomatic/rpio": {
      "Gasket": [
        "(gpio_event_set,gpio_event_set)",
        "(i2c_end,i2c_end)",
        "(spi_set_cs_polarity,spi_set_cs_polarity)",
        "(gpio_write,gpio_write)",
        "(gpio_read,gpio_read)",
        "(gpio_writebuf,gpio_writebuf)",
        "(pwm_set_data,pwm_set_data)",
        "(spi_write,spi_write)",
        "(i2c_read,i2c_read)",
        "(spi_set_clock_divider,spi_set_clock_divider)",
        "(spi_transfer,spi_transfer)",
        "(rpio_usleep,rpio_usleep)",
        "(gpio_readbuf,gpio_readbuf)",
        "(spi_set_data_mode,spi_set_data_mode)",
        "(i2c_write,i2c_write)",
        "(gpio_pad_write,gpio_pad_write)",
        "(gpio_event_clear,gpio_event_clear)",
        "(pwm_set_mode,pwm_set_mode)",
        "(gpio_pad_read,gpio_pad_read)",
        "(gpio_event_poll,gpio_event_poll)",
        "(rpio_init,rpio_init)",
        "(i2c_set_slave_address,i2c_set_slave_address)",
        "(i2c_read_register_rs,i2c_read_register_rs)",
        "(gpio_function,gpio_function)",
        "(gpio_pud,gpio_pud)",
        "(i2c_begin,i2c_begin)",
        "(i2c_set_baudrate,i2c_set_baudrate)",
        "(pwm_set_range,pwm_set_range)",
        "(rpio_close,rpio_close)",
        "(spi_chip_select,spi_chip_select)",
        "(i2c_write_read_rs,i2c_write_read_rs)",
        "(i2c_set_clock_divider,i2c_set_clock_divider)",
        "(pwm_set_clock,pwm_set_clock)",
        "(spi_end,spi_end)",
        "(spi_begin,spi_begin)"
      ],
      "Charon": []
    },
    "nanomsg": {
      "Gasket": [
        "(Send,Send)",
        "(SymbolInfo,SymbolInfo)",
        "(PollStop,PollStop)",
        "(Err,Err)",
        "(Errno,Errno)",
        "(Socket,Socket)",
        "(Setopt,Setopt)",
        "(Term,Term)",
        "(PollSocket,PollSocket)",
        "(DeviceWorker,DeviceWorker)",
        "(Connect,Connect)",
        "(Recv,Recv)",
        "(Close,Close)",
        "(Chan,Chan)",
        "(Symbol,Symbol)",
        "(Bind,Bind)",
        "(Getopt,Getopt)",
        "(Shutdown,Shutdown)"
      ],
      "Charon": [
        "(Socket,Socket)",
        "(Close,Close)",
        "(Chan,Chan)",
        "(Bind,Bind)",
        "(Connect,Connect)",
        "(Shutdown,Shutdown)",
        "(Send,Send)",
        "(Recv,Recv)",
        "(Errno,Errno)",
        "(PollSocket,PollSocket)",
        "(PollStop,PollStop)",
        "(DeviceWorker,DeviceWorker)",
        "(SymbolInfo,SymbolInfo)",
        "(Symbol,Symbol)",
        "(Term,Term)",
        "(Getopt,Getopt)",
        "(Setopt,Setopt)",
        "(Err,Err)"
      ]
    },
    "nanosecond-timer": {
      "Gasket": [
        "(diff,DiffWrapped)",
        "(end,EndWrapped)",
        "(start,StartWrapped)"
      ],
      "Charon": []
    },
    "napi-addon-fdtd": {
      "Gasket": [
        "(getData1D,GetData1D)",
        "(getData2D,GetData2D)"
      ],
      "Charon": []
    },
    "napi-async-callback-example": {
      "Gasket": [
        "(add,SumAsyncCallback)"
      ],
      "Charon": [
        "(add,SumAsyncCallback)"
      ]
    },
    "napi-async-promise-example": {
      "Gasket": [
        "(add,SumAsyncPromise)"
      ],
      "Charon": [
        "(add,SumAsyncPromise)"
      ]
    },
    "napi-oniguruma": {
      "Gasket": [
        "(findNextMatchCb,js_onig_scanner_find_next_match_cb)",
        "(OnigScanner,js_onig_scanner_constructor)",
        "(findNextMatch,js_onig_scanner_find_next_match)",
        "(findNextMatchSync,js_onig_scanner_find_next_match_sync)",
        "(OnigString,js_onig_string_constructor)"
      ],
      "Charon": []
    },
    "napi-physics-modeling-oop": {
      "Gasket": [
        "(getFDTD_3D,getFDTD_3D)",
        "(getFDTD_2D,getFDTD_2D)"
      ],
      "Charon": [
        "(getFDTD_2D,getFDTD_2D)",
        "(getFDTD_3D,getFDTD_3D)"
      ]
    },
    "napi-spellchecker": {
      "Gasket": [
        "(isMisspelled,IsMisspelled)",
        "(Spellchecker,New)",
        "(add,Add)",
        "(checkSpelling,CheckSpelling)",
        "(setDictionary,SetDictionary)",
        "(remove,Remove)",
        "(getAvailableDictionaries,GetAvailableDictionaries)",
        "(getCorrectionsForMisspelling,GetCorrectionsForMisspelling)"
      ],
      "Charon": []
    },
    "napi_stb_image": {
      "Gasket": [
        "(stbi_load_from_memory,stbi_load_from_memory_Callback)"
      ],
      "Charon": []
    },
    "napi-sync-callback-example": {
      "Gasket": [
        "(add,SumSyncCallback)"
      ],
      "Charon": [
        "(add,SumSyncCallback)"
      ]
    },
    "napi-sync-return-example": {
      "Gasket": [
        "(add,SumSyncReturn)"
      ],
      "Charon": [
        "(add,SumSyncReturn)"
      ]
    },
    "napitest": {
      "Gasket": [
        "(add,add)"
      ],
      "Charon": [
        "(add,add)"
      ]
    },
    "native-addon-example": {
      "Gasket": [
        "(greetHello,greetHello)"
      ],
      "Charon": [
        "(greetHello,greetHello)"
      ]
    },
    "native-capture-js": {
      "Gasket": [
        "(captureScreen,captureScreen)"
      ],
      "Charon": []
    },
    "native-copy": {
      "Gasket": [
        "(NativeCopy,Copy)",
        "(ConvertRule,ConvertRule)"
      ],
      "Charon": [
        "(NativeCopy,Copy)",
        "(ConvertRule,ConvertRule)"
      ]
    },
    "native-cypher": {
      "Gasket": [
        "(native-cypher,ParseQuery)"
      ],
      "Charon": []
    },
    "native-fork": {
      "Gasket": [
        "(fork,Fork)"
      ],
      "Charon": []
    },
    "native-hdr-histogram": {
      "Gasket": [
        "(recordCorrectedValue,recordCorrectedValue)",
        "(getMemorySize,getMemorySize)",
        "(HdrHistogramIterator,HdrHistogramIterator)",
        "(initLinear,initLinear)",
        "(getCountLog,getCountLog)",
        "(recordValue,recordValue)",
        "(recordValues,recordValues)",
        "(recordCorrectedValues,recordCorrectedValues)",
        "(addWhileCorrectingForCoordinatedOmission,addWhileCorrectingForCoordinatedOmission)",
        "(min,min)",
        "(HdrHistogram,HdrHistogram)",
        "(getEncoded,getEncoded)",
        "(percentile,percentile)",
        "(valuesAreEquivalent,valuesAreEquivalent)",
        "(getCountRecorded,getCountRecorded)",
        "(max,max)",
        "(stddev,stddev)",
        "(initPercentile,initPercentile)",
        "(nextNonEquivalentValue,nextNonEquivalentValue)",
        "(getPercentile,getPercentile)",
        "(next,next)",
        "(initLog,initLog)",
        "(initRecorded,initRecorded)",
        "(medianEquivalentValue,medianEquivalentValue)",
        "(setEncoded,setEncoded)",
        "(add,add)",
        "(getValue,getValue)",
        "(mean,mean)",
        "(countAtValue,countAtValue)",
        "(lowestEquivalentValue,lowestEquivalentValue)",
        "(reset,reset)",
        "(getCountLinear,getCountLinear)"
      ],
      "Charon": []
    },
    "native-hello-world": {
      "Gasket": [
        "(hello_world,Method)"
      ],
      "Charon": []
    },
    "native-idle-time": {
      "Gasket": [
        "(getMillis,getMillis)"
      ],
      "Charon": [
        "(getMillis,getMillis)"
      ]
    },
    "native-is-elevated": {
      "Gasket": [
        "(isElevated,IsElevated)"
      ],
      "Charon": []
    },
    "native-keymap": {
      "Gasket": [
        "(getCurrentKeyboardLayout,GetCurrentKeyboardLayoutImpl)",
        "(onDidChangeKeyboardLayout,OnDidChangeKeyboardLayoutImpl)",
        "(isISOKeyboard,IsISOKeyboardImpl)",
        "(getKeyMap,GetKeyMapImpl)"
      ],
      "Charon": []
    },
    "native-linked-list": {
      "Gasket": [
        "(get,get)",
        "(size,size)",
        "(LRUList,New)",
        "(remove,remove)",
        "(addOne,addOne)"
      ],
      "Charon": [
        "(addOne,addOne)",
        "(size,size)",
        "(get,get)",
        "(remove,remove)"
      ]
    },
    "native-screen-js": {
      "Gasket": [
        "(getDisplayInfo,getDisplayInfo)"
      ],
      "Charon": []
    },
    "native-trie": {
      "Gasket": [
        "(matchPartial,MatchPatrial)",
        "(insert,Insert)",
        "(StringStringTrie,TrieStringStringCore)",
        "(StringObjectTrie,TrieStringObjectCore)",
        "(match,Match)"
      ],
      "Charon": []
    },
    "native_tst": {
      "Gasket": [
        "(native_tst_function,native_tst_function)"
      ],
      "Charon": [
        "(native_tst_function,native_tst_function)"
      ]
    },
    "native-watchdog": {
      "Gasket": [
        "(start,Start)",
        "(exit,Exit)"
      ],
      "Charon": []
    },
    "naudiodon": {
      "Gasket": [
        "(getDevices,getDevices)",
        "(getHostAPIs,getHostAPIs)",
        "(create,Create)"
      ],
      "Charon": []
    },
    "@nbisigna/scramble": {
      "Gasket": [
        "(scramble,scrambleWrapped)",
        "(unScramble,unScrambleWrapped)"
      ],
      "Charon": []
    },
    "nblas": {
      "Gasket": [
        "(dcopy,dcopy)",
        "(ssyr2k,ssyr2k)",
        "(sdot,sdot)",
        "(ztrsm,ztrsm)",
        "(scnrm2,scnrm2)",
        "(srotmg,srotmg)",
        "(dtbmv,dtbmv)",
        "(ctbmv,ctbmv)",
        "(ssyr,ssyr)",
        "(ztbsv,ztbsv)",
        "(cscal,cscal)",
        "(dsdot,dsdot)",
        "(ccopy,ccopy)",
        "(sgbmv,sgbmv)",
        "(sswap,sswap)",
        "(dgemm,dgemm)",
        "(ctpmv,ctpmv)",
        "(ctrmv,ctrmv)",
        "(ssbmv,ssbmv)",
        "(drotg,drotg)",
        "(dtpmv,dtpmv)",
        "(zgbmv,zgbmv)",
        "(ztrmv,ztrmv)",
        "(ssyr2,ssyr2)",
        "(saxpy,saxpy)",
        "(dscal,dscal)",
        "(ddot,ddot)",
        "(csyr2k,csyr2k)",
        "(dtbsv,dtbsv)",
        "(stbsv,stbsv)",
        "(sgemv,sgemv)",
        "(ztpsv,ztpsv)",
        "(cgemm,cgemm)",
        "(dasum,dasum)",
        "(csyrk,csyrk)",
        "(isamax,isamax)",
        "(ssymv,ssymv)",
        "(zgemm,zgemm)",
        "(dspr2,dspr2)",
        "(ctpsv,ctpsv)",
        "(dzasum,dzasum)",
        "(csymm,csymm)",
        "(dger,dger)",
        "(strsm,strsm)",
        "(ztrsv,ztrsv)",
        "(dsymv,dsymv)",
        "(stbmv,stbmv)",
        "(sscal,sscal)",
        "(stpmv,stpmv)",
        "(cswap,cswap)",
        "(dnrm2,dnrm2)",
        "(sspr,sspr)",
        "(dspmv,dspmv)",
        "(cgemv,cgemv)",
        "(snrm2,snrm2)",
        "(sspmv,sspmv)",
        "(dsbmv,dsbmv)",
        "(dsyrk,dsyrk)",
        "(idamax,idamax)",
        "(dtrmv,dtrmv)",
        "(stpsv,stpsv)",
        "(sasum,sasum)",
        "(ztpmv,ztpmv)",
        "(strsv,strsv)",
        "(scasum,scasum)",
        "(sspr2,sspr2)",
        "(srotm,srotm)",
        "(zsymm,zsymm)",
        "(dspr,dspr)",
        "(drot,drot)",
        "(ctrmm,ctrmm)",
        "(sgemm,sgemm)",
        "(scopy,scopy)",
        "(strmm,strmm)",
        "(ctbsv,ctbsv)",
        "(cgbmv,cgbmv)",
        "(ztbmv,ztbmv)",
        "(zaxpy,zaxpy)",
        "(dtpsv,dtpsv)",
        "(zcopy,zcopy)",
        "(dtrsv,dtrsv)",
        "(daxpy,daxpy)",
        "(dswap,dswap)",
        "(icamax,icamax)",
        "(dsyr2,dsyr2)",
        "(drotmg,drotmg)",
        "(dznrm2,dznrm2)",
        "(ssyrk,ssyrk)",
        "(ztrmm,ztrmm)",
        "(dsymm,dsymm)",
        "(zsyrk,zsyrk)",
        "(dtrsm,dtrsm)",
        "(zgemv,zgemv)",
        "(strmv,strmv)",
        "(ctrsm,ctrsm)",
        "(sdsdot,sdsdot)",
        "(sger,sger)",
        "(drotm,drotm)",
        "(srotg,srotg)",
        "(izamax,izamax)",
        "(srot,srot)",
        "(dsyr,dsyr)",
        "(dsyr2k,dsyr2k)",
        "(caxpy,caxpy)",
        "(ctrsv,ctrsv)",
        "(zscal,zscal)",
        "(zsyr2k,zsyr2k)",
        "(dgbmv,dgbmv)",
        "(ssymm,ssymm)",
        "(dgemv,dgemv)",
        "(zswap,zswap)",
        "(dtrmm,dtrmm)"
      ],
      "Charon": [
        "(dasum,dasum)",
        "(sasum,sasum)",
        "(dzasum,dzasum)",
        "(scasum,scasum)",
        "(daxpy,daxpy)",
        "(saxpy,saxpy)",
        "(zaxpy,zaxpy)",
        "(caxpy,caxpy)",
        "(dcopy,dcopy)",
        "(scopy,scopy)",
        "(zcopy,zcopy)",
        "(ccopy,ccopy)",
        "(ddot,ddot)",
        "(sdot,sdot)",
        "(dsdot,dsdot)",
        "(sdsdot,sdsdot)",
        "(dnrm2,dnrm2)",
        "(snrm2,snrm2)",
        "(dznrm2,dznrm2)",
        "(scnrm2,scnrm2)",
        "(drot,drot)",
        "(srot,srot)",
        "(drotg,drotg)",
        "(srotg,srotg)",
        "(drotm,drotm)",
        "(srotm,srotm)",
        "(drotmg,drotmg)",
        "(srotmg,srotmg)",
        "(dscal,dscal)",
        "(sscal,sscal)",
        "(zscal,zscal)",
        "(cscal,cscal)",
        "(dswap,dswap)",
        "(sswap,sswap)",
        "(zswap,zswap)",
        "(cswap,cswap)",
        "(idamax,idamax)",
        "(isamax,isamax)",
        "(izamax,izamax)",
        "(icamax,icamax)",
        "(dgbmv,dgbmv)",
        "(sgbmv,sgbmv)",
        "(zgbmv,zgbmv)",
        "(cgbmv,cgbmv)",
        "(dgemv,dgemv)",
        "(sgemv,sgemv)",
        "(zgemv,zgemv)",
        "(cgemv,cgemv)",
        "(dger,dger)",
        "(sger,sger)",
        "(dsbmv,dsbmv)",
        "(ssbmv,ssbmv)",
        "(dspmv,dspmv)",
        "(sspmv,sspmv)",
        "(dspr,dspr)",
        "(sspr,sspr)",
        "(dspr2,dspr2)",
        "(sspr2,sspr2)",
        "(dsymv,dsymv)",
        "(ssymv,ssymv)",
        "(dsyr,dsyr)",
        "(ssyr,ssyr)",
        "(dsyr2,dsyr2)",
        "(ssyr2,ssyr2)",
        "(dtbmv,dtbmv)",
        "(stbmv,stbmv)",
        "(ztbmv,ztbmv)",
        "(ctbmv,ctbmv)",
        "(dtbsv,dtbsv)",
        "(stbsv,stbsv)",
        "(ztbsv,ztbsv)",
        "(ctbsv,ctbsv)",
        "(dtpmv,dtpmv)",
        "(stpmv,stpmv)",
        "(ztpmv,ztpmv)",
        "(ctpmv,ctpmv)",
        "(dtpsv,dtpsv)",
        "(stpsv,stpsv)",
        "(ztpsv,ztpsv)",
        "(ctpsv,ctpsv)",
        "(dtrmv,dtrmv)",
        "(strmv,strmv)",
        "(ztrmv,ztrmv)",
        "(ctrmv,ctrmv)",
        "(dtrsv,dtrsv)",
        "(strsv,strsv)",
        "(ztrsv,ztrsv)",
        "(ctrsv,ctrsv)",
        "(dgemm,dgemm)",
        "(sgemm,sgemm)",
        "(zgemm,zgemm)",
        "(cgemm,cgemm)",
        "(dsymm,dsymm)",
        "(ssymm,ssymm)",
        "(zsymm,zsymm)",
        "(csymm,csymm)",
        "(dsyrk,dsyrk)",
        "(ssyrk,ssyrk)",
        "(zsyrk,zsyrk)",
        "(csyrk,csyrk)",
        "(dsyr2k,dsyr2k)",
        "(ssyr2k,ssyr2k)",
        "(zsyr2k,zsyr2k)",
        "(csyr2k,csyr2k)",
        "(dtrmm,dtrmm)",
        "(strmm,strmm)",
        "(ztrmm,ztrmm)",
        "(ctrmm,ctrmm)",
        "(dtrsm,dtrsm)",
        "(strsm,strsm)",
        "(ztrsm,ztrsm)",
        "(ctrsm,ctrsm)"
      ]
    },
    "nc-screen": {
      "Gasket": [
        "(getInfo,getInfo)"
      ],
      "Charon": []
    },
    "net-runner-engine": {
      "Gasket": [
        "(runFromConfig,runFromConfig)",
        "(setPcapPath,setPcapPath)",
        "(Instance,Wrapper)"
      ],
      "Charon": [
        "(this,JsSink)"
      ]
    },
    "network-interfaces-plus": {
      "Gasket": [
        "(getInterfaceAddresses,GetInterfaceAddresses)"
      ],
      "Charon": [
        "(getInterfaceAddresses,GetInterfaceAddresses)"
      ]
    },
    "@nexellia/process-list": {
      "Gasket": [
        "(snapshot,snapshot)"
      ],
      "Charon": [
        "(snapshot,snapshot)"
      ]
    },
    "nfinger": {
      "Gasket": [
        "(request,Method)"
      ],
      "Charon": [
        "(request,Method)",
        "(data,data)"
      ]
    },
    "nflx-spectator-nodejsmetrics": {
      "Gasket": [
        "(GetCurMaxFd,GetCurMaxFd)",
        "(EmitGCEvents,EmitGCEvents)"
      ],
      "Charon": [
        "(elapsed,elapsed)",
        "(EmitGCEvents,EmitGCEvents)",
        "(GetCurMaxFd,GetCurMaxFd)"
      ]
    },
    "nice-napi": {
      "Gasket": [
        "(nice,Nice)"
      ],
      "Charon": []
    },
    "nkv.db": {
      "Gasket": [
        "(database,__change_database)",
        "(delete,__delete_data)",
        "(set,__set_data)",
        "(has,__has_data)",
        "(all,__get_all_data)",
        "(table,__set_table_name)",
        "(get,__get_data)"
      ],
      "Charon": [
        "(index,Number)",
        "(data,String)",
        "(set,__set_data)",
        "(get,__get_data)",
        "(all,__get_all_data)",
        "(has,__has_data)",
        "(delete,__delete_data)",
        "(table,__set_table_name)",
        "(database,__change_database)"
      ]
    },
    "nlibcurl": {
      "Gasket": [
        "(curl,process)"
      ],
      "Charon": []
    },
    "@nlv8/signun": {
      "Gasket": [
        "(sign,secp256k1_addon_sign_async)",
        "(publicKeyCreate,secp256k1_addon_public_key_create_async)",
        "(hash,blake2_addon_blake2b_hash_async)",
        "(verifySync,secp256k1_addon_verify_sync)",
        "(keyedHash,blake2_addon_blake2b_keyed_hash_async)",
        "(privateKeyVerify,secp256k1_addon_private_key_verify_async)",
        "(verify,secp256k1_addon_verify_async)",
        "(signSync,secp256k1_addon_sign_sync)",
        "(privateKeyVerifySync,secp256k1_addon_private_key_verify_sync)",
        "(publicKeyCreateSync,secp256k1_addon_public_key_create_sync)"
      ],
      "Charon": []
    },
    "@nmarks/dd-trace": {
      "Gasket": [
        "(stop,stop)",
        "(stats,stats)",
        "(finish,finish)",
        "(start,start)",
        "(track,track)"
      ],
      "Charon": []
    },
    "nnocr": {
      "Gasket": [
        "(recognize,Recognize)"
      ],
      "Charon": [
        "(recognize,Recognize)"
      ]
    },
    "nodeaffinity": {
      "Gasket": [
        "(getAffinity,getAffinity)",
        "(setAffinity,setAffinity)"
      ],
      "Charon": []
    },
    "node-alsa-cardinfo": {
      "Gasket": [
        "(get_card_info,GetCardInfo)"
      ],
      "Charon": []
    },
    "node-base92": {
      "Gasket": [
        "(decode,DecodeBase92)",
        "(encode,EncodeBase92)"
      ],
      "Charon": []
    },
    "node-bsdiff": {
      "Gasket": [
        "(diff,diff)",
        "(compress,compress)"
      ],
      "Charon": [
        "(diff,diff)",
        "(compress,compress)"
      ]
    },
    "node-calls-python": {
      "Gasket": [
        "(call,call)",
        "(execSync,execSync)",
        "(callSync,callSync)",
        "(addImportPath,addImportPath)",
        "(evalSync,evalSync)",
        "(reimport,reimport)",
        "(exec,exec)",
        "(PyInterpreter,create)",
        "(create,newClass)",
        "(eval,eval)",
        "(setSyncJsAndPyInCallback,setSyncJsAndPyInCallback)",
        "(importSync,importSync)",
        "(fixlink,fixlink)",
        "(import,import)",
        "(createSync,newClassSync)"
      ],
      "Charon": []
    },
    "node-canal": {
      "Gasket": [
        "(getStatistics,getStatistics)",
        "(getDllVersion,getDllVersion)",
        "(dataAvailable,dataAvailable)",
        "(setMask,setMask)",
        "(getVersion,getVersion)",
        "(getDriverInfo,getDriverInfo)",
        "(send,send)",
        "(receive,receive)",
        "(CNodeCanal,CNodeCanal)",
        "(init,init)",
        "(setBaudrate,setBaudrate)",
        "(getLevel,getLevel)",
        "(setFilter,setFilter)",
        "(open,open)",
        "(getVendorString,getVendorString)",
        "(close,close)",
        "(getStatus,getStatus)"
      ],
      "Charon": [
        "(CANAL_ERROR_SUCCESS,Number)",
        "(CANAL_ERROR_BAUDRATE,Number)",
        "(CANAL_ERROR_BUS_OFF,Number)",
        "(CANAL_ERROR_BUS_PASSIVE,Number)",
        "(CANAL_ERROR_BUS_WARNING,Number)",
        "(CANAL_ERROR_CAN_ID,Number)",
        "(CANAL_ERROR_CAN_MESSAGE,Number)",
        "(CANAL_ERROR_CHANNEL,Number)",
        "(CANAL_ERROR_FIFO_EMPTY,Number)",
        "(CANAL_ERROR_FIFO_FULL,Number)",
        "(CANAL_ERROR_FIFO_SIZE,Number)",
        "(CANAL_ERROR_FIFO_WAIT,Number)",
        "(CANAL_ERROR_GENERIC,Number)",
        "(CANAL_ERROR_HARDWARE,Number)",
        "(CANAL_ERROR_INIT_FAIL,Number)",
        "(CANAL_ERROR_INIT_MISSING,Number)",
        "(CANAL_ERROR_INIT_READY,Number)",
        "(CANAL_ERROR_NOT_SUPPORTED,Number)",
        "(CANAL_ERROR_OVERRUN,Number)",
        "(CANAL_ERROR_RCV_EMPTY,Number)",
        "(CANAL_ERROR_TRM_FULL,Number)",
        "(CANAL_ERROR_ERRFRM_STUFF,Number)",
        "(CANAL_ERROR_ERRFRM_FORM,Number)",
        "(CANAL_ERROR_ERRFRM_ACK,Number)",
        "(CANAL_ERROR_ERRFRM_BIT1,Number)",
        "(CANAL_ERROR_ERRFRM_BIT0,Number)",
        "(CANAL_ERROR_ERRFRM_CRC,Number)",
        "(CANAL_ERROR_LIBRARY,Number)",
        "(CANAL_ERROR_PROCADDRESS,Number)",
        "(CANAL_ERROR_ONLY_ONE_INSTANCE,Number)",
        "(CANAL_ERROR_SUB_DRIVER,Number)",
        "(CANAL_ERROR_TIMEOUT,Number)",
        "(CANAL_ERROR_NOT_OPEN,Number)",
        "(CANAL_ERROR_PARAMETER,Number)",
        "(CANAL_ERROR_MEMORY,Number)",
        "(CANAL_ERROR_INTERNAL,Number)",
        "(CANAL_ERROR_COMMUNICATION,Number)",
        "(CANAL_IDFLAG_STANDARD,Number)",
        "(CANAL_IDFLAG_EXTENDED,Number)",
        "(CANAL_IDFLAG_RTR,Number)",
        "(CANAL_IDFLAG_STATUS,Number)",
        "(CANAL_IDFLAG_SEND,Number)",
        "(CANAL_BAUD_USER,Number)",
        "(CANAL_BAUD_1000,Number)",
        "(CANAL_BAUD_800,Number)",
        "(CANAL_BAUD_500,Number)",
        "(CANAL_BAUD_250,Number)",
        "(CANAL_BAUD_125,Number)",
        "(CANAL_BAUD_100,Number)",
        "(CANAL_BAUD_50,Number)",
        "(CANAL_BAUD_20,Number)",
        "(CANAL_BAUD_10,Number)"
      ]
    },
    "node-chip8": {
      "Gasket": [
        "(reset,Reset)",
        "(step,Step)"
      ],
      "Charon": [
        "(step,Step)",
        "(reset,Reset)"
      ]
    },
    "node-cint64": {
      "Gasket": [
        "(shiftLeft,ShiftLeft)",
        "(Int64,New)",
        "(gt,GreaterThan)",
        "(and,And)",
        "(lt,LessThan)",
        "(neq,NotEquals)",
        "(div,Divide)",
        "(geq,GreaterOrEqual)",
        "(add,Add)",
        "(mod,Modulo)",
        "(neg,Negate)",
        "(not,Not)",
        "(leq,LessOrEqual)",
        "(toNumber,ToNumber)",
        "(eq,Equals)",
        "(shiftRight,ShiftRight)",
        "(or,Or)",
        "(sub,Subtract)",
        "(mul,Multiply)",
        "(xor,Xor)",
        "(intoBuffer,IntoBuffer)",
        "(abs,Abs)",
        "(toString,ToString)"
      ],
      "Charon": [
        "(add,Int64Wrapper)",
        "(sub,Int64Wrapper)",
        "(mul,Int64Wrapper)",
        "(div,Int64Wrapper)",
        "(mod,Int64Wrapper)",
        "(shiftLeft,Int64Wrapper)",
        "(shiftRight,Int64Wrapper)",
        "(xor,Int64Wrapper)",
        "(or,Int64Wrapper)",
        "(and,Int64Wrapper)",
        "(neg,Int64Wrapper)",
        "(abs,Int64Wrapper)",
        "(not,Int64Wrapper)",
        "(gt,Int64Wrapper)",
        "(geq,Int64Wrapper)",
        "(lt,Int64Wrapper)",
        "(leq,Int64Wrapper)",
        "(eq,Int64Wrapper)",
        "(neq,Int64Wrapper)",
        "(toString,Int64Wrapper)",
        "(toNumber,Int64Wrapper)",
        "(intoBuffer,Int64Wrapper)"
      ]
    },
    "node_c_plugin_helloword": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": [
        "(hello,Method)"
      ]
    },
    "node-crc16": {
      "Gasket": [
        "(checkSum,NODECRC16CheckSum)",
        "(verifySum,NODECRC16VerifySum)"
      ],
      "Charon": [
        "(checkSum,NODECRC16CheckSum)",
        "(verifySum,NODECRC16VerifySum)"
      ]
    },
    "node_crc_native": {
      "Gasket": [
        "(crc16,crc16)"
      ],
      "Charon": []
    },
    "node-crfpp": {
      "Gasket": [
        "(decodeToTagsList,decodeToTagsList)",
        "(decode,decode)",
        "(decodeBestTag,decodeBestTag)",
        "(decodeNbest,decodeNbest)",
        "(CrfTest,CrfTest)",
        "(decodeToTagsListNbest,decodeToTagsListNbest)",
        "(toString,toString)"
      ],
      "Charon": []
    },
    "node-datachannel": {
      "Gasket": [
        "(getLabel,getLabel)",
        "(signalingState,signalingState)",
        "(setRemoteDescription,setRemoteDescription)",
        "(requestBitrate,requestBitrate)",
        "(sendMessageBinary,sendMessageBinary)",
        "(parseSdpLine,parseSdpLine)",
        "(replaceSSRC,replaceSSRC)",
        "(type,type)",
        "(createDataChannel,createDataChannel)",
        "(sendMessage,sendMessage)",
        "(localDescription,localDescription)",
        "(initLogger,initLogger)",
        "(path,path)",
        "(hasPayloadType,hasPayloadType)",
        "(remoteAddress,remoteAddress)",
        "(hasSSRC,hasSSRC)",
        "(setBitrate,setBitrate)",
        "(DataChannel,DataChannelWrapper)",
        "(onClosed,onClosed)",
        "(onStateChange,onStateChange)",
        "(iceState,iceState)",
        "(setLocalDescription,setLocalDescription)",
        "(setBufferedAmountLowThreshold,setBufferedAmountLowThreshold)",
        "(forceClose,forceClose)",
        "(Track,TrackWrapper)",
        "(stop,stop)",
        "(RtcpReceivingSession,RtcpReceivingSessionWrapper)",
        "(onTrack,onTrack)",
        "(onClient,onClient)",
        "(PeerConnection,PeerConnectionWrapper)",
        "(WebSocket,WebSocketWrapper)",
        "(requestKeyframe,requestKeyframe)",
        "(WebSocketServer,WebSocketServerWrapper)",
        "(cleanup,cleanup)",
        "(bufferedAmount,bufferedAmount)",
        "(onError,onError)",
        "(isClosed,isClosed)",
        "(onMessage,onMessage)",
        "(remoteDescription,remoteDescription)",
        "(addRemoteCandidate,addRemoteCandidate)",
        "(removeFormat,removeFormat)",
        "(preload,preload)",
        "(getBitrate,getBitrate)",
        "(hasMedia,hasMedia)",
        "(open,open)",
        "(state,state)",
        "(addVP9Codec,addVP9Codec)",
        "(setDirection,setDirection)",
        "(addOpusCodec,addOpusCodec)",
        "(addAudioCodec,addAudioCodec)",
        "(maxMessageSize,maxMessageSize)",
        "(gatheringState,gatheringState)",
        "(onOpen,onOpen)",
        "(setMediaHandler,setMediaHandler)",
        "(addRTPMap,addRTPMap)",
        "(getCNameForSsrc,getCNameForSsrc)",
        "(getId,getId)",
        "(rtt,rtt)",
        "(close,close)",
        "(onIceStateChange,onIceStateChange)",
        "(onBufferedAmountLow,onBufferedAmountLow)",
        "(setSctpSettings,setSctpSettings)",
        "(getSelectedCandidatePair,getSelectedCandidatePair)",
        "(onLocalCandidate,onLocalCandidate)",
        "(onGatheringStateChange,onGatheringStateChange)",
        "(direction,direction)",
        "(isOpen,isOpen)",
        "(description,description)",
        "(addVP8Codec,addVP8Codec)",
        "(addSSRC,addSSRC)",
        "(Audio,AudioWrapper)",
        "(onDataChannel,onDataChannel)",
        "(generateSdp,generateSdp)",
        "(getProtocol,getProtocol)",
        "(bytesReceived,bytesReceived)",
        "(removeSSRC,removeSSRC)",
        "(addTrack,addTrack)",
        "(onLocalDescription,onLocalDescription)",
        "(addRTXCodec,addRTXCodec)",
        "(mid,mid)",
        "(onSignalingStateChange,onSignalingStateChange)",
        "(addH264Codec,addH264Codec)",
        "(bytesSent,bytesSent)",
        "(Video,VideoWrapper)",
        "(maxDataChannelId,maxDataChannelId)",
        "(getLibraryVersion,getLibraryVersion)",
        "(getSSRCs,getSSRCs)",
        "(port,port)",
        "(addVideoCodec,addVideoCodec)"
      ],
      "Charon": []
    },
    "node_detour": {
      "Gasket": [
        "(Pathfinder,Pathfinder)",
        "(FindRandomPoint,FindRandomPoint)",
        "(FindPath,FindPath)",
        "(LoadBin,LoadBin)"
      ],
      "Charon": []
    },
    "node-dht-sensor": {
      "Gasket": [
        "(read,Read)",
        "(setMaxRetries,SetMaxRetries)",
        "(initialize,Initialize)"
      ],
      "Charon": [
        "(read,Read)",
        "(initialize,Initialize)",
        "(setMaxRetries,SetMaxRetries)"
      ]
    },
    "node-dotakv": {
      "Gasket": [
        "(loadFromFileSync,LoadFromFileSync)"
      ],
      "Charon": []
    },
    "node-expat": {
      "Gasket": [
        "(parse,Parse)",
        "(resume,Resume)",
        "(reset,Reset)",
        "(Parser,New)",
        "(stop,Stop)",
        "(getCurrentColumnNumber,GetCurrentColumnNumber)",
        "(setEncoding,SetEncoding)",
        "(setUnknownEncoding,SetUnknownEncoding)",
        "(getCurrentLineNumber,GetCurrentLineNumber)",
        "(getCurrentByteIndex,GetCurrentByteIndex)",
        "(getError,GetError)"
      ],
      "Charon": [
        "(parse,Parse)",
        "(setEncoding,SetEncoding)",
        "(setUnknownEncoding,SetUnknownEncoding)",
        "(getError,GetError)",
        "(stop,Stop)",
        "(resume,Resume)",
        "(reset,Reset)",
        "(getCurrentLineNumber,GetCurrentLineNumber)",
        "(getCurrentColumnNumber,GetCurrentColumnNumber)",
        "(getCurrentByteIndex,GetCurrentByteIndex)"
      ]
    },
    "node-expat-temporary": {
      "Gasket": [
        "(setUnknownEncoding,SetUnknownEncoding)",
        "(stop,Stop)",
        "(parse,Parse)",
        "(getCurrentColumnNumber,GetCurrentColumnNumber)",
        "(getCurrentByteIndex,GetCurrentByteIndex)",
        "(getError,GetError)",
        "(setEncoding,SetEncoding)",
        "(reset,Reset)",
        "(resume,Resume)",
        "(Parser,New)",
        "(getCurrentLineNumber,GetCurrentLineNumber)"
      ],
      "Charon": [
        "(parse,Parse)",
        "(setEncoding,SetEncoding)",
        "(setUnknownEncoding,SetUnknownEncoding)",
        "(getError,GetError)",
        "(stop,Stop)",
        "(resume,Resume)",
        "(reset,Reset)",
        "(getCurrentLineNumber,GetCurrentLineNumber)",
        "(getCurrentColumnNumber,GetCurrentColumnNumber)",
        "(getCurrentByteIndex,GetCurrentByteIndex)"
      ]
    },
    "node-factorial-cc": {
      "Gasket": [
        "(factorial,Method)"
      ],
      "Charon": [
        "(factorial,Method)"
      ]
    },
    "node-firebird-native-api": {
      "Gasket": [
        "(getNameAsync,getNameAsync)",
        "(removeAsync,removeAsync)",
        "(detachAsync,detachAsync)",
        "(setOffsetAsync,setOffsetAsync)",
        "(getMetadataBuilderSync,getMetadataBuilderSync)",
        "(Transaction,Transaction)",
        "(newItemSync,newItemSync)",
        "(TraceBLRStatement,TraceBLRStatement)",
        "(startAndSendSync,startAndSendSync)",
        "(getFbVersionAsync,getFbVersionAsync)",
        "(queEventsAsync,queEventsAsync)",
        "(getOutputMetadataAsync,getOutputMetadataAsync)",
        "(nextAsync,nextAsync)",
        "(fetchNextSync,fetchNextSync)",
        "(getRemoteProtocolAsync,getRemoteProtocolAsync)",
        "(Master,Master)",
        "(setOffsetsSync,setOffsetsSync)",
        "(getSubConfigSync,getSubConfigSync)",
        "(getLengthAsync,getLengthAsync)",
        "(MetadataBuilder,MetadataBuilder)",
        "(isEofAsync,isEofAsync)",
        "(createDatabaseAsync,createDatabaseAsync)",
        "(UdrPlugin,UdrPlugin)",
        "(roleAsync,roleAsync)",
        "(setCharSetAsync,setCharSetAsync)",
        "(attachDatabaseSync,attachDatabaseSync)",
        "(getBufferAsync,getBufferAsync)",
        "(insertIntAsync,insertIntAsync)",
        "(Provider,Provider)",
        "(releasePluginAsync,releasePluginAsync)",
        "(handlerAsync,handlerAsync)",
        "(MessageMetadata,MessageMetadata)",
        "(registerTransactionAsync,registerTransactionAsync)",
        "(resetAsync,resetAsync)",
        "(getTagSync,getTagSync)",
        "(getRelationSync,getRelationSync)",
        "(fetchLastSync,fetchLastSync)",
        "(setScaleSync,setScaleSync)",
        "(getRemoteProcessNameSync,getRemoteProcessNameSync)",
        "(getKindAsync,getKindAsync)",
        "(networkProtocolAsync,networkProtocolAsync)",
        "(insertTagSync,insertTagSync)",
        "(setKeySync,setKeySync)",
        "(fetchLastAsync,fetchLastAsync)",
        "(getIntSync,getIntSync)",
        "(userNameSync,userNameSync)",
        "(insertStringAsync,insertStringAsync)",
        "(putSegmentAsync,putSegmentAsync)",
        "(createBlobAsync,createBlobAsync)",
        "(insertIntSync,insertIntSync)",
        "(TraceFactory,TraceFactory)",
        "(OffsetsCallback,OffsetsCallback)",
        "(shutdownAsync,shutdownAsync)",
        "(registerAttachmentSync,registerAttachmentSync)",
        "(getPluginAsync,getPluginAsync)",
        "(moveNameToIndexAsync,moveNameToIndexAsync)",
        "(IntUserField,IntUserField)",
        "(attachServiceManagerAsync,attachServiceManagerAsync)",
        "(getMetadataAsync,getMetadataAsync)",
        "(TraceTransaction,TraceTransaction)",
        "(eventCallbackFunctionSync,eventCallbackFunctionSync)",
        "(closeSync,closeSync)",
        "(resetSync,resetSync)",
        "(registerModuleAsync,registerModuleAsync)",
        "(moveNextSync,moveNextSync)",
        "(ClientBlock,ClientBlock)",
        "(unregisterModuleAsync,unregisterModuleAsync)",
        "(registerTransactionSync,registerTransactionSync)",
        "(getInfoSync,getInfoSync)",
        "(getCharSetSync,getCharSetSync)",
        "(fetchPriorSync,fetchPriorSync)",
        "(getBodyAsync,getBodyAsync)",
        "(TraceContextVariable,TraceContextVariable)",
        "(fetchSync,fetchSync)",
        "(setSync,setSync)",
        "(getTypeSync,getTypeSync)",
        "(UdrFunctionFactory,UdrFunctionFactory)",
        "(getXpbBuilderAsync,getXpbBuilderAsync)",
        "(insertBytesSync,insertBytesSync)",
        "(unwindAsync,unwindAsync)",
        "(networkProtocolSync,networkProtocolSync)",
        "(getRoleNameAsync,getRoleNameAsync)",
        "(TimerControl,TimerControl)",
        "(specifiedSync,specifiedSync)",
        "(openBlobSync,openBlobSync)",
        "(queEventsSync,queEventsSync)",
        "(startAndSendAsync,startAndSendAsync)",
        "(getSegmentAsync,getSegmentAsync)",
        "(encryptAsync,encryptAsync)",
        "(doCleanSync,doCleanSync)",
        "(ExternalTrigger,ExternalTrigger)",
        "(executeAsync,executeAsync)",
        "(getTagAsync,getTagAsync)",
        "(roleSync,roleSync)",
        "(ExternalProcedure,ExternalProcedure)",
        "(cloneSync,cloneSync)",
        "(getStatusSync,getStatusSync)",
        "(getKeySync,getKeySync)",
        "(shutdownSync,shutdownSync)",
        "(getDatabaseNameSync,getDatabaseNameSync)",
        "(PluginFactory,PluginFactory)",
        "(LogonInfo,LogonInfo)",
        "(registerTriggerSync,registerTriggerSync)",
        "(disposeAsync,disposeAsync)",
        "(getEntryPointAsync,getEntryPointAsync)",
        "(newKeyAsync,newKeyAsync)",
        "(CryptKey,CryptKey)",
        "(getRootDirectoryAsync,getRootDirectoryAsync)",
        "(getDefaultConfigAsync,getDefaultConfigAsync)",
        "(getStatusAsync,getStatusAsync)",
        "(getXpbBuilderSync,getXpbBuilderSync)",
        "(enterDtcSync,enterDtcSync)",
        "(callbackSync,callbackSync)",
        "(Status,Status)",
        "(getProcessIDSync,getProcessIDSync)",
        "(queueEvent,queueEvent)",
        "(CharUserField,CharUserField)",
        "(getInputMetadataSync,getInputMetadataSync)",
        "(getIntValueSync,getIntValueSync)",
        "(Pointer,Pointer)",
        "(setTypeAsync,setTypeAsync)",
        "(getRemoteProcessNameAsync,getRemoteProcessNameAsync)",
        "(commitAsync,commitAsync)",
        "(registerProcedureSync,registerProcedureSync)",
        "(getClientVersionAsync,getClientVersionAsync)",
        "(setOffsetSync,setOffsetSync)",
        "(getSubTypeAsync,getSubTypeAsync)",
        "(setCharSetSync,setCharSetSync)",
        "(TraceLogWriter,TraceLogWriter)",
        "(asStringAsync,asStringAsync)",
        "(fetchAsync,fetchAsync)",
        "(receiveSync,receiveSync)",
        "(getBytesSync,getBytesSync)",
        "(Timer,Timer)",
        "(getDataAsync,getDataAsync)",
        "(adminAsync,adminAsync)",
        "(getRemoteAddressSync,getRemoteAddressSync)",
        "(getProcessExitingAsync,getProcessExitingAsync)",
        "(releaseSync,releaseSync)",
        "(getPlanAsync,getPlanAsync)",
        "(Util,Util)",
        "(getAliasAsync,getAliasAsync)",
        "(getPluginsAsync,getPluginsAsync)",
        "(createDatabaseSync,createDatabaseSync)",
        "(getBufferSync,getBufferSync)",
        "(getUserNameAsync,getUserNameAsync)",
        "(validateAsync,validateAsync)",
        "(userNameAsync,userNameAsync)",
        "(closeAsync,closeAsync)",
        "(lastNameSync,lastNameSync)",
        "(receiveAsync,receiveAsync)",
        "(decryptAsync,decryptAsync)",
        "(decodeTimeSync,decodeTimeSync)",
        "(Auth,Auth)",
        "(compileRequestSync,compileRequestSync)",
        "(stopSync,stopSync)",
        "(encodeDateAsync,encodeDateAsync)",
        "(ConfigManager,ConfigManager)",
        "(VersionCallback,VersionCallback)",
        "(findNextSync,findNextSync)",
        "(getCharSetAsync,getCharSetAsync)",
        "(setReleaseDelaySync,setReleaseDelaySync)",
        "(getConfigManagerSync,getConfigManagerSync)",
        "(ResultSet,ResultSet)",
        "(TraceProcedure,TraceProcedure)",
        "(releasePluginSync,releasePluginSync)",
        "(decodeDateSync,decodeDateSync)",
        "(unwindSync,unwindSync)",
        "(getRemoteProcessIDSync,getRemoteProcessIDSync)",
        "(Config,Config)",
        "(ExternalFunction,ExternalFunction)",
        "(getScaleSync,getScaleSync)",
        "(rewindSync,rewindSync)",
        "(executeSync,executeSync)",
        "(startTransactionAsync,startTransactionAsync)",
        "(pingAsync,pingAsync)",
        "(authBlockAsync,authBlockAsync)",
        "(activeSync,activeSync)",
        "(isNullableAsync,isNullableAsync)",
        "(getPackageSync,getPackageSync)",
        "(Disposable,Disposable)",
        "(getConnectionIDSync,getConnectionIDSync)",
        "(TraceParams,TraceParams)",
        "(seekSync,seekSync)",
        "(stopAsync,stopAsync)",
        "(TraceTrigger,TraceTrigger)",
        "(getBoolValueAsync,getBoolValueAsync)",
        "(encodeTimeSync,encodeTimeSync)",
        "(DbCryptPlugin,DbCryptPlugin)",
        "(getDispatcherAsync,getDispatcherAsync)",
        "(commitRetainingSync,commitRetainingSync)",
        "(registerPluginFactoryAsync,registerPluginFactoryAsync)",
        "(asStringSync,asStringSync)",
        "(User,User)",
        "(getPasswordSync,getPasswordSync)",
        "(unregisterModuleSync,unregisterModuleSync)",
        "(startBuilderAsync,startBuilderAsync)",
        "(findValueSync,findValueSync)",
        "(getBuilderSync,getBuilderSync)",
        "(DtcStart,DtcStart)",
        "(dropDatabaseSync,dropDatabaseSync)",
        "(initSync,initSync)",
        "(getUtilInterfaceSync,getUtilInterfaceSync)",
        "(setDbCryptCallbackSync,setDbCryptCallbackSync)",
        "(getAffectedRecordsAsync,getAffectedRecordsAsync)",
        "(enteredSync,enteredSync)",
        "(UdrTriggerFactory,UdrTriggerFactory)",
        "(fetchRelativeSync,fetchRelativeSync)",
        "(TraceConnection,TraceConnection)",
        "(FirebirdConf,FirebirdConf)",
        "(TraceDYNRequest,TraceDYNRequest)",
        "(UserField,UserField)",
        "(getEntryPointSync,getEntryPointSync)",
        "(setReleaseDelayAsync,setReleaseDelayAsync)",
        "(getLengthSync,getLengthSync)",
        "(cancelOperationAsync,cancelOperationAsync)",
        "(getRemoteAddressAsync,getRemoteAddressAsync)",
        "(getRootDirectorySync,getRootDirectorySync)",
        "(findPosAsync,findPosAsync)",
        "(addAttachmentAsync,addAttachmentAsync)",
        "(getProcessIDAsync,getProcessIDAsync)",
        "(Events,Events)",
        "(getSubTypeSync,getSubTypeSync)",
        "(getPluginConfigSync,getPluginConfigSync)",
        "(passwordSync,passwordSync)",
        "(setKeyAsync,setKeyAsync)",
        "(enterDtcAsync,enterDtcAsync)",
        "(registerFunctionSync,registerFunctionSync)",
        "(encodeDateSync,encodeDateSync)",
        "(attachServiceManagerSync,attachServiceManagerSync)",
        "(compileRequestAsync,compileRequestAsync)",
        "(getStateAsync,getStateAsync)",
        "(setupSync,setupSync)",
        "(getConfigFileNameSync,getConfigFileNameSync)",
        "(operationAsync,operationAsync)",
        "(moveNextAsync,moveNextAsync)",
        "(keyHandleAsync,keyHandleAsync)",
        "(removeCurrentAsync,removeCurrentAsync)",
        "(getAffectedRecordsSync,getAffectedRecordsSync)",
        "(getConfigAsync,getConfigAsync)",
        "(getDtcSync,getDtcSync)",
        "(validateSync,validateSync)",
        "(findFirstAsync,findFirstAsync)",
        "(getIntAsync,getIntAsync)",
        "(TraceStatusVector,TraceStatusVector)",
        "(getDispatcherSync,getDispatcherSync)",
        "(getModuleNameSync,getModuleNameSync)",
        "(freeAsync,freeAsync)",
        "(getDatabaseConfAsync,getDatabaseConfAsync)",
        "(getValueAsync,getValueAsync)",
        "(seekAsync,seekAsync)",
        "(registerModuleSync,registerModuleSync)",
        "(freeSync,freeSync)",
        "(getOffsetAsync,getOffsetAsync)",
        "(openCursorSync,openCursorSync)",
        "(registerAttachmentAsync,registerAttachmentAsync)",
        "(Request,Request)",
        "(getRemoteProcessIDAsync,getRemoteProcessIDAsync)",
        "(getMasterSync,getMasterSync)",
        "(getProcessExitingSync,getProcessExitingSync)",
        "(getAliasSync,getAliasSync)",
        "(PluginSet,PluginSet)",
        "(ExternalEngine,ExternalEngine)",
        "(fetchFirstSync,fetchFirstSync)",
        "(releaseAsync,releaseAsync)",
        "(encodeTimeAsync,encodeTimeAsync)",
        "(CryptKeyCallback,CryptKeyCallback)",
        "(getOwnerSync,getOwnerSync)",
        "(getPluginsSync,getPluginsSync)",
        "(findValueAsync,findValueAsync)",
        "(getTimerControlSync,getTimerControlSync)",
        "(prepareSync,prepareSync)",
        "(executeCreateDatabaseAsync,executeCreateDatabaseAsync)",
        "(setDelayedOutputFormatSync,setDelayedOutputFormatSync)",
        "(getInfoAsync,getInfoAsync)",
        "(fetchPriorAsync,fetchPriorAsync)",
        "(Versioned,Versioned)",
        "(commitSync,commitSync)",
        "(queryAsync,queryAsync)",
        "(getBufferLengthAsync,getBufferLengthAsync)",
        "(getFirebirdConfAsync,getFirebirdConfAsync)",
        "(getTriggerMetadataSync,getTriggerMetadataSync)",
        "(getModuleNameAsync,getModuleNameAsync)",
        "(findSync,findSync)",
        "(disconnectAsync,disconnectAsync)",
        "(keyCallbackAsync,keyCallbackAsync)",
        "(getValueSync,getValueSync)",
        "(getTriggerTypeSync,getTriggerTypeSync)",
        "(Writer,Writer)",
        "(startAsync,startAsync)",
        "(getFieldSync,getFieldSync)",
        "(firstNameSync,firstNameSync)",
        "(getAsync,getAsync)",
        "(setOwnerSync,setOwnerSync)",
        "(activeAsync,activeAsync)",
        "(addFieldSync,addFieldSync)",
        "(remoteAddressAsync,remoteAddressAsync)",
        "(insertTagAsync,insertTagAsync)",
        "(getNameSync,getNameSync)",
        "(getMessageLengthSync,getMessageLengthSync)",
        "(insertStringSync,insertStringSync)",
        "(decodeDateAsync,decodeDateAsync)",
        "(attributesAsync,attributesAsync)",
        "(getSegmentSync,getSegmentSync)",
        "(nameAsync,nameAsync)",
        "(findFirstSync,findFirstSync)",
        "(dropDatabaseAsync,dropDatabaseAsync)",
        "(commitRetainingAsync,commitRetainingAsync)",
        "(EventCallback,EventCallback)",
        "(setEnteredSync,setEnteredSync)",
        "(isBofAsync,isBofAsync)",
        "(getBufferLengthSync,getBufferLengthSync)",
        "(getInstallDirectorySync,getInstallDirectorySync)",
        "(executeDynAsync,executeDynAsync)",
        "(truncateSync,truncateSync)",
        "(getDefaultConfigSync,getDefaultConfigSync)",
        "(disconnectSync,disconnectSync)",
        "(callbackAsync,callbackAsync)",
        "(isNullableSync,isNullableSync)",
        "(addAttachmentSync,addAttachmentSync)",
        "(getPackageAsync,getPackageAsync)",
        "(authBlockSync,authBlockSync)",
        "(getBuilderAsync,getBuilderAsync)",
        "(disposeMaster,disposeMaster)",
        "(ConfigEntry,ConfigEntry)",
        "(getIntValueAsync,getIntValueAsync)",
        "(joinSync,joinSync)",
        "(findPosSync,findPosSync)",
        "(ReferenceCounted,ReferenceCounted)",
        "(decodeTimeAsync,decodeTimeAsync)",
        "(asBooleanSync,asBooleanSync)",
        "(getMetadataBuilderAsync,getMetadataBuilderAsync)",
        "(getRelationAsync,getRelationAsync)",
        "(getPlanSync,getPlanSync)",
        "(nextSync,nextSync)",
        "(getBodySync,getBodySync)",
        "(getPluginManagerAsync,getPluginManagerAsync)",
        "(setSubTypeSync,setSubTypeSync)",
        "(startSync,startSync)",
        "(isBofSync,isBofSync)",
        "(asIntegerSync,asIntegerSync)",
        "(getCountAsync,getCountAsync)",
        "(getStringAsync,getStringAsync)",
        "(putSegmentSync,putSegmentSync)",
        "(getMaster,getMaster)",
        "(cancelAsync,cancelAsync)",
        "(createPluginSync,createPluginSync)",
        "(createPluginAsync,createPluginAsync)",
        "(getStringSync,getStringSync)",
        "(WireCryptPlugin,WireCryptPlugin)",
        "(getConfigFileNameAsync,getConfigFileNameAsync)",
        "(remoteAddressSync,remoteAddressSync)",
        "(getSubConfigAsync,getSubConfigAsync)",
        "(operationSync,operationSync)",
        "(TraceSweepInfo,TraceSweepInfo)",
        "(newItemAsync,newItemAsync)",
        "(addFieldAsync,addFieldAsync)",
        "(startTransactionSync,startTransactionSync)",
        "(PluginManager,PluginManager)",
        "(authenticateAsync,authenticateAsync)",
        "(setSubTypeAsync,setSubTypeAsync)",
        "(moveNameToIndexSync,moveNameToIndexSync)",
        "(getMetadataSync,getMetadataSync)",
        "(cancelOperationSync,cancelOperationSync)",
        "(getInstallDirectoryAsync,getInstallDirectoryAsync)",
        "(Service,Service)",
        "(openCursorAsync,openCursorAsync)",
        "(rollbackAsync,rollbackAsync)",
        "(fetchFirstAsync,fetchFirstAsync)",
        "(registerFunctionAsync,registerFunctionAsync)",
        "(ServerBlock,ServerBlock)",
        "(cancelSync,cancelSync)",
        "(Management,Management)",
        "(adminSync,adminSync)",
        "(removeSync,removeSync)",
        "(setEnteredAsync,setEnteredAsync)",
        "(commentAsync,commentAsync)",
        "(pingSync,pingSync)",
        "(XpbBuilder,XpbBuilder)",
        "(getRemoteProtocolSync,getRemoteProtocolSync)",
        "(encryptSync,encryptSync)",
        "(setOwnerAsync,setOwnerAsync)",
        "(setDbAsync,setDbAsync)",
        "(middleNameAsync,middleNameAsync)",
        "(rollbackSync,rollbackSync)",
        "(ExternalContext,ExternalContext)",
        "(getLoginSync,getLoginSync)",
        "(getDatabaseConfSync,getDatabaseConfSync)",
        "(setLengthSync,setLengthSync)",
        "(TraceServiceConnection,TraceServiceConnection)",
        "(getMessageLengthAsync,getMessageLengthAsync)",
        "(isEofSync,isEofSync)",
        "(TraceDatabaseConnection,TraceDatabaseConnection)",
        "(clearSync,clearSync)",
        "(sendSync,sendSync)",
        "(getPluginSync,getPluginSync)",
        "(getBigIntSync,getBigIntSync)",
        "(rollbackRetainingSync,rollbackRetainingSync)",
        "(rewindAsync,rewindAsync)",
        "(getFbVersionSync,getFbVersionSync)",
        "(TracePlugin,TracePlugin)",
        "(setScaleAsync,setScaleAsync)",
        "(truncateAsync,truncateAsync)",
        "(getNullOffsetAsync,getNullOffsetAsync)",
        "(Dtc,Dtc)",
        "(setupAsync,setupAsync)",
        "(findNextAsync,findNextAsync)",
        "(getUtilInterfaceAsync,getUtilInterfaceAsync)",
        "(transactRequestSync,transactRequestSync)",
        "(getDataSync,getDataSync)",
        "(listSync,listSync)",
        "(lastNameAsync,lastNameAsync)",
        "(setDelayedOutputFormatAsync,setDelayedOutputFormatAsync)",
        "(cloneAsync,cloneAsync)",
        "(getSync,getSync)",
        "(specifiedAsync,specifiedAsync)",
        "(transactRequestAsync,transactRequestAsync)",
        "(getTriggerMetadataAsync,getTriggerMetadataAsync)",
        "(disposeSync,disposeSync)",
        "(Server,Server)",
        "(getConfigSync,getConfigSync)",
        "(executeCreateDatabaseSync,executeCreateDatabaseSync)",
        "(startBuilderSync,startBuilderSync)",
        "(handlerSync,handlerSync)",
        "(getTriggerTableAsync,getTriggerTableAsync)",
        "(getDtcAsync,getDtcAsync)",
        "(reconnectTransactionAsync,reconnectTransactionAsync)",
        "(getKnownTypesAsync,getKnownTypesAsync)",
        "(TraceInitInfo,TraceInitInfo)",
        "(middleNameSync,middleNameSync)",
        "(openBlobAsync,openBlobAsync)",
        "(getPasswordAsync,getPasswordAsync)",
        "(initAsync,initAsync)",
        "(addRefSync,addRefSync)",
        "(registerPluginFactorySync,registerPluginFactorySync)",
        "(getTriggerTypeAsync,getTriggerTypeAsync)",
        "(getOffsetSync,getOffsetSync)",
        "(getTypeAsync,getTypeAsync)",
        "(serverModeAsync,serverModeAsync)",
        "(getScaleAsync,getScaleAsync)",
        "(setDbSync,setDbSync)",
        "(enteredAsync,enteredAsync)",
        "(getOwnerAsync,getOwnerAsync)",
        "(asBooleanAsync,asBooleanAsync)",
        "(getBigIntAsync,getBigIntAsync)",
        "(prepareAsync,prepareAsync)",
        "(getUserNameSync,getUserNameSync)",
        "(keyCallbackSync,keyCallbackSync)",
        "(getConnectionIDAsync,getConnectionIDAsync)",
        "(findAsync,findAsync)",
        "(getFirebirdConfSync,getFirebirdConfSync)",
        "(firstNameAsync,firstNameAsync)",
        "(insertBigIntSync,insertBigIntSync)",
        "(getBytesAsync,getBytesAsync)",
        "(Blob,Blob)",
        "(addSync,addSync)",
        "(TraceFunction,TraceFunction)",
        "(UdrProcedureFactory,UdrProcedureFactory)",
        "(createBlobSync,createBlobSync)",
        "(addAsync,addAsync)",
        "(getPluginManagerSync,getPluginManagerSync)",
        "(listAsync,listAsync)",
        "(RoutineMetadata,RoutineMetadata)",
        "(addRefAsync,addRefAsync)",
        "(getTriggerTableSync,getTriggerTableSync)",
        "(commentSync,commentSync)",
        "(reconnectTransactionSync,reconnectTransactionSync)",
        "(getKindSync,getKindSync)",
        "(getClientVersionSync,getClientVersionSync)",
        "(getConfigManagerAsync,getConfigManagerAsync)",
        "(querySync,querySync)",
        "(executeDynSync,executeDynSync)",
        "(Attachment,Attachment)",
        "(TraceStatement,TraceStatement)",
        "(getNullOffsetSync,getNullOffsetSync)",
        "(decryptSync,decryptSync)",
        "(getOutputMetadataSync,getOutputMetadataSync)",
        "(ListUsers,ListUsers)",
        "(attributesSync,attributesSync)",
        "(fetchAbsoluteSync,fetchAbsoluteSync)",
        "(setDbCryptCallbackAsync,setDbCryptCallbackAsync)",
        "(doCleanAsync,doCleanAsync)",
        "(passwordAsync,passwordAsync)",
        "(PluginConfig,PluginConfig)",
        "(fetchNextAsync,fetchNextAsync)",
        "(removeCurrentSync,removeCurrentSync)",
        "(getBoolValueSync,getBoolValueSync)",
        "(Statement,Statement)",
        "(Client,Client)",
        "(serverModeSync,serverModeSync)",
        "(getKeyAsync,getKeyAsync)",
        "(insertBigIntAsync,insertBigIntAsync)",
        "(getLoginAsync,getLoginAsync)",
        "(newKeySync,newKeySync)",
        "(authenticateSync,authenticateSync)",
        "(insertBytesAsync,insertBytesAsync)",
        "(getMasterAsync,getMasterAsync)",
        "(PluginBase,PluginBase)",
        "(cancelEvent,cancelEvent)",
        "(eventCallbackFunctionAsync,eventCallbackFunctionAsync)",
        "(clearAsync,clearAsync)",
        "(getStateSync,getStateSync)",
        "(rollbackRetainingAsync,rollbackRetainingAsync)",
        "(keyHandleSync,keyHandleSync)",
        "(TraceSQLStatement,TraceSQLStatement)",
        "(KeyHolderPlugin,KeyHolderPlugin)",
        "(ExternalResultSet,ExternalResultSet)",
        "(setTypeSync,setTypeSync)",
        "(getCountSync,getCountSync)",
        "(getFlagsAsync,getFlagsAsync)",
        "(getDirectoryAsync,getDirectoryAsync)",
        "(setCursorNameSync,setCursorNameSync)",
        "(setAsync,setAsync)",
        "(getFieldAsync,getFieldAsync)",
        "(PluginModule,PluginModule)",
        "(getRoleNameSync,getRoleNameSync)",
        "(getInputMetadataAsync,getInputMetadataAsync)",
        "(getPluginConfigAsync,getPluginConfigAsync)",
        "(getFlagsSync,getFlagsSync)",
        "(fetchAbsoluteAsync,fetchAbsoluteAsync)",
        "(getKnownTypesSync,getKnownTypesSync)",
        "(detachSync,detachSync)",
        "(attachDatabaseAsync,attachDatabaseAsync)",
        "(putDataAsync,putDataAsync)",
        "(registerProcedureAsync,registerProcedureAsync)",
        "(fetchRelativeAsync,fetchRelativeAsync)",
        "(addWithTpbAsync,addWithTpbAsync)",
        "(joinAsync,joinAsync)",
        "(asIntegerAsync,asIntegerAsync)",
        "(sendAsync,sendAsync)",
        "(getTimerControlAsync,getTimerControlAsync)",
        "(putDataSync,putDataSync)",
        "(setCursorNameAsync,setCursorNameAsync)",
        "(getDirectorySync,getDirectorySync)",
        "(setOffsetsAsync,setOffsetsAsync)",
        "(nameSync,nameSync)",
        "(registerTriggerAsync,registerTriggerAsync)",
        "(getDatabaseNameAsync,getDatabaseNameAsync)",
        "(addWithTpbSync,addWithTpbSync)",
        "(setLengthAsync,setLengthAsync)"
      ],
      "Charon": [
        "(getMaster,getMaster)"
      ]
    },
    "node-flatbuffers": {
      "Gasket": [
        "(serialize,Serialize)"
      ],
      "Charon": [
        "(serialize,Serialize)"
      ]
    },
    "node-float-helpers": {
      "Gasket": [
        "(convertMem2Single,convertMem2Single)",
        "(convertMemInt2Double,convertMemInt2Double)",
        "(hello,HelloWrapped)",
        "(convertMemUInt2Double,convertMemUInt2Double)",
        "(convertDouble2Mem,convertDouble2Mem)",
        "(convertSingle2Mem,convertSingle2Mem)",
        "(convertMem2Double,convertMem2Double)"
      ],
      "Charon": []
    },
    "node-fzy": {
      "Gasket": [
        "(hasMatch,HasMatch)",
        "(hasMatchMulti,HasMatchMulti)",
        "(matchPositions,MatchPositions)",
        "(matchPositionsMulti,MatchPositionsMulti)",
        "(matchMulti,MatchMulti)",
        "(match,Match)"
      ],
      "Charon": []
    },
    "node-gdx": {
      "Gasket": [
        "(read,ReadGDX)"
      ],
      "Charon": []
    },
    "nodegit": {
      "Gasket": [
        "(ancestor,Ancestor)",
        "(Strarray,JSNewFunction)",
        "(IndexTime,JSNewFunction)",
        "(entryStage,EntryStage)",
        "(klass,Klass)",
        "(grow,Grow)",
        "(config,Config)",
        "(getEntry,GetEntry)",
        "(target,Target)",
        "(insert,Insert)",
        "(direction,Direction)",
        "(targetType,TargetType)",
        "(origStartLineNumber,OrigStartLineNumber)",
        "(analysisForRef,AnalysisForRef)",
        "(Remote,JSNewFunction)",
        "(Refdb,JSNewFunction)",
        "(createGlob,GlobNew)",
        "(clear,Clear)",
        "(isPrunable,IsPrunable)",
        "(RemoteHead,JSNewFunction)",
        "(summary,Summary)",
        "(isIgnored,IsIgnored)",
        "(move,Move)",
        "(string,String)",
        "(contentOffset,ContentOffset)",
        "(commitRemove,CommitRemove)",
        "(toObject,ToObject)",
        "(wdId,WdId)",
        "(commitCreate,CommitCreate)",
        "(Repository,JSNewFunction)",
        "(workdir,Workdir)",
        "(deleteMultivar,DeleteMultivar)",
        "(createFromBuffer,CreateFromBuffer)",
        "(isRenamed,IsRenamed)",
        "(delete,Delete)",
        "(numLinesInHunk,NumLinesInHunk)",
        "(iszero,Iszero)",
        "(totalDeltas,TotalDeltas)",
        "(exec,Exec)",
        "(find,Find)",
        "(usernameNew,UsernameNew)",
        "(src,Src)",
        "(Transaction,JSNewFunction)",
        "(setPushurl,SetPushurl)",
        "(dwim,Dwim)",
        "(matchWorkdir,MatchWorkdir)",
        "(createWithSignature,CreateWithSignature)",
        "(DiffOptions,JSNewFunction)",
        "(byIndex,Byindex)",
        "(content,Content)",
        "(linesInHunk,LinesInHunk)",
        "(NoteIterator,JSNewFunction)",
        "(getHunkByIndex,GetHunkByindex)",
        "(header,Header)",
        "(reset,Reset)",
        "(resolve,Resolve)",
        "(Filter,JSNewFunction)",
        "(setCaps,SetCaps)",
        "(pushHead,PushHead)",
        "(setVersion,SetVersion)",
        "(matchDiff,MatchDiff)",
        "(Hashsig,JSNewFunction)",
        "(append,Append)",
        "(toBuf,ToBuf)",
        "(setString,SetStr)",
        "(index,Index)",
        "(location,Location)",
        "(StatusEntry,JSNewFunction)",
        "(getSubmodules,GetSubmodules)",
        "(setThreads,SetThreads)",
        "(ApplyOptions,JSNewFunction)",
        "(bases,Bases)",
        "(addFetch,AddFetch)",
        "(remoteName,RemoteName)",
        "(getByIndex,GetByIndex)",
        "(srcMatches,SrcMatches)",
        "(abort,Abort)",
        "(newLines,NewLines)",
        "(createAnonymous,CreateAnonymous)",
        "(MergeFileInput,JSNewFunction)",
        "(RebaseOptions,JSNewFunction)",
        "(string2Type,String2type)",
        "(Rebase,JSNewFunction)",
        "(finalStartLineNumber,FinalStartLineNumber)",
        "(TreeEntry,JSNewFunction)",
        "(getByPath,GetByPath)",
        "(clone,Clone)",
        "(setNamespace,SetNamespace)",
        "(symbolicCreate,SymbolicCreate)",
        "(Reset,Reset)",
        "(createV,CreateV)",
        "(getThreadSafetyDiagnostics,LockMasterGetDiagnostics)",
        "(stop,Stop)",
        "(defaultBranch,DefaultBranch)",
        "(conflictGet,ConflictGet)",
        "(DiffBinaryFile,JSNewFunction)",
        "(create,Create)",
        "(createFromFile,CreateFromfile)",
        "(prune,Prune)",
        "(DiffPatchidOptions,JSNewFunction)",
        "(targetId,TargetId)",
        "(refdb,Refdb)",
        "(submoduleCacheClear,SubmoduleCacheClear)",
        "(setInt32,SetInt32)",
        "(getInt64,GetInt64)",
        "(isUnmodified,IsUnmodified)",
        "(getReferences,GetReferences)",
        "(flags,Flags)",
        "(sshKeyNew,SshKeyNew)",
        "(committer,Committer)",
        "(entryIsConflict,EntryIsConflict)",
        "(message,Message)",
        "(readPrefix,ReadPrefix)",
        "(Submodule,JSNewFunction)",
        "(apply,Apply)",
        "(isConflicted,IsConflicted)",
        "(stateCleanup,StateCleanup)",
        "(Error,JSNewFunction)",
        "(add,Add)",
        "(ontoName,OntoName)",
        "(setIndex,SetIndex)",
        "(set,Set)",
        "(setIgnore,SetIgnore)",
        "(buffer,Buffer)",
        "(getInt32,GetInt32)",
        "(setSymbolicTarget,SetSymbolicTarget)",
        "(createLightweight,CreateLightweight)",
        "(openFromWorktree,OpenFromWorktree)",
        "(isRemote,IsRemote)",
        "(messageRemove,MessageRemove)",
        "(_entryByIndex,EntryByindex)",
        "(getByPath,GetBypath)",
        "(isUnreadable,IsUnreadable)",
        "(Commit,JSNewFunction)",
        "(setBranch,SetBranch)",
        "(createFromWorkdir,CreateFromWorkdir)",
        "(headDetached,HeadDetached)",
        "(value,Value)",
        "(resolveUrl,ResolveUrl)",
        "(seconds,Seconds)",
        "(descendantOf,DescendantOf)",
        "(DiffStats,JSNewFunction)",
        "(time,Time)",
        "(fromAnnotated,FromAnnotated)",
        "(dstRefname,DstRefname)",
        "(shortId,ShortId)",
        "(connected,Connected)",
        "(findGlobal,FindGlobal)",
        "(commondir,Commondir)",
        "(read,Read)",
        "(Clone,Clone)",
        "(fromRepository,FromRepository)",
        "(mode,Mode)",
        "(filemode,Filemode)",
        "(DiffHunk,JSNewFunction)",
        "(commitWalk,CommitWalk)",
        "(userpassPlaintextNew,UserpassPlaintextNew)",
        "(next,GitConfigNext)",
        "(insertRecur,InsertRecur)",
        "(idNew,IdNew)",
        "(setString,SetString)",
        "(opts,Opts)",
        "(dst,Dst)",
        "(filesChanged,FilesChanged)",
        "(blobToBuffer,BlobToBuffer)",
        "(ncmp,Ncmp)",
        "(hash,Hash)",
        "(getRemotes,GetRemotes)",
        "(clearInternalRules,ClearInternalRules)",
        "(cpy,Cpy)",
        "(isZero,IsZero)",
        "(resolveSignature,ResolveSignature)",
        "(origSignature,OrigSignature)",
        "(nanoseconds,Nanoseconds)",
        "(pushRef,PushRef)",
        "(Refspec,JSNewFunction)",
        "(setOom,SetOom)",
        "(DiffFile,JSNewFunction)",
        "(StashApplyOptions,JSNewFunction)",
        "(setTarget,SetTarget)",
        "(Mailmap,JSNewFunction)",
        "(DiffBinary,JSNewFunction)",
        "(lookupByPath,LookupBypath)",
        "(fetchRecurseSubmodules,FetchRecurseSubmodules)",
        "(disconnect,Disconnect)",
        "(getThreadSafetyStatus,LockMasterGetStatus)",
        "(data,Data)",
        "(validate,Validate)",
        "(ConfigIterator,JSNewFunction)",
        "(getByIndex,GetByindex)",
        "(hunks,Hunks)",
        "(ids,Ids)",
        "(discover,Discover)",
        "(indexedObjects,IndexedObjects)",
        "(IndexIterator,JSNewFunction)",
        "(origHeadId,OrigHeadId)",
        "(fromRevspec,FromRevspec)",
        "(findPrefix,FindPrefix)",
        "(findSimilar,FindSimilar)",
        "(name,Name)",
        "(isCopied,IsCopied)",
        "(refreshReferences,RefreshReferences)",
        "(email,Email)",
        "(DiffLine,JSNewFunction)",
        "(hasLog,HasLog)",
        "(findXdg,FindXdg)",
        "(numDeltas,NumDeltas)",
        "(shorthand,Shorthand)",
        "(base,Base)",
        "(sorting,Sorting)",
        "(entryById,EntryByid)",
        "(rawcontent,Rawcontent)",
        "(Blob,JSNewFunction)",
        "(tree,Tree)",
        "(containsNul,ContainsNul)",
        "(patchid,Patchid)",
        "(RepositoryInitOptions,JSNewFunction)",
        "(entryByPath,EntryBypath)",
        "(origHeadName,OrigHeadName)",
        "(pop,Pop)",
        "(hideGlob,HideGlob)",
        "(caps,Caps)",
        "(IndexConflictIterator,JSNewFunction)",
        "(entrycount,Entrycount)",
        "(contentLen,ContentLen)",
        "(getUsername,GetUsername)",
        "(Configmap,JSNewFunction)",
        "(headDetachedForWorktree,HeadDetachedForWorktree)",
        "(pushGlob,PushGlob)",
        "(count,Count)",
        "(authorWithMailmap,AuthorWithMailmap)",
        "(oldFile,OldFile)",
        "(autotag,Autotag)",
        "(Signature,JSNewFunction)",
        "(sshKeyFromAgent,SshKeyFromAgent)",
        "(isWorktree,IsWorktree)",
        "(ProxyOptions,JSNewFunction)",
        "(DiffPerfdata,JSNewFunction)",
        "(operationEntrycount,OperationEntrycount)",
        "(parentcount,Parentcount)",
        "(hideHead,HideHead)",
        "(writeTreeTo,WriteTreeTo)",
        "(read,OdbRead)",
        "(commitIteratorNew,CommitIteratorNew)",
        "(state,State)",
        "(fileHistoryWalk,FileHistoryWalk)",
        "(newFile,NewFile)",
        "(fromFetchhead,FromFetchhead)",
        "(repository,Repository)",
        "(headerLen,HeaderLen)",
        "(openBare,OpenBare)",
        "(isUntracked,IsUntracked)",
        "(matchTree,MatchTree)",
        "(listMatch,ListMatch)",
        "(Worktree,JSNewFunction)",
        "(getRefspec,GetRefspec)",
        "(strings,Strings)",
        "(branch,Branch)",
        "(totalObjects,TotalObjects)",
        "(default,Default)",
        "(RemoteCreateOptions,JSNewFunction)",
        "(Object,JSNewFunction)",
        "(conflictCleanup,ConflictCleanup)",
        "(receivedBytes,ReceivedBytes)",
        "(save,Save)",
        "(addDiskAlternate,AddDiskAlternate)",
        "(toBuf,DiffStatsToBuf)",
        "(createMatching,CreateMatching)",
        "(indexToWorkdir,IndexToWorkdir)",
        "(Revert,Revert)",
        "(filemodeRaw,FilemodeRaw)",
        "(CertX509,JSNewFunction)",
        "(isValidName,IsValidName)",
        "(next,Next)",
        "(DiffFindOptions,JSNewFunction)",
        "(symrefTarget,SymrefTarget)",
        "(get,Get)",
        "(setFetchRecurseSubmodules,SetFetchRecurseSubmodules)",
        "(parse,Parse)",
        "(list,List)",
        "(RevertOptions,JSNewFunction)",
        "(StatusOptions,JSNewFunction)",
        "(DescribeFormatOptions,JSNewFunction)",
        "(upstream,Upstream)",
        "(treeToIndex,TreeToIndex)",
        "(origin,Origin)",
        "(getDelta,GetDelta)",
        "(hasUsername,HasUsername)",
        "(addSetup,AddSetup)",
        "(checksum,Checksum)",
        "(equal,Equal)",
        "(getNamespace,GetNamespace)",
        "(matchIndex,MatchIndex)",
        "(isHead,IsHead)",
        "(createDetached,CreateDetached)",
        "(Cred,JSNewFunction)",
        "(ptr,Ptr)",
        "(isBranch,IsBranch)",
        "(addByPath,AddBypath)",
        "(nthGenAncestor,NthGenAncestor)",
        "(Oidarray,JSNewFunction)",
        "(nameToId,NameToId)",
        "(setHeadDetachedFromAnnotated,SetHeadDetachedFromAnnotated)",
        "(cacheFlush,CacheFlush)",
        "(OidShorten,JSNewFunction)",
        "(origCommitId,OrigCommitId)",
        "(owner,Owner)",
        "(loid,Loid)",
        "(diffEntry,DiffEntry)",
        "(BlobFilterOptions,JSNewFunction)",
        "(addToIndex,AddToIndex)",
        "(SubmoduleUpdateOptions,JSNewFunction)",
        "(headForWorktree,HeadForWorktree)",
        "(isModified,IsModified)",
        "(treeId,TreeId)",
        "(certType,CertType)",
        "(setBool,SetBool)",
        "(refspecCount,RefspecCount)",
        "(RebaseOperation,JSNewFunction)",
        "(fetchheadForeach,FetchheadForeach)",
        "(CloneOptions,JSNewFunction)",
        "(timeOffset,TimeOffset)",
        "(idOld,IdOld)",
        "(Config,JSNewFunction)",
        "(commit,Commit)",
        "(entryCmp,EntryCmp)",
        "(getPushRefspecs,GetPushRefspecs)",
        "(ConfigEntry,JSNewFunction)",
        "(openExt,OpenExt)",
        "(getStringBuf,GetStringBuf)",
        "(treeToTree,TreeToTree)",
        "(download,Download)",
        "(fetch,Fetch)",
        "(inmemoryIndex,InmemoryIndex)",
        "(newLineno,NewLineno)",
        "(operationCurrent,OperationCurrent)",
        "(connect,Connect)",
        "(deletions,Deletions)",
        "(symbolicCreateMatching,SymbolicCreateMatching)",
        "(upstreamName,UpstreamName)",
        "(sshKeyMemoryNew,SshKeyMemoryNew)",
        "(Cherrypick,Cherrypick)",
        "(Pathspec,JSNewFunction)",
        "(size,Size)",
        "(upload,Upload)",
        "(writeTree,WriteTree)",
        "(statCalls,StatCalls)",
        "(indexToIndex,IndexToIndex)",
        "(aheadBehind,AheadBehind)",
        "(updateAll,UpdateAll)",
        "(insertWalk,InsertWalk)",
        "(isGitfile,IsGitfile)",
        "(reload,Reload)",
        "(entryByIndex,EntryByindex)",
        "(compare,Compare)",
        "(getNonSelfFreeingConstructedCount,GetNonSelfFreeingConstructedCount)",
        "(nfiles,Nfiles)",
        "(BranchIterator,JSNewFunction)",
        "(addAll,AddAll)",
        "(getStats,GetStats)",
        "(mkdirCalls,MkdirCalls)",
        "(getHunkByLine,GetHunkByline)",
        "(setReflog,SetReflog)",
        "(indexId,IndexId)",
        "(StatusList,JSNewFunction)",
        "(cmp,Cmp)",
        "(body,Body)",
        "(FilterList,JSNewFunction)",
        "(createBuffer,CreateBuffer)",
        "(cleanup,Cleanup)",
        "(defaultRef,DefaultRef)",
        "(removeAll,RemoveAll)",
        "(repoInit,RepoInit)",
        "(IndexReucEntry,JSNewFunction)",
        "(enableThreadSafety,LockMasterEnable)",
        "(chmodCalls,ChmodCalls)",
        "(conflictAdd,ConflictAdd)",
        "(rawHeader,RawHeader)",
        "(conflictRemove,ConflictRemove)",
        "(openOndisk,OpenOndisk)",
        "(referenceList,ReferenceList)",
        "(findProgramdata,FindProgramdata)",
        "(analysis,Analysis)",
        "(len,Len)",
        "(Apply,Apply)",
        "(messageEncoding,MessageEncoding)",
        "(when,When)",
        "(compress,Compress)",
        "(initExt,InitExt)",
        "(strMatch,StrMatch)",
        "(origPath,OrigPath)",
        "(repo,Repo)",
        "(Packbuilder,JSNewFunction)",
        "(applyToBlob,ApplyToBlob)",
        "(isAdded,IsAdded)",
        "(getFetchRefspecs,GetFetchRefspecs)",
        "(Diff,JSNewFunction)",
        "(messageRaw,MessageRaw)",
        "(openFromRepository,OpenFromRepository)",
        "(filteredContent,FilteredContent)",
        "(Tag,JSNewFunction)",
        "(oldLines,OldLines)",
        "(Writestream,JSNewFunction)",
        "(matchesPath,MatchesPath)",
        "(isBinary,IsBinary)",
        "(numHunks,NumHunks)",
        "(finalSignature,FinalSignature)",
        "(failedEntry,FailedEntry)",
        "(MergeFileOptions,JSNewFunction)",
        "(setHeadDetached,SetHeadDetached)",
        "(commits,Commits)",
        "(mergeheadForeach,MergeheadForeach)",
        "(setUpdate,SetUpdate)",
        "(createFromDisk,CreateFromDisk)",
        "(lines,Lines)",
        "(fromRef,FromRef)",
        "(ours,Ours)",
        "(version,Version)",
        "(failedEntrycount,FailedEntrycount)",
        "(symbolicTarget,SymbolicTarget)",
        "(upstreamRemote,UpstreamRemote)",
        "(getHunkCount,GetHunkCount)",
        "(Patch,JSNewFunction)",
        "(ref,Ref)",
        "(createFromAnnotated,CreateFromAnnotated)",
        "(remove,Remove)",
        "(setAutotag,SetAutotag)",
        "(ConvenientPatch,JSNewFunction)",
        "(getSelfFreeingInstanceCount,GetSelfFreeingInstanceCount)",
        "(FilterSource,JSNewFunction)",
        "(createUpdated,CreateUpdated)",
        "(register,GitFilterRegister)",
        "(createWithOpts,CreateWithOpts)",
        "(hashSha1,HashSha1)",
        "(isBare,IsBare)",
        "(annotationCreate,AnnotationCreate)",
        "(simplifyFirstParent,SimplifyFirstParent)",
        "(cherrypick,Cherrypick)",
        "(symbolicSetTarget,SymbolicSetTarget)",
        "(isDeleted,IsDeleted)",
        "(Merge,Merge)",
        "(open,Open)",
        "(copy,Copy)",
        "(lockRef,LockRef)",
        "(containsData,ContainsData)",
        "(stats,Stats)",
        "(setMultivar,SetMultivar)",
        "(addEntry,AddEntry)",
        "(snapshot,Snapshot)",
        "(revert,Revert)",
        "(BlameOptions,JSNewFunction)",
        "(Oid,JSNewFunction)",
        "(head,Head)",
        "(Reflog,JSNewFunction)",
        "(isNote,IsNote)",
        "(submoduleCacheAll,SubmoduleCacheAll)",
        "(foreachExt,ForeachExt)",
        "(PushOptions,JSNewFunction)",
        "(Index,JSNewFunction)",
        "(hashSha256,HashSha256)",
        "(hashMd5,HashMd5)",
        "(oid,Oid)",
        "(ontoId,OntoId)",
        "(Cert,JSNewFunction)",
        "(isTag,IsTag)",
        "(push,Push)",
        "(pushurl,Pushurl)",
        "(isTypeChange,IsTypeChange)",
        "(datalen,Datalen)",
        "(targetPeel,TargetPeel)",
        "(fastWalk,FastWalk)",
        "(now,Now)",
        "(lookupPrefix,LookupPrefix)",
        "(IndexEntry,JSNewFunction)",
        "(force,Force)",
        "(last,Last)",
        "(treeToWorkdir,TreeToWorkdir)",
        "(author,Author)",
        "(id,Id)",
        "(ReflogEntry,JSNewFunction)",
        "(rename,Rename)",
        "(fromString,Fromstrp)",
        "(wrapOdb,WrapOdb)",
        "(existsPrefix,ExistsPrefix)",
        "(headId,HeadId)",
        "(isSortedIcase,IsSortedIcase)",
        "(PathspecMatchList,JSNewFunction)",
        "(updateStrategy,UpdateStrategy)",
        "(finish,Finish)",
        "(typeisloose,Typeisloose)",
        "(updateTips,UpdateTips)",
        "(getPath,GetPath)",
        "(AnnotatedCommit,JSNewFunction)",
        "(isShallow,IsShallow)",
        "(BlameHunk,JSNewFunction)",
        "(drop,Drop)",
        "(toTree,ToTree)",
        "(treeToWorkdirWithIndex,TreeToWorkdirWithIndex)",
        "(getMany,GetMany)",
        "(written,Written)",
        "(findSystem,FindSystem)",
        "(ensureLog,EnsureLog)",
        "(toBuffer,ToBuffer)",
        "(IndexNameEntry,JSNewFunction)",
        "(parentId,ParentId)",
        "(numLines,NumLines)",
        "(convenientFromDiff,ConvenientFromDiff)",
        "(merge,Merge)",
        "(status,Status)",
        "(similarity,Similarity)",
        "(DescribeResult,JSNewFunction)",
        "(finalCommitId,FinalCommitId)",
        "(write,Write)",
        "(dup,Dup)",
        "(single,Single)",
        "(getBool,GetBool)",
        "(sign,Sign)",
        "(addRule,AddRule)",
        "(mapValue,MapValue)",
        "(offset,Offset)",
        "(rawsize,Rawsize)",
        "(createWithFetchspec,CreateWithFetchspec)",
        "(oldLineno,OldLineno)",
        "(ignore,Ignore)",
        "(dstMatches,DstMatches)",
        "(PushUpdate,JSNewFunction)",
        "(update,Update)",
        "(fromDiff,FromDiff)",
        "(filter,Filter)",
        "(odb,Odb)",
        "(setIdent,SetIdent)",
        "(insertions,Insertions)",
        "(openDefault,OpenDefault)",
        "(dispose,Dispose)",
        "(normalizeName,NormalizeName)",
        "(ident,Ident)",
        "(isLocked,IsLocked)",
        "(Time,JSNewFunction)",
        "(Treebuilder,JSNewFunction)",
        "(addMacro,AddMacro)",
        "(trees,Trees)",
        "(idAbbrev,IdAbbrev)",
        "(defaultNew,DefaultNew)",
        "(isEmpty,IsEmpty)",
        "(shouldIgnore,ShouldIgnore)",
        "(type2String,Type2string)",
        "(entryCount,Entrycount)",
        "(CertHostkey,JSNewFunction)",
        "(hide,Hide)",
        "(features,Features)",
        "(unregister,GitFilterUnregister)",
        "(operationByIndex,OperationByindex)",
        "(newStart,NewStart)",
        "(tostrS,TostrS)",
        "(_entryByName,EntryByname)",
        "(RemoteCallbacks,JSNewFunction)",
        "(OdbObject,JSNewFunction)",
        "(oidCalculations,OidCalculations)",
        "(pruneRefs,PruneRefs)",
        "(removeByPath,RemoveBypath)",
        "(local,Local)",
        "(theirs,Theirs)",
        "(CheckoutPerfdata,JSNewFunction)",
        "(Reference,JSNewFunction)",
        "(Odb,JSNewFunction)",
        "(url,Url)",
        "(Blame,JSNewFunction)",
        "(detachHead,DetachHead)",
        "(DescribeOptions,JSNewFunction)",
        "(getPerfdata,GetPerfdata)",
        "(headerField,HeaderField)",
        "(deleteEntry,DeleteEntry)",
        "(applyToData,ApplyToData)",
        "(headUnborn,HeadUnborn)",
        "(committerWithMailmap,CommitterWithMailmap)",
        "(foreach,Foreach)",
        "(type,Type)",
        "(applyToFile,ApplyToFile)",
        "(ConvenientHunk,JSNewFunction)",
        "(readTree,ReadTree)",
        "(init,Init)",
        "(ext,Ext)",
        "(file,File)",
        "(fromBuffer,FromBuffer)",
        "(oldStart,OldStart)",
        "(hideRef,HideRef)",
        "(isCheckedOut,IsCheckedOut)",
        "(extractSignature,ExtractSignature)",
        "(CherrypickOptions,JSNewFunction)",
        "(TreeUpdate,JSNewFunction)",
        "(fromBlobs,FromBlobs)",
        "(objectCount,ObjectCount)",
        "(Wrapper,JSNewFunction)",
        "(shutdown,Shutdown)",
        "(strcmp,Strcmp)",
        "(headToIndex,HeadToIndex)",
        "(IndexerProgress,JSNewFunction)",
        "(WorktreeAddOptions,JSNewFunction)",
        "(unlock,Unlock)",
        "(getLineInHunk,GetLineInHunk)",
        "(WorktreePruneOptions,JSNewFunction)",
        "(hashfile,Hashfile)",
        "(Buf,JSNewFunction)",
        "(parent,Parent)",
        "(localObjects,LocalObjects)",
        "(Note,JSNewFunction)",
        "(insertCommit,InsertCommit)",
        "(lock,Lock)",
        "(inflatedlen,Inflatedlen)",
        "(removeDirectory,RemoveDirectory)",
        "(setWorkdir,SetWorkdir)",
        "(insertTree,InsertTree)",
        "(level,Level)",
        "(setHead,SetHead)",
        "(lineStats,LineStats)",
        "(commitRead,CommitRead)",
        "(Revwalk,JSNewFunction)",
        "(peel,Peel)",
        "(MergeOptions,JSNewFunction)",
        "(path,Path)",
        "(hasConflicts,HasConflicts)",
        "(indexedDeltas,IndexedDeltas)",
        "(setUrl,SetUrl)",
        "(Transport,JSNewFunction)",
        "(Tree,JSNewFunction)",
        "(pathIsIgnored,PathIsIgnored)",
        "(receivedObjects,ReceivedObjects)",
        "(entry,Entry)",
        "(itemPath,ItemPath)",
        "(getHunk,GetHunk)",
        "(tagger,Tagger)",
        "(DiffDelta,JSNewFunction)",
        "(createMultivar,GitConfigMultivarIteratorNew)",
        "(sync,Sync)",
        "(lookup,Lookup)",
        "(addFinalize,AddFinalize)",
        "(amend,Amend)",
        "(streq,Streq)",
        "(load,Load)",
        "(setThreadSafetyStatus,LockMasterSetStatus)",
        "(asize,Asize)",
        "(FetchOptions,JSNewFunction)",
        "(setInt64,SetInt64)",
        "(srcRefname,SrcRefname)",
        "(setUpstream,SetUpstream)",
        "(CheckoutOptions,JSNewFunction)",
        "(pushRange,PushRange)",
        "(addPush,AddPush)"
      ],
      "Charon": [
        "(enableThreadSafety,LockMasterEnable)",
        "(setThreadSafetyStatus,LockMasterSetStatus)",
        "(getThreadSafetyStatus,LockMasterGetStatus)",
        "(getThreadSafetyDiagnostics,LockMasterGetDiagnostics)",
        "(getSelfFreeingInstanceCount,GetSelfFreeingInstanceCount)",
        "(getNonSelfFreeingConstructedCount,GetNonSelfFreeingConstructedCount)",
        "(aheadBehind,AheadBehind)",
        "(descendantOf,DescendantOf)",
        "(errno,baton)",
        "(version,Version)",
        "(flags,Flags)",
        "(buffer,Buffer)",
        "(file,File)",
        "(getHunkByIndex,GetHunkByindex)",
        "(getHunkByLine,GetHunkByline)",
        "(getHunkCount,GetHunkCount)",
        "(hide,Hide)",
        "(hideGlob,HideGlob)",
        "(hideHead,HideHead)",
        "(hideRef,HideRef)",
        "(create,Create)",
        "(next,Next)",
        "(push,Push)",
        "(pushGlob,PushGlob)",
        "(pushHead,PushHead)",
        "(pushRange,PushRange)",
        "(pushRef,PushRef)",
        "(repository,Repository)",
        "(reset,Reset)",
        "(simplifyFirstParent,SimplifyFirstParent)",
        "(sorting,Sorting)",
        "(commitWalk,CommitWalk)",
        "(fastWalk,FastWalk)",
        "(fileHistoryWalk,FileHistoryWalk)",
        "(name,signature)",
        "(email,signature)",
        "(date,signature)",
        "(sha,commit)",
        "(message,commit)",
        "(author,commit)",
        "(committer,commit)",
        "(signature,signature)",
        "(commit,GitCommit)",
        "(reachedEndOfHistory,baton)",
        "(containsNul,ContainsNul)",
        "(dispose,Dispose)",
        "(grow,Grow)",
        "(isBinary,IsBinary)",
        "(set,Set)",
        "(ptr,Ptr)",
        "(asize,Asize)",
        "(size,Size)",
        "(committer,Committer)",
        "(idNew,IdNew)",
        "(idOld,IdOld)",
        "(message,Message)",
        "(amend,Amend)",
        "(author,Author)",
        "(authorWithMailmap,AuthorWithMailmap)",
        "(body,Body)",
        "(committerWithMailmap,CommitterWithMailmap)",
        "(createBuffer,CreateBuffer)",
        "(createV,CreateV)",
        "(createWithSignature,CreateWithSignature)",
        "(dup,Dup)",
        "(extractSignature,ExtractSignature)",
        "(headerField,HeaderField)",
        "(id,Id)",
        "(lookup,Lookup)",
        "(lookupPrefix,LookupPrefix)",
        "(messageEncoding,MessageEncoding)",
        "(messageRaw,MessageRaw)",
        "(nthGenAncestor,NthGenAncestor)",
        "(owner,Owner)",
        "(parent,Parent)",
        "(parentId,ParentId)",
        "(parentcount,Parentcount)",
        "(rawHeader,RawHeader)",
        "(summary,Summary)",
        "(time,Time)",
        "(timeOffset,TimeOffset)",
        "(tree,Tree)",
        "(treeId,TreeId)",
        "(signature,baton)",
        "(signedData,baton)",
        "(origin,Origin)",
        "(oldLineno,OldLineno)",
        "(newLineno,NewLineno)",
        "(numLines,NumLines)",
        "(contentLen,ContentLen)",
        "(contentOffset,ContentOffset)",
        "(content,Content)",
        "(addMacro,AddMacro)",
        "(cacheFlush,CacheFlush)",
        "(get,Get)",
        "(getMany,GetMany)",
        "(value,Value)",
        "(add,Add)",
        "(addAll,AddAll)",
        "(addByPath,AddBypath)",
        "(caps,Caps)",
        "(checksum,Checksum)",
        "(clear,Clear)",
        "(conflictAdd,ConflictAdd)",
        "(conflictCleanup,ConflictCleanup)",
        "(conflictGet,ConflictGet)",
        "(conflictRemove,ConflictRemove)",
        "(entryIsConflict,EntryIsConflict)",
        "(entryStage,EntryStage)",
        "(entryCount,Entrycount)",
        "(find,Find)",
        "(findPrefix,FindPrefix)",
        "(getByIndex,GetByindex)",
        "(getByPath,GetBypath)",
        "(hasConflicts,HasConflicts)",
        "(open,Open)",
        "(path,Path)",
        "(read,Read)",
        "(readTree,ReadTree)",
        "(remove,Remove)",
        "(removeAll,RemoveAll)",
        "(removeByPath,RemoveBypath)",
        "(removeDirectory,RemoveDirectory)",
        "(setCaps,SetCaps)",
        "(setVersion,SetVersion)",
        "(updateAll,UpdateAll)",
        "(write,Write)",
        "(writeTree,WriteTree)",
        "(writeTreeTo,WriteTreeTo)",
        "(defaultNew,DefaultNew)",
        "(getUsername,GetUsername)",
        "(hasUsername,HasUsername)",
        "(sshKeyFromAgent,SshKeyFromAgent)",
        "(sshKeyMemoryNew,SshKeyMemoryNew)",
        "(sshKeyNew,SshKeyNew)",
        "(usernameNew,UsernameNew)",
        "(userpassPlaintextNew,UserpassPlaintextNew)",
        "(addDiskAlternate,AddDiskAlternate)",
        "(existsPrefix,ExistsPrefix)",
        "(hashfile,Hashfile)",
        "(read,OdbRead)",
        "(readPrefix,ReadPrefix)",
        "(ids,Ids)",
        "(count,Count)",
        "(commondir,Commondir)",
        "(config,Config)",
        "(detachHead,DetachHead)",
        "(discover,Discover)",
        "(fetchheadForeach,FetchheadForeach)",
        "(getNamespace,GetNamespace)",
        "(head,Head)",
        "(headDetached,HeadDetached)",
        "(headDetachedForWorktree,HeadDetachedForWorktree)",
        "(headForWorktree,HeadForWorktree)",
        "(headUnborn,HeadUnborn)",
        "(ident,Ident)",
        "(index,Index)",
        "(init,Init)",
        "(initExt,InitExt)",
        "(isBare,IsBare)",
        "(isEmpty,IsEmpty)",
        "(isShallow,IsShallow)",
        "(isWorktree,IsWorktree)",
        "(itemPath,ItemPath)",
        "(mergeheadForeach,MergeheadForeach)",
        "(messageRemove,MessageRemove)",
        "(odb,Odb)",
        "(openBare,OpenBare)",
        "(openExt,OpenExt)",
        "(openFromWorktree,OpenFromWorktree)",
        "(refdb,Refdb)",
        "(setHead,SetHead)",
        "(setHeadDetached,SetHeadDetached)",
        "(setHeadDetachedFromAnnotated,SetHeadDetachedFromAnnotated)",
        "(setIdent,SetIdent)",
        "(setNamespace,SetNamespace)",
        "(setWorkdir,SetWorkdir)",
        "(state,State)",
        "(stateCleanup,StateCleanup)",
        "(workdir,Workdir)",
        "(wrapOdb,WrapOdb)",
        "(cleanup,Cleanup)",
        "(getReferences,GetReferences)",
        "(getSubmodules,GetSubmodules)",
        "(getRemotes,GetRemotes)",
        "(refreshReferences,RefreshReferences)",
        "(setIndex,SetIndex)",
        "(submoduleCacheAll,SubmoduleCacheAll)",
        "(submoduleCacheClear,SubmoduleCacheClear)",
        "(status,Status)",
        "(similarity,Similarity)",
        "(nfiles,Nfiles)",
        "(oldFile,OldFile)",
        "(newFile,NewFile)",
        "(totalObjects,TotalObjects)",
        "(indexedObjects,IndexedObjects)",
        "(receivedObjects,ReceivedObjects)",
        "(localObjects,LocalObjects)",
        "(totalDeltas,TotalDeltas)",
        "(indexedDeltas,IndexedDeltas)",
        "(receivedBytes,ReceivedBytes)",
        "(containsData,ContainsData)",
        "(data,Data)",
        "(len,Len)",
        "(cherrypick,Cherrypick)",
        "(commit,Commit)",
        "(copy,Copy)",
        "(strings,Strings)",
        "(oldStart,OldStart)",
        "(oldLines,OldLines)",
        "(newStart,NewStart)",
        "(newLines,NewLines)",
        "(headerLen,HeaderLen)",
        "(header,Header)",
        "(deleteEntry,DeleteEntry)",
        "(deleteMultivar,DeleteMultivar)",
        "(findGlobal,FindGlobal)",
        "(findProgramdata,FindProgramdata)",
        "(findSystem,FindSystem)",
        "(findXdg,FindXdg)",
        "(getBool,GetBool)",
        "(getEntry,GetEntry)",
        "(getInt32,GetInt32)",
        "(getInt64,GetInt64)",
        "(getPath,GetPath)",
        "(getStringBuf,GetStringBuf)",
        "(lock,Lock)",
        "(openDefault,OpenDefault)",
        "(openOndisk,OpenOndisk)",
        "(setBool,SetBool)",
        "(setInt32,SetInt32)",
        "(setInt64,SetInt64)",
        "(setMultivar,SetMultivar)",
        "(setString,SetString)",
        "(snapshot,Snapshot)",
        "(createUpdated,CreateUpdated)",
        "(entryById,EntryByid)",
        "(_entryByIndex,EntryByindex)",
        "(_entryByName,EntryByname)",
        "(entryByPath,EntryBypath)",
        "(entryCmp,EntryCmp)",
        "(type,Type)",
        "(hashMd5,HashMd5)",
        "(hashSha1,HashSha1)",
        "(hashSha256,HashSha256)",
        "(getByIndex,GetByIndex)",
        "(ancestor,Ancestor)",
        "(ours,Ours)",
        "(theirs,Theirs)",
        "(commitCreate,CommitCreate)",
        "(commitIteratorNew,CommitIteratorNew)",
        "(commitRead,CommitRead)",
        "(commitRemove,CommitRemove)",
        "(defaultRef,DefaultRef)",
        "(foreach,Foreach)",
        "(fromFetchhead,FromFetchhead)",
        "(fromRef,FromRef)",
        "(fromRevspec,FromRevspec)",
        "(ref,Ref)",
        "(ext,Ext)",
        "(single,Single)",
        "(cmp,Cmp)",
        "(createMatching,CreateMatching)",
        "(delete,Delete)",
        "(dwim,Dwim)",
        "(ensureLog,EnsureLog)",
        "(hasLog,HasLog)",
        "(isBranch,IsBranch)",
        "(isNote,IsNote)",
        "(isRemote,IsRemote)",
        "(isTag,IsTag)",
        "(isValidName,IsValidName)",
        "(list,List)",
        "(name,Name)",
        "(nameToId,NameToId)",
        "(normalizeName,NormalizeName)",
        "(peel,Peel)",
        "(rename,Rename)",
        "(resolve,Resolve)",
        "(setTarget,SetTarget)",
        "(shorthand,Shorthand)",
        "(symbolicCreate,SymbolicCreate)",
        "(symbolicCreateMatching,SymbolicCreateMatching)",
        "(symbolicSetTarget,SymbolicSetTarget)",
        "(symbolicTarget,SymbolicTarget)",
        "(target,Target)",
        "(targetPeel,TargetPeel)",
        "(storedMutexesCount,diagnostics)",
        "(setThreadSafetyStatus,LockMasterSetStatus)",
        "(DISABLED,LockMaster)",
        "(ENABLED_FOR_ASYNC_ONLY,LockMaster)",
        "(ENABLED,LockMaster)",
        "(headToIndex,HeadToIndex)",
        "(indexToWorkdir,IndexToWorkdir)",
        "(default,Default)",
        "(fromAnnotated,FromAnnotated)",
        "(statCalls,StatCalls)",
        "(oidCalculations,OidCalculations)",
        "(cpy,Cpy)",
        "(equal,Equal)",
        "(fromString,Fromstrp)",
        "(isZero,IsZero)",
        "(iszero,Iszero)",
        "(ncmp,Ncmp)",
        "(strcmp,Strcmp)",
        "(streq,Streq)",
        "(tostrS,TostrS)",
        "(datalen,Datalen)",
        "(inflatedlen,Inflatedlen)",
        "(append,Append)",
        "(drop,Drop)",
        "(entryByIndex,EntryByindex)",
        "(entrycount,Entrycount)",
        "(revert,Revert)",
        "(getByPath,GetByPath)",
        "(mode,Mode)",
        "(oid,Oid)",
        "(byIndex,Byindex)",
        "(foreachExt,ForeachExt)",
        "(shouldIgnore,ShouldIgnore)",
        "(srcRefname,SrcRefname)",
        "(dstRefname,DstRefname)",
        "(src,Src)",
        "(dst,Dst)",
        "(createFromBuffer,CreateFromBuffer)",
        "(createFromDisk,CreateFromDisk)",
        "(createFromWorkdir,CreateFromWorkdir)",
        "(filter,Filter)",
        "(filteredContent,FilteredContent)",
        "(rawcontent,Rawcontent)",
        "(rawsize,Rawsize)",
        "(addEntry,AddEntry)",
        "(fromBuffer,FromBuffer)",
        "(fromRepository,FromRepository)",
        "(resolveSignature,ResolveSignature)",
        "(last,Last)",
        "(setOom,SetOom)",
        "(setString,SetStr)",
        "(klass,Klass)",
        "(addRule,AddRule)",
        "(clearInternalRules,ClearInternalRules)",
        "(pathIsIgnored,PathIsIgnored)",
        "(createGlob,GlobNew)",
        "(createMultivar,GitConfigMultivarIteratorNew)",
        "(next,GitConfigNext)",
        "(insert,Insert)",
        "(lines,Lines)",
        "(matchDiff,MatchDiff)",
        "(matchIndex,MatchIndex)",
        "(matchTree,MatchTree)",
        "(matchWorkdir,MatchWorkdir)",
        "(matchesPath,MatchesPath)",
        "(applyToBlob,ApplyToBlob)",
        "(applyToData,ApplyToData)",
        "(applyToFile,ApplyToFile)",
        "(load,Load)",
        "(repo,Repo)",
        "(filemode,Filemode)",
        "(merge,Merge)",
        "(analysis,Analysis)",
        "(analysisForRef,AnalysisForRef)",
        "(base,Base)",
        "(bases,Bases)",
        "(commits,Commits)",
        "(trees,Trees)",
        "(createFromAnnotated,CreateFromAnnotated)",
        "(isCheckedOut,IsCheckedOut)",
        "(isHead,IsHead)",
        "(move,Move)",
        "(remoteName,RemoteName)",
        "(setUpstream,SetUpstream)",
        "(upstream,Upstream)",
        "(upstreamName,UpstreamName)",
        "(upstreamRemote,UpstreamRemote)",
        "(diffEntry,DiffEntry)",
        "(entry,Entry)",
        "(failedEntry,FailedEntry)",
        "(failedEntrycount,FailedEntrycount)",
        "(offset,Offset)",
        "(sign,Sign)",
        "(getPerfdata,GetPerfdata)",
        "(addFinalize,AddFinalize)",
        "(addSetup,AddSetup)",
        "(addToIndex,AddToIndex)",
        "(branch,Branch)",
        "(clone,Clone)",
        "(fetchRecurseSubmodules,FetchRecurseSubmodules)",
        "(headId,HeadId)",
        "(ignore,Ignore)",
        "(indexId,IndexId)",
        "(location,Location)",
        "(reload,Reload)",
        "(repoInit,RepoInit)",
        "(resolveUrl,ResolveUrl)",
        "(setBranch,SetBranch)",
        "(setFetchRecurseSubmodules,SetFetchRecurseSubmodules)",
        "(setIgnore,SetIgnore)",
        "(setUpdate,SetUpdate)",
        "(setUrl,SetUrl)",
        "(sync,Sync)",
        "(update,Update)",
        "(updateStrategy,UpdateStrategy)",
        "(url,Url)",
        "(wdId,WdId)",
        "(now,Now)",
        "(email,Email)",
        "(when,When)",
        "(seconds,Seconds)",
        "(nanoseconds,Nanoseconds)",
        "(local,Local)",
        "(loid,Loid)",
        "(symrefTarget,SymrefTarget)",
        "(hunks,Hunks)",
        "(lineStats,LineStats)",
        "(isUnmodified,IsUnmodified)",
        "(isAdded,IsAdded)",
        "(isDeleted,IsDeleted)",
        "(isModified,IsModified)",
        "(isRenamed,IsRenamed)",
        "(isCopied,IsCopied)",
        "(isIgnored,IsIgnored)",
        "(isUntracked,IsUntracked)",
        "(isTypeChange,IsTypeChange)",
        "(isUnreadable,IsUnreadable)",
        "(isConflicted,IsConflicted)",
        "(direction,Direction)",
        "(dstMatches,DstMatches)",
        "(force,Force)",
        "(parse,Parse)",
        "(srcMatches,SrcMatches)",
        "(string,String)",
        "(idAbbrev,IdAbbrev)",
        "(blobToBuffer,BlobToBuffer)",
        "(findSimilar,FindSimilar)",
        "(getDelta,GetDelta)",
        "(getStats,GetStats)",
        "(indexToIndex,IndexToIndex)",
        "(isSortedIcase,IsSortedIcase)",
        "(numDeltas,NumDeltas)",
        "(patchid,Patchid)",
        "(toBuf,ToBuf)",
        "(treeToIndex,TreeToIndex)",
        "(treeToTree,TreeToTree)",
        "(treeToWorkdir,TreeToWorkdir)",
        "(treeToWorkdirWithIndex,TreeToWorkdirWithIndex)",
        "(filesChanged,FilesChanged)",
        "(insertions,Insertions)",
        "(deletions,Deletions)",
        "(toBuf,DiffStatsToBuf)",
        "(isLocked,IsLocked)",
        "(isPrunable,IsPrunable)",
        "(openFromRepository,OpenFromRepository)",
        "(prune,Prune)",
        "(unlock,Unlock)",
        "(validate,Validate)",
        "(certType,CertType)",
        "(mkdirCalls,MkdirCalls)",
        "(chmodCalls,ChmodCalls)",
        "(isGitfile,IsGitfile)",
        "(apply,Apply)",
        "(toTree,ToTree)",
        "(register,GitFilterRegister)",
        "(unregister,GitFilterUnregister)",
        "(strMatch,StrMatch)",
        "(mapValue,MapValue)",
        "(addFetch,AddFetch)",
        "(addPush,AddPush)",
        "(autotag,Autotag)",
        "(connect,Connect)",
        "(connected,Connected)",
        "(createAnonymous,CreateAnonymous)",
        "(createDetached,CreateDetached)",
        "(createWithFetchspec,CreateWithFetchspec)",
        "(createWithOpts,CreateWithOpts)",
        "(defaultBranch,DefaultBranch)",
        "(disconnect,Disconnect)",
        "(download,Download)",
        "(fetch,Fetch)",
        "(getFetchRefspecs,GetFetchRefspecs)",
        "(getPushRefspecs,GetPushRefspecs)",
        "(getRefspec,GetRefspec)",
        "(pruneRefs,PruneRefs)",
        "(pushurl,Pushurl)",
        "(refspecCount,RefspecCount)",
        "(setAutotag,SetAutotag)",
        "(setPushurl,SetPushurl)",
        "(stats,Stats)",
        "(stop,Stop)",
        "(updateTips,UpdateTips)",
        "(upload,Upload)",
        "(referenceList,ReferenceList)",
        "(features,Features)",
        "(opts,Opts)",
        "(shutdown,Shutdown)",
        "(level,Level)",
        "(hash,Hash)",
        "(insertCommit,InsertCommit)",
        "(insertRecur,InsertRecur)",
        "(insertTree,InsertTree)",
        "(insertWalk,InsertWalk)",
        "(objectCount,ObjectCount)",
        "(setThreads,SetThreads)",
        "(written,Written)",
        "(pop,Pop)",
        "(save,Save)",
        "(compare,Compare)",
        "(createFromFile,CreateFromfile)",
        "(abort,Abort)",
        "(finish,Finish)",
        "(inmemoryIndex,InmemoryIndex)",
        "(ontoId,OntoId)",
        "(ontoName,OntoName)",
        "(operationByIndex,OperationByindex)",
        "(operationCurrent,OperationCurrent)",
        "(operationEntrycount,OperationEntrycount)",
        "(origHeadId,OrigHeadId)",
        "(origHeadName,OrigHeadName)",
        "(compress,Compress)",
        "(fromBlobs,FromBlobs)",
        "(fromDiff,FromDiff)",
        "(getHunk,GetHunk)",
        "(getLineInHunk,GetLineInHunk)",
        "(numHunks,NumHunks)",
        "(numLinesInHunk,NumLinesInHunk)",
        "(convenientFromDiff,ConvenientFromDiff)",
        "(toBuffer,ToBuffer)",
        "(filemodeRaw,FilemodeRaw)",
        "(toObject,ToObject)",
        "(annotationCreate,AnnotationCreate)",
        "(createLightweight,CreateLightweight)",
        "(listMatch,ListMatch)",
        "(tagger,Tagger)",
        "(targetId,TargetId)",
        "(targetType,TargetType)",
        "(linesInHunk,LinesInHunk)",
        "(finalCommitId,FinalCommitId)",
        "(finalStartLineNumber,FinalStartLineNumber)",
        "(finalSignature,FinalSignature)",
        "(origCommitId,OrigCommitId)",
        "(origPath,OrigPath)",
        "(origStartLineNumber,OrigStartLineNumber)",
        "(origSignature,OrigSignature)",
        "(lookupByPath,LookupBypath)",
        "(shortId,ShortId)",
        "(string2Type,String2type)",
        "(type2String,Type2string)",
        "(typeisloose,Typeisloose)",
        "(lockRef,LockRef)",
        "(setReflog,SetReflog)",
        "(setSymbolicTarget,SetSymbolicTarget)",
        "(exec,Exec)"
      ]
    },
    "node-gpgpu": {
      "Gasket": [
        "(Gpgpu,Gpgpu)",
        "(createKernel,CreateKernel)",
        "(getBuildInfo,GetBuildInfo)"
      ],
      "Charon": []
    },
    "node-gyp-hello-world": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": [
        "(hello,Method)"
      ]
    },
    "node-hdiffpatch": {
      "Gasket": [
        "(diff,diff)"
      ],
      "Charon": []
    },
    "node-hid": {
      "Gasket": [
        "(readSync,readSync)",
        "(getFeatureReport,getFeatureReport)",
        "(sendFeatureReport,sendFeatureReport)",
        "(devicesAsync,devicesAsync)",
        "(setNonBlocking,setNonBlocking)",
        "(read,read)",
        "(readStop,readStop)",
        "(write,write)",
        "(HIDAsync,HIDAsync)",
        "(readStart,readStart)",
        "(close,close)",
        "(devices,devices)",
        "(openAsyncHIDDevice,Create)",
        "(getDeviceInfo,getDeviceInfo)",
        "(HID,HID)",
        "(readTimeout,readTimeout)"
      ],
      "Charon": [
        "(vendorId,Number)",
        "(productId,Number)",
        "(path,String)",
        "(serialNumber,String)",
        "(manufacturer,String)",
        "(product,String)",
        "(release,Number)",
        "(interface,Number)",
        "(usagePage,Number)",
        "(usage,Number)",
        "(HID,HID)",
        "(openAsyncHIDDevice,HIDAsync)",
        "(devices,devices)",
        "(devicesAsync,devicesAsync)"
      ]
    },
    "nodehun": {
      "Gasket": [
        "(spell,spell)",
        "(stem,stem)",
        "(suggestSync,suggestSync)",
        "(getWordCharacters,getWordCharacters)",
        "(remove,remove)",
        "(removeSync,removeSync)",
        "(nodehun/build/Debug/Nodehun,CreateObject)",
        "(addDictionarySync,addDictionarySync)",
        "(analyzeSync,analyzeSync)",
        "(generateSync,generateSync)",
        "(addSync,addSync)",
        "(suggest,suggest)",
        "(getVersion,getVersion)",
        "(Nodehun,Nodehun)",
        "(stemSync,stemSync)",
        "(addWithAffix,addWithAffix)",
        "(addWithAffixSync,addWithAffixSync)",
        "(analyze,analyze)",
        "(addDictionary,addDictionary)",
        "(generate,generate)",
        "(add,add)",
        "(target/Nodehun,CreateObject)",
        "(getDictionaryEncoding,getDictionaryEncoding)",
        "(getWordCharactersUTF16,getWordCharactersUTF16)",
        "(spellSync,spellSync)"
      ],
      "Charon": []
    },
    "nodejieba": {
      "Gasket": [
        "(cutHMM,cutHMM)",
        "(load,load)",
        "(cut,cut)",
        "(cutForSearch,cutForSearch)",
        "(cutSmall,cutSmall)",
        "(extract,extract)",
        "(textRankExtract,textRankExtract)",
        "(insertWord,insertWord)",
        "(cutAll,cutAll)",
        "(tag,tag)"
      ],
      "Charon": []
    },
    "nodejs-addons-test": {
      "Gasket": [
        "(teststring,TestString)",
        "(testnumber,TestNumber)"
      ],
      "Charon": [
        "(teststring,TestString)",
        "(testnumber,TestNumber)"
      ]
    },
    "nodejs-qmc5883l": {
      "Gasket": [
        "(setOffsetMatrix,SetCompassOffset)",
        "(readAzimuth,ReadAzimuth)",
        "(readCorrectedData,ReadCorrectedCompassData)",
        "(readRawData,ReadRawCompassData)",
        "(setScaleMatrix,SetCompassScale)",
        "(setDeclinationAngle,SetCompassDeclinationAngle)",
        "(initialize,InitCompass)"
      ],
      "Charon": [
        "(initialize,InitCompass)",
        "(setOffsetMatrix,SetCompassOffset)",
        "(setScaleMatrix,SetCompassScale)",
        "(setDeclinationAngle,SetCompassDeclinationAngle)",
        "(readRawData,ReadRawCompassData)",
        "(readCorrectedData,ReadCorrectedCompassData)",
        "(readAzimuth,ReadAzimuth)"
      ]
    },
    "node-jvt": {
      "Gasket": [
        "(vInit,vInit)",
        "(vCleanup,vCleanup)",
        "(vLogin,vLogin)",
        "(vConfigCamera,vConfigCamera)",
        "(vLogout,vLogout)"
      ],
      "Charon": []
    },
    "node-kcp": {
      "Gasket": [
        "(context,GetContext)",
        "(release,Release)",
        "(check,Check)",
        "(input,Input)",
        "(setmtu,Setmtu)",
        "(wndsize,Wndsize)",
        "(nodelay,Nodelay)",
        "(output,Output)",
        "(stream,Stream)",
        "(flush,Flush)",
        "(update,Update)",
        "(waitsnd,Waitsnd)",
        "(peeksize,Peeksize)",
        "(recv,Recv)",
        "(KCP,New)",
        "(send,Send)"
      ],
      "Charon": [
        "(release,Release)",
        "(context,GetContext)",
        "(recv,Recv)",
        "(send,Send)",
        "(input,Input)",
        "(output,Output)",
        "(update,Update)",
        "(check,Check)",
        "(flush,Flush)",
        "(peeksize,Peeksize)",
        "(setmtu,Setmtu)",
        "(wndsize,Wndsize)",
        "(waitsnd,Waitsnd)",
        "(nodelay,Nodelay)",
        "(stream,Stream)"
      ]
    },
    "node-kcp-x": {
      "Gasket": [
        "(context,GetContext)",
        "(release,Release)",
        "(check,Check)",
        "(setmtu,Setmtu)",
        "(wndsize,Wndsize)",
        "(nodelay,Nodelay)",
        "(stream,Stream)",
        "(output,Output)",
        "(flush,Flush)",
        "(KCP,KcpObject)",
        "(update,Update)",
        "(peeksize,Peeksize)",
        "(waitsnd,Waitsnd)",
        "(recv,Recv)",
        "(input,Input)",
        "(send,Send)"
      ],
      "Charon": [
        "(setmtu,KcpObject)"
      ]
    },
    "node-libtidy": {
      "Gasket": [
        "(TidyOption,New)",
        "(toString,toString)",
        "(saveBufferSync,saveBufferSync)",
        "(getOptionList,getOptionList)",
        "(optSet,optSet)",
        "(optGet,optGet)",
        "(optResetToDefault,optResetToDefault)",
        "(_async2,async)",
        "(getErrorLog,getErrorLog)",
        "(optGetCurrPick,optGetCurrPick)",
        "(optGetDocLinksList,optGetDocLinksList)",
        "(TidyDoc,New)",
        "(runDiagnosticsSync,runDiagnosticsSync)",
        "(optGetDoc,optGetDoc)",
        "(getOption,getOption)",
        "(parseBufferSync,parseBufferSync)",
        "(cleanAndRepairSync,cleanAndRepairSync)"
      ],
      "Charon": []
    },
    "node-libxml": {
      "Gasket": [
        "(getMaxErrorNumber,getMaxErrorNumber)",
        "(loadXmlFromString,loadXmlFromString)",
        "(validateAgainstSchemas,validateAgainstSchemas)",
        "(loadXml,loadXml)",
        "(freeSchemas,freeSchemas)",
        "(clearAll,clearAll)",
        "(loadSchemas,loadSchemas)",
        "(loadDtds,loadDtds)",
        "(validateAgainstDtds,validateAgainstDtds)",
        "(xpathSelect,xpathSelect)",
        "(Libxml,Libxml)",
        "(setMaxErrorNumber,setMaxErrorNumber)",
        "(freeXml,freeXml)",
        "(getDtd,getDtd)",
        "(freeDtds,freeDtds)"
      ],
      "Charon": [
        "(Libxml,func)",
        "(Libxml,func)"
      ]
    },
    "@node-lightning/secp256k1": {
      "Gasket": [
        "(contextRandomize,ContextRandomize)",
        "(privateKeyTweakAdd,PrivateKeyTweakAdd)",
        "(publicKeyNegate,PublicKeyNegate)",
        "(publicKeyTweakMul,PublicKeyTweakMul)",
        "(ecdsaVerify,ECDSAVerify)",
        "(ecdh,ECDH)",
        "(privateKeyNegate,PrivateKeyNegate)",
        "(privateKeyVerify,PrivateKeyVerify)",
        "(signatureExport,SignatureExport)",
        "(publicKeyCreate,PublicKeyCreate)",
        "(publicKeyVerify,PublicKeyVerify)",
        "(publicKeyTweakAdd,PublicKeyTweakAdd)",
        "(ecdsaRecover,ECDSARecover)",
        "(publicKeyCombine,PublicKeyCombine)",
        "(Secp256k1,Secp256k1Addon)",
        "(signatureNormalize,SignatureNormalize)",
        "(publicKeyConvert,PublicKeyConvert)",
        "(signatureImport,SignatureImport)",
        "(ecdsaSign,ECDSASign)",
        "(privateKeyTweakMul,PrivateKeyTweakMul)"
      ],
      "Charon": [
        "(Secp256k1,Secp256k1Addon)"
      ]
    },
    "node-lmdb": {
      "Gasket": [
        "(goToDup,goToDup)",
        "(detachBuffer,detachBuffer)",
        "(goToFirstDup,goToFirstDup)",
        "(goToPrevDup,goToPrevDup)",
        "(open,open)",
        "(goToRange,goToRange)",
        "(goToLast,goToLast)",
        "(goToKey,goToKey)",
        "(stat,stat)",
        "(info,info)",
        "(beginTxn,beginTxn)",
        "(goToNextDup,goToNextDup)",
        "(copy,copy)",
        "(sync,sync)",
        "(goToPrev,goToPrev)",
        "(goToFirst,goToFirst)",
        "(openDbi,openDbi)",
        "(getCurrentString,getCurrentString)",
        "(goToDupRange,goToDupRange)",
        "(getCurrentBinary,getCurrentBinary)",
        "(Env,ctor)",
        "(getCurrentStringUnsafe,getCurrentStringUnsafe)",
        "(getCurrentBoolean,getCurrentBoolean)",
        "(del,del)",
        "(goToLastDup,goToLastDup)",
        "(goToNext,goToNext)",
        "(batchWrite,batchWrite)",
        "(close,close)",
        "(getCurrentBinaryUnsafe,getCurrentBinaryUnsafe)",
        "(Cursor,ctor)",
        "(resize,resize)",
        "(getCurrentNumber,getCurrentNumber)"
      ],
      "Charon": [
        "(pageSize,stat)",
        "(treeDepth,stat)",
        "(treeBranchPageCount,stat)",
        "(treeLeafPageCount,stat)",
        "(entryCount,stat)",
        "(open,EnvWrap)",
        "(close,EnvWrap)",
        "(beginTxn,EnvWrap)",
        "(openDbi,EnvWrap)",
        "(sync,EnvWrap)",
        "(batchWrite,EnvWrap)",
        "(stat,EnvWrap)",
        "(info,EnvWrap)",
        "(resize,EnvWrap)",
        "(copy,EnvWrap)",
        "(detachBuffer,EnvWrap)",
        "(commit,TxnWrap)",
        "(abort,TxnWrap)",
        "(getString,TxnWrap)",
        "(getStringUnsafe,TxnWrap)",
        "(getBinary,TxnWrap)",
        "(getBinaryUnsafe,TxnWrap)",
        "(getNumber,TxnWrap)",
        "(getBoolean,TxnWrap)",
        "(putString,TxnWrap)",
        "(putBinary,TxnWrap)",
        "(putNumber,TxnWrap)",
        "(putBoolean,TxnWrap)",
        "(del,TxnWrap)",
        "(reset,TxnWrap)",
        "(renew,TxnWrap)",
        "(close,DbiWrap)",
        "(drop,DbiWrap)",
        "(stat,DbiWrap)",
        "(overflowPages,stat)",
        "(close,CursorWrap)",
        "(getCurrentString,CursorWrap)",
        "(getCurrentStringUnsafe,CursorWrap)",
        "(getCurrentBinary,CursorWrap)",
        "(getCurrentBinaryUnsafe,CursorWrap)",
        "(getCurrentNumber,CursorWrap)",
        "(getCurrentBoolean,CursorWrap)",
        "(goToFirst,CursorWrap)",
        "(goToLast,CursorWrap)",
        "(goToNext,CursorWrap)",
        "(goToPrev,CursorWrap)",
        "(goToKey,CursorWrap)",
        "(goToRange,CursorWrap)",
        "(goToFirstDup,CursorWrap)",
        "(goToLastDup,CursorWrap)",
        "(goToNextDup,CursorWrap)",
        "(goToPrevDup,CursorWrap)",
        "(goToDup,CursorWrap)",
        "(goToDupRange,CursorWrap)",
        "(del,CursorWrap)"
      ]
    },
    "node_log_json_on_fatal": {
      "Gasket": [
        "(register,Register)"
      ],
      "Charon": [
        "(register,Register)"
      ]
    },
    "node-mbed-dtls": {
      "Gasket": [
        "(restore,Restore)",
        "(MbedtlsError,MbedtlsError)",
        "(DtlsSocket,DtlsSocket)",
        "(receiveData,ReceiveDataFromNode)",
        "(resumeSession,ResumeSession)",
        "(SessionWrap,SessionWrap)",
        "(renegotiate,Renegotiate)",
        "(close,Close)",
        "(DtlsServer,DtlsServer)",
        "(send,Send)"
      ],
      "Charon": [
        "(handshakeTimeoutMin,DtlsServer)"
      ]
    },
    "node-mbus": {
      "Gasket": [
        "(openTCP,OpenTCP)",
        "(openSerial,OpenSerial)",
        "(scan,ScanSecondary)",
        "(close,Close)",
        "(setPrimaryId,SetPrimaryId)",
        "(MbusMaster,New)",
        "(get,Get)"
      ],
      "Charon": [
        "(openSerial,OpenSerial)",
        "(openTCP,OpenTCP)",
        "(close,Close)",
        "(get,Get)",
        "(scan,ScanSecondary)",
        "(setPrimaryId,SetPrimaryId)"
      ]
    },
    "node-memwatch-sfx": {
      "Gasket": [
        "(HeapDiff,New)",
        "(end,End)",
        "(gc,trigger_gc)",
        "(upon_gc,upon_gc)"
      ],
      "Charon": [
        "(end,End)"
      ]
    },
    "node-monospace-fonts": {
      "Gasket": [
        "(getMonospaceFonts,getMonospaceFontsNapiWrapper)"
      ],
      "Charon": [
        "(getMonospaceFonts,getMonospaceFontsNapiWrapper)"
      ]
    },
    "node-mozjpeg": {
      "Gasket": [
        "(encode,BindEncode)",
        "(encodeSync,BindEncodeSync)"
      ],
      "Charon": [
        "(version,String)"
      ]
    },
    "node-native-ocr": {
      "Gasket": [
        "(recognize,Recognize)"
      ],
      "Charon": [
        "(recognize,Recognize)"
      ]
    },
    "node-navquery": {
      "Gasket": [
        "(load,Load)",
        "(getIncludeFlags,GetIncludeFlags)",
        "(getExcludeFlags,GetExcludeFlags)",
        "(setAreaCost,SetAreaCost)",
        "(findStraightPath,FindStraightPath)",
        "(clear,Clear)",
        "(findNearestPoly,FindNearestPoly)",
        "(getAreaCost,GetAreaCost)",
        "(setIncludeFlags,SetIncludeFlags)",
        "(findRandomPoint,FindRandomPoint)",
        "(NavQuery,New)",
        "(setExcludeFlags,SetExcludeFlags)"
      ],
      "Charon": [
        "(ref,nearestRef)",
        "(filename,info)",
        "(load,NavQuery)",
        "(clear,NavQuery)",
        "(findNearestPoly,NavQuery)",
        "(findRandomPoint,NavQuery)",
        "(findStraightPath,NavQuery)",
        "(getAreaCost,NavQuery)",
        "(setAreaCost,NavQuery)",
        "(getIncludeFlags,NavQuery)",
        "(setIncludeFlags,NavQuery)",
        "(getExcludeFlags,NavQuery)",
        "(setExcludeFlags,NavQuery)"
      ]
    },
    "node-oom-heapdump": {
      "Gasket": [
        "(call,ParseArgumentsAndSetErrorHandler)"
      ],
      "Charon": [
        "(call,ParseArgumentsAndSetErrorHandler)",
        "(call,ParseArgumentsAndSetErrorHandler)"
      ]
    },
    "node-openjtalk-binding": {
      "Gasket": [
        "(synthesis,Synthesis)"
      ],
      "Charon": [
        "(synthesis,Synthesis)"
      ]
    },
    "node-opus": {
      "Gasket": [
        "(OpusEncoder,New)",
        "(decode,Decode)",
        "(getBitrate,GetBitrate)",
        "(encode,Encode)",
        "(setBitrate,SetBitrate)",
        "(applyEncoderCTL,ApplyEncoderCTL)",
        "(applyDecoderCTL,ApplyDecoderCTL)"
      ],
      "Charon": [
        "(encode,Encode)",
        "(decode,Decode)",
        "(applyEncoderCTL,ApplyEncoderCTL)",
        "(applyDecoderCTL,ApplyDecoderCTL)",
        "(setBitrate,SetBitrate)",
        "(getBitrate,GetBitrate)"
      ]
    },
    "node_or_tools": {
      "Gasket": [
        "(Solve,Solve)",
        "(TSP,New)",
        "(VRP,New)"
      ],
      "Charon": [
        "(Solve,Solve)"
      ]
    },
    "node-os-calls": {
      "Gasket": [
        "(getVolume,getVolume)",
        "(whoAmI,whoAmI)"
      ],
      "Charon": [
        "(whoAmI,whoAmI)",
        "(getVolume,getVolume)"
      ]
    },
    "@nodeos/node-ife": {
      "Gasket": [
        "(up,up)",
        "(down,down)",
        "(arpcache,arpcache)",
        "(list,list)",
        "(gratarp,gratarp)",
        "(IFE,New)"
      ],
      "Charon": []
    },
    "node-pgparser": {
      "Gasket": [
        "(parse_plpgsql,parse_plpgsql)",
        "(parse,parse)"
      ],
      "Charon": [
        "(parse,parse)",
        "(parse_plpgsql,parse_plpgsql)"
      ]
    },
    "node-pipe": {
      "Gasket": [
        "(pipeSync,PipeSync)"
      ],
      "Charon": [
        "(pipeSync,PipeSync)"
      ]
    },
    "node-pipe2": {
      "Gasket": [
        "(pipe2,pipe2)"
      ],
      "Charon": [
        "(pipe2,pipe2)"
      ]
    },
    "node-portmapping": {
      "Gasket": [
        "(cleanup,cleanup)",
        "(getInfo,getInfo)",
        "(createMapping,createMapping)",
        "(destroy,destroy)",
        "(getLocalAddress,getLocalAddress)",
        "(init,init)",
        "(Mapping,Mapping)"
      ],
      "Charon": [
        "(state,String)",
        "(protocol,String)",
        "(internalPort,Number)",
        "(externalPort,Number)",
        "(externalHost,String)",
        "(init,Wrapper)",
        "(cleanup,Wrapper)",
        "(createMapping,Wrapper)",
        "(getLocalAddress,Wrapper)"
      ]
    },
    "node-prevent-sleep": {
      "Gasket": [
        "(disable,disable)",
        "(enable,enable)"
      ],
      "Charon": []
    },
    "node-prng": {
      "Gasket": [
        "(xoshiro256_p,xoshiro256_p)",
        "(xoshiro256_pp,xoshiro256_pp)",
        "(xoroshiro128_ss,xoroshiro128_ss)",
        "(xoroshiro128_pp,xoroshiro128_pp)",
        "(xoroshiro128_p,xoroshiro128_p)",
        "(xorshift64,xorshift64)",
        "(xorshift32,xorshift32)",
        "(xoshiro256_ss,xoshiro256_ss)"
      ],
      "Charon": []
    },
    "node-process-watcher": {
      "Gasket": [
        "(get_all_pid,get_all_pid)",
        "(close,off)",
        "(on,on)",
        "(set_print_second,set_print_second)",
        "(pids,reset_pids)",
        "(kill_process,kill)"
      ],
      "Charon": [
        "(pid,Number)",
        "(ppid,Number)",
        "(on,on)",
        "(close,off)",
        "(pids,reset_pids)",
        "(set_print_second,set_print_second)",
        "(get_all_pid,get_all_pid)",
        "(kill_process,kill)"
      ]
    },
    "node-pty": {
      "Gasket": [
        "(open,PtyOpen)",
        "(resize,PtyResize)",
        "(fork,PtyFork)",
        "(process,PtyGetProc)"
      ],
      "Charon": []
    },
    "node-pty-binaries": {
      "Gasket": [
        "(resize,PtyResize)",
        "(process,PtyGetProc)",
        "(fork,PtyFork)",
        "(open,PtyOpen)"
      ],
      "Charon": []
    },
    "node-pty-prebuilt-multiarch": {
      "Gasket": [
        "(open,PtyOpen)",
        "(resize,PtyResize)",
        "(fork,PtyFork)",
        "(process,PtyGetProc)"
      ],
      "Charon": []
    },
    "node-qt-napi": {
      "Gasket": [
        "(textChangedEvent,textChangedEvent)",
        "(sizeHint,sizeHint)",
        "(show,show)",
        "(height,height)",
        "(exec,exec)",
        "(x,x)",
        "(activatedEvent,activatedEvent)",
        "(QApplication,QApplicationWrap)",
        "(setMouseTracking,setMouseTracking)",
        "(addItem,addItem)",
        "(sendPostedEvents,sendPostedEvents)",
        "(objectName,objectName)",
        "(isNull,isNull)",
        "(currentIndex,currentIndex)",
        "(parent,parent)",
        "(text,text)",
        "(resize,resize)",
        "(QMainWindow,QMainWindowWrap)",
        "(setStyleSheet,setStyleSheet)",
        "(setAlignment,setAlignment)",
        "(desktopSize,desktopSize)",
        "(setParent,setParent)",
        "(scaledToHeight,scaledToHeight)",
        "(getClosed,getClosed)",
        "(y,y)",
        "(minimumSizeHint,minimumSizeHint)",
        "(resizeEvent,resizeEvent)",
        "(setCurrentIndex,setCurrentIndex)",
        "(setScaledContents,setScaledContents)",
        "(QWidget,QWidgetWrap)",
        "(move,move)",
        "(update,update)",
        "(scaledToWidth,scaledToWidth)",
        "(setObjectName,setObjectName)",
        "(aboutToQuitEvent,aboutToQuitEvent)",
        "(width,width)",
        "(del,del)",
        "(setText,setText)",
        "(setPixmap,setPixmap)",
        "(quit,quit)",
        "(size,size)",
        "(QLineEdit,QLineEditWrap)",
        "(insertItem,insertItem)",
        "(stackUnder,stackUnder)",
        "(loadFromData,loadFromData)",
        "(setCurrentText,setCurrentText)",
        "(currentTextChangedEvent,currentTextChangedEvent)",
        "(removeItem,removeItem)",
        "(hasMouseTracking,hasMouseTracking)",
        "(close,close)",
        "(mouseReleaseEvent,mouseReleaseEvent)",
        "(currentText,currentText)",
        "(QPixmap,QPixmapWrap)",
        "(setEditable,setEditable)",
        "(scaled,scaled)",
        "(buttonReleasedEvent,buttonReleasedEvent)",
        "(mousePressEvent,mousePressEvent)",
        "(closeEvent,closeEvent)",
        "(isEditable,isEditable)",
        "(QLabel,QLabelWrap)",
        "(setFocusPolicy,setFocusPolicy)",
        "(hide,hide)",
        "(scaledTile,scaledTile)",
        "(QPushButton,QPushButtonWrap)",
        "(processEvents,processEvents)",
        "(adjustSize,adjustSize)",
        "(QComboBox,QComboBoxWrap)",
        "(QPlainTextEdit,QPlainTextEditWrap)",
        "(load,load)"
      ],
      "Charon": [
        "(w,size)",
        "(h,size)",
        "(w,size)",
        "(h,size)",
        "(desktopSize,desktopSize)"
      ]
    },
    "node-quirc": {
      "Gasket": [
        "(decodeRaw,NodeQuircDecodeRawAsync)",
        "(decodeEncoded,NodeQuircDecodeEncodedAsync)"
      ],
      "Charon": [
        "(data,data)",
        "(decodeEncoded,NodeQuircDecodeEncodedAsync)",
        "(decodeRaw,NodeQuircDecodeRawAsync)"
      ]
    },
    "node-rdkafka": {
      "Gasket": [
        "(getMetadata,NodeGetMetadata)",
        "(rebalanceProtocol,NodeRebalanceProtocol)",
        "(pause,NodePause)",
        "(resume,NodeResume)",
        "(err2str,NodeRdKafkaErr2Str)",
        "(features,NodeRdKafkaBuildInFeatures)",
        "(connect,NodeConnect)",
        "(createPartitions,NodeCreatePartitions)",
        "(AdminClient,New)",
        "(subscribe,NodeSubscribe)",
        "(disconnect,NodeDisconnect)",
        "(assign,NodeAssign)",
        "(createTopic,NodeCreateTopic)",
        "(committed,NodeCommitted)",
        "(initTransactions,NodeInitTransactions)",
        "(getWatermarkOffsets,NodeGetWatermarkOffsets)",
        "(flush,NodeFlush)",
        "(produce,NodeProduce)",
        "(Topic,New)",
        "(offsetsForTimes,NodeOffsetsForTimes)",
        "(commit,NodeCommit)",
        "(sendOffsetsToTransaction,NodeSendOffsetsToTransaction)",
        "(unassign,NodeUnassign)",
        "(unsubscribe,NodeUnsubscribe)",
        "(consumeLoop,NodeConsumeLoop)",
        "(incrementalUnassign,NodeIncrementalUnassign)",
        "(assignments,NodeAssignments)",
        "(commitTransaction,NodeCommitTransaction)",
        "(incrementalAssign,NodeIncrementalAssign)",
        "(deleteTopic,NodeDeleteTopic)",
        "(offsetsStore,NodeOffsetsStore)",
        "(consume,NodeConsume)",
        "(setPartitioner,NodeSetPartitioner)",
        "(beginTransaction,NodeBeginTransaction)",
        "(subscription,NodeSubscription)",
        "(seek,NodeSeek)",
        "(commitSync,NodeCommitSync)",
        "(configureCallbacks,NodeConfigureCallbacks)",
        "(position,NodePosition)",
        "(abortTransaction,NodeAbortTransaction)",
        "(KafkaConsumer,New)",
        "(name,NodeGetName)",
        "(Producer,New)",
        "(setToken,NodeSetToken)",
        "(poll,NodePoll)",
        "(queryWatermarkOffsets,NodeQueryWatermarkOffsets)"
      ],
      "Charon": []
    },
    "node-recastnavigation": {
      "Gasket": [
        "(load,Load)",
        "(deleteOffMeshConnection,DeleteOffMeshConnection)",
        "(build,Build)",
        "(findPath,FindPath)",
        "(SampleSoloMesh,New)",
        "(SampleTileMesh,New)",
        "(findNearestPoly,FindNearestPoly)",
        "(SampleTempObstacles,New)",
        "(getOffMeshConnectionCount,GetOffMeshConnectionCount)",
        "(addOffMeshConnection,AddOffMeshConnection)"
      ],
      "Charon": [
        "(load,Load)",
        "(addOffMeshConnection,AddOffMeshConnection)",
        "(deleteOffMeshConnection,DeleteOffMeshConnection)",
        "(getOffMeshConnectionCount,GetOffMeshConnectionCount)",
        "(build,Build)",
        "(findPath,FindPath)",
        "(findNearestPoly,FindNearestPoly)",
        "(ref,nearestRef)"
      ]
    },
    "node-redis-crc16": {
      "Gasket": [
        "(crc16,crc16)"
      ],
      "Charon": [
        "(crc16,crc16)"
      ]
    },
    "node-safari-push-notifications": {
      "Gasket": [
        "(verify,Verify)",
        "(sign,Sign)"
      ],
      "Charon": [
        "(sign,Sign)",
        "(verify,Verify)"
      ]
    },
    "node-sass": {
      "Gasket": [
        "(String,New)",
        "(renderFile,render_file)",
        "(getG,GetG)",
        "(render,render)",
        "(Color,New)",
        "(setB,SetB)",
        "(Null,New)",
        "(setG,SetG)",
        "(setKey,SetKey)",
        "(getSeparator,GetSeparator)",
        "(getKey,GetKey)",
        "(Map,New)",
        "(setValue,SetValue)",
        "(getUnit,GetUnit)",
        "(setSeparator,SetSeparator)",
        "(setA,SetA)",
        "(Number,New)",
        "(getLength,GetLength)",
        "(Error,New)",
        "(Boolean,New)",
        "(renderFileSync,render_file_sync)",
        "(renderSync,render_sync)",
        "(getR,GetR)",
        "(List,New)",
        "(getA,GetA)",
        "(setR,SetR)",
        "(getB,GetB)",
        "(getValue,GetValue)",
        "(libsassVersion,libsass_version)",
        "(setUnit,SetUnit)"
      ],
      "Charon": [
        "(Number,Number)",
        "(String,String)",
        "(Color,Color)",
        "(Boolean,Boolean)",
        "(List,List)",
        "(Map,Map)",
        "(Null,Null)",
        "(Error,Error)",
        "(success,ReturnCallback)",
        "(getValue,GetValue)",
        "(setValue,SetValue)",
        "(getUnit,GetUnit)",
        "(setUnit,SetUnit)",
        "(getLength,GetLength)",
        "(getKey,GetKey)",
        "(setKey,SetKey)",
        "(getR,GetR)",
        "(getG,GetG)",
        "(getB,GetB)",
        "(getA,GetA)",
        "(setR,SetR)",
        "(setG,SetG)",
        "(setB,SetB)",
        "(setA,SetA)",
        "(getSeparator,GetSeparator)",
        "(setSeparator,SetSeparator)",
        "(css,css)",
        "(render,render)",
        "(renderSync,render_sync)",
        "(renderFile,render_file)",
        "(renderFileSync,render_file_sync)",
        "(libsassVersion,libsass_version)"
      ]
    },
    "node-sass-test": {
      "Gasket": [
        "(getUnit,GetUnit)",
        "(renderFileSync,render_file_sync)",
        "(getKey,GetKey)",
        "(getA,GetA)",
        "(Error,New)",
        "(setUnit,SetUnit)",
        "(Boolean,New)",
        "(setKey,SetKey)",
        "(getLength,GetLength)",
        "(render,render)",
        "(setA,SetA)",
        "(setValue,SetValue)",
        "(getSeparator,GetSeparator)",
        "(getR,GetR)",
        "(getG,GetG)",
        "(renderSync,render_sync)",
        "(String,New)",
        "(getB,GetB)",
        "(Map,New)",
        "(libsassVersion,libsass_version)",
        "(setSeparator,SetSeparator)",
        "(setR,SetR)",
        "(getValue,GetValue)",
        "(setG,SetG)",
        "(setB,SetB)",
        "(Color,New)",
        "(List,New)",
        "(Null,New)",
        "(Number,New)",
        "(renderFile,render_file)"
      ],
      "Charon": [
        "(getValue,GetValue)",
        "(setValue,SetValue)",
        "(success,ReturnCallback)",
        "(getLength,GetLength)",
        "(getKey,GetKey)",
        "(setKey,SetKey)",
        "(getR,GetR)",
        "(getG,GetG)",
        "(getB,GetB)",
        "(getA,GetA)",
        "(setR,SetR)",
        "(setG,SetG)",
        "(setB,SetB)",
        "(setA,SetA)",
        "(Number,Number)",
        "(String,String)",
        "(Color,Color)",
        "(Boolean,Boolean)",
        "(List,List)",
        "(Map,Map)",
        "(Null,Null)",
        "(Error,Error)",
        "(getSeparator,GetSeparator)",
        "(setSeparator,SetSeparator)",
        "(getUnit,GetUnit)",
        "(setUnit,SetUnit)",
        "(css,css)",
        "(render,render)",
        "(renderSync,render_sync)",
        "(renderFile,render_file)",
        "(renderFileSync,render_file_sync)",
        "(libsassVersion,libsass_version)"
      ]
    },
    "node-scrypt2": {
      "Gasket": [
        "(params,params)",
        "(hash,hash)",
        "(kdf,kdf)",
        "(hashSync,hashSync)",
        "(kdfSync,kdfSync)",
        "(verify,kdfVerify)",
        "(verifySync,kdfVerifySync)",
        "(paramsSync,paramsSync)"
      ],
      "Charon": [
        "(N,Number)",
        "(r,Number)",
        "(p,Number)",
        "(paramsSync,paramsSync)",
        "(params,params)",
        "(kdfSync,kdfSync)",
        "(kdf,kdf)",
        "(verifySync,kdfVerifySync)",
        "(verify,kdfVerify)",
        "(hashSync,hashSync)",
        "(hash,hash)"
      ]
    },
    "node-snap7": {
      "Gasket": [
        "(ClearSessionPassword,ClearSessionPassword)",
        "(SetPlcDateTime,SetPlcDateTime)",
        "(GetCpInfo,GetCpInfo)",
        "(SetParam,SetParam)",
        "(PDURequested,PDURequested)",
        "(StartTo,StartTo)",
        "(GetOrderCode,GetOrderCode)",
        "(SetArea,SetArea)",
        "(PlcColdStart,PlcColdStart)",
        "(ListBlocksOfType,ListBlocksOfType)",
        "(FullUpload,FullUpload)",
        "(ErrorText,ErrorText)",
        "(ServerStatus,ServerStatus)",
        "(ConnectTo,ConnectTo)",
        "(Connect,Connect)",
        "(RegisterArea,RegisterArea)",
        "(S7Client,New)",
        "(DBFill,DBFill)",
        "(GetCpuStatus,GetCpuStatus)",
        "(ReadSZL,ReadSZL)",
        "(UnregisterArea,UnregisterArea)",
        "(GetParam,GetParam)",
        "(Compress,Compress)",
        "(PlcStatus,PlcStatus)",
        "(Delete,Delete)",
        "(GetPlcDateTime,GetPlcDateTime)",
        "(SetSessionPassword,SetSessionPassword)",
        "(Download,Download)",
        "(Connected,Connected)",
        "(SetConnectionType,SetConnectionType)",
        "(GetAgBlockInfo,GetAgBlockInfo)",
        "(Stop,Stop)",
        "(ReadArea,ReadArea)",
        "(GetProtection,GetProtection)",
        "(ClientsCount,ClientsCount)",
        "(Disconnect,Disconnect)",
        "(GetPgBlockInfo,GetPgBlockInfo)",
        "(SetCpuStatus,SetCpuStatus)",
        "(SetPlcSystemDateTime,SetPlcSystemDateTime)",
        "(DBGet,DBGet)",
        "(UnlockArea,UnlockArea)",
        "(PlcHotStart,PlcHotStart)",
        "(LastError,LastError)",
        "(PDULength,PDULength)",
        "(LockArea,LockArea)",
        "(GetArea,GetArea)",
        "(ListBlocks,ListBlocks)",
        "(PlcStop,PlcStop)",
        "(EventText,EventText)",
        "(ExecTime,ExecTime)",
        "(SetResourceless,SetResourceless)",
        "(WriteArea,WriteArea)",
        "(ReadSZLList,ReadSZLList)",
        "(GetCpuInfo,GetCpuInfo)",
        "(S7Server,New)",
        "(WriteMultiVars,WriteMultiVars)",
        "(SetConnectionParams,SetConnectionParams)",
        "(Upload,Upload)",
        "(CopyRamToRom,CopyRamToRom)",
        "(GetEventsMask,GetEventsMask)",
        "(SetEventMask,SetEventsMask)",
        "(ReadMultiVars,ReadMultiVars)",
        "(Start,Start)"
      ],
      "Charon": [
        "(Start,S7Server)",
        "(StartTo,S7Server)",
        "(Stop,S7Server)",
        "(SetParam,S7Server)",
        "(GetParam,S7Server)",
        "(SetResourceless,S7Server)",
        "(RegisterArea,S7Server)",
        "(UnregisterArea,S7Server)",
        "(LockArea,S7Server)",
        "(UnlockArea,S7Server)",
        "(SetArea,S7Server)",
        "(GetArea,S7Server)",
        "(SetEventMask,S7Server)",
        "(GetEventsMask,S7Server)",
        "(ErrorText,S7Server)",
        "(LastError,S7Server)",
        "(EventText,S7Server)",
        "(ServerStatus,S7Server)",
        "(ClientsCount,S7Server)",
        "(GetCpuStatus,S7Server)",
        "(SetCpuStatus,S7Server)",
        "(EvtTime,time)",
        "(Connect,S7Client)",
        "(ConnectTo,S7Client)",
        "(SetConnectionParams,S7Client)",
        "(SetConnectionType,S7Client)",
        "(Disconnect,S7Client)",
        "(GetParam,S7Client)",
        "(SetParam,S7Client)",
        "(ReadArea,S7Client)",
        "(WriteArea,S7Client)",
        "(ReadMultiVars,S7Client)",
        "(WriteMultiVars,S7Client)",
        "(ListBlocks,S7Client)",
        "(GetAgBlockInfo,S7Client)",
        "(GetPgBlockInfo,S7Client)",
        "(ListBlocksOfType,S7Client)",
        "(Upload,S7Client)",
        "(FullUpload,S7Client)",
        "(Download,S7Client)",
        "(Delete,S7Client)",
        "(DBGet,S7Client)",
        "(DBFill,S7Client)",
        "(GetPlcDateTime,S7Client)",
        "(SetPlcDateTime,S7Client)",
        "(SetPlcSystemDateTime,S7Client)",
        "(GetOrderCode,S7Client)",
        "(GetCpuInfo,S7Client)",
        "(GetCpInfo,S7Client)",
        "(ReadSZL,S7Client)",
        "(ReadSZLList,S7Client)",
        "(PlcHotStart,S7Client)",
        "(PlcColdStart,S7Client)",
        "(PlcStop,S7Client)",
        "(CopyRamToRom,S7Client)",
        "(Compress,S7Client)",
        "(GetProtection,S7Client)",
        "(SetSessionPassword,S7Client)",
        "(ClearSessionPassword,S7Client)",
        "(ExecTime,S7Client)",
        "(LastError,S7Client)",
        "(PDURequested,S7Client)",
        "(PDULength,S7Client)",
        "(PlcStatus,S7Client)",
        "(Connected,S7Client)",
        "(ErrorText,S7Client)"
      ]
    },
    "node-snowball": {
      "Gasket": [
        "(stemword,Stemword)"
      ],
      "Charon": [
        "(stemword,Stemword)"
      ]
    },
    "node-spdlog-daily": {
      "Gasket": [
        "(error,Error)",
        "(trace,Trace)",
        "(warn,Warn)",
        "(Logger,New)",
        "(critical,Critical)",
        "(flush,Flush)",
        "(getLevel,GetLevel)",
        "(drop,Drop)",
        "(debug,Debug)",
        "(setLevel,SetLevel)",
        "(setPattern,SetPattern)",
        "(info,Info)"
      ],
      "Charon": [
        "(critical,Logger)",
        "(error,Logger)",
        "(warn,Logger)",
        "(info,Logger)",
        "(debug,Logger)",
        "(trace,Logger)",
        "(getLevel,Logger)",
        "(setLevel,Logger)",
        "(flush,Logger)",
        "(drop,Logger)",
        "(setPattern,Logger)"
      ]
    },
    "node-statvfs": {
      "Gasket": [
        "(statvfs,Getstatvfs)"
      ],
      "Charon": [
        "(statvfs,Getstatvfs)"
      ]
    },
    "node-stomptalk": {
      "Gasket": [
        "(parse,parse)",
        "(NativeStompTalk,NativeStompTalk)"
      ],
      "Charon": []
    },
    "node-stringbuilder": {
      "Gasket": [
        "(equals,Equals)",
        "(indexOfSkip,IndexOfSkip)",
        "(substring,Substring)",
        "(toLowerCase,LowerCase)",
        "(replacePattern,ReplacePattern)",
        "(charAt,CharAt)",
        "(append,Append)",
        "(clear,Clear)",
        "(lastIndexOf,LastIndexOf)",
        "(replace,Replace)",
        "(inspect,Inspect)",
        "(delete,Delete)",
        "(toBuffer,ToBuffer)",
        "(lowerCase,LowerCase)",
        "(startsWith,StartsWith)",
        "(toUpperCase,UpperCase)",
        "(slice,Substring)",
        "(toString,ToString)",
        "(expandCapacity,ExpandCapacity)",
        "(replaceAll,ReplaceAll)",
        "(from,from)",
        "(appendRepeat,AppendRepeat)",
        "(endsWith,EndsWith)",
        "(indexOf,IndexOf)",
        "(insert,Insert)",
        "(equalsIgnoreCase,EqualsIgnoreCase)",
        "(length,Length)",
        "(StringBuilder,constructor)",
        "(appendLine,AppendLine)",
        "(clone,Clone)",
        "(capacity,Capacity)",
        "(indexOfRegExp,IndexOfRegExp)",
        "(shrinkCapacity,ShrinkCapacity)",
        "(repeat,Repeat)",
        "(_initialize,initialize)",
        "(count,Count)",
        "(trim,Trim)",
        "(upperCase,UpperCase)",
        "(deleteCharAt,DeleteCharAt)",
        "(reverse,Reverse)",
        "(substr,Substr)"
      ],
      "Charon": []
    },
    "node-sync-ipc": {
      "Gasket": [
        "(SyncIpcServer,New)",
        "(getPipeFile,GetPipeFile)",
        "(stop,Stop)",
        "(sendSync,send)",
        "(listen,Listen)"
      ],
      "Charon": [
        "(sendSync,send)",
        "(write,Write)",
        "(onMessage,onMessageBind)",
        "(getPipeFile,GetPipeFile)",
        "(listen,Listen)",
        "(stop,Stop)"
      ]
    },
    "node-sysstat": {
      "Gasket": [
        "(CpuLoad,CpuLoad)",
        "(getProcessCpuLoad,getProcessCpuLoad)",
        "(getThreadCpuLoad,getThreadCpuLoad)"
      ],
      "Charon": []
    },
    "node-termios": {
      "Gasket": [
        "(tcdrain,Tcdrain)",
        "(cfgetospeed,Cfgetospeed)",
        "(cfgetispeed,Cfgetispeed)",
        "(tcgetattr,Tcgetattr)",
        "(tcsendbreak,Tcsendbreak)",
        "(cfsetispeed,Cfsetispeed)",
        "(ptsname,Ptsname)",
        "(tcflush,Tcflush)",
        "(tcflow,Tcflow)",
        "(load_ttydefaults,Load_ttydefaults)",
        "(tcsetattr,Tcsetattr)",
        "(ttyname,Ttyname)",
        "(cfsetospeed,Cfsetospeed)",
        "(isatty,Isatty)"
      ],
      "Charon": [
        "(isatty,Isatty)",
        "(ttyname,Ttyname)",
        "(ptsname,Ptsname)",
        "(load_ttydefaults,Load_ttydefaults)",
        "(tcgetattr,Tcgetattr)",
        "(tcsetattr,Tcsetattr)",
        "(tcsendbreak,Tcsendbreak)",
        "(tcdrain,Tcdrain)",
        "(tcflush,Tcflush)",
        "(tcflow,Tcflow)",
        "(cfgetispeed,Cfgetispeed)",
        "(cfgetospeed,Cfgetospeed)",
        "(cfsetispeed,Cfsetispeed)",
        "(cfsetospeed,Cfsetospeed)"
      ]
    },
    "node-tree-sitter-electron-arraybuffer": {
      "Gasket": [
        "(firstChild,FirstChild)",
        "(parse,Parse)",
        "(currentNode,CurrentNode)",
        "(reset,Reset)",
        "(nextSibling,NextSibling)",
        "(childNodeForFieldId,ChildNodeForFieldId)",
        "(lastChild,LastChild)",
        "(firstNamedChild,FirstNamedChild)",
        "(childCount,ChildCount)",
        "(previousNamedSibling,PreviousNamedSibling)",
        "(firstChildForIndex,FirstChildForIndex)",
        "(hasError,HasError)",
        "(getLogger,GetLogger)",
        "(setLanguage,SetLanguage)",
        "(_getPredicates,GetPredicates)",
        "(namedChildCount,NamedChildCount)",
        "(getEditedRange,GetEditedRange)",
        "(printDotGraphs,PrintDotGraphs)",
        "(typeId,TypeId)",
        "(startIndex,StartIndex)",
        "(Parser,New)",
        "(Tree,New)",
        "(nextNamedSibling,NextNamedSibling)",
        "(isMissing,IsMissing)",
        "(parent,Parent)",
        "(startPosition,StartPosition)",
        "(printDotGraph,PrintDotGraph)",
        "(namedDescendantForPosition,NamedDescendantForPosition)",
        "(type,Type)",
        "(gotoParent,GotoParent)",
        "(isNamed,IsNamed)",
        "(namedChildren,NamedChildren)",
        "(hasChanges,HasChanges)",
        "(endPosition,EndPosition)",
        "(endIndex,EndIndex)",
        "(lastNamedChild,LastNamedChild)",
        "(previousSibling,PreviousSibling)",
        "(setLogger,SetLogger)",
        "(edit,Edit)",
        "(toString,ToString)",
        "(getNodeTypeNamesById,GetNodeTypeNamesById)",
        "(firstNamedChildForIndex,FirstNamedChildForIndex)",
        "(Query,New)",
        "(descendantForPosition,DescendantForPosition)",
        "(descendantsOfType,DescendantsOfType)",
        "(getChangedRanges,GetChangedRanges)",
        "(rootNode,RootNode)",
        "(childNodesForFieldId,ChildNodesForFieldId)",
        "(_cacheNode,CacheNode)",
        "(gotoNextSibling,GotoNextSibling)",
        "(namedChild,NamedChild)",
        "(getNodeFieldNamesById,GetNodeFieldNamesById)",
        "(_captures,Captures)",
        "(closest,Closest)",
        "(_matches,Matches)",
        "(walk,Walk)",
        "(_cacheNodes,CacheNodes)",
        "(gotoFirstChildForIndex,GotoFirstChildForIndex)",
        "(descendantForIndex,DescendantForIndex)",
        "(namedDescendantForIndex,NamedDescendantForIndex)",
        "(children,Children)",
        "(TreeCursor,New)",
        "(child,Child)",
        "(gotoFirstChild,GotoFirstChild)"
      ],
      "Charon": []
    },
    "node-uname": {
      "Gasket": [
        "(uname,node_uname_get_uname_info)"
      ],
      "Charon": []
    },
    "node-vad": {
      "Gasket": [
        "(vad_setmode,vadSetMode_)",
        "(vad_init,vadInit_)",
        "(vad_alloc,vadAlloc_)",
        "(vad_processAudio,vadProcessAudioBuffer_)"
      ],
      "Charon": [
        "(vad_setmode,vadSetMode_)",
        "(0,length)",
        "(vad_alloc,vadAlloc_)",
        "(vad_init,vadInit_)",
        "(vad_processAudio,vadProcessAudioBuffer_)"
      ]
    },
    "node-wifi-info": {
      "Gasket": [
        "(getWifiInfo,getWiFiInfoWrapped)"
      ],
      "Charon": [
        "(getWifiInfo,getWiFiInfoWrapped)"
      ]
    },
    "node-wow-mssql": {
      "Gasket": [
        "(init,njsModule_externalInit)"
      ],
      "Charon": [
        "(execute,Execute)",
        "(nextRows,NextRows)",
        "(connect,Connect)",
        "(connectSync,ConnectSync)",
        "(executeSync,ExecuteSync)",
        "(readerHandle,CreateReader)",
        "(prepare,Prepare)",
        "(close,Close)",
        "(isConnected,IsConnected)",
        "(setAutoCommit,SetAutoCommit)",
        "(setPrefetchRowCount,SetPrefetchRowCount)",
        "(commit,Commit)",
        "(rollback,Rollback)"
      ]
    },
    "node-xed": {
      "Gasket": [
        "(disassemble,disassembleWrapped)"
      ],
      "Charon": [
        "(len,Number)",
        "(disassemble,disassembleWrapped)"
      ]
    },
    "node-xxhash": {
      "Gasket": [
        "(XXHash64,New)",
        "(XXHash32,New)",
        "(digest,Digest)",
        "(update,Update)",
        "(hash,StaticHash)"
      ],
      "Charon": [
        "(update,Update)",
        "(digest,Digest)",
        "(hash,StaticHash)"
      ]
    },
    "node-yolo-shinobi": {
      "Gasket": [
        "(Yolo,New)",
        "(detect,Detect)"
      ],
      "Charon": []
    },
    "node-zopfli": {
      "Gasket": [
        "(deflate,Async)",
        "(adler32,Adler32)",
        "(deflateSync,Sync)",
        "(pngcompress,PNGDeflate)"
      ],
      "Charon": [
        "(adler32,Adler32)",
        "(pngcompress,PNGDeflate)"
      ]
    },
    "node-zopfli-es": {
      "Gasket": [
        "(deflate,Async)",
        "(adler32,Adler32)",
        "(deflateSync,Sync)",
        "(pngcompress,PNGDeflate)"
      ],
      "Charon": [
        "(adler32,Adler32)",
        "(pngcompress,PNGDeflate)"
      ]
    },
    "node-zopflipng": {
      "Gasket": [
        "(optimizeZopfliPngSync,OptimzeZopfliPNGSync)",
        "(optimizeZopfliPng,OptimzeZopfliPNG)"
      ],
      "Charon": [
        "(optimizeZopfliPngSync,OptimzeZopfliPNGSync)",
        "(optimizeZopfliPng,OptimzeZopfliPNG)"
      ]
    },
    "@nomis51/robotjs": {
      "Gasket": [
        "(getMousePos,getMousePos)",
        "(mouseToggle,mouseToggle)",
        "(setMouseDelay,setMouseDelay)",
        "(dragMouse,dragMouse)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(typeStringDelayed,typeStringDelayed)",
        "(captureScreen,captureScreen)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(mouseClick,mouseClick)",
        "(setXDisplayName,setXDisplayName)",
        "(keyTap,keyTap)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(moveMouse,moveMouse)",
        "(scrollMouse,scrollMouse)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(typeString,typeString)",
        "(keyToggle,keyToggle)",
        "(getXDisplayName,getXDisplayName)",
        "(getColor,getColor)",
        "(unicodeTap,unicodeTap)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(unicodeTap,unicodeTap)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getColor,getColor)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "@nordicsemiconductor/nrf-device-lib-js": {
      "Gasket": [
        "(deviceControlSetProtectionStatus,callNrfdlDeviceControlSetProtectionStatus)",
        "(getPluginSchema,callNrfdlPluginSchema)",
        "(enumerate,callNrfdlEnumerate)",
        "(readRegister,callNrfdlReadRegister)",
        "(setLogPattern,callNrfdlDeviceControlSetLogPattern)",
        "(createContext,callNrfdlCreateContext)",
        "(startLogEvents,callNrfdlRegisterLogEvent)",
        "(rttStop,callNrfdlRttStop)",
        "(deviceControlRecover,callNrfdlDeviceControlRecover)",
        "(deviceControlExecuteOperations,callNrfdlDeviceControlExecuteOperations)",
        "(firmwareErase,callNrfdlFwErase)",
        "(firmwareRead,callNrfdlFwRead)",
        "(rttIsStarted,callNrfdlRttIsStarted)",
        "(cancelDeviceOperations,callNrfdlCancelDeviceOperations)",
        "(stopHotplugEvents,callNrfdlStopHotplugWorker)",
        "(availablePlugins,callNrfdlAvailablePlugins)",
        "(releaseContext,callNrfdlReleaseContext)",
        "(rttWrite,callNrfdlRttWrite)",
        "(deviceControlSetMcuState,callNrfdlDeviceControlSetMcuState)",
        "(deviceControlGetProtectionStatus,callNrfdlDeviceControlGetProtectionStatus)",
        "(deviceControlExecuteOperation,callNrfdlDeviceControlExecuteOperation)",
        "(cancelFirmwareProgram,callNrfdlCancelFwProgram)",
        "(setLogLevel,callNrfdlLogLevel)",
        "(rttRead,callNrfdlRttRead)",
        "(setTimeoutConfig,callNrfdlSetTimeoutConfig)",
        "(getModuleVersions,callNrfdlGetModuleVersions)",
        "(pluginQuery,callNrfdlPluginQuery)",
        "(stopLogEvents,callNrfdlStopLogEventWorker)",
        "(firmwareProgram,callNrfdlFwProgram)",
        "(readFwInfo,callNrfdlReadFwInfo)",
        "(startHotplugEvents,callNrfdlStartHotplugWorker)",
        "(rttStart,callNrfdlRttStart)",
        "(deviceControlExecuteOperationWithProgress,callNrfdlDeviceControlExecuteOperationWithProgress)",
        "(fwVerify,callFwVerify)",
        "(getDeviceCoreInfo,callNrfdlGetDeviceCoreInfo)",
        "(deviceControlReset,callNrfdlDeviceControlReset)"
      ],
      "Charon": []
    },
    "npmpkg_blvd_test1": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": [
        "(hello,Method)"
      ]
    },
    "nrlmsise": {
      "Gasket": [
        "(gtd7,wrap_gt7)"
      ],
      "Charon": []
    },
    "@nrwlia/enet-node": {
      "Gasket": [
        "(service,Service)",
        "(setTimeout,SetTimeout)",
        "(Host,Host)",
        "(disconnectNow,DisconnectNow)",
        "(disconnectLater,DisconnectLater)",
        "(setPingInterval,SetPingInterval)",
        "(setEmitter,SetEmitter)",
        "(send,Send)",
        "(disconnect,Disconnect)",
        "(connect,Connect)"
      ],
      "Charon": [
        "(setTimeout,Host)",
        "(setPingInterval,Host)",
        "(setEmitter,Host)",
        "(Host,Host)"
      ]
    },
    "nsfw": {
      "Gasket": [
        "(resume,Resume)",
        "(getExcludedPaths,GetExcludedPaths)",
        "(pause,Pause)",
        "(stop,Stop)",
        "(start,Start)",
        "(updateExcludedPaths,UpdateExcludedPaths)",
        "(target/nsfw,NSFW)",
        "(nsfw/build/Debug/nsfw,NSFW)"
      ],
      "Charon": []
    },
    "nslog": {
      "Gasket": [
        "(log,Log)"
      ],
      "Charon": [
        "(log,Log)"
      ]
    },
    "numnjs": {
      "Gasket": [
        "(sinh,sinhFunc)",
        "(mod,modFunc)",
        "(min,minFunc)",
        "(divide,divideFunc)",
        "(floor,floorFunc)",
        "(power,powerFunc)",
        "(sign,signFunc)",
        "(arcsin,arcsinFunc)",
        "(cosh,coshFunc)",
        "(abs,absFunc)",
        "(zeros,zerosFunc)",
        "(maximum,maximumFunc)",
        "(skew,skewFunc)",
        "(tan,tanFunc)",
        "(square,squareFunc)",
        "(arctan,arctanFunc)",
        "(exp2,exp2Func)",
        "(sqrt,sqrtFunc)",
        "(round,roundFunc)",
        "(add,addFunc)",
        "(arccosh,arccoshFunc)",
        "(diagonal,diagonalFunc)",
        "(std,stdFunc)",
        "(average,averageFunc)",
        "(ceil,ceilFunc)",
        "(multiply,multiplyFunc)",
        "(cov,covFunc)",
        "(radians,radiansFunc)",
        "(exp,expFunc)",
        "(rand,randFunc)",
        "(arccos,arccosFunc)",
        "(log,logFunc)",
        "(sum,sumFunc)",
        "(degrees,degreesFunc)",
        "(log10,log10Func)",
        "(sin,sinFunc)",
        "(reciprocal,reciprocalFunc)",
        "(minimum,minumumFunc)",
        "(eye,eyeFunc)",
        "(max,maxFunc)",
        "(subtract,subtractFunc)",
        "(ones,onesFunc)",
        "(kurtosis,kurtosisFunc)",
        "(arctanh,arctanhFunc)",
        "(ver,verFunc)",
        "(cos,cosFunc)",
        "(var,varFunc)",
        "(expm1,expm1Func)",
        "(cbrt,cbrtFunc)",
        "(arcsinh,arcsinhFunc)",
        "(log2,log2Func)",
        "(tanh,tanhFunc)",
        "(negative,negativeFunc)"
      ],
      "Charon": [
        "(ver,verFunc)",
        "(sin,sinFunc)",
        "(cos,cosFunc)",
        "(tan,tanFunc)",
        "(arcsin,arcsinFunc)",
        "(arccos,arccosFunc)",
        "(arctan,arctanFunc)",
        "(degrees,degreesFunc)",
        "(radians,radiansFunc)",
        "(sqrt,sqrtFunc)",
        "(cbrt,cbrtFunc)",
        "(square,squareFunc)",
        "(sign,signFunc)",
        "(abs,absFunc)",
        "(maximum,maximumFunc)",
        "(minimum,minumumFunc)",
        "(max,maxFunc)",
        "(min,minFunc)",
        "(diagonal,diagonalFunc)",
        "(eye,eyeFunc)",
        "(ones,onesFunc)",
        "(rand,randFunc)",
        "(zeros,zerosFunc)",
        "(round,roundFunc)",
        "(floor,floorFunc)",
        "(ceil,ceilFunc)",
        "(add,addFunc)",
        "(reciprocal,reciprocalFunc)",
        "(negative,negativeFunc)",
        "(multiply,multiplyFunc)",
        "(divide,divideFunc)",
        "(power,powerFunc)",
        "(subtract,subtractFunc)",
        "(mod,modFunc)",
        "(sum,sumFunc)",
        "(average,averageFunc)",
        "(var,varFunc)",
        "(std,stdFunc)",
        "(skew,skewFunc)",
        "(kurtosis,kurtosisFunc)",
        "(cov,covFunc)",
        "(exp,expFunc)",
        "(expm1,expm1Func)",
        "(exp2,exp2Func)",
        "(log,logFunc)",
        "(log10,log10Func)",
        "(log2,log2Func)",
        "(sinh,sinhFunc)",
        "(cosh,coshFunc)",
        "(tanh,tanhFunc)",
        "(arcsinh,arcsinhFunc)",
        "(arccosh,arccoshFunc)",
        "(arctanh,arctanhFunc)"
      ]
    },
    "nuv": {
      "Gasket": [
        "(nuv_udp_bind,nuv_udp_bind)",
        "(nuv_read_start,nuv_read_start)",
        "(nuv_tcp_keepalive,nuv_tcp_keepalive)",
        "(nuv_tcp_nodelay,nuv_tcp_nodelay)",
        "(nuv_udp_recv_start,nuv_udp_recv_start)",
        "(nuv_udp_recv_stop,nuv_udp_recv_stop)",
        "(nuv_read_stop,nuv_read_stop)",
        "(nuv_accept,nuv_accept)",
        "(nuv_tcp_connect,nuv_tcp_connect)",
        "(nuv_tcp_getpeername,nuv_tcp_getpeername)",
        "(nuv_udp_getsockname,nuv_udp_getsockname)",
        "(nuv_write,nuv_write)",
        "(nuv_tcp_bind,nuv_tcp_bind)",
        "(nuv_tcp_init,nuv_tcp_init)",
        "(nuv_listen,nuv_listen)",
        "(nuv_tcp_simultaneous_accepts,nuv_tcp_simultaneous_accepts)",
        "(nuv_udp_init,nuv_udp_init)",
        "(nuv_tcp_getsockname,nuv_tcp_getsockname)",
        "(nuv_shutdown,nuv_shutdown)",
        "(nuv_close,nuv_close)",
        "(nuv_udp_send,nuv_udp_send)"
      ],
      "Charon": []
    },
    "nvcodec": {
      "Gasket": [
        "(Method,Method)"
      ],
      "Charon": []
    },
    "nvidia-codec": {
      "Gasket": [
        "(Method,Method)"
      ],
      "Charon": []
    },
    "nvidia-gpu-monitorx": {
      "Gasket": [
        "(getMemory,getMemory)",
        "(getTemperature,getTemperature)",
        "(getEncoderUtilization,getEncoderUtilization)",
        "(close,close)",
        "(isSupported,isSupported)",
        "(getDeviceName,getDeviceName)",
        "(getDeviceCount,getDeviceCount)",
        "(getDecoderUtilization,getDecoderUtilization)",
        "(GPUMonitor,GPUMonitor)",
        "(getGPUUsage,getGPUUsage)",
        "(getMemoryUsed,getMemoryUsed)"
      ],
      "Charon": []
    },
    "nwework-sdk": {
      "Gasket": [
        "(decryptChatData,DecryptChatData)",
        "(foo,Foo)",
        "(getChatData,GetChatData)",
        "(configure,Configure)"
      ],
      "Charon": []
    },
    "@n.wolfe/scoped-test": {
      "Gasket": [
        "(LoopChecker,New)",
        "(RUsageMeter,New)",
        "(GCBinder,New)",
        "(bind,Bind)",
        "(read,Read)",
        "(unbind,Unbind)"
      ],
      "Charon": [
        "(bind,Bind)",
        "(unbind,Unbind)",
        "(usage,self)",
        "(diff,self)",
        "(current,self)",
        "(read,Read)"
      ]
    },
    "@nxtedition/rocksdb": {
      "Gasket": [
        "(batch_put,batch_put)",
        "(batch_iterate,batch_iterate)",
        "(db_get_latest_sequence,db_get_latest_sequence)",
        "(batch_clear,batch_clear)",
        "(db_get_handle,db_get_handle)",
        "(batch_put_log_data,batch_put_log_data)",
        "(batch_init,batch_init)",
        "(db_clear,db_clear)",
        "(db_init,db_init)",
        "(batch_merge,batch_merge)",
        "(db_get_many_sync,db_get_many_sync)",
        "(iterator_nextv_sync,iterator_nextv_sync)",
        "(updates_init,updates_init)",
        "(updates_close,updates_close)",
        "(db_close,db_close)",
        "(db_get_identity,db_get_identity)",
        "(db_open,db_open)",
        "(db_query,db_query)",
        "(iterator_nextv,iterator_nextv)",
        "(updates_next,updates_next)",
        "(iterator_init,iterator_init)",
        "(db_get_location,db_get_location)",
        "(batch_del,batch_del)",
        "(iterator_close,iterator_close)",
        "(iterator_seek,iterator_seek)",
        "(db_get_many,db_get_many)",
        "(db_get_property,db_get_property)",
        "(batch_count,batch_count)",
        "(batch_write,batch_write)"
      ],
      "Charon": []
    },
    "odbc": {
      "Gasket": [
        "(connect,Connect)"
      ],
      "Charon": [
        "(setIsolationLevel,ODBCConnection)"
      ]
    },
    "ofe": {
      "Gasket": [
        "(call,Call)",
        "(trigger,Trigger)"
      ],
      "Charon": [
        "(call,Call)",
        "(trigger,Trigger)"
      ]
    },
    "oniguruma": {
      "Gasket": [
        "(OnigString,New)",
        "(_findNextMatch,FindNextMatch)",
        "(OnigScanner,New)",
        "(_findNextMatchSync,FindNextMatchSync)"
      ],
      "Charon": []
    },
    "oniguruma-prebuilt": {
      "Gasket": [
        "(OnigString,New)",
        "(_findNextMatch,FindNextMatch)",
        "(OnigScanner,New)",
        "(_findNextMatchSync,FindNextMatchSync)"
      ],
      "Charon": []
    },
    "onsfw": {
      "Gasket": [
        "(nsfw,NSFW)",
        "(start,Start)",
        "(pause,Pause)",
        "(stop,Stop)",
        "(resume,Resume)"
      ],
      "Charon": []
    },
    "@opendrives/getent": {
      "Gasket": [
        "(getpwent,getpwentMethod)",
        "(setgrent,setgrentMethod)",
        "(endpwent,endpwentMethod)",
        "(setpwent,setpwentMethod)",
        "(getgrent,getgrentMethod)",
        "(endgrent,endgrentMethod)"
      ],
      "Charon": [
        "(getpwent,getpwentMethod)",
        "(setpwent,setpwentMethod)",
        "(endpwent,endpwentMethod)",
        "(getgrent,getgrentMethod)",
        "(setgrent,setgrentMethod)",
        "(endgrent,endgrentMethod)"
      ]
    },
    "openssl-dtls": {
      "Gasket": [
        "(setCA,setCA)",
        "(setVerifyLevel,setVerifyLevel)",
        "(handler,handler)",
        "(Context,New)",
        "(Session,New)",
        "(send,send)",
        "(setCiphers,setCiphers)",
        "(setCertAndKey,setCertAndKey)",
        "(getPeerCert,getPeerCert)",
        "(close,close)"
      ],
      "Charon": [
        "(handler,handler)",
        "(close,close)",
        "(getPeerCert,getPeerCert)",
        "(send,send)",
        "(setCiphers,setCiphers)",
        "(setCertAndKey,setCertAndKey)",
        "(setCA,setCA)",
        "(setVerifyLevel,setVerifyLevel)"
      ]
    },
    "orientjs-native": {
      "Gasket": [
        "(deserialize,Deserialize)",
        "(serialize,Serialize)"
      ],
      "Charon": [
        "(deserialize,Deserialize)",
        "(serialize,Serialize)",
        "(@class,name)",
        "(cluster,value)",
        "(position,value)",
        "(_size,size)",
        "(this,value)"
      ]
    },
    "os-lock": {
      "Gasket": [
        "(lock,lock_async)",
        "(unlock,unlock_async)"
      ],
      "Charon": []
    },
    "osmbuildings-classic": {
      "Gasket": [
        "(run,Run)"
      ],
      "Charon": [
        "(start,FSEvents)",
        "(stop,FSEvents)",
        "(run,Run)"
      ]
    },
    "ospasta": {
      "Gasket": [
        "(paste,Method)"
      ],
      "Charon": [
        "(paste,Method)"
      ]
    },
    "@oxyflour/ncc": {
      "Gasket": [
        "(create,CreateMesh)",
        "(makeSolid,MakeSolid)",
        "(toNurbs,ToNurbs)",
        "(load,LoadStep)",
        "(makeVertex,MakeVertex)",
        "(makeFace,MakeFace)",
        "(save,SaveStep)",
        "(getVolumeProps,GetVolumeProps)",
        "(fuse,fuse)",
        "(common,common)",
        "(makeEdge,MakeEdge)",
        "(makeShell,MakeShell)",
        "(section,section)",
        "(topo,CreateTopo)",
        "(getSurfaceProps,GetSurfaceProps)",
        "(load,LoadBrep)",
        "(find,Find)",
        "(makeSphere,MakeSphere)",
        "(getLinearProps,GetLinearProps)",
        "(mesh,MakeMesh)",
        "(save,SaveBrep)",
        "(Shape,Shape)",
        "(makeWire,MakeWire)",
        "(bound,Bound)",
        "(makeCompound,MakeCompound)",
        "(cut,cut)",
        "(split,split)",
        "(makeBox,MakeBox)"
      ],
      "Charon": [
        "(x,Number)",
        "(y,Number)",
        "(z,Number)",
        "(makeSphere,MakeSphere)",
        "(makeBox,MakeBox)",
        "(makeVertex,MakeVertex)",
        "(makeEdge,MakeEdge)",
        "(makeWire,MakeWire)",
        "(makeShell,MakeShell)",
        "(makeFace,MakeFace)",
        "(makeCompound,MakeCompound)",
        "(makeSolid,MakeSolid)",
        "(toNurbs,ToNurbs)",
        "(fuse,fuse)",
        "(common,common)",
        "(cut,cut)",
        "(section,section)",
        "(split,split)",
        "(save,SaveBrep)",
        "(load,LoadBrep)",
        "(save,SaveStep)",
        "(load,LoadStep)",
        "(mesh,MakeMesh)",
        "(create,CreateMesh)",
        "(topo,CreateTopo)",
        "(COMPOUND,Number)",
        "(COMPSOLID,Number)",
        "(EDGE,Number)",
        "(FACE,Number)",
        "(SHAPE,Number)",
        "(SHELL,Number)",
        "(SOLID,Number)",
        "(VERTEX,Number)",
        "(WIRE,Number)",
        "(mass,props)",
        "(p,Shape)",
        "(s,props)",
        "(l,props)"
      ]
    },
    "ozonep-nsfw": {
      "Gasket": [
        "(nsfw,NSFW)",
        "(start,Start)",
        "(pause,Pause)",
        "(stop,Stop)",
        "(resume,Resume)"
      ],
      "Charon": []
    },
    "@pacexy/robotjs": {
      "Gasket": [
        "(getMousePos,getMousePos)",
        "(mouseToggle,mouseToggle)",
        "(setMouseDelay,setMouseDelay)",
        "(dragMouse,dragMouse)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(typeStringDelayed,typeStringDelayed)",
        "(captureScreen,captureScreen)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(mouseClick,mouseClick)",
        "(setXDisplayName,setXDisplayName)",
        "(keyTap,keyTap)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(moveMouse,moveMouse)",
        "(scrollMouse,scrollMouse)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(typeString,typeString)",
        "(keyToggle,keyToggle)",
        "(getXDisplayName,getXDisplayName)",
        "(getColor,getColor)",
        "(unicodeTap,unicodeTap)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(unicodeTap,unicodeTap)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getColor,getColor)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "@pano.video/robotjs": {
      "Gasket": [
        "(getColor,getColor)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(typeString,typeString)",
        "(mouseClick,mouseClick)",
        "(getPixelColor,getPixelColor)",
        "(setXDisplayName,setXDisplayName)",
        "(keyTap,keyTap)",
        "(moveMouse,moveMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(captureScreen,captureScreen)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(dragMouse,dragMouse)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(mouseToggle,mouseToggle)",
        "(typeStringDelayed,typeStringDelayed)",
        "(getXDisplayName,getXDisplayName)",
        "(keyToggle,keyToggle)",
        "(unicodeTap,unicodeTap)",
        "(getScreenSize,getScreenSize)",
        "(scrollMouse,scrollMouse)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(unicodeTap,unicodeTap)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getColor,getColor)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "@parcel/watcher": {
      "Gasket": [
        "(getEventsSince,getEventsSince)",
        "(subscribe,subscribe)",
        "(unsubscribe,unsubscribe)",
        "(writeSnapshot,writeSnapshot)"
      ],
      "Charon": [
        "(path,String)",
        "(type,String)",
        "(writeSnapshot,writeSnapshot)",
        "(getEventsSince,getEventsSince)",
        "(subscribe,subscribe)",
        "(unsubscribe,unsubscribe)"
      ]
    },
    "@parcel~watcher": {
      "Gasket": [
        "(getEventsSince,getEventsSince)",
        "(subscribe,subscribe)",
        "(unsubscribe,unsubscribe)",
        "(writeSnapshot,writeSnapshot)"
      ],
      "Charon": [
        "(path,String)",
        "(type,String)",
        "(writeSnapshot,writeSnapshot)",
        "(getEventsSince,getEventsSince)",
        "(subscribe,subscribe)",
        "(unsubscribe,unsubscribe)"
      ]
    },
    "paseto.js": {
      "Gasket": [
        "(keygen,keygen)",
        "(extract,extract)"
      ],
      "Charon": [
        "(keygen,keygen)",
        "(extract,extract)"
      ]
    },
    "pathwatcher": {
      "Gasket": [
        "(get,Get)",
        "(has,Has)",
        "(unwatch,Unwatch)",
        "(remove,Remove)",
        "(HandleMap,New)",
        "(setCallback,SetCallback)",
        "(values,Values)",
        "(clear,Clear)",
        "(add,Add)",
        "(watch,Watch)"
      ],
      "Charon": [
        "(setCallback,SetCallback)",
        "(watch,Watch)",
        "(unwatch,Unwatch)",
        "(0,handle)",
        "(add,Add)",
        "(get,Get)",
        "(has,Has)",
        "(values,Values)",
        "(remove,Remove)",
        "(clear,Clear)"
      ]
    },
    "@paulcbetts/gc": {
      "Gasket": [
        "(collect,Collect)"
      ],
      "Charon": []
    },
    "@paulcbetts/system-idle-time": {
      "Gasket": [
        "(getIdleTime,GetIdleTime)"
      ],
      "Charon": []
    },
    "pcg-wrapper": {
      "Gasket": [
        "(_randomIntPull,RandomIntPull)"
      ],
      "Charon": [
        "(_randomIntPull,RandomIntPull)"
      ]
    },
    "peercred": {
      "Gasket": [
        "(fromFd,FromFd)"
      ],
      "Charon": [
        "(fromFd,FromFd)"
      ]
    },
    "pele": {
      "Gasket": [
        "(initialize,Initialize)",
        "(absorbLastFewBits,AbsorbLastFewBits)",
        "(napi,KeccakWrapper)",
        "(copy,Copy)",
        "(absorb,Absorb)",
        "(squeeze,Squeeze)"
      ],
      "Charon": []
    },
    "pg-libpq": {
      "Gasket": [
        "(connectDB,connectDB)",
        "(putCopyEnd,putCopyEnd)",
        "(execParams,execParams)",
        "(copyToStream,copyToStream)",
        "(pg_libpq,Conn_constructor)",
        "(copyFromStream,copyFromStream)",
        "(getCopyData,getCopyData)",
        "(escapeLiteral,escapeLiteral)",
        "(putCopyData,putCopyData)",
        "(prepare,prepare)",
        "(finish,finish)",
        "(resultErrorField,resultErrorField)",
        "(isReady,isReady)",
        "(execPrepared,execPrepared)"
      ],
      "Charon": []
    },
    "@pg-nano/pg-parser": {
      "Gasket": [
        "(parsePlPgSQLSync,ParsePlPgSQLSync)",
        "(fingerprintSync,FingerprintSync)",
        "(splitWithScannerSync,SplitWithScannerSync)",
        "(parseQueryAsync,ParseQueryAsync)",
        "(fingerprintAsync,FingerprintAsync)",
        "(parseQuerySync,ParseQuerySync)",
        "(parsePlPgSQLAsync,ParsePlPgSQLAsync)",
        "(scanSync,ScanSync)"
      ],
      "Charon": []
    },
    "pg-query-native": {
      "Gasket": [
        "(parse,parse)"
      ],
      "Charon": [
        "(parse,parse)"
      ]
    },
    "phin-ecdh": {
      "Gasket": [
        "(deriveSecret,DeriveSecret)",
        "(encrypt,Encrypt)",
        "(decrypt,Decrypt)",
        "(createKeyPair,CreateKeyPair)"
      ],
      "Charon": []
    },
    "picha": {
      "Gasket": [
        "(encodeWebPSync,encodeWebPSync)",
        "(decodeWebPSync,decodeWebPSync)",
        "(encodeJpegSync,encodeJpegSync)",
        "(decodeTiffSync,decodeTiffSync)",
        "(encodeTiffSync,encodeTiffSync)",
        "(statJpeg,statJpeg)",
        "(decodePngSync,decodePngSync)",
        "(encodePng,encodePng)",
        "(decodeJpeg,decodeJpeg)",
        "(statTiff,statTiff)",
        "(colorConvert,colorConvert)",
        "(decodePng,decodePng)",
        "(decodeWebP,decodeWebP)",
        "(decodeJpegSync,decodeJpegSync)",
        "(encodeWebP,encodeWebP)",
        "(encodeJpeg,encodeJpeg)",
        "(statWebP,statWebP)",
        "(resizeSync,resizeSync)",
        "(statPng,statPng)",
        "(encodeTiff,encodeTiff)",
        "(colorConvertSync,colorConvertSync)",
        "(encodePngSync,encodePngSync)",
        "(resize,resize)",
        "(decodeTiff,decodeTiff)"
      ],
      "Charon": [
        "(colorConvert,colorConvert)",
        "(colorConvertSync,colorConvertSync)",
        "(resize,resize)",
        "(resizeSync,resizeSync)"
      ]
    },
    "pi-spi": {
      "Gasket": [
        "(Transfer,Transfer)"
      ],
      "Charon": [
        "(Transfer,Transfer)"
      ]
    },
    "@pitzzae/volume-list": {
      "Gasket": [
        "(list,DiskList)"
      ],
      "Charon": []
    },
    "pixel-change": {
      "Gasket": [
        "(napi,CreateObject)"
      ],
      "Charon": []
    },
    "pixels-please": {
      "Gasket": [
        "(getThreadPoolSize,GetThreadPoolSize)",
        "(loadPipeline,LoadPipeline)",
        "(loadPipelineSync,LoadPipelineSync)",
        "(setThreadPoolSize,SetThreadPoolSize)"
      ],
      "Charon": [
        "(setThreadPoolSize,SetThreadPoolSize)"
      ]
    },
    "pjsua2": {
      "Gasket": [
        "(greetHello,greetHello)"
      ],
      "Charon": [
        "(greetHello,greetHello)"
      ]
    },
    "pkcs11js": {
      "Gasket": [
        "(C_GenerateKeyPair,C_GenerateKeyPair)",
        "(C_CopyObject,C_CopyObject)",
        "(C_GetAttributeValue,C_GetAttributeValue)",
        "(C_Sign,C_Sign)",
        "(C_UnwrapKeyCallback,C_UnwrapKeyCallback)",
        "(C_UnwrapKey,C_UnwrapKey)",
        "(C_VerifyFinal,C_VerifyFinal)",
        "(C_DecryptUpdate,C_DecryptUpdate)",
        "(C_DigestCallback,C_DigestCallback)",
        "(C_OpenSession,C_OpenSession)",
        "(C_DestroyObject,C_DestroyObject)",
        "(C_DecryptDigestUpdateCallback,C_DecryptDigestUpdateCallback)",
        "(load,Load)",
        "(C_Logout,C_Logout)",
        "(C_EncryptInit,C_EncryptInit)",
        "(C_VerifyFinalCallback,C_VerifyFinalCallback)",
        "(C_InitToken,C_InitToken)",
        "(C_VerifyRecover,C_VerifyRecover)",
        "(C_DigestInit,C_DigestInit)",
        "(C_DigestFinal,C_DigestFinal)",
        "(C_SetPIN,C_SetPIN)",
        "(C_DeriveKeyCallback,C_DeriveKeyCallback)",
        "(C_GetSessionInfo,C_GetSessionInfo)",
        "(C_GetInfo,C_GetInfo)",
        "(C_WrapKey,C_WrapKey)",
        "(C_DeriveKey,C_DeriveKey)",
        "(C_DigestEncryptUpdateCallback,C_DigestEncryptUpdateCallback)",
        "(C_VerifyRecoverInit,C_VerifyRecoverInit)",
        "(C_VerifyCallback,C_VerifyCallback)",
        "(C_FindObjectsFinal,C_FindObjectsFinal)",
        "(C_DigestEncryptUpdate,C_DigestEncryptUpdate)",
        "(C_Encrypt,C_Encrypt)",
        "(C_SetAttributeValue,C_SetAttributeValue)",
        "(C_GetOperationState,C_GetOperationState)",
        "(C_GetSlotInfo,C_GetSlotInfo)",
        "(C_InitPIN,C_InitPIN)",
        "(C_SetOperationState,C_SetOperationState)",
        "(C_Digest,C_Digest)",
        "(close,Close)",
        "(C_SignRecoverInit,C_SignRecoverInit)",
        "(C_DecryptDigestUpdate,C_DecryptDigestUpdate)",
        "(C_SignEncryptUpdateCallback,C_SignEncryptUpdateCallback)",
        "(C_EncryptCallback,C_EncryptCallback)",
        "(C_GenerateKeyPairCallback,C_GenerateKeyPairCallback)",
        "(C_GenerateKey,C_GenerateKey)",
        "(C_CloseAllSessions,C_CloseAllSessions)",
        "(C_SignInit,C_SignInit)",
        "(C_DecryptCallback,C_DecryptCallback)",
        "(C_Decrypt,C_Decrypt)",
        "(C_SignFinal,C_SignFinal)",
        "(C_GetMechanismList,C_GetMechanismList)",
        "(C_CloseSession,C_CloseSession)",
        "(C_GenerateRandom,C_GenerateRandom)",
        "(C_CreateObject,C_CreateObject)",
        "(C_SignRecover,C_SignRecover)",
        "(C_SignEncryptUpdate,C_SignEncryptUpdate)",
        "(C_GetSlotList,C_GetSlotList)",
        "(C_VerifyInit,C_VerifyInit)",
        "(C_EncryptUpdate,C_EncryptUpdate)",
        "(C_WrapKeyCallback,C_WrapKeyCallback)",
        "(C_Verify,C_Verify)",
        "(C_Finalize,C_Finalize)",
        "(C_FindObjects,C_FindObjects)",
        "(C_GenerateKeyCallback,C_GenerateKeyCallback)",
        "(C_WaitForSlotEvent,C_WaitForSlotEvent)",
        "(C_DigestUpdate,C_DigestUpdate)",
        "(C_SignUpdate,C_SignUpdate)",
        "(C_Initialize,C_Initialize)",
        "(C_FindObjectsInit,C_FindObjectsInit)",
        "(C_DecryptFinalCallback,C_DecryptFinalCallback)",
        "(C_DigestKey,C_DigestKey)",
        "(C_DecryptFinal,C_DecryptFinal)",
        "(C_EncryptFinal,C_EncryptFinal)",
        "(C_DecryptVerifyUpdate,C_DecryptVerifyUpdate)",
        "(PKCS11,Constructor)",
        "(C_EncryptFinalCallback,C_EncryptFinalCallback)",
        "(C_SignFinalCallback,C_SignFinalCallback)",
        "(C_SignCallback,C_SignCallback)",
        "(C_SeedRandom,C_SeedRandom)",
        "(C_GetTokenInfo,C_GetTokenInfo)",
        "(C_GetObjectSize,C_GetObjectSize)",
        "(C_DecryptInit,C_DecryptInit)",
        "(C_GetMechanismInfo,C_GetMechanismInfo)",
        "(C_DigestFinalCallback,C_DigestFinalCallback)",
        "(C_VerifyUpdate,C_VerifyUpdate)",
        "(C_Login,C_Login)",
        "(C_DecryptVerifyUpdateCallback,C_DecryptVerifyUpdateCallback)"
      ],
      "Charon": []
    },
    "pkg-meta": {
      "Gasket": [
        "(findScript,findScript)"
      ],
      "Charon": []
    },
    "platform-folders": {
      "Gasket": [
        "(getConfigFolders,getAdditionalConfigDirectories)",
        "(getDataHome,getData)",
        "(getSaveGamesFolder,getSaveGames)",
        "(getConfigHome,getConfig)",
        "(getStateDir,getState)",
        "(getDownloadsFolder,getDownloads)",
        "(getPicturesFolder,getPictures)",
        "(getCacheDir,getCache)",
        "(getVideosFolder,getVideos)",
        "(getDocumentsFolder,getDocuments)",
        "(getMusicFolder,getMusic)",
        "(getDesktopFolder,getDesktop)",
        "(getHomeFolder,getHome)",
        "(getDataFolders,getAdditionalDataDirectories)"
      ],
      "Charon": []
    },
    "playcap": {
      "Gasket": [
        "(createDevice,Context_createDevice)",
        "(Context,Context_constructor)",
        "(getDevices,Context_getDevices)",
        "(refreshDevices,Context_refreshDevices)"
      ],
      "Charon": []
    },
    "plenteum-crypto": {
      "Gasket": [
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(chukwa_slow_hash,chukwa_slow_hash)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(tree_branch,tree_branch)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(generateKeyImage,generateKeyImage)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(generateRingSignatures,generateRingSignatures)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(scalarmultKey,scalarmultKey)",
        "(underivePublicKey,underivePublicKey)",
        "(checkSignature,checkSignature)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(tree_depth,tree_depth)",
        "(deriveSecretKey,deriveSecretKey)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(cnFastHash,cn_fast_hash)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(hashToScalar,hashToScalar)",
        "(checkRingSignature,checkRingSignature)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(generateSignature,generateSignature)",
        "(tree_hash,tree_hash)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(scReduce32,scReduce32)",
        "(checkKey,checkKey)",
        "(generateKeys,generateKeys)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(derivePublicKey,derivePublicKey)"
      ],
      "Charon": [
        "(checkKey,checkKey)",
        "(checkRingSignature,checkRingSignature)",
        "(checkSignature,checkSignature)",
        "(derivePublicKey,derivePublicKey)",
        "(deriveSecretKey,deriveSecretKey)",
        "(generateKeys,generateKeys)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(generateKeyImage,generateKeyImage)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(generateRingSignatures,generateRingSignatures)",
        "(generateSignature,generateSignature)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(hashToScalar,hashToScalar)",
        "(scalarmultKey,scalarmultKey)",
        "(scReduce32,scReduce32)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(tree_depth,tree_depth)",
        "(tree_hash,tree_hash)",
        "(tree_branch,tree_branch)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(underivePublicKey,underivePublicKey)",
        "(cnFastHash,cn_fast_hash)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(chukwa_slow_hash,chukwa_slow_hash)"
      ]
    },
    "@point3/dguard": {
      "Gasket": [
        "(decrypt,Decrypt)",
        "(hash,Hash)",
        "(encrypt,Encrypt)",
        "(init,Init)",
        "(close,Close)"
      ],
      "Charon": [
        "(init,Init)",
        "(close,Close)",
        "(encrypt,Encrypt)",
        "(decrypt,Decrypt)",
        "(hash,Hash)"
      ]
    },
    "poke-opus": {
      "Gasket": [
        "(decode,Decode)",
        "(applyEncoderCTL,ApplyEncoderCTL)",
        "(encode,Encode)",
        "(setBitrate,SetBitrate)",
        "(OpusEncoder,New)",
        "(applyDecoderCTL,ApplyDecoderCTL)",
        "(getBitrate,GetBitrate)"
      ],
      "Charon": [
        "(encode,Encode)",
        "(decode,Decode)",
        "(applyEncoderCTL,ApplyEncoderCTL)",
        "(applyDecoderCTL,ApplyDecoderCTL)",
        "(setBitrate,SetBitrate)",
        "(getBitrate,GetBitrate)"
      ]
    },
    "poppler-native": {
      "Gasket": [
        "(info,GetPDFInfo)"
      ],
      "Charon": [
        "(info,GetPDFInfo)",
        "(Names,Dict)",
        "(size,size)",
        "(family,String)",
        "(color,String)",
        "(src,String)",
        "(text,String)",
        "(link,String)",
        "(title,String)"
      ]
    },
    "posix": {
      "Gasket": [
        "(setsid,node_setsid)",
        "(getppid,node_getppid)",
        "(getrlimit,node_getrlimit)",
        "(update_swap_constants,node_update_swap_constants)",
        "(gethostname,node_gethostname)",
        "(openlog,node_openlog)",
        "(setreuid,node_setreuid)",
        "(setlogmask,node_setlogmask)",
        "(initgroups,node_initgroups)",
        "(syslog,node_syslog)",
        "(getpwnam,node_getpwnam)",
        "(closelog,node_closelog)",
        "(setrlimit,node_setrlimit)",
        "(sethostname,node_sethostname)",
        "(seteuid,node_seteuid)",
        "(update_syslog_constants,node_update_syslog_constants)",
        "(swapon,node_swapon)",
        "(setpgid,node_setpgid)",
        "(geteuid,node_geteuid)",
        "(getpgid,node_getpgid)",
        "(getegid,node_getegid)",
        "(chroot,node_chroot)",
        "(swapoff,node_swapoff)",
        "(setegid,node_setegid)",
        "(setregid,node_setregid)",
        "(getgrnam,node_getgrnam)"
      ],
      "Charon": [
        "(getppid,node_getppid)",
        "(getpgid,node_getpgid)",
        "(setpgid,node_setpgid)",
        "(geteuid,node_geteuid)",
        "(getegid,node_getegid)",
        "(setsid,node_setsid)",
        "(chroot,node_chroot)",
        "(getrlimit,node_getrlimit)",
        "(setrlimit,node_setrlimit)",
        "(getpwnam,node_getpwnam)",
        "(getgrnam,node_getgrnam)",
        "(initgroups,node_initgroups)",
        "(seteuid,node_seteuid)",
        "(setegid,node_setegid)",
        "(setregid,node_setregid)",
        "(setreuid,node_setreuid)",
        "(openlog,node_openlog)",
        "(closelog,node_closelog)",
        "(syslog,node_syslog)",
        "(setlogmask,node_setlogmask)",
        "(update_syslog_constants,node_update_syslog_constants)",
        "(gethostname,node_gethostname)",
        "(sethostname,node_sethostname)"
      ]
    },
    "posix-clock": {
      "Gasket": [
        "(gettime,ClockGetTime)",
        "(nanosleep,ClockNanosleep)",
        "(getres,ClockGetRes)"
      ],
      "Charon": [
        "(gettime,ClockGetTime)",
        "(getres,ClockGetRes)",
        "(nanosleep,ClockNanosleep)"
      ]
    },
    "posix-semaphore": {
      "Gasket": [
        "(close,Close)",
        "(acquire,Acquire)",
        "(Semaphore,New)",
        "(release,Release)"
      ],
      "Charon": [
        "(acquire,Acquire)",
        "(release,Release)",
        "(close,Close)"
      ]
    },
    "posix-socket": {
      "Gasket": [
        "(accept,Accept)",
        "(setsockopt,Setsockopt)",
        "(recvfrom,Recvfrom)",
        "(close,Close)",
        "(recv,Recv)",
        "(shutdown,Shutdown)",
        "(socket,Socket)",
        "(sendto,Sendto)",
        "(bind,Bind)",
        "(send,Send)",
        "(getsockopt,Getsockopt)",
        "(connect,Connect)",
        "(listen,Listen)"
      ],
      "Charon": []
    },
    "posix_spawn": {
      "Gasket": [
        "(posix_spawn,PosixSpawn)"
      ],
      "Charon": [
        "(posix_spawn,PosixSpawn)"
      ]
    },
    "postal-async": {
      "Gasket": [
        "(parse,Parse)",
        "(expand,Expand)"
      ],
      "Charon": [
        "(parse,Parse)",
        "(expand,Expand)"
      ]
    },
    "postal-async-m1": {
      "Gasket": [
        "(expand,Expand)",
        "(parse,Parse)"
      ],
      "Charon": [
        "(parse,Parse)",
        "(expand,Expand)"
      ]
    },
    "pprof": {
      "Gasket": [
        "(stopProfiling,StopProfiling)",
        "(startProfiling,StartProfiling)",
        "(getAllocationProfile,GetAllocationProfile)",
        "(setSamplingInterval,SetSamplingInterval)",
        "(startSamplingHeapProfiler,StartSamplingHeapProfiler)",
        "(stopSamplingHeapProfiler,StopSamplingHeapProfiler)"
      ],
      "Charon": [
        "(name,name)",
        "(title,profile)",
        "(topDownRoot,profile)",
        "(startTime,profile)",
        "(endTime,profile)",
        "(startProfiling,StartProfiling)",
        "(stopProfiling,StopProfiling)",
        "(setSamplingInterval,SetSamplingInterval)",
        "(startSamplingHeapProfiler,StartSamplingHeapProfiler)",
        "(stopSamplingHeapProfiler,StopSamplingHeapProfiler)",
        "(getAllocationProfile,GetAllocationProfile)"
      ]
    },
    "prebuilt-example": {
      "Gasket": [
        "(main,Main)"
      ],
      "Charon": []
    },
    "@primecode/async-qrcode": {
      "Gasket": [
        "(generate,Generate)"
      ],
      "Charon": [
        "(generate,Generate)"
      ]
    },
    "primo-app-example": {
      "Gasket": [
        "(db_close,db_close)",
        "(iterator_seek,iterator_seek)",
        "(db_get_property,db_get_property)",
        "(batch_put,batch_put)",
        "(batch_write,batch_write)",
        "(batch_do,batch_do)",
        "(destroy_db,destroy_db)",
        "(db_init,db_init)",
        "(batch_clear,batch_clear)",
        "(batch_init,batch_init)",
        "(db_put,db_put)",
        "(db_del,db_del)",
        "(iterator_init,iterator_init)",
        "(db_get,db_get)",
        "(db_approximate_size,db_approximate_size)",
        "(batch_del,batch_del)",
        "(iterator_end,iterator_end)",
        "(repair_db,repair_db)",
        "(iterator_next,iterator_next)",
        "(db_compact_range,db_compact_range)",
        "(db_open,db_open)"
      ],
      "Charon": []
    },
    "private-symbol": {
      "Gasket": [
        "(SymbolFor,SymbolFor)",
        "(Create,Create)"
      ],
      "Charon": [
        "(Create,Create)",
        "(SymbolFor,SymbolFor)"
      ]
    },
    "process-once.node": {
      "Gasket": [
        "(processonce,ProcessOnce)"
      ],
      "Charon": [
        "(exports,ProcessOnce)"
      ]
    },
    "profoundjs-node-pty": {
      "Gasket": [
        "(process,PtyGetProc)",
        "(open,PtyOpen)",
        "(fork,PtyFork)",
        "(resize,PtyResize)"
      ],
      "Charon": []
    },
    "promise-await": {
      "Gasket": [
        "(uvRunOnce,uvRunOnce)",
        "(uvRunNowait,uvRunNowait)",
        "(uvRunDefault,uvRunDefault)"
      ],
      "Charon": []
    },
    "prompt-simple": {
      "Gasket": [
        "(prompt,SimplePrompt)"
      ],
      "Charon": [
        "(prompt,SimplePrompt)"
      ]
    },
    "@pubgcorp/node-xed": {
      "Gasket": [
        "(disassemble,disassembleWrapped)"
      ],
      "Charon": [
        "(len,Number)",
        "(disassemble,disassembleWrapped)"
      ]
    },
    "@pugdag/process-list": {
      "Gasket": [
        "(snapshot,snapshot)"
      ],
      "Charon": [
        "(snapshot,snapshot)"
      ]
    },
    "pulsar-client": {
      "Gasket": [
        "(getMessageId,GetMessageId)",
        "(createReader,CreateReader)",
        "(serialize,Serialize)",
        "(deserialize,Deserialize)",
        "(earliest,Earliest)",
        "(setLogHandler,SetLogHandler)",
        "(latest,Latest)",
        "(getPublishTimestamp,GetPublishTimestamp)",
        "(getRedeliveryCount,GetRedeliveryCount)",
        "(getPartitionKey,GetPartitionKey)",
        "(Message,Message)",
        "(getTopicName,GetTopicName)",
        "(getEventTimestamp,GetEventTimestamp)",
        "(toString,ToString)",
        "(getProperties,GetProperties)",
        "(subscribe,Subscribe)",
        "(MessageId,MessageId)",
        "(close,Close)",
        "(getPartitionsForTopic,GetPartitionsForTopic)",
        "(Client,Client)",
        "(getData,GetData)",
        "(createProducer,CreateProducer)",
        "(Authentication,Authentication)"
      ],
      "Charon": [
        "(setLogHandler,Client)"
      ]
    },
    "pulseaudio2": {
      "Gasket": [
        "(load_module,LoadModule)",
        "(read,Read)",
        "(Context,New)",
        "(connect,Connect)",
        "(latency,Latency)",
        "(set_mute,SetMute)",
        "(write,Write)",
        "(unload_module,UnloadModule)",
        "(set_volume,SetVolume)",
        "(Stream,New)",
        "(disconnect,Disconnect)",
        "(info,Info)"
      ],
      "Charon": [
        "(connect,Connect)",
        "(disconnect,Disconnect)",
        "(info,Info)",
        "(set_volume,SetVolume)",
        "(set_mute,SetMute)",
        "(load_module,LoadModule)",
        "(unload_module,UnloadModule)",
        "(latency,Latency)",
        "(read,Read)",
        "(write,Write)"
      ]
    },
    "pwuid": {
      "Gasket": [
        "(pwuid/build/Debug/binding,pwuid)"
      ],
      "Charon": [
        "(exports,pwuid)"
      ]
    },
    "qlobber-native": {
      "Gasket": [
        "(match_next_async,decltype)",
        "(get_restorer_async,GetRestorerAsync)",
        "(test_async,decltype)",
        "(clear,Clear)",
        "(get_visitor,GetVisitor)",
        "(match,Match)",
        "(add,decltype)",
        "(remove_async,RemoveAsync)",
        "(QlobberString,char)",
        "(restore_next_async,RestoreNextAsync)",
        "(match_next,MatchNext)",
        "(match_next_async,MatchNextAsync)",
        "(match_iter,decltype)",
        "(QlobberSub,QlobberSub)",
        "(test,Test)",
        "(get_visitor_async,decltype)",
        "(get_visitor_async,GetVisitorAsync)",
        "(match,decltype)",
        "(match_iter_async,decltype)",
        "(_reset_counters,decltype)",
        "(match_next,decltype)",
        "(restore_next,RestoreNext)",
        "(QlobberTrue,QlobberTrue)",
        "(test,decltype)",
        "(remove_async,decltype)",
        "(match_iter_async,MatchIterAsync)",
        "(release,decltype)",
        "(QlobberNumber,Number)",
        "(test_async,TestAsync)",
        "(release,Release)",
        "(get_restorer_async,decltype)",
        "(clear_async,decltype)",
        "(match_async,MatchAsync)",
        "(restore_next_async,decltype)",
        "(add,Add)",
        "(remove,decltype)",
        "(clear_async,ClearAsync)",
        "(visit_next,decltype)",
        "(match_async,decltype)",
        "(visit_next_async,VisitNextAsync)",
        "(_reset_counters,ResetCounters)",
        "(visit_next_async,decltype)",
        "(clear,decltype)",
        "(get_restorer,GetRestorer)",
        "(remove,Remove)",
        "(QlobberDedupString,char)",
        "(get_visitor,decltype)",
        "(restore_next,decltype)",
        "(visit_next,VisitNext)",
        "(match_iter,MatchIter)",
        "(add_ref,AddRef)",
        "(QlobberDedupNumber,Number)",
        "(get_restorer,decltype)",
        "(add_async,decltype)",
        "(add_async,AddAsync)",
        "(add_ref,decltype)"
      ],
      "Charon": [
        "(key,String)"
      ]
    },
    "qlzjs": {
      "Gasket": [
        "(qlz_compress_c,qlz_compress_magic)",
        "(qlz_decompress_c,qlz_decompress_c)"
      ],
      "Charon": [
        "(qlz_compress_c,qlz_compress_magic)",
        "(qlz_decompress_c,qlz_decompress_c)"
      ]
    },
    "qqdevicecheck": {
      "Gasket": [
        "(qqdevicecheck,DeviceCallBack)"
      ],
      "Charon": []
    },
    "qrencode_mini": {
      "Gasket": [
        "(qrencode,qrencode)"
      ],
      "Charon": []
    },
    "@quanitux/nsfw": {
      "Gasket": [
        "(start,Start)",
        "(stop,Stop)",
        "(NSFW,JSNew)"
      ],
      "Charon": [
        "(start,Start)",
        "(stop,Stop)"
      ]
    },
    "@quan-to/chevronlib": {
      "Gasket": [
        "(getPublicKey,GetPublicKeySync)",
        "(changeKeyPassword,ChangeKeyPasswordAsync)",
        "(getKeyFingerprints,GetKeyFingerprintsSync)",
        "(loadKey,LoadKeyAsync)",
        "(generateKey,GenerateKeyAsync)",
        "(__loadnative,LoadNative)",
        "(signData,SignDataAsync)",
        "(verifySignature,VerifySignatureAsync)",
        "(quantoSignData,QuantoSignDataAsync)",
        "(unlockKey,UnlockKeyAsync)",
        "(quantoVerifySignature,QuantoVerifySignatureAsync)"
      ],
      "Charon": [
        "(__loadnative,LoadNative)",
        "(generateKey,GenerateKeyAsync)",
        "(loadKey,LoadKeyAsync)",
        "(unlockKey,UnlockKeyAsync)",
        "(getKeyFingerprints,GetKeyFingerprintsSync)",
        "(getPublicKey,GetPublicKeySync)",
        "(verifySignature,VerifySignatureAsync)",
        "(signData,SignDataAsync)",
        "(changeKeyPassword,ChangeKeyPasswordAsync)",
        "(quantoSignData,QuantoSignDataAsync)",
        "(quantoVerifySignature,QuantoVerifySignatureAsync)"
      ]
    },
    "@quantumdag/process-list": {
      "Gasket": [
        "(snapshot,snapshot)"
      ],
      "Charon": [
        "(snapshot,snapshot)"
      ]
    },
    "@quantumdag_/process-list": {
      "Gasket": [
        "(snapshot,snapshot)"
      ],
      "Charon": [
        "(snapshot,snapshot)"
      ]
    },
    "querymimedb": {
      "Gasket": [
        "(queryMimeType,QueryMimeType)"
      ],
      "Charon": []
    },
    "@qujingling/sqlite3": {
      "Gasket": [
        "(step,Step)",
        "(close,Close)",
        "(serialize,Serialize)",
        "(bind,Bind)",
        "(all,All)",
        "(loadExtension,LoadExtension)",
        "(parallelize,Parallelize)",
        "(finalize,Finalize)",
        "(each,Each)",
        "(reset,Reset)",
        "(Database,New)",
        "(interrupt,Interrupt)",
        "(get,Get)",
        "(configure,Configure)",
        "(Statement,New)",
        "(wait,Wait)",
        "(run,Run)",
        "(exec,Exec)",
        "(finish,Finish)",
        "(Backup,New)"
      ],
      "Charon": [
        "(step,Step)",
        "(finish,Finish)",
        "(idle,IdleGetter)",
        "(completed,CompletedGetter)",
        "(failed,FailedGetter)",
        "(remaining,RemainingGetter)",
        "(pageCount,PageCountGetter)",
        "(close,Close)",
        "(exec,Exec)",
        "(wait,Wait)",
        "(loadExtension,LoadExtension)",
        "(serialize,Serialize)",
        "(parallelize,Parallelize)",
        "(configure,Configure)",
        "(interrupt,Interrupt)",
        "(open,OpenGetter)",
        "(bind,Bind)",
        "(get,Get)",
        "(run,Run)",
        "(all,All)",
        "(each,Each)",
        "(reset,Reset)",
        "(finalize,Finalize)"
      ]
    },
    "qwertycoin-crypto": {
      "Gasket": [
        "(derivePublicKey,derivePublicKey)",
        "(completeRingSignatures,completeRingSignatures)",
        "(generateKeyDerivationScalar,generateKeyDerivationScalar)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(derivationToScalar,derivationToScalar)",
        "(generatePartialSigningKey,generatePartialSigningKey)",
        "(checkKey,checkKey)",
        "(scalarDeriveSecretKey,scalarDeriveSecretKey)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(generateKeys,generateKeys)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(checkSignature,checkSignature)",
        "(prepareRingSignatures,prepareRingSignatures)",
        "(calculateSharedPublicKey,calculateSharedPublicKey)",
        "(scReduce32,scReduce32)",
        "(cnFastHash,cn_fast_hash)",
        "(calculateSharedPrivateKey,calculateSharedPrivateKey)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(tree_branch,tree_branch)",
        "(underivePublicKey,underivePublicKey)",
        "(generateSignature,generateSignature)",
        "(hashToScalar,hashToScalar)",
        "(tree_hash,tree_hash)",
        "(generateKeyImage,generateKeyImage)",
        "(deriveSecretKey,deriveSecretKey)",
        "(restoreRingSignatures,restoreRingSignatures)",
        "(tree_depth,tree_depth)",
        "(restoreKeyImage,restoreKeyImage)",
        "(generateRingSignatures,generateRingSignatures)",
        "(cn_fast_hash,cn_fast_hash)",
        "(calculateMultisigPrivateKeys,calculateMultisigPrivateKeys)",
        "(scalarmultKey,scalarmultKey)",
        "(checkRingSignature,checkRingSignature)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(scalarDerivePublicKey,scalarDerivePublicKey)"
      ],
      "Charon": [
        "(calculateMultisigPrivateKeys,calculateMultisigPrivateKeys)",
        "(calculateSharedPrivateKey,calculateSharedPrivateKey)",
        "(calculateSharedPublicKey,calculateSharedPublicKey)",
        "(generatePartialSigningKey,generatePartialSigningKey)",
        "(prepareRingSignatures,prepareRingSignatures)",
        "(completeRingSignatures,completeRingSignatures)",
        "(restoreRingSignatures,restoreRingSignatures)",
        "(restoreKeyImage,restoreKeyImage)",
        "(checkKey,checkKey)",
        "(checkRingSignature,checkRingSignature)",
        "(checkSignature,checkSignature)",
        "(derivationToScalar,derivationToScalar)",
        "(derivePublicKey,derivePublicKey)",
        "(deriveSecretKey,deriveSecretKey)",
        "(generateKeys,generateKeys)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(generateKeyDerivationScalar,generateKeyDerivationScalar)",
        "(generateKeyImage,generateKeyImage)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(generateRingSignatures,generateRingSignatures)",
        "(generateSignature,generateSignature)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(hashToScalar,hashToScalar)",
        "(scalarDerivePublicKey,scalarDerivePublicKey)",
        "(scalarDeriveSecretKey,scalarDeriveSecretKey)",
        "(scalarmultKey,scalarmultKey)",
        "(scReduce32,scReduce32)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(tree_depth,tree_depth)",
        "(tree_hash,tree_hash)",
        "(tree_branch,tree_branch)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(underivePublicKey,underivePublicKey)",
        "(cnFastHash,cn_fast_hash)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)"
      ]
    },
    "rabin-native": {
      "Gasket": [
        "(rabin_native_next_chunk,rabin_native_next_chunk)",
        "(rabin_native_finalize,rabin_native_finalize)",
        "(rabin_native_init,rabin_native_init)"
      ],
      "Charon": []
    },
    "radialxml": {
      "Gasket": [
        "(_validate,Validate)",
        "(name,Name)",
        "(toString,ToString)",
        "(_getDtd,GetDtd)",
        "(prefix,Prefix)",
        "(childNodes,ChildNodes)",
        "(node,Node)",
        "(Text,New)",
        "(ProcessingInstruction,New)",
        "(addCData,AddCData)",
        "(clone,Clone)",
        "(_encoding,Encoding)",
        "(Comment,New)",
        "(SaxParser,NewParser)",
        "(type,Type)",
        "(value,Value)",
        "(xmlMemUsed,XmlMemUsed)",
        "(addPrevSibling,AddPrevSibling)",
        "(path,Path)",
        "(namespaces,Namespaces)",
        "(prevSibling,PrevSibling)",
        "(_toString,ToString)",
        "(Element,New)",
        "(Attribute,New)",
        "(href,Href)",
        "(text,Text)",
        "(fromXml,FromXml)",
        "(prevElement,PrevElement)",
        "(line,LineNumber)",
        "(addNextSibling,AddNextSibling)",
        "(nextSibling,NextSibling)",
        "(namespace,Namespace)",
        "(SaxPushParser,NewPushParser)",
        "(xmlNodeCount,XmlNodeCount)",
        "(attrs,Attrs)",
        "(_root,Root)",
        "(addChild,AddChild)",
        "(child,Child)",
        "(_rngValidate,RngValidate)",
        "(push,Push)",
        "(fromHtml,FromHtml)",
        "(_setDtd,SetDtd)",
        "(parseString,ParseString)",
        "(nextElement,NextElement)",
        "(remove,Remove)",
        "(_version,Version)",
        "(replace,Replace)",
        "(Document,New)",
        "(find,Find)",
        "(parent,Parent)",
        "(doc,Doc)",
        "(Namespace,New)",
        "(_attr,Attr)"
      ],
      "Charon": [
        "(name,XmlProcessingInstruction)",
        "(text,XmlProcessingInstruction)",
        "(xmlMemUsed,XmlMemUsed)",
        "(xmlNodeCount,XmlNodeCount)",
        "(parseString,XmlSaxParser)",
        "(push,XmlSaxParser)",
        "(addChild,XmlElement)",
        "(addCData,XmlElement)",
        "(_attr,XmlElement)",
        "(attrs,XmlElement)",
        "(child,XmlElement)",
        "(childNodes,XmlElement)",
        "(find,XmlElement)",
        "(nextElement,XmlElement)",
        "(prevElement,XmlElement)",
        "(name,XmlElement)",
        "(path,XmlElement)",
        "(text,XmlElement)",
        "(addPrevSibling,XmlElement)",
        "(addNextSibling,XmlElement)",
        "(replace,XmlElement)",
        "(href,XmlNamespace)",
        "(prefix,XmlNamespace)",
        "(doc,XmlNode)",
        "(parent,XmlNode)",
        "(namespace,XmlNode)",
        "(namespaces,XmlNode)",
        "(prevSibling,XmlNode)",
        "(nextSibling,XmlNode)",
        "(line,XmlNode)",
        "(type,XmlNode)",
        "(remove,XmlNode)",
        "(clone,XmlNode)",
        "(toString,XmlNode)",
        "(text,XmlComment)",
        "(_root,XmlDocument)",
        "(_version,XmlDocument)",
        "(_encoding,XmlDocument)",
        "(_toString,XmlDocument)",
        "(_validate,XmlDocument)",
        "(_rngValidate,XmlDocument)",
        "(_setDtd,XmlDocument)",
        "(_getDtd,XmlDocument)",
        "(fromXml,XmlDocument)",
        "(fromHtml,XmlDocument)",
        "(nextElement,XmlText)",
        "(prevElement,XmlText)",
        "(text,XmlText)",
        "(replace,XmlText)",
        "(name,XmlAttribute)",
        "(value,XmlAttribute)",
        "(node,XmlAttribute)",
        "(namespace,XmlAttribute)",
        "(0,set)",
        "(1,set)"
      ]
    },
    "@raghb1/node-memwatch": {
      "Gasket": [
        "(gc,trigger_gc)",
        "(end,End)",
        "(HeapDiff,New)",
        "(upon_gc,upon_gc)"
      ],
      "Charon": [
        "(end,End)"
      ]
    },
    "@rainblock/ethereum-block": {
      "Gasket": [
        "(signTransaction,sign_transaction)",
        "(recoverFromAddress,recover_from_address)",
        "(getPublicAddress,get_public_address)"
      ],
      "Charon": []
    },
    "raknet-native": {
      "Gasket": [
        "(close,Close)",
        "(send,SendEncapsulated)",
        "(RakClient,RakClient)",
        "(RakServer,RakServer)",
        "(kick,Kick)",
        "(setPongResponse,SetPongResponse)",
        "(connect,Connect)",
        "(ping,Ping)",
        "(listen,Listen)"
      ],
      "Charon": []
    },
    "rapid-crc": {
      "Gasket": [
        "(crc32,crc32By32)",
        "(zlib,crcZlib)",
        "(crc32c,crc32c)"
      ],
      "Charon": [
        "(crc32c,crc32c)",
        "(crc32,crc32By32)",
        "(zlib,crcZlib)"
      ]
    },
    "rapidx2j": {
      "Gasket": [
        "(parseAsync,parseAsync)",
        "(parse,parse)"
      ],
      "Charon": [
        "(parse,parse)",
        "(parseAsync,parseAsync)"
      ]
    },
    "ratty": {
      "Gasket": [
        "(leaveRawMode,leave_raw_mode)",
        "(enterRawMode,enter_raw_mode)"
      ],
      "Charon": [
        "(enterRawMode,enter_raw_mode)",
        "(leaveRawMode,leave_raw_mode)"
      ]
    },
    "raw-socket": {
      "Gasket": [
        "(SocketWrap,New)",
        "(getOption,GetOption)",
        "(pause,Pause)",
        "(close,Close)",
        "(recv,Recv)",
        "(setOption,SetOption)",
        "(htons,Htons)",
        "(createChecksum,CreateChecksum)",
        "(send,Send)",
        "(ntohs,Ntohs)",
        "(ntohl,Ntohl)",
        "(htonl,Htonl)"
      ],
      "Charon": [
        "(createChecksum,CreateChecksum)",
        "(htonl,Htonl)",
        "(htons,Htons)",
        "(ntohl,Ntohl)",
        "(ntohs,Ntohs)",
        "(close,Close)",
        "(getOption,GetOption)",
        "(pause,Pause)",
        "(recv,Recv)",
        "(send,Send)",
        "(setOption,SetOption)"
      ]
    },
    "@raygun-nickj/mmap-io": {
      "Gasket": [
        "(sync_lib_private__,mmap_sync_lib_private_)",
        "(advise,mmap_advise)",
        "(map,mmap_map)",
        "(incore,mmap_incore)"
      ],
      "Charon": []
    },
    "raylib": {
      "Gasket": [
        "(BindrlDisableVertexArray,BindrlDisableVertexArray)",
        "(BindIsCursorHidden,BindIsCursorHidden)",
        "(BindGetFontDefault,BindGetFontDefault)",
        "(BindGetImageColor,BindGetImageColor)",
        "(BindrlDisableBackfaceCulling,BindrlDisableBackfaceCulling)",
        "(BindDrawLineV,BindDrawLineV)",
        "(BindrlLoadTextureCubemap,BindrlLoadTextureCubemap)",
        "(BindrlComputeShaderDispatch,BindrlComputeShaderDispatch)",
        "(BindLoadSound,BindLoadSound)",
        "(BindUnloadMesh,BindUnloadMesh)",
        "(BindEndVrStereoMode,BindEndVrStereoMode)",
        "(BindDrawRectangleLines,BindDrawRectangleLines)",
        "(BindQuaternionNlerp,BindQuaternionNlerp)",
        "(BindDrawModelWires,BindDrawModelWires)",
        "(BindTextAppend,BindTextAppend)",
        "(BindrlGetShaderLocsDefault,BindrlGetShaderLocsDefault)",
        "(BindFade,BindFade)",
        "(BindDrawRectangleGradientH,BindDrawRectangleGradientH)",
        "(BindMatrixRotateZ,BindMatrixRotateZ)",
        "(BindGetMusicTimeLength,BindGetMusicTimeLength)",
        "(BindSetTargetFPS,BindSetTargetFPS)",
        "(BindrlTranslatef,BindrlTranslatef)",
        "(BindrlLoadVertexBuffer,BindrlLoadVertexBuffer)",
        "(BindVector3SubtractValue,BindVector3SubtractValue)",
        "(BindEaseExpoIn,BindEaseExpoIn)",
        "(BindGenImageFontAtlas,BindGenImageFontAtlas)",
        "(BindMatrixPerspective,BindMatrixPerspective)",
        "(BindGetFileName,BindGetFileName)",
        "(BindDrawLineEx,BindDrawLineEx)",
        "(BindCheckCollisionBoxSphere,BindCheckCollisionBoxSphere)",
        "(BindGuiProgressBar,BindGuiProgressBar)",
        "(BindGetMeshBoundingBox,BindGetMeshBoundingBox)",
        "(BindDrawRing,BindDrawRing)",
        "(BindUpdateSound,BindUpdateSound)",
        "(BindResumeMusicStream,BindResumeMusicStream)",
        "(BindTextInsert,BindTextInsert)",
        "(BindClearWindowState,BindClearWindowState)",
        "(BindUnloadDirectoryFiles,BindUnloadDirectoryFiles)",
        "(BindEaseSineOut,BindEaseSineOut)",
        "(BindVector3Unproject,BindVector3Unproject)",
        "(BindrlEnableShader,BindrlEnableShader)",
        "(BindLoadUTF8,BindLoadUTF8)",
        "(BindGetApplicationDirectory,BindGetApplicationDirectory)",
        "(BindLoadFont,BindLoadFont)",
        "(BindrlEnableScissorTest,BindrlEnableScissorTest)",
        "(BindMatrixScale,BindMatrixScale)",
        "(BindUpdateTextureRec,BindUpdateTextureRec)",
        "(BindIsKeyReleased,BindIsKeyReleased)",
        "(BindrlDrawVertexArrayElements,BindrlDrawVertexArrayElements)",
        "(BindVector2Subtract,BindVector2Subtract)",
        "(BindTextFindIndex,BindTextFindIndex)",
        "(BindDisableEventWaiting,BindDisableEventWaiting)",
        "(BindGetGestureHoldDuration,BindGetGestureHoldDuration)",
        "(BindTextToPascal,BindTextToPascal)",
        "(BindDrawRay,BindDrawRay)",
        "(BindDrawCircleSectorLines,BindDrawCircleSectorLines)",
        "(BindMatrixMultiply,BindMatrixMultiply)",
        "(BindrlLoadIdentity,BindrlLoadIdentity)",
        "(BindGuiEnableTooltip,BindGuiEnableTooltip)",
        "(BindGetModelBoundingBox,BindGetModelBoundingBox)",
        "(BindMatrixSubtract,BindMatrixSubtract)",
        "(BindrlRotatef,BindrlRotatef)",
        "(BindrlSetUniform,BindrlSetUniform)",
        "(BindGetWorldToScreenEx,BindGetWorldToScreenEx)",
        "(BindGuiScrollPanel,BindGuiScrollPanel)",
        "(BindGuiEnable,BindGuiEnable)",
        "(BindWaveCopy,BindWaveCopy)",
        "(BindrlReadShaderBuffer,BindrlReadShaderBuffer)",
        "(BindLoadFontData,BindLoadFontData)",
        "(BindrlEnd,BindrlEnd)",
        "(BindrlColor4f,BindrlColor4f)",
        "(BindIsSoundReady,BindIsSoundReady)",
        "(BindImageDrawPixelV,BindImageDrawPixelV)",
        "(BindUpdateCameraPro,BindUpdateCameraPro)",
        "(BindSetExitKey,BindSetExitKey)",
        "(BindTextToInteger,BindTextToInteger)",
        "(BindDrawModelEx,BindDrawModelEx)",
        "(BindDrawCircleGradient,BindDrawCircleGradient)",
        "(BindLoadRenderTexture,BindLoadRenderTexture)",
        "(BindrlDrawVertexArrayElementsInstanced,BindrlDrawVertexArrayElementsInstanced)",
        "(BindDrawCircle,BindDrawCircle)",
        "(BindTextSubtext,BindTextSubtext)",
        "(BindDrawRectangleRec,BindDrawRectangleRec)",
        "(BindImageDrawRectangleLines,BindImageDrawRectangleLines)",
        "(BindDrawTextureEx,BindDrawTextureEx)",
        "(BindGuiValueBox,BindGuiValueBox)",
        "(BindrlDisableDepthMask,BindrlDisableDepthMask)",
        "(BindrlBindShaderBuffer,BindrlBindShaderBuffer)",
        "(BindUnloadWave,BindUnloadWave)",
        "(BindrlGetPixelFormatName,BindrlGetPixelFormatName)",
        "(BindWindowShouldClose,BindWindowShouldClose)",
        "(BindGuiIconText,BindGuiIconText)",
        "(BindDrawTextCodepoint,BindDrawTextCodepoint)",
        "(BindSetMouseScale,BindSetMouseScale)",
        "(BindGetTouchX,BindGetTouchX)",
        "(BindTextLength,BindTextLength)",
        "(BindPlaySound,BindPlaySound)",
        "(BindVector2Rotate,BindVector2Rotate)",
        "(BindVector3Subtract,BindVector3Subtract)",
        "(BindrlLoadTextureDepth,BindrlLoadTextureDepth)",
        "(BindTextToUpper,BindTextToUpper)",
        "(BindGetWindowScaleDPI,BindGetWindowScaleDPI)",
        "(BindImageColorBrightness,BindImageColorBrightness)",
        "(BindLoadFileText,BindLoadFileText)",
        "(BindGuiGetFont,BindGuiGetFont)",
        "(BindEaseQuadInOut,BindEaseQuadInOut)",
        "(BindrlLoadVertexArray,BindrlLoadVertexArray)",
        "(BindGuiSetState,BindGuiSetState)",
        "(BindGuiLoadStyle,BindGuiLoadStyle)",
        "(BindrlGetLocationAttrib,BindrlGetLocationAttrib)",
        "(BindQuaternionToAxisAngle,BindQuaternionToAxisAngle)",
        "(BindrlCopyShaderBuffer,BindrlCopyShaderBuffer)",
        "(BindDrawRectangleGradientV,BindDrawRectangleGradientV)",
        "(BindrlUnloadShaderBuffer,BindrlUnloadShaderBuffer)",
        "(BindMatrixRotateZYX,BindMatrixRotateZYX)",
        "(BindUpdateCamera,BindUpdateCamera)",
        "(BindSetWindowIcon,BindSetWindowIcon)",
        "(BindGuiLabelButton,BindGuiLabelButton)",
        "(BindrlIsStereoRenderEnabled,BindrlIsStereoRenderEnabled)",
        "(BindrlGenTextureMipmaps,BindrlGenTextureMipmaps)",
        "(BindSetShaderInt,BindSetShaderInt)",
        "(BindSetWindowOpacity,BindSetWindowOpacity)",
        "(BindLoadFontFromMemory,BindLoadFontFromMemory)",
        "(BindSetMouseOffset,BindSetMouseOffset)",
        "(BindLoadImageFromMemory,BindLoadImageFromMemory)",
        "(BindVector3RotateByQuaternion,BindVector3RotateByQuaternion)",
        "(BindGuiIsLocked,BindGuiIsLocked)",
        "(BindrlReadTexturePixels,BindrlReadTexturePixels)",
        "(BindDirectoryExists,BindDirectoryExists)",
        "(BindrlGetMatrixProjection,BindrlGetMatrixProjection)",
        "(BindGetGestureDragVector,BindGetGestureDragVector)",
        "(BindDrawEllipse,BindDrawEllipse)",
        "(BindrlSetRenderBatchActive,BindrlSetRenderBatchActive)",
        "(BindrlUnloadShaderProgram,BindrlUnloadShaderProgram)",
        "(BindDrawTriangleFan,BindDrawTriangleFan)",
        "(BindIsMusicReady,BindIsMusicReady)",
        "(BindImageClearBackground,BindImageClearBackground)",
        "(BindDrawPolyLines,BindDrawPolyLines)",
        "(BindImageMipmaps,BindImageMipmaps)",
        "(BindImageDraw,BindImageDraw)",
        "(BindGenMeshTangents,BindGenMeshTangents)",
        "(BindIsMusicStreamPlaying,BindIsMusicStreamPlaying)",
        "(BindUpdateMeshBuffer,BindUpdateMeshBuffer)",
        "(BindImageTextEx,BindImageTextEx)",
        "(BindrlLoadShaderProgram,BindrlLoadShaderProgram)",
        "(BindGetTouchPointCount,BindGetTouchPointCount)",
        "(BindCheckCollisionPointCircle,BindCheckCollisionPointCircle)",
        "(BindrlDisableTexture,BindrlDisableTexture)",
        "(BindGuiLabel,BindGuiLabel)",
        "(BindrlSetVertexAttribute,BindrlSetVertexAttribute)",
        "(BindrlCheckErrors,BindrlCheckErrors)",
        "(BindSetWindowPosition,BindSetWindowPosition)",
        "(BindGetDirectoryPath,BindGetDirectoryPath)",
        "(BindrlSetCullFace,BindrlSetCullFace)",
        "(BindrlLoadShaderCode,BindrlLoadShaderCode)",
        "(BindMatrixFrustum,BindMatrixFrustum)",
        "(BindEncodeDataBase64,BindEncodeDataBase64)",
        "(BindrlMultMatrixf,BindrlMultMatrixf)",
        "(BindImageToPOT,BindImageToPOT)",
        "(BindDrawBoundingBox,BindDrawBoundingBox)",
        "(BindMatrixIdentity,BindMatrixIdentity)",
        "(BindGetMonitorRefreshRate,BindGetMonitorRefreshRate)",
        "(BindrlOrtho,BindrlOrtho)",
        "(BindSetMasterVolume,BindSetMasterVolume)",
        "(BindUnloadImage,BindUnloadImage)",
        "(BindGuiDrawIcon,BindGuiDrawIcon)",
        "(BindrlVertex2f,BindrlVertex2f)",
        "(BindQuaternionInvert,BindQuaternionInvert)",
        "(BindDrawFPS,BindDrawFPS)",
        "(BindVector2DistanceSqr,BindVector2DistanceSqr)",
        "(BindSetModelMeshMaterial,BindSetModelMeshMaterial)",
        "(BindMeasureText,BindMeasureText)",
        "(BindQuaternionFromVector3ToVector3,BindQuaternionFromVector3ToVector3)",
        "(BindEaseBackIn,BindEaseBackIn)",
        "(BindEaseElasticOut,BindEaseElasticOut)",
        "(BindVector3Scale,BindVector3Scale)",
        "(BindEaseBounceOut,BindEaseBounceOut)",
        "(BindDrawTextureNPatch,BindDrawTextureNPatch)",
        "(BindColorFromNormalized,BindColorFromNormalized)",
        "(BindVector3AddValue,BindVector3AddValue)",
        "(BindSetWindowIcons,BindSetWindowIcons)",
        "(BindBeginMode2D,BindBeginMode2D)",
        "(BindVector3Length,BindVector3Length)",
        "(BindImageFormat,BindImageFormat)",
        "(BindGetPrevDirectoryPath,BindGetPrevDirectoryPath)",
        "(BindDrawCylinderWiresEx,BindDrawCylinderWiresEx)",
        "(BindMemFree,BindMemFree)",
        "(BindrlGetMatrixModelview,BindrlGetMatrixModelview)",
        "(BindrlglClose,BindrlglClose)",
        "(BindVector3DistanceSqr,BindVector3DistanceSqr)",
        "(BindMemRealloc,BindMemRealloc)",
        "(BindEaseCubicInOut,BindEaseCubicInOut)",
        "(BindGenMeshHeightmap,BindGenMeshHeightmap)",
        "(BindrlUpdateVertexBuffer,BindrlUpdateVertexBuffer)",
        "(BindDrawSphereWires,BindDrawSphereWires)",
        "(BindIsShaderReady,BindIsShaderReady)",
        "(BindGetGestureDetected,BindGetGestureDetected)",
        "(BindGuiSetFont,BindGuiSetFont)",
        "(BindrlEnableVertexBuffer,BindrlEnableVertexBuffer)",
        "(BindVector2Negate,BindVector2Negate)",
        "(BindSetSoundVolume,BindSetSoundVolume)",
        "(BindImageAlphaMask,BindImageAlphaMask)",
        "(BindInitWindow,BindInitWindow)",
        "(BindVector2Scale,BindVector2Scale)",
        "(BindEaseBackOut,BindEaseBackOut)",
        "(BindSetAudioStreamPan,BindSetAudioStreamPan)",
        "(BindVector3Invert,BindVector3Invert)",
        "(BindrlDisableDepthTest,BindrlDisableDepthTest)",
        "(BindGuiStatusBar,BindGuiStatusBar)",
        "(BindDrawCylinder,BindDrawCylinder)",
        "(BindGuiGrid,BindGuiGrid)",
        "(BindQuaternionToMatrix,BindQuaternionToMatrix)",
        "(BindGetCodepointPrevious,BindGetCodepointPrevious)",
        "(BindQuaternionIdentity,BindQuaternionIdentity)",
        "(BindrlEnableDepthMask,BindrlEnableDepthMask)",
        "(BindVector2Equals,BindVector2Equals)",
        "(BindTextJoin,BindTextJoin)",
        "(BindrlSetMatrixViewOffsetStereo,BindrlSetMatrixViewOffsetStereo)",
        "(BindLoadDirectoryFilesEx,BindLoadDirectoryFilesEx)",
        "(BindVector2Invert,BindVector2Invert)",
        "(BindGetTouchPosition,BindGetTouchPosition)",
        "(BindQuaternionSubtract,BindQuaternionSubtract)",
        "(BindDrawTextPro,BindDrawTextPro)",
        "(BindImageAlphaPremultiply,BindImageAlphaPremultiply)",
        "(BindDrawTriangle3D,BindDrawTriangle3D)",
        "(BindDrawTexture,BindDrawTexture)",
        "(BindSetMusicPitch,BindSetMusicPitch)",
        "(BindrlLoadVertexBufferElement,BindrlLoadVertexBufferElement)",
        "(BindVector2Add,BindVector2Add)",
        "(BindImageColorTint,BindImageColorTint)",
        "(BindrlDisableShader,BindrlDisableShader)",
        "(BindImageDrawLine,BindImageDrawLine)",
        "(BindExportImage,BindExportImage)",
        "(BindIsWindowFullscreen,BindIsWindowFullscreen)",
        "(BindLoadShaderFromMemory,BindLoadShaderFromMemory)",
        "(BindIsMouseButtonUp,BindIsMouseButtonUp)",
        "(BindLoadMusicStreamFromMemory,BindLoadMusicStreamFromMemory)",
        "(BindGetMonitorHeight,BindGetMonitorHeight)",
        "(BindVector3LengthSqr,BindVector3LengthSqr)",
        "(BindMatrixTranspose,BindMatrixTranspose)",
        "(BindrlGetFramebufferHeight,BindrlGetFramebufferHeight)",
        "(BindMatrixRotateXYZ,BindMatrixRotateXYZ)",
        "(BindGetGestureDragAngle,BindGetGestureDragAngle)",
        "(BindVector2Clamp,BindVector2Clamp)",
        "(BindGenImageWhiteNoise,BindGenImageWhiteNoise)",
        "(BindSetMousePosition,BindSetMousePosition)",
        "(BindVector3OrthoNormalize,BindVector3OrthoNormalize)",
        "(BindDrawCubeWires,BindDrawCubeWires)",
        "(BindVector3CrossProduct,BindVector3CrossProduct)",
        "(BindrlDrawVertexArray,BindrlDrawVertexArray)",
        "(BindResumeAudioStream,BindResumeAudioStream)",
        "(BindDrawCapsuleWires,BindDrawCapsuleWires)",
        "(BindEaseExpoOut,BindEaseExpoOut)",
        "(BindLoadImageFromTexture,BindLoadImageFromTexture)",
        "(BindIsAudioStreamProcessed,BindIsAudioStreamProcessed)",
        "(BindColorNormalize,BindColorNormalize)",
        "(BindQuaternionLerp,BindQuaternionLerp)",
        "(BindrlColor3f,BindrlColor3f)",
        "(BindrlEnableSmoothLines,BindrlEnableSmoothLines)",
        "(BindrlglInit,BindrlglInit)",
        "(BindImageDrawRectangleRec,BindImageDrawRectangleRec)",
        "(BindDrawCube,BindDrawCube)",
        "(BindWaveCrop,BindWaveCrop)",
        "(BindExportMesh,BindExportMesh)",
        "(BindUnloadShader,BindUnloadShader)",
        "(BindGuiSpinner,BindGuiSpinner)",
        "(BindGenMeshSphere,BindGenMeshSphere)",
        "(BindGetMouseWheelMoveV,BindGetMouseWheelMoveV)",
        "(BindrlVertex3f,BindrlVertex3f)",
        "(BindImageResizeCanvas,BindImageResizeCanvas)",
        "(BindVector3Distance,BindVector3Distance)",
        "(BindGuiListView,BindGuiListView)",
        "(BindGuiListViewEx,BindGuiListViewEx)",
        "(BindrlEnableStereoRender,BindrlEnableStereoRender)",
        "(BindUnloadFileText,BindUnloadFileText)",
        "(BindQuaternionAddValue,BindQuaternionAddValue)",
        "(BindBeginDrawing,BindBeginDrawing)",
        "(BindLoadModelAnimations,BindLoadModelAnimations)",
        "(BindLoadWave,BindLoadWave)",
        "(BindExportImageAsCode,BindExportImageAsCode)",
        "(BindrlDisableStereoRender,BindrlDisableStereoRender)",
        "(BindUnloadTexture,BindUnloadTexture)",
        "(BindVector3DotProduct,BindVector3DotProduct)",
        "(BindSetShaderValueMatrix,BindSetShaderValueMatrix)",
        "(BindBeginTextureMode,BindBeginTextureMode)",
        "(BindBeginMode3D,BindBeginMode3D)",
        "(BindrlClearScreenBuffers,BindrlClearScreenBuffers)",
        "(BindVector2LineAngle,BindVector2LineAngle)",
        "(BindrlUnloadTexture,BindrlUnloadTexture)",
        "(BindImageAlphaClear,BindImageAlphaClear)",
        "(BindDrawCircleLines,BindDrawCircleLines)",
        "(BindUnloadModel,BindUnloadModel)",
        "(BindQuaternionNormalize,BindQuaternionNormalize)",
        "(BindCheckCollisionLines,BindCheckCollisionLines)",
        "(BindGuiColorBarAlpha,BindGuiColorBarAlpha)",
        "(BindGetFileLength,BindGetFileLength)",
        "(BindrlGetMatrixTransform,BindrlGetMatrixTransform)",
        "(BindVector2AddValue,BindVector2AddValue)",
        "(BindSetMusicPan,BindSetMusicPan)",
        "(BindrlDrawRenderBatch,BindrlDrawRenderBatch)",
        "(BindCheckCollisionPointPoly,BindCheckCollisionPointPoly)",
        "(BindImageResize,BindImageResize)",
        "(BindImageDrawCircle,BindImageDrawCircle)",
        "(BindGuiTabBar,BindGuiTabBar)",
        "(BindMatrixTrace,BindMatrixTrace)",
        "(BindVector2Distance,BindVector2Distance)",
        "(BindEaseLinearInOut,BindEaseLinearInOut)",
        "(BindIsFontReady,BindIsFontReady)",
        "(BindGetTime,BindGetTime)",
        "(BindColorToHSV,BindColorToHSV)",
        "(BindImageColorInvert,BindImageColorInvert)",
        "(BindStopAudioStream,BindStopAudioStream)",
        "(BindClamp,BindClamp)",
        "(BindPlayAudioStream,BindPlayAudioStream)",
        "(BindrlDisableScissorTest,BindrlDisableScissorTest)",
        "(BindrlGetMatrixProjectionStereo,BindrlGetMatrixProjectionStereo)",
        "(BindEaseLinearIn,BindEaseLinearIn)",
        "(BindrlDisableTextureCubemap,BindrlDisableTextureCubemap)",
        "(BindEndTextureMode,BindEndTextureMode)",
        "(BindDrawTexturePro,BindDrawTexturePro)",
        "(BindrlPopMatrix,BindrlPopMatrix)",
        "(BindGenImageText,BindGenImageText)",
        "(BindGuiCheckBox,BindGuiCheckBox)",
        "(BindGenImageGradientH,BindGenImageGradientH)",
        "(BindrlSetVertexAttributeDivisor,BindrlSetVertexAttributeDivisor)",
        "(BindrlEnableFramebuffer,BindrlEnableFramebuffer)",
        "(BindGuiDisable,BindGuiDisable)",
        "(BindClearBackground,BindClearBackground)",
        "(BindGetFileNameWithoutExt,BindGetFileNameWithoutExt)",
        "(BindSaveFileData,BindSaveFileData)",
        "(BindDrawLineBezierCubic,BindDrawLineBezierCubic)",
        "(BindEndMode3D,BindEndMode3D)",
        "(BindGetImageAlphaBorder,BindGetImageAlphaBorder)",
        "(BindrlUnloadVertexArray,BindrlUnloadVertexArray)",
        "(BindUnloadWaveSamples,BindUnloadWaveSamples)",
        "(BindrlDisableSmoothLines,BindrlDisableSmoothLines)",
        "(BindMinimizeWindow,BindMinimizeWindow)",
        "(BindGuiToggle,BindGuiToggle)",
        "(BindEaseQuadOut,BindEaseQuadOut)",
        "(BindGuiSlider,BindGuiSlider)",
        "(BindSetGamepadMappings,BindSetGamepadMappings)",
        "(BindSetShaderFloat,BindSetShaderFloat)",
        "(BindVector2Transform,BindVector2Transform)",
        "(BindMatrixRotateY,BindMatrixRotateY)",
        "(BindInitAudioDevice,BindInitAudioDevice)",
        "(BindVector2MoveTowards,BindVector2MoveTowards)",
        "(BindCheckCollisionPointTriangle,BindCheckCollisionPointTriangle)",
        "(BindrlPushMatrix,BindrlPushMatrix)",
        "(BindrlLoadTexture,BindrlLoadTexture)",
        "(BindEaseSineIn,BindEaseSineIn)",
        "(BindMatrixInvert,BindMatrixInvert)",
        "(BindIsGamepadButtonReleased,BindIsGamepadButtonReleased)",
        "(BindGuiColorPanel,BindGuiColorPanel)",
        "(BindLoadDroppedFiles,BindLoadDroppedFiles)",
        "(BindGuiTextBoxMulti,BindGuiTextBoxMulti)",
        "(BindSetShaderValueTexture,BindSetShaderValueTexture)",
        "(BindStopSound,BindStopSound)",
        "(BindVector3ClampValue,BindVector3ClampValue)",
        "(BindMeasureTextEx,BindMeasureTextEx)",
        "(BindGetGesturePinchAngle,BindGetGesturePinchAngle)",
        "(BindImageDrawCircleLines,BindImageDrawCircleLines)",
        "(BindGetMusicTimePlayed,BindGetMusicTimePlayed)",
        "(BindGetRayCollisionSphere,BindGetRayCollisionSphere)",
        "(BindSetWindowMinSize,BindSetWindowMinSize)",
        "(BindSetShaderVec2,BindSetShaderVec2)",
        "(BindDrawLineBezierQuad,BindDrawLineBezierQuad)",
        "(BindVector3Angle,BindVector3Angle)",
        "(BindVector3Transform,BindVector3Transform)",
        "(BindVector2Angle,BindVector2Angle)",
        "(BindMatrixAdd,BindMatrixAdd)",
        "(BindEndBlendMode,BindEndBlendMode)",
        "(BindBeginScissorMode,BindBeginScissorMode)",
        "(BindrlGetFramebufferWidth,BindrlGetFramebufferWidth)",
        "(BindDrawBillboard,BindDrawBillboard)",
        "(BindrlScalef,BindrlScalef)",
        "(BindLoadImageRaw,BindLoadImageRaw)",
        "(BindrlEnableDepthTest,BindrlEnableDepthTest)",
        "(BindExportFontAsCode,BindExportFontAsCode)",
        "(BindVector3Reflect,BindVector3Reflect)",
        "(BindGetMouseDelta,BindGetMouseDelta)",
        "(BindrlEnableTextureCubemap,BindrlEnableTextureCubemap)",
        "(BindSetSoundPan,BindSetSoundPan)",
        "(BindHideCursor,BindHideCursor)",
        "(BindEaseCircInOut,BindEaseCircInOut)",
        "(BindIsWindowReady,BindIsWindowReady)",
        "(BindLoadImagePalette,BindLoadImagePalette)",
        "(BindIsWaveReady,BindIsWaveReady)",
        "(BindLoadDirectoryFiles,BindLoadDirectoryFiles)",
        "(BindSetShaderVec3,BindSetShaderVec3)",
        "(BindSetWindowState,BindSetWindowState)",
        "(BindImageCopy,BindImageCopy)",
        "(BindTextIsEqual,BindTextIsEqual)",
        "(BindDrawCapsule,BindDrawCapsule)",
        "(BindMemAlloc,BindMemAlloc)",
        "(BindrlUpdateShaderBuffer,BindrlUpdateShaderBuffer)",
        "(BindVector3Max,BindVector3Max)",
        "(BindVector2Normalize,BindVector2Normalize)",
        "(BindDrawTriangle,BindDrawTriangle)",
        "(BindSetAudioStreamPitch,BindSetAudioStreamPitch)",
        "(BindEaseQuadIn,BindEaseQuadIn)",
        "(BindIsGamepadButtonUp,BindIsGamepadButtonUp)",
        "(BindQuaternionToEuler,BindQuaternionToEuler)",
        "(BindUnloadDroppedFiles,BindUnloadDroppedFiles)",
        "(BindGetGamepadButtonPressed,BindGetGamepadButtonPressed)",
        "(BindOpenURL,BindOpenURL)",
        "(BindImageColorGrayscale,BindImageColorGrayscale)",
        "(BindEaseCubicIn,BindEaseCubicIn)",
        "(BindImageText,BindImageText)",
        "(BindLoadModelFromMesh,BindLoadModelFromMesh)",
        "(BindMatrixTranslate,BindMatrixTranslate)",
        "(BindGuiLoadIcons,BindGuiLoadIcons)",
        "(BindUnloadAudioStream,BindUnloadAudioStream)",
        "(BindVector3Divide,BindVector3Divide)",
        "(BindUpdateMusicStream,BindUpdateMusicStream)",
        "(BindGuiGetState,BindGuiGetState)",
        "(BindCloseWindow,BindCloseWindow)",
        "(BindGetRenderHeight,BindGetRenderHeight)",
        "(BindGetPixelDataSize,BindGetPixelDataSize)",
        "(BindCloseAudioDevice,BindCloseAudioDevice)",
        "(BindQuaternionSubtractValue,BindQuaternionSubtractValue)",
        "(BindLoadTextureFromImage,BindLoadTextureFromImage)",
        "(BindDrawPlane,BindDrawPlane)",
        "(BindIsAudioStreamPlaying,BindIsAudioStreamPlaying)",
        "(BindMatrixRotate,BindMatrixRotate)",
        "(BindrlColor4ub,BindrlColor4ub)",
        "(BindGetCodepoint,BindGetCodepoint)",
        "(BindSetWindowTitle,BindSetWindowTitle)",
        "(BindrlGetGlTextureFormats,BindrlGetGlTextureFormats)",
        "(BindImageDrawCircleLinesV,BindImageDrawCircleLinesV)",
        "(BindGuiSetStyle,BindGuiSetStyle)",
        "(BindDrawPoly,BindDrawPoly)",
        "(BindEaseElasticIn,BindEaseElasticIn)",
        "(BindVector3Normalize,BindVector3Normalize)",
        "(BindImageDrawLineV,BindImageDrawLineV)",
        "(BindQuaternionDivide,BindQuaternionDivide)",
        "(BindrlBindImageTexture,BindrlBindImageTexture)",
        "(BindLoadTexture,BindLoadTexture)",
        "(BindColorContrast,BindColorContrast)",
        "(BindIsGamepadAvailable,BindIsGamepadAvailable)",
        "(BindGetScreenWidth,BindGetScreenWidth)",
        "(BindGetMouseWheelMove,BindGetMouseWheelMove)",
        "(BindGetRayCollisionTriangle,BindGetRayCollisionTriangle)",
        "(BindImageColorReplace,BindImageColorReplace)",
        "(BindDrawTriangleLines,BindDrawTriangleLines)",
        "(BindVector2DotProduct,BindVector2DotProduct)",
        "(BindQuaternionMultiply,BindQuaternionMultiply)",
        "(BindrlUnloadVertexBuffer,BindrlUnloadVertexBuffer)",
        "(BindQuaternionEquals,BindQuaternionEquals)",
        "(BindVector3One,BindVector3One)",
        "(BindIsPathFile,BindIsPathFile)",
        "(BindImageColorContrast,BindImageColorContrast)",
        "(BindIsMouseButtonPressed,BindIsMouseButtonPressed)",
        "(BindLoadWaveSamples,BindLoadWaveSamples)",
        "(BindGuiSliderBar,BindGuiSliderBar)",
        "(BindrlDrawRenderBatchActive,BindrlDrawRenderBatchActive)",
        "(BindUnloadImagePalette,BindUnloadImagePalette)",
        "(BindIsRenderTextureReady,BindIsRenderTextureReady)",
        "(BindDrawRingLines,BindDrawRingLines)",
        "(BindIsWindowFocused,BindIsWindowFocused)",
        "(BindrlSetUniformMatrix,BindrlSetUniformMatrix)",
        "(BindGetGlyphIndex,BindGetGlyphIndex)",
        "(BindrlUnloadRenderBatch,BindrlUnloadRenderBatch)",
        "(BindQuaternionAdd,BindQuaternionAdd)",
        "(BindTextCopy,BindTextCopy)",
        "(BindLoadImage,BindLoadImage)",
        "(BindDrawPolyLinesEx,BindDrawPolyLinesEx)",
        "(BindrlTexCoord2f,BindrlTexCoord2f)",
        "(BindVector2Reflect,BindVector2Reflect)",
        "(BindColorAlpha,BindColorAlpha)",
        "(BindQuaternionFromEuler,BindQuaternionFromEuler)",
        "(BindVector3Equals,BindVector3Equals)",
        "(BindMatrixOrtho,BindMatrixOrtho)",
        "(BindGetCameraMatrix2D,BindGetCameraMatrix2D)",
        "(BindrlSetVertexAttributeDefault,BindrlSetVertexAttributeDefault)",
        "(BindPauseAudioStream,BindPauseAudioStream)",
        "(BindGetFPS,BindGetFPS)",
        "(BindUnloadFont,BindUnloadFont)",
        "(BindrlSetFramebufferWidth,BindrlSetFramebufferWidth)",
        "(BindGetRayCollisionMesh,BindGetRayCollisionMesh)",
        "(BindrlFramebufferComplete,BindrlFramebufferComplete)",
        "(BindVector2One,BindVector2One)",
        "(BindIsFileDropped,BindIsFileDropped)",
        "(BindDrawLineStrip,BindDrawLineStrip)",
        "(BindGenImageGradientRadial,BindGenImageGradientRadial)",
        "(BindGetWindowPosition,BindGetWindowPosition)",
        "(BindIsTextureReady,BindIsTextureReady)",
        "(BindImageDrawPixel,BindImageDrawPixel)",
        "(BindCodepointToUTF8,BindCodepointToUTF8)",
        "(BindGuiTextInputBox,BindGuiTextInputBox)",
        "(BindrlLoadDrawQuad,BindrlLoadDrawQuad)",
        "(BindSetTextureWrap,BindSetTextureWrap)",
        "(BindIsFileExtension,BindIsFileExtension)",
        "(BindGetCameraMatrix,BindGetCameraMatrix)",
        "(BindDrawEllipseLines,BindDrawEllipseLines)",
        "(BindGenMeshPlane,BindGenMeshPlane)",
        "(BindGuiColorPicker,BindGuiColorPicker)",
        "(BindVector3Min,BindVector3Min)",
        "(BindrlSetLineWidth,BindrlSetLineWidth)",
        "(BindLoadImageColors,BindLoadImageColors)",
        "(BindrlDrawVertexArrayInstanced,BindrlDrawVertexArrayInstanced)",
        "(BindTakeScreenshot,BindTakeScreenshot)",
        "(BindrlLoadDrawCube,BindrlLoadDrawCube)",
        "(BindGuiLock,BindGuiLock)",
        "(BindEaseCircIn,BindEaseCircIn)",
        "(BindIsCursorOnScreen,BindIsCursorOnScreen)",
        "(BindVector2SubtractValue,BindVector2SubtractValue)",
        "(BindGetGesturePinchVector,BindGetGesturePinchVector)",
        "(BindDrawCircle3D,BindDrawCircle3D)",
        "(BindQuaternionFromAxisAngle,BindQuaternionFromAxisAngle)",
        "(BindrlGetShaderBufferSize,BindrlGetShaderBufferSize)",
        "(BindSetWindowSize,BindSetWindowSize)",
        "(BindVector2Length,BindVector2Length)",
        "(BindrlUpdateTexture,BindrlUpdateTexture)",
        "(BindDrawTextCodepoints,BindDrawTextCodepoints)",
        "(BindGetShaderLocation,BindGetShaderLocation)",
        "(BindWrap,BindWrap)",
        "(BindrlGetTextureIdDefault,BindrlGetTextureIdDefault)",
        "(BindrlGetShaderIdDefault,BindrlGetShaderIdDefault)",
        "(BindColorBrightness,BindColorBrightness)",
        "(BindPlayMusicStream,BindPlayMusicStream)",
        "(BindGuiTextBox,BindGuiTextBox)",
        "(BindEndDrawing,BindEndDrawing)",
        "(BindDrawRectangleLinesEx,BindDrawRectangleLinesEx)",
        "(BindDrawRectangleGradientEx,BindDrawRectangleGradientEx)",
        "(BindGenTextureMipmaps,BindGenTextureMipmaps)",
        "(BindImageDrawCircleV,BindImageDrawCircleV)",
        "(BindDrawBillboardRec,BindDrawBillboardRec)",
        "(BindGenMeshPoly,BindGenMeshPoly)",
        "(BindrlBegin,BindrlBegin)",
        "(BindrlEnableBackfaceCulling,BindrlEnableBackfaceCulling)",
        "(BindrlSetBlendFactorsSeparate,BindrlSetBlendFactorsSeparate)",
        "(BindDrawModelWiresEx,BindDrawModelWiresEx)",
        "(BindIsGestureDetected,BindIsGestureDetected)",
        "(BindEaseSineInOut,BindEaseSineInOut)",
        "(BindDrawCylinderWires,BindDrawCylinderWires)",
        "(BindGuiButton,BindGuiButton)",
        "(BindGetTouchPointId,BindGetTouchPointId)",
        "(BindVector2ClampValue,BindVector2ClampValue)",
        "(BindVector3Clamp,BindVector3Clamp)",
        "(BindIsAudioDeviceReady,BindIsAudioDeviceReady)",
        "(BindrlCheckRenderBatchLimit,BindrlCheckRenderBatchLimit)",
        "(BindGetMonitorWidth,BindGetMonitorWidth)",
        "(BindUnloadCodepoints,BindUnloadCodepoints)",
        "(BindSetAudioStreamVolume,BindSetAudioStreamVolume)",
        "(BindUnloadMusicStream,BindUnloadMusicStream)",
        "(BindGuiFade,BindGuiFade)",
        "(BindUnloadModelAnimations,BindUnloadModelAnimations)",
        "(BindPauseSound,BindPauseSound)",
        "(BindDrawModel,BindDrawModel)",
        "(BindLoadMusicStream,BindLoadMusicStream)",
        "(BindVector3Refract,BindVector3Refract)",
        "(BindDrawCubeV,BindDrawCubeV)",
        "(BindImageDrawText,BindImageDrawText)",
        "(BindrlUnloadFramebuffer,BindrlUnloadFramebuffer)",
        "(BindDrawLine3D,BindDrawLine3D)",
        "(BindRestoreWindow,BindRestoreWindow)",
        "(BindMatrixDeterminant,BindMatrixDeterminant)",
        "(BindrlEnableVertexArray,BindrlEnableVertexArray)",
        "(BindImageDrawRectangleV,BindImageDrawRectangleV)",
        "(BindDrawTextureRec,BindDrawTextureRec)",
        "(BindPauseMusicStream,BindPauseMusicStream)",
        "(BindWaitTime,BindWaitTime)",
        "(BindCheckCollisionCircleRec,BindCheckCollisionCircleRec)",
        "(BindSetSoundPitch,BindSetSoundPitch)",
        "(BindVector3RotateByAxisAngle,BindVector3RotateByAxisAngle)",
        "(BindGuiGroupBox,BindGuiGroupBox)",
        "(BindEaseExpoInOut,BindEaseExpoInOut)",
        "(BindSaveFileText,BindSaveFileText)",
        "(BindIsMouseButtonDown,BindIsMouseButtonDown)",
        "(BindIsModelAnimationValid,BindIsModelAnimationValid)",
        "(BindDrawRectangleRounded,BindDrawRectangleRounded)",
        "(BindImageDither,BindImageDither)",
        "(BindrlLoadComputeShaderProgram,BindrlLoadComputeShaderProgram)",
        "(BindDrawSphere,BindDrawSphere)",
        "(BindUploadMesh,BindUploadMesh)",
        "(BindrlNormal3f,BindrlNormal3f)",
        "(BindDecodeDataBase64,BindDecodeDataBase64)",
        "(BindIsWindowResized,BindIsWindowResized)",
        "(BindVector2LengthSqr,BindVector2LengthSqr)",
        "(BindGetMonitorPhysicalHeight,BindGetMonitorPhysicalHeight)",
        "(BindrlClearColor,BindrlClearColor)",
        "(BindGetMonitorPhysicalWidth,BindGetMonitorPhysicalWidth)",
        "(BindDrawRectanglePro,BindDrawRectanglePro)",
        "(BindrlSetShader,BindrlSetShader)",
        "(BindCheckCollisionPointLine,BindCheckCollisionPointLine)",
        "(BindEndMode2D,BindEndMode2D)",
        "(BindGetPixelColor,BindGetPixelColor)",
        "(BindGenImageColor,BindGenImageColor)",
        "(BindColorFromHSV,BindColorFromHSV)",
        "(BindVector3Perpendicular,BindVector3Perpendicular)",
        "(BindImageRotateCCW,BindImageRotateCCW)",
        "(BindEaseElasticInOut,BindEaseElasticInOut)",
        "(BindLerp,BindLerp)",
        "(BindGuiUnlock,BindGuiUnlock)",
        "(BindrlSetBlendFactors,BindrlSetBlendFactors)",
        "(BindEnableCursor,BindEnableCursor)",
        "(BindGetTouchY,BindGetTouchY)",
        "(BindColorToInt,BindColorToInt)",
        "(BindLoadWaveFromMemory,BindLoadWaveFromMemory)",
        "(BindrlCompileShader,BindrlCompileShader)",
        "(BindGenMeshHemiSphere,BindGenMeshHemiSphere)",
        "(BindMaximizeWindow,BindMaximizeWindow)",
        "(BindGetScreenHeight,BindGetScreenHeight)",
        "(BindToggleFullscreen,BindToggleFullscreen)",
        "(BindGetRenderWidth,BindGetRenderWidth)",
        "(BindGetCharPressed,BindGetCharPressed)",
        "(BindUnloadModelAnimation,BindUnloadModelAnimation)",
        "(BindLoadFontEx,BindLoadFontEx)",
        "(BindrlUpdateVertexBufferElements,BindrlUpdateVertexBufferElements)",
        "(BindUnloadRenderTexture,BindUnloadRenderTexture)",
        "(BindImageResizeNN,BindImageResizeNN)",
        "(BindEaseBounceIn,BindEaseBounceIn)",
        "(BindGetGamepadAxisCount,BindGetGamepadAxisCount)",
        "(BindDrawRectangleRoundedLines,BindDrawRectangleRoundedLines)",
        "(BindGetCurrentMonitor,BindGetCurrentMonitor)",
        "(BindGetMonitorName,BindGetMonitorName)",
        "(BindGetWorldToScreen,BindGetWorldToScreen)",
        "(BindGenMeshCone,BindGenMeshCone)",
        "(BindWaveFormat,BindWaveFormat)",
        "(BindSetAudioStreamBufferSizeDefault,BindSetAudioStreamBufferSizeDefault)",
        "(BindGuiLine,BindGuiLine)",
        "(BindrlDisableFramebuffer,BindrlDisableFramebuffer)",
        "(BindColorTint,BindColorTint)",
        "(BindGenMeshCube,BindGenMeshCube)",
        "(BindUpdateTexture,BindUpdateTexture)",
        "(BindUnloadFileData,BindUnloadFileData)",
        "(BindGenImagePerlinNoise,BindGenImagePerlinNoise)",
        "(BindGenImageChecked,BindGenImageChecked)",
        "(BindEaseLinearNone,BindEaseLinearNone)",
        "(BindGuiDropdownBox,BindGuiDropdownBox)",
        "(BindCompressData,BindCompressData)",
        "(BindExportWaveAsCode,BindExportWaveAsCode)",
        "(BindExportDataAsCode,BindExportDataAsCode)",
        "(BindEaseCircOut,BindEaseCircOut)",
        "(BindPollInputEvents,BindPollInputEvents)",
        "(BindDecompressData,BindDecompressData)",
        "(BindFloatEquals,BindFloatEquals)",
        "(BindUnloadUTF8,BindUnloadUTF8)",
        "(BindImageAlphaCrop,BindImageAlphaCrop)",
        "(BindGenMeshCylinder,BindGenMeshCylinder)",
        "(BindSetPixelColor,BindSetPixelColor)",
        "(BindTextSplit,BindTextSplit)",
        "(BindEndScissorMode,BindEndScissorMode)",
        "(BindIsKeyUp,BindIsKeyUp)",
        "(BindEaseCubicOut,BindEaseCubicOut)",
        "(BindrlSetBlendMode,BindrlSetBlendMode)",
        "(BindEndShaderMode,BindEndShaderMode)",
        "(BindGetFileModTime,BindGetFileModTime)",
        "(BindGetGamepadAxisMovement,BindGetGamepadAxisMovement)",
        "(BindEnableEventWaiting,BindEnableEventWaiting)",
        "(BindVector2Multiply,BindVector2Multiply)",
        "(BindQuaternionTransform,BindQuaternionTransform)",
        "(BindGetMonitorPosition,BindGetMonitorPosition)",
        "(BindrlReadScreenPixels,BindrlReadScreenPixels)",
        "(BindRemap,BindRemap)",
        "(BindDrawTextureV,BindDrawTextureV)",
        "(BindTextReplace,BindTextReplace)",
        "(BindGetMouseX,BindGetMouseX)",
        "(BindGenMeshKnot,BindGenMeshKnot)",
        "(BindGetScreenToWorld2D,BindGetScreenToWorld2D)",
        "(BindVector3Multiply,BindVector3Multiply)",
        "(BindImageFlipVertical,BindImageFlipVertical)",
        "(BindrlMatrixMode,BindrlMatrixMode)",
        "(BindImageFlipHorizontal,BindImageFlipHorizontal)",
        "(BindGetRayCollisionBox,BindGetRayCollisionBox)",
        "(BindGuiSetIconScale,BindGuiSetIconScale)",
        "(BindrlSetUniformSampler,BindrlSetUniformSampler)",
        "(BindIsKeyDown,BindIsKeyDown)",
        "(BindrlDisableVertexBufferElement,BindrlDisableVertexBufferElement)",
        "(BindrlSetFramebufferHeight,BindrlSetFramebufferHeight)",
        "(BindGuiColorBarHue,BindGuiColorBarHue)",
        "(BindrlFramebufferAttach,BindrlFramebufferAttach)",
        "(BindDrawCubeWiresV,BindDrawCubeWiresV)",
        "(BindIsWindowState,BindIsWindowState)",
        "(BindGetMonitorCount,BindGetMonitorCount)",
        "(BindDrawRectangleV,BindDrawRectangleV)",
        "(BindImageRotateCW,BindImageRotateCW)",
        "(BindGetWorkingDirectory,BindGetWorkingDirectory)",
        "(BindSetConfigFlags,BindSetConfigFlags)",
        "(BindrlGetMatrixViewOffsetStereo,BindrlGetMatrixViewOffsetStereo)",
        "(BindLoadSoundFromWave,BindLoadSoundFromWave)",
        "(BindEaseBounceInOut,BindEaseBounceInOut)",
        "(BindColorAlphaBlend,BindColorAlphaBlend)",
        "(BindGenMeshCubicmap,BindGenMeshCubicmap)",
        "(BindGetFileExtension,BindGetFileExtension)",
        "(BindGuiPanel,BindGuiPanel)",
        "(BindLoadImageAnim,BindLoadImageAnim)",
        "(BindGetKeyPressed,BindGetKeyPressed)",
        "(BindGenImageCellular,BindGenImageCellular)",
        "(BindGetCodepointCount,BindGetCodepointCount)",
        "(BindUnloadImageColors,BindUnloadImageColors)",
        "(BindIsGamepadButtonDown,BindIsGamepadButtonDown)",
        "(BindIsImageReady,BindIsImageReady)",
        "(BindIsWindowMinimized,BindIsWindowMinimized)",
        "(BindrlCubemapParameters,BindrlCubemapParameters)",
        "(BindrlEnableWireMode,BindrlEnableWireMode)",
        "(BindQuaternionSlerp,BindQuaternionSlerp)",
        "(BindrlDisableWireMode,BindrlDisableWireMode)",
        "(BindVector2Zero,BindVector2Zero)",
        "(BindrlSetTexture,BindrlSetTexture)",
        "(BindImageFromImage,BindImageFromImage)",
        "(BindQuaternionScale,BindQuaternionScale)",
        "(BindIsGamepadButtonPressed,BindIsGamepadButtonPressed)",
        "(BindLoadShader,BindLoadShader)",
        "(BindGetShaderLocationAttrib,BindGetShaderLocationAttrib)",
        "(BindImageDrawTextEx,BindImageDrawTextEx)",
        "(BindResumeSound,BindResumeSound)",
        "(BindLoadTextureCubemap,BindLoadTextureCubemap)",
        "(BindVector3Add,BindVector3Add)",
        "(BindrlLoadExtensions,BindrlLoadExtensions)",
        "(BindrlDisableVertexBuffer,BindrlDisableVertexBuffer)",
        "(BindDrawLineBezier,BindDrawLineBezier)",
        "(BindGenMeshTorus,BindGenMeshTorus)",
        "(BindGuiGetStyle,BindGuiGetStyle)",
        "(BindMatrixRotateX,BindMatrixRotateX)",
        "(BindGuiWindowBox,BindGuiWindowBox)",
        "(BindDrawLine,BindDrawLine)",
        "(BindrlGetLocationUniform,BindrlGetLocationUniform)",
        "(BindDrawCylinderEx,BindDrawCylinderEx)",
        "(BindGenImageGradientV,BindGenImageGradientV)",
        "(BindIsMouseButtonReleased,BindIsMouseButtonReleased)",
        "(BindSetClipboardText,BindSetClipboardText)",
        "(BindMatrixLookAt,BindMatrixLookAt)",
        "(BindSetTraceLogLevel,BindSetTraceLogLevel)",
        "(BindGetGlyphAtlasRec,BindGetGlyphAtlasRec)",
        "(BindrlEnableVertexAttribute,BindrlEnableVertexAttribute)",
        "(BindGetRandomValue,BindGetRandomValue)",
        "(BindDrawPixel,BindDrawPixel)",
        "(BindIsKeyPressed,BindIsKeyPressed)",
        "(BindSetMusicVolume,BindSetMusicVolume)",
        "(BindSwapScreenBuffer,BindSwapScreenBuffer)",
        "(BindUpdateAudioStream,BindUpdateAudioStream)",
        "(BindDrawTriangleStrip,BindDrawTriangleStrip)",
        "(BindDrawBillboardPro,BindDrawBillboardPro)",
        "(BindBeginShaderMode,BindBeginShaderMode)",
        "(BindExportWave,BindExportWave)",
        "(BindrlSetMatrixProjection,BindrlSetMatrixProjection)",
        "(BindVector3Lerp,BindVector3Lerp)",
        "(BindGetMouseRay,BindGetMouseRay)",
        "(BindLoadModel,BindLoadModel)",
        "(BindSetRandomSeed,BindSetRandomSeed)",
        "(BindGuiDummyRec,BindGuiDummyRec)",
        "(BindGetWindowHandle,BindGetWindowHandle)",
        "(BindSetShapesTexture,BindSetShapesTexture)",
        "(BindrlViewport,BindrlViewport)",
        "(BindVector2Divide,BindVector2Divide)",
        "(BindCheckCollisionCircles,BindCheckCollisionCircles)",
        "(BindrlTextureParameters,BindrlTextureParameters)",
        "(BindDrawGrid,BindDrawGrid)",
        "(BindShowCursor,BindShowCursor)",
        "(BindIsSoundPlaying,BindIsSoundPlaying)",
        "(BindSetShaderVec4,BindSetShaderVec4)",
        "(BindImageDrawRectangle,BindImageDrawRectangle)",
        "(BindrlEnableVertexBufferElement,BindrlEnableVertexBufferElement)",
        "(BindImageBlurGaussian,BindImageBlurGaussian)",
        "(BindCheckCollisionSpheres,BindCheckCollisionSpheres)",
        "(BindIsWindowHidden,BindIsWindowHidden)",
        "(BindChangeDirectory,BindChangeDirectory)",
        "(BindGetWorldToScreen2D,BindGetWorldToScreen2D)",
        "(BindCheckCollisionPointRec,BindCheckCollisionPointRec)",
        "(BindVector2Lerp,BindVector2Lerp)",
        "(BindSetWindowMonitor,BindSetWindowMonitor)",
        "(BindGetMousePosition,BindGetMousePosition)",
        "(BindBeginBlendMode,BindBeginBlendMode)",
        "(BindGuiDisableTooltip,BindGuiDisableTooltip)",
        "(BindGetFrameTime,BindGetFrameTime)",
        "(BindVector3Barycenter,BindVector3Barycenter)",
        "(BindIsWindowMaximized,BindIsWindowMaximized)",
        "(BindrlGetLineWidth,BindrlGetLineWidth)",
        "(BindrlActiveTextureSlot,BindrlActiveTextureSlot)",
        "(BindGuiToggleGroup,BindGuiToggleGroup)",
        "(BindGetCodepointNext,BindGetCodepointNext)",
        "(BindDrawText,BindDrawText)",
        "(BindrlDisableVertexAttribute,BindrlDisableVertexAttribute)",
        "(BindGuiGetIcons,BindGuiGetIcons)",
        "(BindTextToLower,BindTextToLower)",
        "(BindrlVertex2i,BindrlVertex2i)",
        "(BindQuaternionFromMatrix,BindQuaternionFromMatrix)",
        "(BindFileExists,BindFileExists)",
        "(BindCheckCollisionBoxes,BindCheckCollisionBoxes)",
        "(BindVector3Zero,BindVector3Zero)",
        "(BindUnloadSound,BindUnloadSound)",
        "(BindrlSetMatrixProjectionStereo,BindrlSetMatrixProjectionStereo)",
        "(BindrlSetMatrixModelview,BindrlSetMatrixModelview)",
        "(BindGetColor,BindGetColor)",
        "(BindUnloadFontData,BindUnloadFontData)",
        "(BindGuiMessageBox,BindGuiMessageBox)",
        "(BindLoadImageFromScreen,BindLoadImageFromScreen)",
        "(BindDrawTriangleStrip3D,BindDrawTriangleStrip3D)",
        "(BindrlLoadFramebuffer,BindrlLoadFramebuffer)",
        "(BindCheckCollisionRecs,BindCheckCollisionRecs)",
        "(BindLoadCodepoints,BindLoadCodepoints)",
        "(BindrlEnableColorBlend,BindrlEnableColorBlend)",
        "(BindrlScissor,BindrlScissor)",
        "(BindGuiComboBox,BindGuiComboBox)",
        "(BindrlFrustum,BindrlFrustum)",
        "(BindSetTextureFilter,BindSetTextureFilter)",
        "(BindIsAudioStreamReady,BindIsAudioStreamReady)",
        "(BindDrawPixelV,BindDrawPixelV)",
        "(BindImageCrop,BindImageCrop)",
        "(BindGuiSetTooltip,BindGuiSetTooltip)",
        "(BindrlGetVersion,BindrlGetVersion)",
        "(BindSetMouseCursor,BindSetMouseCursor)",
        "(BindUpdateModelAnimation,BindUpdateModelAnimation)",
        "(BindDrawTextEx,BindDrawTextEx)",
        "(BindDrawCircleSector,BindDrawCircleSector)",
        "(BindGetRayCollisionQuad,BindGetRayCollisionQuad)",
        "(BindrlLoadRenderBatch,BindrlLoadRenderBatch)",
        "(BindQuaternionLength,BindQuaternionLength)",
        "(BindDisableCursor,BindDisableCursor)",
        "(BindGuiLoadStyleDefault,BindGuiLoadStyleDefault)",
        "(BindGetMouseY,BindGetMouseY)",
        "(BindDrawPoint3D,BindDrawPoint3D)",
        "(BindLoadAudioStream,BindLoadAudioStream)",
        "(BindDrawCircleV,BindDrawCircleV)",
        "(BindDrawRectangle,BindDrawRectangle)",
        "(BindGetGlyphInfo,BindGetGlyphInfo)",
        "(BindNormalize,BindNormalize)",
        "(BindStopMusicStream,BindStopMusicStream)",
        "(BindrlActiveDrawBuffers,BindrlActiveDrawBuffers)",
        "(BindVector3Negate,BindVector3Negate)",
        "(BindSeekMusicStream,BindSeekMusicStream)",
        "(BindDrawSphereEx,BindDrawSphereEx)",
        "(BindLoadFileData,BindLoadFileData)",
        "(BindrlLoadShaderBuffer,BindrlLoadShaderBuffer)",
        "(BindIsModelReady,BindIsModelReady)",
        "(BindGetCollisionRec,BindGetCollisionRec)",
        "(BindEaseLinearOut,BindEaseLinearOut)",
        "(BindGetClipboardText,BindGetClipboardText)",
        "(BindrlEnableTexture,BindrlEnableTexture)",
        "(BindrlDisableColorBlend,BindrlDisableColorBlend)",
        "(BindLoadFontFromImage,BindLoadFontFromImage)",
        "(BindSetGesturesEnabled,BindSetGesturesEnabled)",
        "(BindGetGamepadName,BindGetGamepadName)",
        "(BindEaseBackInOut,BindEaseBackInOut)"
      ],
      "Charon": [
        "(BindInitWindow,BindInitWindow)",
        "(BindWindowShouldClose,BindWindowShouldClose)",
        "(BindCloseWindow,BindCloseWindow)",
        "(BindIsWindowReady,BindIsWindowReady)",
        "(BindIsWindowFullscreen,BindIsWindowFullscreen)",
        "(BindIsWindowHidden,BindIsWindowHidden)",
        "(BindIsWindowMinimized,BindIsWindowMinimized)",
        "(BindIsWindowMaximized,BindIsWindowMaximized)",
        "(BindIsWindowFocused,BindIsWindowFocused)",
        "(BindIsWindowResized,BindIsWindowResized)",
        "(BindIsWindowState,BindIsWindowState)",
        "(BindSetWindowState,BindSetWindowState)",
        "(BindClearWindowState,BindClearWindowState)",
        "(BindToggleFullscreen,BindToggleFullscreen)",
        "(BindMaximizeWindow,BindMaximizeWindow)",
        "(BindMinimizeWindow,BindMinimizeWindow)",
        "(BindRestoreWindow,BindRestoreWindow)",
        "(BindSetWindowIcon,BindSetWindowIcon)",
        "(BindSetWindowIcons,BindSetWindowIcons)",
        "(BindSetWindowTitle,BindSetWindowTitle)",
        "(BindSetWindowPosition,BindSetWindowPosition)",
        "(BindSetWindowMonitor,BindSetWindowMonitor)",
        "(BindSetWindowMinSize,BindSetWindowMinSize)",
        "(BindSetWindowSize,BindSetWindowSize)",
        "(BindSetWindowOpacity,BindSetWindowOpacity)",
        "(BindGetWindowHandle,BindGetWindowHandle)",
        "(BindGetScreenWidth,BindGetScreenWidth)",
        "(BindGetScreenHeight,BindGetScreenHeight)",
        "(BindGetRenderWidth,BindGetRenderWidth)",
        "(BindGetRenderHeight,BindGetRenderHeight)",
        "(BindGetMonitorCount,BindGetMonitorCount)",
        "(BindGetCurrentMonitor,BindGetCurrentMonitor)",
        "(BindGetMonitorPosition,BindGetMonitorPosition)",
        "(BindGetMonitorWidth,BindGetMonitorWidth)",
        "(BindGetMonitorHeight,BindGetMonitorHeight)",
        "(BindGetMonitorPhysicalWidth,BindGetMonitorPhysicalWidth)",
        "(BindGetMonitorPhysicalHeight,BindGetMonitorPhysicalHeight)",
        "(BindGetMonitorRefreshRate,BindGetMonitorRefreshRate)",
        "(BindGetWindowPosition,BindGetWindowPosition)",
        "(BindGetWindowScaleDPI,BindGetWindowScaleDPI)",
        "(BindGetMonitorName,BindGetMonitorName)",
        "(BindSetClipboardText,BindSetClipboardText)",
        "(BindGetClipboardText,BindGetClipboardText)",
        "(BindEnableEventWaiting,BindEnableEventWaiting)",
        "(BindDisableEventWaiting,BindDisableEventWaiting)",
        "(BindSwapScreenBuffer,BindSwapScreenBuffer)",
        "(BindPollInputEvents,BindPollInputEvents)",
        "(BindWaitTime,BindWaitTime)",
        "(BindShowCursor,BindShowCursor)",
        "(BindHideCursor,BindHideCursor)",
        "(BindIsCursorHidden,BindIsCursorHidden)",
        "(BindEnableCursor,BindEnableCursor)",
        "(BindDisableCursor,BindDisableCursor)",
        "(BindIsCursorOnScreen,BindIsCursorOnScreen)",
        "(BindClearBackground,BindClearBackground)",
        "(BindBeginDrawing,BindBeginDrawing)",
        "(BindEndDrawing,BindEndDrawing)",
        "(BindBeginMode2D,BindBeginMode2D)",
        "(BindEndMode2D,BindEndMode2D)",
        "(BindBeginMode3D,BindBeginMode3D)",
        "(BindEndMode3D,BindEndMode3D)",
        "(BindBeginTextureMode,BindBeginTextureMode)",
        "(BindEndTextureMode,BindEndTextureMode)",
        "(BindBeginShaderMode,BindBeginShaderMode)",
        "(BindEndShaderMode,BindEndShaderMode)",
        "(BindBeginBlendMode,BindBeginBlendMode)",
        "(BindEndBlendMode,BindEndBlendMode)",
        "(BindBeginScissorMode,BindBeginScissorMode)",
        "(BindEndScissorMode,BindEndScissorMode)",
        "(BindEndVrStereoMode,BindEndVrStereoMode)",
        "(BindLoadShader,BindLoadShader)",
        "(BindLoadShaderFromMemory,BindLoadShaderFromMemory)",
        "(BindIsShaderReady,BindIsShaderReady)",
        "(BindGetShaderLocation,BindGetShaderLocation)",
        "(BindGetShaderLocationAttrib,BindGetShaderLocationAttrib)",
        "(BindSetShaderValueMatrix,BindSetShaderValueMatrix)",
        "(BindSetShaderValueTexture,BindSetShaderValueTexture)",
        "(BindUnloadShader,BindUnloadShader)",
        "(BindGetMouseRay,BindGetMouseRay)",
        "(BindGetCameraMatrix,BindGetCameraMatrix)",
        "(BindGetCameraMatrix2D,BindGetCameraMatrix2D)",
        "(BindGetWorldToScreen,BindGetWorldToScreen)",
        "(BindGetScreenToWorld2D,BindGetScreenToWorld2D)",
        "(BindGetWorldToScreenEx,BindGetWorldToScreenEx)",
        "(BindGetWorldToScreen2D,BindGetWorldToScreen2D)",
        "(BindSetTargetFPS,BindSetTargetFPS)",
        "(BindGetFPS,BindGetFPS)",
        "(BindGetFrameTime,BindGetFrameTime)",
        "(BindGetTime,BindGetTime)",
        "(BindGetRandomValue,BindGetRandomValue)",
        "(BindSetRandomSeed,BindSetRandomSeed)",
        "(BindTakeScreenshot,BindTakeScreenshot)",
        "(BindSetConfigFlags,BindSetConfigFlags)",
        "(BindSetTraceLogLevel,BindSetTraceLogLevel)",
        "(BindMemAlloc,BindMemAlloc)",
        "(BindMemRealloc,BindMemRealloc)",
        "(BindMemFree,BindMemFree)",
        "(BindOpenURL,BindOpenURL)",
        "(BindLoadFileData,BindLoadFileData)",
        "(BindUnloadFileData,BindUnloadFileData)",
        "(BindSaveFileData,BindSaveFileData)",
        "(BindExportDataAsCode,BindExportDataAsCode)",
        "(BindLoadFileText,BindLoadFileText)",
        "(BindUnloadFileText,BindUnloadFileText)",
        "(BindSaveFileText,BindSaveFileText)",
        "(BindFileExists,BindFileExists)",
        "(BindDirectoryExists,BindDirectoryExists)",
        "(BindIsFileExtension,BindIsFileExtension)",
        "(BindGetFileLength,BindGetFileLength)",
        "(BindGetFileExtension,BindGetFileExtension)",
        "(BindGetFileName,BindGetFileName)",
        "(BindGetFileNameWithoutExt,BindGetFileNameWithoutExt)",
        "(BindGetDirectoryPath,BindGetDirectoryPath)",
        "(BindGetPrevDirectoryPath,BindGetPrevDirectoryPath)",
        "(BindGetWorkingDirectory,BindGetWorkingDirectory)",
        "(BindGetApplicationDirectory,BindGetApplicationDirectory)",
        "(BindChangeDirectory,BindChangeDirectory)",
        "(BindIsPathFile,BindIsPathFile)",
        "(BindLoadDirectoryFiles,BindLoadDirectoryFiles)",
        "(BindLoadDirectoryFilesEx,BindLoadDirectoryFilesEx)",
        "(BindUnloadDirectoryFiles,BindUnloadDirectoryFiles)",
        "(BindIsFileDropped,BindIsFileDropped)",
        "(BindLoadDroppedFiles,BindLoadDroppedFiles)",
        "(BindUnloadDroppedFiles,BindUnloadDroppedFiles)",
        "(BindGetFileModTime,BindGetFileModTime)",
        "(BindCompressData,BindCompressData)",
        "(BindDecompressData,BindDecompressData)",
        "(BindEncodeDataBase64,BindEncodeDataBase64)",
        "(BindDecodeDataBase64,BindDecodeDataBase64)",
        "(BindIsKeyPressed,BindIsKeyPressed)",
        "(BindIsKeyDown,BindIsKeyDown)",
        "(BindIsKeyReleased,BindIsKeyReleased)",
        "(BindIsKeyUp,BindIsKeyUp)",
        "(BindSetExitKey,BindSetExitKey)",
        "(BindGetKeyPressed,BindGetKeyPressed)",
        "(BindGetCharPressed,BindGetCharPressed)",
        "(BindIsGamepadAvailable,BindIsGamepadAvailable)",
        "(BindGetGamepadName,BindGetGamepadName)",
        "(BindIsGamepadButtonPressed,BindIsGamepadButtonPressed)",
        "(BindIsGamepadButtonDown,BindIsGamepadButtonDown)",
        "(BindIsGamepadButtonReleased,BindIsGamepadButtonReleased)",
        "(BindIsGamepadButtonUp,BindIsGamepadButtonUp)",
        "(BindGetGamepadButtonPressed,BindGetGamepadButtonPressed)",
        "(BindGetGamepadAxisCount,BindGetGamepadAxisCount)",
        "(BindGetGamepadAxisMovement,BindGetGamepadAxisMovement)",
        "(BindSetGamepadMappings,BindSetGamepadMappings)",
        "(BindIsMouseButtonPressed,BindIsMouseButtonPressed)",
        "(BindIsMouseButtonDown,BindIsMouseButtonDown)",
        "(BindIsMouseButtonReleased,BindIsMouseButtonReleased)",
        "(BindIsMouseButtonUp,BindIsMouseButtonUp)",
        "(BindGetMouseX,BindGetMouseX)",
        "(BindGetMouseY,BindGetMouseY)",
        "(BindGetMousePosition,BindGetMousePosition)",
        "(BindGetMouseDelta,BindGetMouseDelta)",
        "(BindSetMousePosition,BindSetMousePosition)",
        "(BindSetMouseOffset,BindSetMouseOffset)",
        "(BindSetMouseScale,BindSetMouseScale)",
        "(BindGetMouseWheelMove,BindGetMouseWheelMove)",
        "(BindGetMouseWheelMoveV,BindGetMouseWheelMoveV)",
        "(BindSetMouseCursor,BindSetMouseCursor)",
        "(BindGetTouchX,BindGetTouchX)",
        "(BindGetTouchY,BindGetTouchY)",
        "(BindGetTouchPosition,BindGetTouchPosition)",
        "(BindGetTouchPointId,BindGetTouchPointId)",
        "(BindGetTouchPointCount,BindGetTouchPointCount)",
        "(BindSetGesturesEnabled,BindSetGesturesEnabled)",
        "(BindIsGestureDetected,BindIsGestureDetected)",
        "(BindGetGestureDetected,BindGetGestureDetected)",
        "(BindGetGestureHoldDuration,BindGetGestureHoldDuration)",
        "(BindGetGestureDragVector,BindGetGestureDragVector)",
        "(BindGetGestureDragAngle,BindGetGestureDragAngle)",
        "(BindGetGesturePinchVector,BindGetGesturePinchVector)",
        "(BindGetGesturePinchAngle,BindGetGesturePinchAngle)",
        "(BindUpdateCamera,BindUpdateCamera)",
        "(BindUpdateCameraPro,BindUpdateCameraPro)",
        "(BindSetShapesTexture,BindSetShapesTexture)",
        "(BindDrawPixel,BindDrawPixel)",
        "(BindDrawPixelV,BindDrawPixelV)",
        "(BindDrawLine,BindDrawLine)",
        "(BindDrawLineV,BindDrawLineV)",
        "(BindDrawLineEx,BindDrawLineEx)",
        "(BindDrawLineBezier,BindDrawLineBezier)",
        "(BindDrawLineBezierQuad,BindDrawLineBezierQuad)",
        "(BindDrawLineBezierCubic,BindDrawLineBezierCubic)",
        "(BindDrawLineStrip,BindDrawLineStrip)",
        "(BindDrawCircle,BindDrawCircle)",
        "(BindDrawCircleSector,BindDrawCircleSector)",
        "(BindDrawCircleSectorLines,BindDrawCircleSectorLines)",
        "(BindDrawCircleGradient,BindDrawCircleGradient)",
        "(BindDrawCircleV,BindDrawCircleV)",
        "(BindDrawCircleLines,BindDrawCircleLines)",
        "(BindDrawEllipse,BindDrawEllipse)",
        "(BindDrawEllipseLines,BindDrawEllipseLines)",
        "(BindDrawRing,BindDrawRing)",
        "(BindDrawRingLines,BindDrawRingLines)",
        "(BindDrawRectangle,BindDrawRectangle)",
        "(BindDrawRectangleV,BindDrawRectangleV)",
        "(BindDrawRectangleRec,BindDrawRectangleRec)",
        "(BindDrawRectanglePro,BindDrawRectanglePro)",
        "(BindDrawRectangleGradientV,BindDrawRectangleGradientV)",
        "(BindDrawRectangleGradientH,BindDrawRectangleGradientH)",
        "(BindDrawRectangleGradientEx,BindDrawRectangleGradientEx)",
        "(BindDrawRectangleLines,BindDrawRectangleLines)",
        "(BindDrawRectangleLinesEx,BindDrawRectangleLinesEx)",
        "(BindDrawRectangleRounded,BindDrawRectangleRounded)",
        "(BindDrawRectangleRoundedLines,BindDrawRectangleRoundedLines)",
        "(BindDrawTriangle,BindDrawTriangle)",
        "(BindDrawTriangleLines,BindDrawTriangleLines)",
        "(BindDrawTriangleFan,BindDrawTriangleFan)",
        "(BindDrawTriangleStrip,BindDrawTriangleStrip)",
        "(BindDrawPoly,BindDrawPoly)",
        "(BindDrawPolyLines,BindDrawPolyLines)",
        "(BindDrawPolyLinesEx,BindDrawPolyLinesEx)",
        "(BindCheckCollisionRecs,BindCheckCollisionRecs)",
        "(BindCheckCollisionCircles,BindCheckCollisionCircles)",
        "(BindCheckCollisionCircleRec,BindCheckCollisionCircleRec)",
        "(BindCheckCollisionPointRec,BindCheckCollisionPointRec)",
        "(BindCheckCollisionPointCircle,BindCheckCollisionPointCircle)",
        "(BindCheckCollisionPointTriangle,BindCheckCollisionPointTriangle)",
        "(BindCheckCollisionPointPoly,BindCheckCollisionPointPoly)",
        "(BindCheckCollisionLines,BindCheckCollisionLines)",
        "(BindCheckCollisionPointLine,BindCheckCollisionPointLine)",
        "(BindGetCollisionRec,BindGetCollisionRec)",
        "(BindLoadImage,BindLoadImage)",
        "(BindLoadImageRaw,BindLoadImageRaw)",
        "(BindLoadImageAnim,BindLoadImageAnim)",
        "(BindLoadImageFromMemory,BindLoadImageFromMemory)",
        "(BindLoadImageFromTexture,BindLoadImageFromTexture)",
        "(BindLoadImageFromScreen,BindLoadImageFromScreen)",
        "(BindIsImageReady,BindIsImageReady)",
        "(BindUnloadImage,BindUnloadImage)",
        "(BindExportImage,BindExportImage)",
        "(BindExportImageAsCode,BindExportImageAsCode)",
        "(BindGenImageColor,BindGenImageColor)",
        "(BindGenImageGradientV,BindGenImageGradientV)",
        "(BindGenImageGradientH,BindGenImageGradientH)",
        "(BindGenImageGradientRadial,BindGenImageGradientRadial)",
        "(BindGenImageChecked,BindGenImageChecked)",
        "(BindGenImageWhiteNoise,BindGenImageWhiteNoise)",
        "(BindGenImagePerlinNoise,BindGenImagePerlinNoise)",
        "(BindGenImageCellular,BindGenImageCellular)",
        "(BindGenImageText,BindGenImageText)",
        "(BindImageCopy,BindImageCopy)",
        "(BindImageFromImage,BindImageFromImage)",
        "(BindImageText,BindImageText)",
        "(BindImageTextEx,BindImageTextEx)",
        "(BindImageFormat,BindImageFormat)",
        "(BindImageToPOT,BindImageToPOT)",
        "(BindImageCrop,BindImageCrop)",
        "(BindImageAlphaCrop,BindImageAlphaCrop)",
        "(BindImageAlphaClear,BindImageAlphaClear)",
        "(BindImageAlphaMask,BindImageAlphaMask)",
        "(BindImageAlphaPremultiply,BindImageAlphaPremultiply)",
        "(BindImageBlurGaussian,BindImageBlurGaussian)",
        "(BindImageResize,BindImageResize)",
        "(BindImageResizeNN,BindImageResizeNN)",
        "(BindImageResizeCanvas,BindImageResizeCanvas)",
        "(BindImageMipmaps,BindImageMipmaps)",
        "(BindImageDither,BindImageDither)",
        "(BindImageFlipVertical,BindImageFlipVertical)",
        "(BindImageFlipHorizontal,BindImageFlipHorizontal)",
        "(BindImageRotateCW,BindImageRotateCW)",
        "(BindImageRotateCCW,BindImageRotateCCW)",
        "(BindImageColorTint,BindImageColorTint)",
        "(BindImageColorInvert,BindImageColorInvert)",
        "(BindImageColorGrayscale,BindImageColorGrayscale)",
        "(BindImageColorContrast,BindImageColorContrast)",
        "(BindImageColorBrightness,BindImageColorBrightness)",
        "(BindImageColorReplace,BindImageColorReplace)",
        "(BindLoadImageColors,BindLoadImageColors)",
        "(BindLoadImagePalette,BindLoadImagePalette)",
        "(BindUnloadImageColors,BindUnloadImageColors)",
        "(BindUnloadImagePalette,BindUnloadImagePalette)",
        "(BindGetImageAlphaBorder,BindGetImageAlphaBorder)",
        "(BindGetImageColor,BindGetImageColor)",
        "(BindImageClearBackground,BindImageClearBackground)",
        "(BindImageDrawPixel,BindImageDrawPixel)",
        "(BindImageDrawPixelV,BindImageDrawPixelV)",
        "(BindImageDrawLine,BindImageDrawLine)",
        "(BindImageDrawLineV,BindImageDrawLineV)",
        "(BindImageDrawCircle,BindImageDrawCircle)",
        "(BindImageDrawCircleV,BindImageDrawCircleV)",
        "(BindImageDrawCircleLines,BindImageDrawCircleLines)",
        "(BindImageDrawCircleLinesV,BindImageDrawCircleLinesV)",
        "(BindImageDrawRectangle,BindImageDrawRectangle)",
        "(BindImageDrawRectangleV,BindImageDrawRectangleV)",
        "(BindImageDrawRectangleRec,BindImageDrawRectangleRec)",
        "(BindImageDrawRectangleLines,BindImageDrawRectangleLines)",
        "(BindImageDraw,BindImageDraw)",
        "(BindImageDrawText,BindImageDrawText)",
        "(BindImageDrawTextEx,BindImageDrawTextEx)",
        "(BindLoadTexture,BindLoadTexture)",
        "(BindLoadTextureFromImage,BindLoadTextureFromImage)",
        "(BindLoadTextureCubemap,BindLoadTextureCubemap)",
        "(BindLoadRenderTexture,BindLoadRenderTexture)",
        "(BindIsTextureReady,BindIsTextureReady)",
        "(BindUnloadTexture,BindUnloadTexture)",
        "(BindIsRenderTextureReady,BindIsRenderTextureReady)",
        "(BindUnloadRenderTexture,BindUnloadRenderTexture)",
        "(BindUpdateTexture,BindUpdateTexture)",
        "(BindUpdateTextureRec,BindUpdateTextureRec)",
        "(BindGenTextureMipmaps,BindGenTextureMipmaps)",
        "(BindSetTextureFilter,BindSetTextureFilter)",
        "(BindSetTextureWrap,BindSetTextureWrap)",
        "(BindDrawTexture,BindDrawTexture)",
        "(BindDrawTextureV,BindDrawTextureV)",
        "(BindDrawTextureEx,BindDrawTextureEx)",
        "(BindDrawTextureRec,BindDrawTextureRec)",
        "(BindDrawTexturePro,BindDrawTexturePro)",
        "(BindDrawTextureNPatch,BindDrawTextureNPatch)",
        "(BindFade,BindFade)",
        "(BindColorToInt,BindColorToInt)",
        "(BindColorNormalize,BindColorNormalize)",
        "(BindColorFromNormalized,BindColorFromNormalized)",
        "(BindColorToHSV,BindColorToHSV)",
        "(BindColorFromHSV,BindColorFromHSV)",
        "(BindColorTint,BindColorTint)",
        "(BindColorBrightness,BindColorBrightness)",
        "(BindColorContrast,BindColorContrast)",
        "(BindColorAlpha,BindColorAlpha)",
        "(BindColorAlphaBlend,BindColorAlphaBlend)",
        "(BindGetColor,BindGetColor)",
        "(BindGetPixelColor,BindGetPixelColor)",
        "(BindSetPixelColor,BindSetPixelColor)",
        "(BindGetPixelDataSize,BindGetPixelDataSize)",
        "(BindGetFontDefault,BindGetFontDefault)",
        "(BindLoadFont,BindLoadFont)",
        "(BindLoadFontEx,BindLoadFontEx)",
        "(BindLoadFontFromImage,BindLoadFontFromImage)",
        "(BindLoadFontFromMemory,BindLoadFontFromMemory)",
        "(BindIsFontReady,BindIsFontReady)",
        "(BindLoadFontData,BindLoadFontData)",
        "(BindGenImageFontAtlas,BindGenImageFontAtlas)",
        "(BindUnloadFontData,BindUnloadFontData)",
        "(BindUnloadFont,BindUnloadFont)",
        "(BindExportFontAsCode,BindExportFontAsCode)",
        "(BindDrawFPS,BindDrawFPS)",
        "(BindDrawText,BindDrawText)",
        "(BindDrawTextEx,BindDrawTextEx)",
        "(BindDrawTextPro,BindDrawTextPro)",
        "(BindDrawTextCodepoint,BindDrawTextCodepoint)",
        "(BindDrawTextCodepoints,BindDrawTextCodepoints)",
        "(BindMeasureText,BindMeasureText)",
        "(BindMeasureTextEx,BindMeasureTextEx)",
        "(BindGetGlyphIndex,BindGetGlyphIndex)",
        "(BindGetGlyphInfo,BindGetGlyphInfo)",
        "(BindGetGlyphAtlasRec,BindGetGlyphAtlasRec)",
        "(BindLoadUTF8,BindLoadUTF8)",
        "(BindUnloadUTF8,BindUnloadUTF8)",
        "(BindLoadCodepoints,BindLoadCodepoints)",
        "(BindUnloadCodepoints,BindUnloadCodepoints)",
        "(BindGetCodepointCount,BindGetCodepointCount)",
        "(BindGetCodepoint,BindGetCodepoint)",
        "(BindGetCodepointNext,BindGetCodepointNext)",
        "(BindGetCodepointPrevious,BindGetCodepointPrevious)",
        "(BindCodepointToUTF8,BindCodepointToUTF8)",
        "(BindTextCopy,BindTextCopy)",
        "(BindTextIsEqual,BindTextIsEqual)",
        "(BindTextLength,BindTextLength)",
        "(BindTextSubtext,BindTextSubtext)",
        "(BindTextReplace,BindTextReplace)",
        "(BindTextInsert,BindTextInsert)",
        "(BindTextJoin,BindTextJoin)",
        "(BindTextSplit,BindTextSplit)",
        "(BindTextAppend,BindTextAppend)",
        "(BindTextFindIndex,BindTextFindIndex)",
        "(BindTextToUpper,BindTextToUpper)",
        "(BindTextToLower,BindTextToLower)",
        "(BindTextToPascal,BindTextToPascal)",
        "(BindTextToInteger,BindTextToInteger)",
        "(BindDrawLine3D,BindDrawLine3D)",
        "(BindDrawPoint3D,BindDrawPoint3D)",
        "(BindDrawCircle3D,BindDrawCircle3D)",
        "(BindDrawTriangle3D,BindDrawTriangle3D)",
        "(BindDrawTriangleStrip3D,BindDrawTriangleStrip3D)",
        "(BindDrawCube,BindDrawCube)",
        "(BindDrawCubeV,BindDrawCubeV)",
        "(BindDrawCubeWires,BindDrawCubeWires)",
        "(BindDrawCubeWiresV,BindDrawCubeWiresV)",
        "(BindDrawSphere,BindDrawSphere)",
        "(BindDrawSphereEx,BindDrawSphereEx)",
        "(BindDrawSphereWires,BindDrawSphereWires)",
        "(BindDrawCylinder,BindDrawCylinder)",
        "(BindDrawCylinderEx,BindDrawCylinderEx)",
        "(BindDrawCylinderWires,BindDrawCylinderWires)",
        "(BindDrawCylinderWiresEx,BindDrawCylinderWiresEx)",
        "(BindDrawCapsule,BindDrawCapsule)",
        "(BindDrawCapsuleWires,BindDrawCapsuleWires)",
        "(BindDrawPlane,BindDrawPlane)",
        "(BindDrawRay,BindDrawRay)",
        "(BindDrawGrid,BindDrawGrid)",
        "(BindLoadModel,BindLoadModel)",
        "(BindLoadModelFromMesh,BindLoadModelFromMesh)",
        "(BindIsModelReady,BindIsModelReady)",
        "(BindUnloadModel,BindUnloadModel)",
        "(BindGetModelBoundingBox,BindGetModelBoundingBox)",
        "(BindDrawModel,BindDrawModel)",
        "(BindDrawModelEx,BindDrawModelEx)",
        "(BindDrawModelWires,BindDrawModelWires)",
        "(BindDrawModelWiresEx,BindDrawModelWiresEx)",
        "(BindDrawBoundingBox,BindDrawBoundingBox)",
        "(BindDrawBillboard,BindDrawBillboard)",
        "(BindDrawBillboardRec,BindDrawBillboardRec)",
        "(BindDrawBillboardPro,BindDrawBillboardPro)",
        "(BindUploadMesh,BindUploadMesh)",
        "(BindUpdateMeshBuffer,BindUpdateMeshBuffer)",
        "(BindUnloadMesh,BindUnloadMesh)",
        "(BindExportMesh,BindExportMesh)",
        "(BindGetMeshBoundingBox,BindGetMeshBoundingBox)",
        "(BindGenMeshTangents,BindGenMeshTangents)",
        "(BindGenMeshPoly,BindGenMeshPoly)",
        "(BindGenMeshPlane,BindGenMeshPlane)",
        "(BindGenMeshCube,BindGenMeshCube)",
        "(BindGenMeshSphere,BindGenMeshSphere)",
        "(BindGenMeshHemiSphere,BindGenMeshHemiSphere)",
        "(BindGenMeshCylinder,BindGenMeshCylinder)",
        "(BindGenMeshCone,BindGenMeshCone)",
        "(BindGenMeshTorus,BindGenMeshTorus)",
        "(BindGenMeshKnot,BindGenMeshKnot)",
        "(BindGenMeshHeightmap,BindGenMeshHeightmap)",
        "(BindGenMeshCubicmap,BindGenMeshCubicmap)",
        "(BindSetModelMeshMaterial,BindSetModelMeshMaterial)",
        "(BindLoadModelAnimations,BindLoadModelAnimations)",
        "(BindUpdateModelAnimation,BindUpdateModelAnimation)",
        "(BindUnloadModelAnimation,BindUnloadModelAnimation)",
        "(BindUnloadModelAnimations,BindUnloadModelAnimations)",
        "(BindIsModelAnimationValid,BindIsModelAnimationValid)",
        "(BindCheckCollisionSpheres,BindCheckCollisionSpheres)",
        "(BindCheckCollisionBoxes,BindCheckCollisionBoxes)",
        "(BindCheckCollisionBoxSphere,BindCheckCollisionBoxSphere)",
        "(BindGetRayCollisionSphere,BindGetRayCollisionSphere)",
        "(BindGetRayCollisionBox,BindGetRayCollisionBox)",
        "(BindGetRayCollisionMesh,BindGetRayCollisionMesh)",
        "(BindGetRayCollisionTriangle,BindGetRayCollisionTriangle)",
        "(BindGetRayCollisionQuad,BindGetRayCollisionQuad)",
        "(BindInitAudioDevice,BindInitAudioDevice)",
        "(BindCloseAudioDevice,BindCloseAudioDevice)",
        "(BindIsAudioDeviceReady,BindIsAudioDeviceReady)",
        "(BindSetMasterVolume,BindSetMasterVolume)",
        "(BindLoadWave,BindLoadWave)",
        "(BindLoadWaveFromMemory,BindLoadWaveFromMemory)",
        "(BindIsWaveReady,BindIsWaveReady)",
        "(BindLoadSound,BindLoadSound)",
        "(BindLoadSoundFromWave,BindLoadSoundFromWave)",
        "(BindIsSoundReady,BindIsSoundReady)",
        "(BindUpdateSound,BindUpdateSound)",
        "(BindUnloadWave,BindUnloadWave)",
        "(BindUnloadSound,BindUnloadSound)",
        "(BindExportWave,BindExportWave)",
        "(BindExportWaveAsCode,BindExportWaveAsCode)",
        "(BindPlaySound,BindPlaySound)",
        "(BindStopSound,BindStopSound)",
        "(BindPauseSound,BindPauseSound)",
        "(BindResumeSound,BindResumeSound)",
        "(BindIsSoundPlaying,BindIsSoundPlaying)",
        "(BindSetSoundVolume,BindSetSoundVolume)",
        "(BindSetSoundPitch,BindSetSoundPitch)",
        "(BindSetSoundPan,BindSetSoundPan)",
        "(BindWaveCopy,BindWaveCopy)",
        "(BindWaveCrop,BindWaveCrop)",
        "(BindWaveFormat,BindWaveFormat)",
        "(BindLoadWaveSamples,BindLoadWaveSamples)",
        "(BindUnloadWaveSamples,BindUnloadWaveSamples)",
        "(BindLoadMusicStream,BindLoadMusicStream)",
        "(BindLoadMusicStreamFromMemory,BindLoadMusicStreamFromMemory)",
        "(BindIsMusicReady,BindIsMusicReady)",
        "(BindUnloadMusicStream,BindUnloadMusicStream)",
        "(BindPlayMusicStream,BindPlayMusicStream)",
        "(BindIsMusicStreamPlaying,BindIsMusicStreamPlaying)",
        "(BindUpdateMusicStream,BindUpdateMusicStream)",
        "(BindStopMusicStream,BindStopMusicStream)",
        "(BindPauseMusicStream,BindPauseMusicStream)",
        "(BindResumeMusicStream,BindResumeMusicStream)",
        "(BindSeekMusicStream,BindSeekMusicStream)",
        "(BindSetMusicVolume,BindSetMusicVolume)",
        "(BindSetMusicPitch,BindSetMusicPitch)",
        "(BindSetMusicPan,BindSetMusicPan)",
        "(BindGetMusicTimeLength,BindGetMusicTimeLength)",
        "(BindGetMusicTimePlayed,BindGetMusicTimePlayed)",
        "(BindLoadAudioStream,BindLoadAudioStream)",
        "(BindIsAudioStreamReady,BindIsAudioStreamReady)",
        "(BindUnloadAudioStream,BindUnloadAudioStream)",
        "(BindUpdateAudioStream,BindUpdateAudioStream)",
        "(BindIsAudioStreamProcessed,BindIsAudioStreamProcessed)",
        "(BindPlayAudioStream,BindPlayAudioStream)",
        "(BindPauseAudioStream,BindPauseAudioStream)",
        "(BindResumeAudioStream,BindResumeAudioStream)",
        "(BindIsAudioStreamPlaying,BindIsAudioStreamPlaying)",
        "(BindStopAudioStream,BindStopAudioStream)",
        "(BindSetAudioStreamVolume,BindSetAudioStreamVolume)",
        "(BindSetAudioStreamPitch,BindSetAudioStreamPitch)",
        "(BindSetAudioStreamPan,BindSetAudioStreamPan)",
        "(BindSetAudioStreamBufferSizeDefault,BindSetAudioStreamBufferSizeDefault)",
        "(BindEaseLinearNone,BindEaseLinearNone)",
        "(BindEaseLinearIn,BindEaseLinearIn)",
        "(BindEaseLinearOut,BindEaseLinearOut)",
        "(BindEaseLinearInOut,BindEaseLinearInOut)",
        "(BindEaseSineIn,BindEaseSineIn)",
        "(BindEaseSineOut,BindEaseSineOut)",
        "(BindEaseSineInOut,BindEaseSineInOut)",
        "(BindEaseCircIn,BindEaseCircIn)",
        "(BindEaseCircOut,BindEaseCircOut)",
        "(BindEaseCircInOut,BindEaseCircInOut)",
        "(BindEaseCubicIn,BindEaseCubicIn)",
        "(BindEaseCubicOut,BindEaseCubicOut)",
        "(BindEaseCubicInOut,BindEaseCubicInOut)",
        "(BindEaseQuadIn,BindEaseQuadIn)",
        "(BindEaseQuadOut,BindEaseQuadOut)",
        "(BindEaseQuadInOut,BindEaseQuadInOut)",
        "(BindEaseExpoIn,BindEaseExpoIn)",
        "(BindEaseExpoOut,BindEaseExpoOut)",
        "(BindEaseExpoInOut,BindEaseExpoInOut)",
        "(BindEaseBackIn,BindEaseBackIn)",
        "(BindEaseBackOut,BindEaseBackOut)",
        "(BindEaseBackInOut,BindEaseBackInOut)",
        "(BindEaseBounceOut,BindEaseBounceOut)",
        "(BindEaseBounceIn,BindEaseBounceIn)",
        "(BindEaseBounceInOut,BindEaseBounceInOut)",
        "(BindEaseElasticIn,BindEaseElasticIn)",
        "(BindEaseElasticOut,BindEaseElasticOut)",
        "(BindEaseElasticInOut,BindEaseElasticInOut)",
        "(BindClamp,BindClamp)",
        "(BindLerp,BindLerp)",
        "(BindNormalize,BindNormalize)",
        "(BindRemap,BindRemap)",
        "(BindWrap,BindWrap)",
        "(BindFloatEquals,BindFloatEquals)",
        "(BindVector2Zero,BindVector2Zero)",
        "(BindVector2One,BindVector2One)",
        "(BindVector2Add,BindVector2Add)",
        "(BindVector2AddValue,BindVector2AddValue)",
        "(BindVector2Subtract,BindVector2Subtract)",
        "(BindVector2SubtractValue,BindVector2SubtractValue)",
        "(BindVector2Length,BindVector2Length)",
        "(BindVector2LengthSqr,BindVector2LengthSqr)",
        "(BindVector2DotProduct,BindVector2DotProduct)",
        "(BindVector2Distance,BindVector2Distance)",
        "(BindVector2DistanceSqr,BindVector2DistanceSqr)",
        "(BindVector2Angle,BindVector2Angle)",
        "(BindVector2LineAngle,BindVector2LineAngle)",
        "(BindVector2Scale,BindVector2Scale)",
        "(BindVector2Multiply,BindVector2Multiply)",
        "(BindVector2Negate,BindVector2Negate)",
        "(BindVector2Divide,BindVector2Divide)",
        "(BindVector2Normalize,BindVector2Normalize)",
        "(BindVector2Transform,BindVector2Transform)",
        "(BindVector2Lerp,BindVector2Lerp)",
        "(BindVector2Reflect,BindVector2Reflect)",
        "(BindVector2Rotate,BindVector2Rotate)",
        "(BindVector2MoveTowards,BindVector2MoveTowards)",
        "(BindVector2Invert,BindVector2Invert)",
        "(BindVector2Clamp,BindVector2Clamp)",
        "(BindVector2ClampValue,BindVector2ClampValue)",
        "(BindVector2Equals,BindVector2Equals)",
        "(BindVector3Zero,BindVector3Zero)",
        "(BindVector3One,BindVector3One)",
        "(BindVector3Add,BindVector3Add)",
        "(BindVector3AddValue,BindVector3AddValue)",
        "(BindVector3Subtract,BindVector3Subtract)",
        "(BindVector3SubtractValue,BindVector3SubtractValue)",
        "(BindVector3Scale,BindVector3Scale)",
        "(BindVector3Multiply,BindVector3Multiply)",
        "(BindVector3CrossProduct,BindVector3CrossProduct)",
        "(BindVector3Perpendicular,BindVector3Perpendicular)",
        "(BindVector3Length,BindVector3Length)",
        "(BindVector3LengthSqr,BindVector3LengthSqr)",
        "(BindVector3DotProduct,BindVector3DotProduct)",
        "(BindVector3Distance,BindVector3Distance)",
        "(BindVector3DistanceSqr,BindVector3DistanceSqr)",
        "(BindVector3Angle,BindVector3Angle)",
        "(BindVector3Negate,BindVector3Negate)",
        "(BindVector3Divide,BindVector3Divide)",
        "(BindVector3Normalize,BindVector3Normalize)",
        "(BindVector3OrthoNormalize,BindVector3OrthoNormalize)",
        "(BindVector3Transform,BindVector3Transform)",
        "(BindVector3RotateByQuaternion,BindVector3RotateByQuaternion)",
        "(BindVector3RotateByAxisAngle,BindVector3RotateByAxisAngle)",
        "(BindVector3Lerp,BindVector3Lerp)",
        "(BindVector3Reflect,BindVector3Reflect)",
        "(BindVector3Min,BindVector3Min)",
        "(BindVector3Max,BindVector3Max)",
        "(BindVector3Barycenter,BindVector3Barycenter)",
        "(BindVector3Unproject,BindVector3Unproject)",
        "(BindVector3Invert,BindVector3Invert)",
        "(BindVector3Clamp,BindVector3Clamp)",
        "(BindVector3ClampValue,BindVector3ClampValue)",
        "(BindVector3Equals,BindVector3Equals)",
        "(BindVector3Refract,BindVector3Refract)",
        "(BindMatrixDeterminant,BindMatrixDeterminant)",
        "(BindMatrixTrace,BindMatrixTrace)",
        "(BindMatrixTranspose,BindMatrixTranspose)",
        "(BindMatrixInvert,BindMatrixInvert)",
        "(BindMatrixIdentity,BindMatrixIdentity)",
        "(BindMatrixAdd,BindMatrixAdd)",
        "(BindMatrixSubtract,BindMatrixSubtract)",
        "(BindMatrixMultiply,BindMatrixMultiply)",
        "(BindMatrixTranslate,BindMatrixTranslate)",
        "(BindMatrixRotate,BindMatrixRotate)",
        "(BindMatrixRotateX,BindMatrixRotateX)",
        "(BindMatrixRotateY,BindMatrixRotateY)",
        "(BindMatrixRotateZ,BindMatrixRotateZ)",
        "(BindMatrixRotateXYZ,BindMatrixRotateXYZ)",
        "(BindMatrixRotateZYX,BindMatrixRotateZYX)",
        "(BindMatrixScale,BindMatrixScale)",
        "(BindMatrixFrustum,BindMatrixFrustum)",
        "(BindMatrixPerspective,BindMatrixPerspective)",
        "(BindMatrixOrtho,BindMatrixOrtho)",
        "(BindMatrixLookAt,BindMatrixLookAt)",
        "(BindQuaternionAdd,BindQuaternionAdd)",
        "(BindQuaternionAddValue,BindQuaternionAddValue)",
        "(BindQuaternionSubtract,BindQuaternionSubtract)",
        "(BindQuaternionSubtractValue,BindQuaternionSubtractValue)",
        "(BindQuaternionIdentity,BindQuaternionIdentity)",
        "(BindQuaternionLength,BindQuaternionLength)",
        "(BindQuaternionNormalize,BindQuaternionNormalize)",
        "(BindQuaternionInvert,BindQuaternionInvert)",
        "(BindQuaternionMultiply,BindQuaternionMultiply)",
        "(BindQuaternionScale,BindQuaternionScale)",
        "(BindQuaternionDivide,BindQuaternionDivide)",
        "(BindQuaternionLerp,BindQuaternionLerp)",
        "(BindQuaternionNlerp,BindQuaternionNlerp)",
        "(BindQuaternionSlerp,BindQuaternionSlerp)",
        "(BindQuaternionFromVector3ToVector3,BindQuaternionFromVector3ToVector3)",
        "(BindQuaternionFromMatrix,BindQuaternionFromMatrix)",
        "(BindQuaternionToMatrix,BindQuaternionToMatrix)",
        "(BindQuaternionFromAxisAngle,BindQuaternionFromAxisAngle)",
        "(BindQuaternionToAxisAngle,BindQuaternionToAxisAngle)",
        "(BindQuaternionFromEuler,BindQuaternionFromEuler)",
        "(BindQuaternionToEuler,BindQuaternionToEuler)",
        "(BindQuaternionTransform,BindQuaternionTransform)",
        "(BindQuaternionEquals,BindQuaternionEquals)",
        "(BindGuiEnable,BindGuiEnable)",
        "(BindGuiDisable,BindGuiDisable)",
        "(BindGuiLock,BindGuiLock)",
        "(BindGuiUnlock,BindGuiUnlock)",
        "(BindGuiIsLocked,BindGuiIsLocked)",
        "(BindGuiFade,BindGuiFade)",
        "(BindGuiSetState,BindGuiSetState)",
        "(BindGuiGetState,BindGuiGetState)",
        "(BindGuiSetFont,BindGuiSetFont)",
        "(BindGuiGetFont,BindGuiGetFont)",
        "(BindGuiSetStyle,BindGuiSetStyle)",
        "(BindGuiGetStyle,BindGuiGetStyle)",
        "(BindGuiWindowBox,BindGuiWindowBox)",
        "(BindGuiGroupBox,BindGuiGroupBox)",
        "(BindGuiLine,BindGuiLine)",
        "(BindGuiPanel,BindGuiPanel)",
        "(BindGuiTabBar,BindGuiTabBar)",
        "(BindGuiScrollPanel,BindGuiScrollPanel)",
        "(BindGuiLabel,BindGuiLabel)",
        "(BindGuiButton,BindGuiButton)",
        "(BindGuiLabelButton,BindGuiLabelButton)",
        "(BindGuiToggle,BindGuiToggle)",
        "(BindGuiToggleGroup,BindGuiToggleGroup)",
        "(BindGuiCheckBox,BindGuiCheckBox)",
        "(BindGuiComboBox,BindGuiComboBox)",
        "(BindGuiDropdownBox,BindGuiDropdownBox)",
        "(BindGuiSpinner,BindGuiSpinner)",
        "(BindGuiValueBox,BindGuiValueBox)",
        "(BindGuiTextBox,BindGuiTextBox)",
        "(BindGuiTextBoxMulti,BindGuiTextBoxMulti)",
        "(BindGuiSlider,BindGuiSlider)",
        "(BindGuiSliderBar,BindGuiSliderBar)",
        "(BindGuiProgressBar,BindGuiProgressBar)",
        "(BindGuiStatusBar,BindGuiStatusBar)",
        "(BindGuiDummyRec,BindGuiDummyRec)",
        "(BindGuiGrid,BindGuiGrid)",
        "(BindGuiListView,BindGuiListView)",
        "(BindGuiListViewEx,BindGuiListViewEx)",
        "(BindGuiMessageBox,BindGuiMessageBox)",
        "(BindGuiTextInputBox,BindGuiTextInputBox)",
        "(BindGuiColorPicker,BindGuiColorPicker)",
        "(BindGuiColorPanel,BindGuiColorPanel)",
        "(BindGuiColorBarAlpha,BindGuiColorBarAlpha)",
        "(BindGuiColorBarHue,BindGuiColorBarHue)",
        "(BindGuiLoadStyle,BindGuiLoadStyle)",
        "(BindGuiLoadStyleDefault,BindGuiLoadStyleDefault)",
        "(BindGuiEnableTooltip,BindGuiEnableTooltip)",
        "(BindGuiDisableTooltip,BindGuiDisableTooltip)",
        "(BindGuiSetTooltip,BindGuiSetTooltip)",
        "(BindGuiIconText,BindGuiIconText)",
        "(BindGuiGetIcons,BindGuiGetIcons)",
        "(BindGuiLoadIcons,BindGuiLoadIcons)",
        "(BindGuiDrawIcon,BindGuiDrawIcon)",
        "(BindGuiSetIconScale,BindGuiSetIconScale)",
        "(BindrlMatrixMode,BindrlMatrixMode)",
        "(BindrlPushMatrix,BindrlPushMatrix)",
        "(BindrlPopMatrix,BindrlPopMatrix)",
        "(BindrlLoadIdentity,BindrlLoadIdentity)",
        "(BindrlTranslatef,BindrlTranslatef)",
        "(BindrlRotatef,BindrlRotatef)",
        "(BindrlScalef,BindrlScalef)",
        "(BindrlMultMatrixf,BindrlMultMatrixf)",
        "(BindrlFrustum,BindrlFrustum)",
        "(BindrlOrtho,BindrlOrtho)",
        "(BindrlViewport,BindrlViewport)",
        "(BindrlBegin,BindrlBegin)",
        "(BindrlEnd,BindrlEnd)",
        "(BindrlVertex2i,BindrlVertex2i)",
        "(BindrlVertex2f,BindrlVertex2f)",
        "(BindrlVertex3f,BindrlVertex3f)",
        "(BindrlTexCoord2f,BindrlTexCoord2f)",
        "(BindrlNormal3f,BindrlNormal3f)",
        "(BindrlColor4ub,BindrlColor4ub)",
        "(BindrlColor3f,BindrlColor3f)",
        "(BindrlColor4f,BindrlColor4f)",
        "(BindrlEnableVertexArray,BindrlEnableVertexArray)",
        "(BindrlDisableVertexArray,BindrlDisableVertexArray)",
        "(BindrlEnableVertexBuffer,BindrlEnableVertexBuffer)",
        "(BindrlDisableVertexBuffer,BindrlDisableVertexBuffer)",
        "(BindrlEnableVertexBufferElement,BindrlEnableVertexBufferElement)",
        "(BindrlDisableVertexBufferElement,BindrlDisableVertexBufferElement)",
        "(BindrlEnableVertexAttribute,BindrlEnableVertexAttribute)",
        "(BindrlDisableVertexAttribute,BindrlDisableVertexAttribute)",
        "(BindrlActiveTextureSlot,BindrlActiveTextureSlot)",
        "(BindrlEnableTexture,BindrlEnableTexture)",
        "(BindrlDisableTexture,BindrlDisableTexture)",
        "(BindrlEnableTextureCubemap,BindrlEnableTextureCubemap)",
        "(BindrlDisableTextureCubemap,BindrlDisableTextureCubemap)",
        "(BindrlTextureParameters,BindrlTextureParameters)",
        "(BindrlCubemapParameters,BindrlCubemapParameters)",
        "(BindrlEnableShader,BindrlEnableShader)",
        "(BindrlDisableShader,BindrlDisableShader)",
        "(BindrlEnableFramebuffer,BindrlEnableFramebuffer)",
        "(BindrlDisableFramebuffer,BindrlDisableFramebuffer)",
        "(BindrlActiveDrawBuffers,BindrlActiveDrawBuffers)",
        "(BindrlEnableColorBlend,BindrlEnableColorBlend)",
        "(BindrlDisableColorBlend,BindrlDisableColorBlend)",
        "(BindrlEnableDepthTest,BindrlEnableDepthTest)",
        "(BindrlDisableDepthTest,BindrlDisableDepthTest)",
        "(BindrlEnableDepthMask,BindrlEnableDepthMask)",
        "(BindrlDisableDepthMask,BindrlDisableDepthMask)",
        "(BindrlEnableBackfaceCulling,BindrlEnableBackfaceCulling)",
        "(BindrlDisableBackfaceCulling,BindrlDisableBackfaceCulling)",
        "(BindrlSetCullFace,BindrlSetCullFace)",
        "(BindrlEnableScissorTest,BindrlEnableScissorTest)",
        "(BindrlDisableScissorTest,BindrlDisableScissorTest)",
        "(BindrlScissor,BindrlScissor)",
        "(BindrlEnableWireMode,BindrlEnableWireMode)",
        "(BindrlDisableWireMode,BindrlDisableWireMode)",
        "(BindrlSetLineWidth,BindrlSetLineWidth)",
        "(BindrlGetLineWidth,BindrlGetLineWidth)",
        "(BindrlEnableSmoothLines,BindrlEnableSmoothLines)",
        "(BindrlDisableSmoothLines,BindrlDisableSmoothLines)",
        "(BindrlEnableStereoRender,BindrlEnableStereoRender)",
        "(BindrlDisableStereoRender,BindrlDisableStereoRender)",
        "(BindrlIsStereoRenderEnabled,BindrlIsStereoRenderEnabled)",
        "(BindrlClearColor,BindrlClearColor)",
        "(BindrlClearScreenBuffers,BindrlClearScreenBuffers)",
        "(BindrlCheckErrors,BindrlCheckErrors)",
        "(BindrlSetBlendMode,BindrlSetBlendMode)",
        "(BindrlSetBlendFactors,BindrlSetBlendFactors)",
        "(BindrlSetBlendFactorsSeparate,BindrlSetBlendFactorsSeparate)",
        "(BindrlglInit,BindrlglInit)",
        "(BindrlglClose,BindrlglClose)",
        "(BindrlLoadExtensions,BindrlLoadExtensions)",
        "(BindrlGetVersion,BindrlGetVersion)",
        "(BindrlSetFramebufferWidth,BindrlSetFramebufferWidth)",
        "(BindrlGetFramebufferWidth,BindrlGetFramebufferWidth)",
        "(BindrlSetFramebufferHeight,BindrlSetFramebufferHeight)",
        "(BindrlGetFramebufferHeight,BindrlGetFramebufferHeight)",
        "(BindrlGetTextureIdDefault,BindrlGetTextureIdDefault)",
        "(BindrlGetShaderIdDefault,BindrlGetShaderIdDefault)",
        "(BindrlGetShaderLocsDefault,BindrlGetShaderLocsDefault)",
        "(BindrlLoadRenderBatch,BindrlLoadRenderBatch)",
        "(BindrlUnloadRenderBatch,BindrlUnloadRenderBatch)",
        "(BindrlDrawRenderBatch,BindrlDrawRenderBatch)",
        "(BindrlSetRenderBatchActive,BindrlSetRenderBatchActive)",
        "(BindrlDrawRenderBatchActive,BindrlDrawRenderBatchActive)",
        "(BindrlCheckRenderBatchLimit,BindrlCheckRenderBatchLimit)",
        "(BindrlSetTexture,BindrlSetTexture)",
        "(BindrlLoadVertexArray,BindrlLoadVertexArray)",
        "(BindrlLoadVertexBuffer,BindrlLoadVertexBuffer)",
        "(BindrlLoadVertexBufferElement,BindrlLoadVertexBufferElement)",
        "(BindrlUpdateVertexBuffer,BindrlUpdateVertexBuffer)",
        "(BindrlUpdateVertexBufferElements,BindrlUpdateVertexBufferElements)",
        "(BindrlUnloadVertexArray,BindrlUnloadVertexArray)",
        "(BindrlUnloadVertexBuffer,BindrlUnloadVertexBuffer)",
        "(BindrlSetVertexAttribute,BindrlSetVertexAttribute)",
        "(BindrlSetVertexAttributeDivisor,BindrlSetVertexAttributeDivisor)",
        "(BindrlSetVertexAttributeDefault,BindrlSetVertexAttributeDefault)",
        "(BindrlDrawVertexArray,BindrlDrawVertexArray)",
        "(BindrlDrawVertexArrayElements,BindrlDrawVertexArrayElements)",
        "(BindrlDrawVertexArrayInstanced,BindrlDrawVertexArrayInstanced)",
        "(BindrlDrawVertexArrayElementsInstanced,BindrlDrawVertexArrayElementsInstanced)",
        "(BindrlLoadTexture,BindrlLoadTexture)",
        "(BindrlLoadTextureDepth,BindrlLoadTextureDepth)",
        "(BindrlLoadTextureCubemap,BindrlLoadTextureCubemap)",
        "(BindrlUpdateTexture,BindrlUpdateTexture)",
        "(BindrlGetGlTextureFormats,BindrlGetGlTextureFormats)",
        "(BindrlGetPixelFormatName,BindrlGetPixelFormatName)",
        "(BindrlUnloadTexture,BindrlUnloadTexture)",
        "(BindrlGenTextureMipmaps,BindrlGenTextureMipmaps)",
        "(BindrlReadTexturePixels,BindrlReadTexturePixels)",
        "(BindrlReadScreenPixels,BindrlReadScreenPixels)",
        "(BindrlLoadFramebuffer,BindrlLoadFramebuffer)",
        "(BindrlFramebufferAttach,BindrlFramebufferAttach)",
        "(BindrlFramebufferComplete,BindrlFramebufferComplete)",
        "(BindrlUnloadFramebuffer,BindrlUnloadFramebuffer)",
        "(BindrlLoadShaderCode,BindrlLoadShaderCode)",
        "(BindrlCompileShader,BindrlCompileShader)",
        "(BindrlLoadShaderProgram,BindrlLoadShaderProgram)",
        "(BindrlUnloadShaderProgram,BindrlUnloadShaderProgram)",
        "(BindrlGetLocationUniform,BindrlGetLocationUniform)",
        "(BindrlGetLocationAttrib,BindrlGetLocationAttrib)",
        "(BindrlSetUniform,BindrlSetUniform)",
        "(BindrlSetUniformMatrix,BindrlSetUniformMatrix)",
        "(BindrlSetUniformSampler,BindrlSetUniformSampler)",
        "(BindrlSetShader,BindrlSetShader)",
        "(BindrlLoadComputeShaderProgram,BindrlLoadComputeShaderProgram)",
        "(BindrlComputeShaderDispatch,BindrlComputeShaderDispatch)",
        "(BindrlLoadShaderBuffer,BindrlLoadShaderBuffer)",
        "(BindrlUnloadShaderBuffer,BindrlUnloadShaderBuffer)",
        "(BindrlUpdateShaderBuffer,BindrlUpdateShaderBuffer)",
        "(BindrlBindShaderBuffer,BindrlBindShaderBuffer)",
        "(BindrlReadShaderBuffer,BindrlReadShaderBuffer)",
        "(BindrlCopyShaderBuffer,BindrlCopyShaderBuffer)",
        "(BindrlGetShaderBufferSize,BindrlGetShaderBufferSize)",
        "(BindrlBindImageTexture,BindrlBindImageTexture)",
        "(BindrlGetMatrixModelview,BindrlGetMatrixModelview)",
        "(BindrlGetMatrixProjection,BindrlGetMatrixProjection)",
        "(BindrlGetMatrixTransform,BindrlGetMatrixTransform)",
        "(BindrlGetMatrixProjectionStereo,BindrlGetMatrixProjectionStereo)",
        "(BindrlGetMatrixViewOffsetStereo,BindrlGetMatrixViewOffsetStereo)",
        "(BindrlSetMatrixProjection,BindrlSetMatrixProjection)",
        "(BindrlSetMatrixModelview,BindrlSetMatrixModelview)",
        "(BindrlSetMatrixProjectionStereo,BindrlSetMatrixProjectionStereo)",
        "(BindrlSetMatrixViewOffsetStereo,BindrlSetMatrixViewOffsetStereo)",
        "(BindrlLoadDrawCube,BindrlLoadDrawCube)",
        "(BindrlLoadDrawQuad,BindrlLoadDrawQuad)",
        "(BindSetShaderFloat,BindSetShaderFloat)",
        "(BindSetShaderInt,BindSetShaderInt)",
        "(BindSetShaderVec2,BindSetShaderVec2)",
        "(BindSetShaderVec3,BindSetShaderVec3)",
        "(BindSetShaderVec4,BindSetShaderVec4)"
      ]
    },
    "raytracer-node": {
      "Gasket": [
        "(raytrace,raytrace)"
      ],
      "Charon": [
        "(raytrace,raytrace)"
      ]
    },
    "rdscpp": {
      "Gasket": [
        "(readLength,readLength)"
      ],
      "Charon": [
        "(0,Number)",
        "(1,Boolean)",
        "(readLength,readLength)"
      ]
    },
    "rdtsc": {
      "Gasket": [
        "(init,init)",
        "(rdtsc,rdtsc)",
        "(setThreadPriority,setThreadPriority)",
        "(mark1,mark1)",
        "(minCycles,_minCycles)",
        "(mark0,mark0)",
        "(getThreadPriority,getThreadPriority)",
        "(getProcessPriority,getProcessPriority)",
        "(setProcessPriority,setProcessPriority)"
      ],
      "Charon": []
    },
    "re2": {
      "Gasket": [
        "(getUtf16Length,GetUtf16Length)",
        "(replace,Replace)",
        "(exec,Exec)",
        "(match,Match)",
        "(search,Search)",
        "(split,Split)",
        "(re2/build/Release/re2,New)",
        "(getUtf8Length,GetUtf8Length)",
        "(toString,ToString)",
        "(test,Test)"
      ],
      "Charon": []
    },
    "real-homedir": {
      "Gasket": [
        "(homedir,GetTrueHomeDir)"
      ],
      "Charon": [
        "(homedir,GetTrueHomeDir)"
      ]
    },
    "reboot": {
      "Gasket": [
        "(reboot,_reboot)",
        "(rebootImmediately,_rebootImmediately)"
      ],
      "Charon": [
        "(reboot,_reboot)",
        "(rebootImmediately,_rebootImmediately)"
      ]
    },
    "@reboot-dev/reboot": {
      "Gasket": [
        "(Task_await,Task_await)",
        "(Context_auth,Context_auth)",
        "(Context_stateId,Context_stateId)",
        "(Servicer_write,Servicer_write)",
        "(Reboot_createExternalContext,Reboot_createExternalContext)",
        "(atLeastOrMostOnce,atLeastOrMostOnce)",
        "(Context_callerBearerToken,Context_callerBearerToken)",
        "(Application_constructor,Application_constructor)",
        "(Reboot_up,Reboot_up)",
        "(initialize,Initialize)",
        "(Service_call,Service_call)",
        "(Context_generateIdempotentStateId,Context_generateIdempotentStateId)",
        "(Reboot_start,Reboot_start)",
        "(Application_run,Application_run)",
        "(Servicer_read,Servicer_read)",
        "(retry_reactively_until,retry_reactively_until)",
        "(ExternalContext_constructor,ExternalContext_constructor)",
        "(Reboot_down,Reboot_down)",
        "(Reboot_stop,Reboot_stop)",
        "(Service_constructor,Service_constructor)",
        "(Context_iteration,Context_iteration)",
        "(Reboot_url,Reboot_url)",
        "(Context_appInternal,Context_appInternal)",
        "(importPy,ImportPy)",
        "(python3Path,python3Path)",
        "(Reboot_constructor,Reboot_constructor)",
        "(Context_cookie,Context_cookie)",
        "(WriterContext_set_sync,WriterContext_set_sync)"
      ],
      "Charon": [
        "(initialize,Initialize)",
        "(importPy,ImportPy)",
        "(python3Path,python3Path)",
        "(Reboot_constructor,Reboot_constructor)",
        "(Reboot_createExternalContext,Reboot_createExternalContext)",
        "(Reboot_start,Reboot_start)",
        "(Reboot_stop,Reboot_stop)",
        "(Reboot_up,Reboot_up)",
        "(Reboot_down,Reboot_down)",
        "(Reboot_url,Reboot_url)",
        "(Service_constructor,Service_constructor)",
        "(Service_call,Service_call)",
        "(Context_auth,Context_auth)",
        "(Context_stateId,Context_stateId)",
        "(Context_callerBearerToken,Context_callerBearerToken)",
        "(Context_iteration,Context_iteration)",
        "(Context_cookie,Context_cookie)",
        "(Context_appInternal,Context_appInternal)",
        "(Context_generateIdempotentStateId,Context_generateIdempotentStateId)",
        "(WriterContext_set_sync,WriterContext_set_sync)",
        "(retry_reactively_until,retry_reactively_until)",
        "(atLeastOrMostOnce,atLeastOrMostOnce)",
        "(Task_await,Task_await)",
        "(ExternalContext_constructor,ExternalContext_constructor)",
        "(Application_constructor,Application_constructor)",
        "(Application_run,Application_run)",
        "(Servicer_read,Servicer_read)",
        "(Servicer_write,Servicer_write)"
      ]
    },
    "@reconbot/bindings-cpp": {
      "Gasket": [
        "(Poller,New)",
        "(close,Close)",
        "(drain,Drain)",
        "(get,Get)",
        "(open,Open)",
        "(poll,poll)",
        "(update,Update)",
        "(stop,stop)",
        "(flush,Flush)",
        "(destroy,destroy)",
        "(getBaudRate,GetBaudRate)",
        "(set,Set)"
      ],
      "Charon": [
        "(poll,poll)",
        "(stop,stop)",
        "(destroy,destroy)",
        "(cts,data)",
        "(dsr,data)",
        "(dcd,data)",
        "(lowLatency,data)",
        "(baudRate,data)",
        "(set,Set)",
        "(get,Get)",
        "(getBaudRate,GetBaudRate)",
        "(open,Open)",
        "(update,Update)",
        "(close,Close)",
        "(flush,Flush)",
        "(drain,Drain)"
      ]
    },
    "rectangle-bin-pack": {
      "Gasket": [
        "(solve,solve)",
        "(solveSync,solveSync)"
      ],
      "Charon": [
        "(solve,solve)",
        "(solveSync,solveSync)"
      ]
    },
    "redis-fast-driver": {
      "Gasket": [
        "(RedisConnector,New)",
        "(redisCmd,RedisCmd)",
        "(disconnect,Disconnect)",
        "(connect,Connect)"
      ],
      "Charon": [
        "(connect,Connect)",
        "(disconnect,Disconnect)",
        "(redisCmd,RedisCmd)"
      ]
    },
    "register-scheme": {
      "Gasket": [
        "(registerProtocolHandler,RPH)"
      ],
      "Charon": []
    },
    "reliance-dicom-dimse-native": {
      "Gasket": [
        "(getScu,DoGet)",
        "(startScp,StartScp)",
        "(echoScu,DoEcho)",
        "(parseFile,DoParse)",
        "(moveScu,DoMove)",
        "(shutdownScu,DoShutdown)",
        "(recompress,DoCompress)",
        "(findScu,DoFind)",
        "(storeScu,DoStore)"
      ],
      "Charon": []
    },
    "reset-date-cache": {
      "Gasket": [
        "(reset,Reset)"
      ],
      "Charon": [
        "(reset,Reset)"
      ]
    },
    "reset-v8-timezone": {
      "Gasket": [
        "(resettz,ResetTz)"
      ],
      "Charon": [
        "(resettz,ResetTz)"
      ]
    },
    "resin-crc-utils": {
      "Gasket": [
        "(crc32_combine_multi,crc32_combine_multi)",
        "(crc32_combine,crc32_combine)"
      ],
      "Charon": [
        "(crc32_combine,crc32_combine)",
        "(crc32_combine_multi,crc32_combine_multi)"
      ]
    },
    "resumable-hash": {
      "Gasket": [
        "(finalizeSync,Finalize)",
        "(finalize,FinalizeAsync)",
        "(update,UpdateAsync)",
        "(Engine,New)",
        "(updateSync,Update)",
        "(serialize,Serialize)"
      ],
      "Charon": [
        "(updateSync,Update)",
        "(update,UpdateAsync)",
        "(finalizeSync,Finalize)",
        "(finalize,FinalizeAsync)",
        "(serialize,Serialize)"
      ]
    },
    "@rev-robotics/rhsplib": {
      "Gasket": [
        "(setDigitalAllOutputs,setDigitalAllOutputs)",
        "(getMotorChannelEnable,getMotorChannelEnable)",
        "(getADC,getADC)",
        "(setPhoneChargeControl,setPhoneChargeControl)",
        "(getMotorAtTarget,getMotorAtTarget)",
        "(getModuleLEDColor,getModuleLEDColor)",
        "(getMotorConstantPower,getMotorConstantPower)",
        "(getServoEnable,getServoEnable)",
        "(getModuleStatus,getModuleStatus)",
        "(setMotorChannelMode,setMotorChannelMode)",
        "(getMotorChannelMode,getMotorChannelMode)",
        "(getInterfacePacketID,getInterfacePacketID)",
        "(injectDataLogHint,injectDataLogHint)",
        "(discoverRevHubs,discoverRevHubs)",
        "(setDigitalSingleOutput,setDigitalSingleOutput)",
        "(writeI2CMultipleBytes,writeI2CMultipleBytes)",
        "(getServoConfiguration,getServoConfiguration)",
        "(setDebugLogLevel,setDebugLogLevel)",
        "(setMotorClosedLoopControlCoefficients,setMotorClosedLoopControlCoefficients)",
        "(setServoEnable,setServoEnable)",
        "(writeI2CSingleByte,writeI2CSingleByte)",
        "(sendKeepAlive,sendKeepAlive)",
        "(getMotorEncoderPosition,getMotorEncoderPosition)",
        "(setResponseTimeoutMs,setResponseTimeoutMs)",
        "(Serial,Serial)",
        "(sendWriteCommandInternal,sendWriteCommandInternal)",
        "(getPhoneChargeControl,getPhoneChargeControl)",
        "(write,write)",
        "(setMotorChannelCurrentAlertLevel,setMotorChannelCurrentAlertLevel)",
        "(setDigitalDirection,setDigitalDirection)",
        "(queryInterface,queryInterface)",
        "(writeI2CReadMultipleBytes,writeI2CReadMultipleBytes)",
        "(setModuleLEDColor,setModuleLEDColor)",
        "(getServoPulseWidth,getServoPulseWidth)",
        "(read,read)",
        "(getMotorChannelCurrentAlertLevel,getMotorChannelCurrentAlertLevel)",
        "(getMotorTargetVelocity,getMotorTargetVelocity)",
        "(sendFailSafe,sendFailSafe)",
        "(sendReadCommand,sendReadCommand)",
        "(getResponseTimeoutMs,getResponseTimeoutMs)",
        "(readVersionString,readVersionString)",
        "(open,open)",
        "(getI2CChannelConfiguration,getI2CChannelConfiguration)",
        "(setMotorTargetVelocity,setMotorTargetVelocity)",
        "(close,close)",
        "(setNewModuleAddress,setNewModuleAddress)",
        "(resetMotorEncoder,resetMotorEncoder)",
        "(setFTDIResetControl,setFTDIResetControl)",
        "(getFTDIResetControl,getFTDIResetControl)",
        "(getDigitalDirection,getDigitalDirection)",
        "(getI2CWriteStatus,getI2CWriteStatus)",
        "(getModuleLEDPattern,getModuleLEDPattern)",
        "(setMotorConstantPower,setMotorConstantPower)",
        "(getMotorClosedLoopControlCoefficients,getMotorClosedLoopControlCoefficients)",
        "(setServoConfiguration,setServoConfiguration)",
        "(setServoPulseWidth,setServoPulseWidth)",
        "(setModuleLEDPattern,setModuleLEDPattern)",
        "(getMotorTargetPosition,getMotorTargetPosition)",
        "(setMotorChannelEnable,setMotorChannelEnable)",
        "(isOpened,isOpened)",
        "(RevHub,RevHub)",
        "(sendReadCommandInternal,sendReadCommandInternal)",
        "(setMotorTargetPosition,setMotorTargetPosition)",
        "(sendWriteCommand,sendWriteCommand)",
        "(getBulkInputData,getBulkInputData)",
        "(readVersion,readVersion)",
        "(readI2CMultipleBytes,readI2CMultipleBytes)",
        "(getDigitalAllInputs,getDigitalAllInputs)",
        "(getDigitalSingleInput,getDigitalSingleInput)",
        "(getDestAddress,getDestAddress)",
        "(setI2CChannelConfiguration,setI2CChannelConfiguration)",
        "(readI2CSingleByte,readI2CSingleByte)",
        "(setDestAddress,setDestAddress)",
        "(getI2CReadStatus,getI2CReadStatus)"
      ],
      "Charon": []
    },
    "rgb565_bmp": {
      "Gasket": [
        "(rgb565_bmp,rgb565_bmp)"
      ],
      "Charon": []
    },
    "@ripreact/hsl": {
      "Gasket": [
        "(hsla,hsla_napi)",
        "(hsl,hsl_napi)"
      ],
      "Charon": []
    },
    "@risingstack/event-loop-stats": {
      "Gasket": [
        "(sense,sense)"
      ],
      "Charon": [
        "(sense,sense)"
      ]
    },
    "@risingstack/gc-stats": {
      "Gasket": [
        "(afterGC,AfterGC)"
      ],
      "Charon": [
        "(pause,data)",
        "(pauseMS,data)",
        "(afterGC,AfterGC)"
      ]
    },
    "@robinsage/eccrypto": {
      "Gasket": [
        "(derive,Derive)"
      ],
      "Charon": [
        "(derive,Derive)"
      ]
    },
    "robotjs": {
      "Gasket": [
        "(getColor,getColor)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(dragMouse,dragMouse)",
        "(mouseToggle,mouseToggle)",
        "(typeString,typeString)",
        "(getPixelColor,getPixelColor)",
        "(setXDisplayName,setXDisplayName)",
        "(mouseClick,mouseClick)",
        "(typeStringDelayed,typeStringDelayed)",
        "(scrollMouse,scrollMouse)",
        "(getXDisplayName,getXDisplayName)",
        "(keyToggle,keyToggle)",
        "(keyTap,keyTap)",
        "(getMousePos,getMousePos)",
        "(captureScreen,captureScreen)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(setMouseDelay,setMouseDelay)",
        "(getScreenSize,getScreenSize)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getColor,getColor)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "robotjsfixed": {
      "Gasket": [
        "(getMousePos,getMousePos)",
        "(mouseToggle,mouseToggle)",
        "(setMouseDelay,setMouseDelay)",
        "(dragMouse,dragMouse)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(typeStringDelayed,typeStringDelayed)",
        "(captureScreen,captureScreen)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(mouseClick,mouseClick)",
        "(setXDisplayName,setXDisplayName)",
        "(keyTap,keyTap)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(moveMouse,moveMouse)",
        "(scrollMouse,scrollMouse)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(typeString,typeString)",
        "(keyToggle,keyToggle)",
        "(getXDisplayName,getXDisplayName)",
        "(getColor,getColor)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getColor,getColor)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "robotjsmonitor": {
      "Gasket": [
        "(getMousePos,getMousePos)",
        "(mouseToggle,mouseToggle)",
        "(setMouseDelay,setMouseDelay)",
        "(dragMouse,dragMouse)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(typeStringDelayed,typeStringDelayed)",
        "(captureScreen,captureScreen)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(mouseClick,mouseClick)",
        "(setXDisplayName,setXDisplayName)",
        "(keyTap,keyTap)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(moveMouse,moveMouse)",
        "(scrollMouse,scrollMouse)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(typeString,typeString)",
        "(keyToggle,keyToggle)",
        "(getXDisplayName,getXDisplayName)",
        "(getColor,getColor)",
        "(unicodeTap,unicodeTap)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(unicodeTap,unicodeTap)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getColor,getColor)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "robotjs-repack": {
      "Gasket": [
        "(setMouseDelay,setMouseDelay)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(typeString,typeString)",
        "(scrollMouse,scrollMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(keyTap,keyTap)",
        "(getColor,getColor)",
        "(getPixelColor,getPixelColor)",
        "(mouseToggle,mouseToggle)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)",
        "(moveMouse,moveMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(getScreenSize,getScreenSize)",
        "(keyToggle,keyToggle)",
        "(dragMouse,dragMouse)",
        "(unicodeTap,unicodeTap)",
        "(captureScreen,captureScreen)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(unicodeTap,unicodeTap)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getColor,getColor)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "@rocicorp/zero-sqlite3": {
      "Gasket": [
        "(columns,JS_columns)",
        "(prepare,JS_prepare)",
        "(StatementIterator,JS_new)",
        "(safeIntegers,JS_safeIntegers)",
        "(expand,JS_expand)",
        "(raw,JS_raw)",
        "(next,JS_next)",
        "(defaultSafeIntegers,JS_defaultSafeIntegers)",
        "(Statement,JS_new)",
        "(pluck,JS_pluck)",
        "(bind,JS_bind)",
        "(Database,JS_new)",
        "(function,JS_function)",
        "(close,JS_close)",
        "(Backup,JS_new)",
        "(iterate,JS_iterate)",
        "(get,JS_get)",
        "(exec,JS_exec)",
        "(return,JS_return)",
        "(serialize,JS_serialize)",
        "(setErrorConstructor,JS_setErrorConstructor)",
        "(aggregate,JS_aggregate)",
        "(run,JS_run)",
        "(backup,JS_backup)",
        "(all,JS_all)",
        "(unsafeMode,JS_unsafeMode)",
        "(transfer,JS_transfer)",
        "(table,JS_table)"
      ],
      "Charon": []
    },
    "rpi-led-matrix": {
      "Gasket": [
        "(drawRect,draw_rect)",
        "(drawBuffer,draw_buffer)",
        "(map,map)",
        "(drawCircle,draw_circle)",
        "(font,font)",
        "(setPixel,set_pixel)",
        "(drawText,draw_text)",
        "(pwmBits,pwm_bits)",
        "(defaultRuntimeOptions,default_runtime_options)",
        "(baseline,baseline)",
        "(drawLine,draw_line)",
        "(fill,fill)",
        "(getAvailablePixelMappers,get_available_pixel_mappers)",
        "(defaultMatrixOptions,default_matrix_options)",
        "(Font,FontAddon)",
        "(luminanceCorrect,luminance_correct)",
        "(name,name)",
        "(afterSync,after_sync)",
        "(sync,sync)",
        "(path,path)",
        "(clear,clear)",
        "(width,width)",
        "(stringWidth,string_width)",
        "(fgColor,fg_color)",
        "(height,height)",
        "(brightness,brightness)",
        "(bgColor,bg_color)",
        "(LedMatrix,LedMatrixAddon)"
      ],
      "Charon": []
    },
    "rpio": {
      "Gasket": [
        "(gpio_event_set,gpio_event_set)",
        "(i2c_end,i2c_end)",
        "(spi_set_cs_polarity,spi_set_cs_polarity)",
        "(gpio_write,gpio_write)",
        "(gpio_read,gpio_read)",
        "(gpio_writebuf,gpio_writebuf)",
        "(pwm_set_data,pwm_set_data)",
        "(spi_write,spi_write)",
        "(i2c_read,i2c_read)",
        "(spi_set_clock_divider,spi_set_clock_divider)",
        "(spi_transfer,spi_transfer)",
        "(rpio_usleep,rpio_usleep)",
        "(gpio_readbuf,gpio_readbuf)",
        "(spi_set_data_mode,spi_set_data_mode)",
        "(i2c_write,i2c_write)",
        "(gpio_pad_write,gpio_pad_write)",
        "(gpio_event_clear,gpio_event_clear)",
        "(pwm_set_mode,pwm_set_mode)",
        "(gpio_pad_read,gpio_pad_read)",
        "(gpio_event_poll,gpio_event_poll)",
        "(rpio_init,rpio_init)",
        "(i2c_set_slave_address,i2c_set_slave_address)",
        "(i2c_read_register_rs,i2c_read_register_rs)",
        "(gpio_function,gpio_function)",
        "(gpio_pud,gpio_pud)",
        "(i2c_begin,i2c_begin)",
        "(i2c_set_baudrate,i2c_set_baudrate)",
        "(pwm_set_range,pwm_set_range)",
        "(rpio_close,rpio_close)",
        "(spi_chip_select,spi_chip_select)",
        "(i2c_write_read_rs,i2c_write_read_rs)",
        "(i2c_set_clock_divider,i2c_set_clock_divider)",
        "(pwm_set_clock,pwm_set_clock)",
        "(spi_end,spi_end)",
        "(spi_begin,spi_begin)"
      ],
      "Charon": []
    },
    "rpio-sunxi": {
      "Gasket": [
        "(i2c_write_read_rs,i2c_write_read_rs)",
        "(spi_set_clock_divider,spi_set_clock_divider)",
        "(i2c_set_clock_divider,i2c_set_clock_divider)",
        "(i2c_write,i2c_write)",
        "(gpio_write,gpio_write)",
        "(i2c_set_slave_address,i2c_set_slave_address)",
        "(spi_chip_select,spi_chip_select)",
        "(spi_set_data_mode,spi_set_data_mode)",
        "(gpio_pad_write,gpio_pad_write)",
        "(i2c_read_register_rs,i2c_read_register_rs)",
        "(spi_transfer,spi_transfer)",
        "(rpio_usleep,rpio_usleep)",
        "(pwm_set_range,pwm_set_range)",
        "(gpio_readbuf,gpio_readbuf)",
        "(pwm_set_clock,pwm_set_clock)",
        "(gpio_writebuf,gpio_writebuf)",
        "(gpio_event_poll,gpio_event_poll)",
        "(pwm_set_mode,pwm_set_mode)",
        "(spi_set_cs_polarity,spi_set_cs_polarity)",
        "(i2c_read,i2c_read)",
        "(gpio_event_set,gpio_event_set)",
        "(gpio_pad_read,gpio_pad_read)",
        "(spi_begin,spi_begin)",
        "(spi_write,spi_write)",
        "(i2c_set_baudrate,i2c_set_baudrate)",
        "(rpio_init,rpio_init)",
        "(gpio_function,gpio_function)",
        "(i2c_end,i2c_end)",
        "(pwm_set_data,pwm_set_data)",
        "(gpio_read,gpio_read)",
        "(rpio_close,rpio_close)",
        "(spi_end,spi_end)",
        "(gpio_pud,gpio_pud)",
        "(i2c_begin,i2c_begin)",
        "(gpio_event_clear,gpio_event_clear)"
      ],
      "Charon": []
    },
    "rpi-ws281x": {
      "Gasket": [
        "(configure,configure)",
        "(reset,reset)",
        "(sleep,sleep)",
        "(render,render)"
      ],
      "Charon": [
        "(configure,Addon)",
        "(render,Addon)",
        "(reset,Addon)",
        "(sleep,Addon)"
      ]
    },
    "rpi-ws281x-native": {
      "Gasket": [
        "(setChannelData,setChannelData)",
        "(setChannelParam,setChannelParam)",
        "(render,render)",
        "(init,init)",
        "(setParam,setParam)",
        "(finalize,finalize)"
      ],
      "Charon": [
        "(init,init)",
        "(setParam,setParam)",
        "(setChannelParam,setChannelParam)",
        "(setChannelData,setChannelData)",
        "(render,render)",
        "(finalize,finalize)"
      ]
    },
    "rsa-keypair": {
      "Gasket": [
        "(generate,Generate)"
      ],
      "Charon": []
    },
    "runas-redux": {
      "Gasket": [
        "(runas,Runas)"
      ],
      "Charon": [
        "(exitCode,Number)",
        "(stdout,String)",
        "(stderr,String)",
        "(runas,Runas)"
      ]
    },
    "rusage2": {
      "Gasket": [
        "(rusage,ReturnUndefined)"
      ],
      "Charon": []
    },
    "@rvagg/blake2": {
      "Gasket": [
        "(blake2s,Blake2s)",
        "(blake2b,Blake2b)"
      ],
      "Charon": [
        "(blake2b,Blake2b)",
        "(blake2s,Blake2s)"
      ]
    },
    "safari-push-notifications": {
      "Gasket": [
        "(verify,Verify)",
        "(sign,Sign)"
      ],
      "Charon": [
        "(sign,Sign)",
        "(verify,Verify)"
      ]
    },
    "@saleae/weak": {
      "Gasket": [
        "(get,Get)",
        "(_setCallback,SetCallback)",
        "(isDead,IsDead)",
        "(_getEmitter,GetEmitter)",
        "(_create,Create)",
        "(isWeakRef,IsWeakRef)"
      ],
      "Charon": [
        "(get,Get)",
        "(isWeakRef,IsWeakRef)",
        "(isDead,IsDead)",
        "(_create,Create)",
        "(_getEmitter,GetEmitter)",
        "(_setCallback,SetCallback)"
      ]
    },
    "@sambhav-gautam/osmemoryallocator": {
      "Gasket": [
        "(malloc,Malloc)",
        "(printStats,PrintStats)",
        "(free,Free)",
        "(finish,Finish)",
        "(get,Get)",
        "(init,Init)"
      ],
      "Charon": []
    },
    "@samebchase/spellchecker": {
      "Gasket": [
        "(Spellchecker,New)"
      ],
      "Charon": [
        "(end,end)",
        "(setDictionary,Spellchecker)",
        "(getAvailableDictionaries,Spellchecker)",
        "(getCorrectionsForMisspelling,Spellchecker)",
        "(isMisspelled,Spellchecker)",
        "(checkSpelling,Spellchecker)",
        "(add,Spellchecker)",
        "(remove,Spellchecker)"
      ]
    },
    "sample-nodejs-function": {
      "Gasket": [
        "(getMsg,Method)"
      ],
      "Charon": []
    },
    "sane_aes128_cbc": {
      "Gasket": [
        "(getDecryptCtx,getDecryptCtx)",
        "(Encrypt,Encrypt)",
        "(setCtxIv,setCtxIv)",
        "(Decrypt,Decrypt)",
        "(getEncryptCtx,getEncryptCtx)"
      ],
      "Charon": []
    },
    "@sapphire/type": {
      "Gasket": [
        "(getPromiseDetails,GetPromiseDetails)",
        "(getProxyDetails,GetProxyDetails)"
      ],
      "Charon": [
        "(getPromiseDetails,GetPromiseDetails)",
        "(getProxyDetails,GetProxyDetails)"
      ]
    },
    "@savearray2/py.js": {
      "Gasket": [
        "($SetUnmarshallingFilter,SetUnmarshallingFilter)",
        "(evalAsFile,EvalAsFile)",
        "(beginFinalize,BeginFinalize)",
        "($IsInstanceOf,IsInstanceOf)",
        "(import,Import)",
        "($GetCurrentThreadID,GetCurrentThreadID)",
        "(init,Initialize)",
        "(eval,Eval)",
        "($SetJSTypeCheckingCallback,SetJSTypeCheckingCallback)",
        "($SetSerializationCallbackConstructor,SetSerializationCallBackConstructor)",
        "($GetMarshaledObject,GetMarshaledObject)",
        "($SetSerializationFilterConstructor,SetSerializationFiltersConstructor)",
        "($SetDebugMessagingCallback,SetDebugMessagingCallback)",
        "(global,Global)",
        "(Tuple,CoerceAsTuple)",
        "(instance,InstanceInformation)",
        "(Integer,CoerceAsInteger)"
      ],
      "Charon": []
    },
    "@savoirfairelinux/node-server-example": {
      "Gasket": [
        "(say_hello,say_hello)"
      ],
      "Charon": []
    },
    "@sbspk/forcefocus": {
      "Gasket": [
        "(focusWindow,FocusWindowExport)"
      ],
      "Charon": [
        "(focusWindow,FocusWindowExport)"
      ]
    },
    "scalc-core": {
      "Gasket": [
        "(napiTokenize,napiTokenize)"
      ],
      "Charon": []
    },
    "scandir-native": {
      "Gasket": [
        "(scandirSync,scandir)",
        "(scandir,scandir)"
      ],
      "Charon": []
    },
    "@schlameel/native-idle-time": {
      "Gasket": [
        "(getMillis,getMillis)"
      ],
      "Charon": [
        "(getMillis,getMillis)"
      ]
    },
    "scrollbar-style": {
      "Gasket": [
        "(ScrollbarStyleObserver,ScrollbarStyleObserver)",
        "(getPreferredScrollbarStyle,GetPreferredScrollbarStyle)"
      ],
      "Charon": []
    },
    "sdl2-gamecontroller": {
      "Gasket": [
        "(pollEvents,pollEvents)",
        "(enableAccelerometer,enableAccelerometer)",
        "(enableGyroscope,enableGyroscope)",
        "(rumbleTriggers,rumbleTriggers)",
        "(setLeds,setLeds)",
        "(rumble,rumble)",
        "(SdlGameController,SdlGameController)"
      ],
      "Charon": []
    },
    "secp256k1": {
      "Gasket": [
        "(publicKeyCreate,PublicKeyCreate)",
        "(publicKeyTweakAdd,PublicKeyTweakAdd)",
        "(signatureNormalize,SignatureNormalize)",
        "(Secp256k1,Secp256k1Addon)",
        "(privateKeyNegate,PrivateKeyNegate)",
        "(publicKeyVerify,PublicKeyVerify)",
        "(ecdh,ECDH)",
        "(ecdsaRecover,ECDSARecover)",
        "(publicKeyTweakMul,PublicKeyTweakMul)",
        "(ecdsaSign,ECDSASign)",
        "(signatureExport,SignatureExport)",
        "(privateKeyVerify,PrivateKeyVerify)",
        "(signatureImport,SignatureImport)",
        "(contextRandomize,ContextRandomize)",
        "(privateKeyTweakAdd,PrivateKeyTweakAdd)",
        "(publicKeyCombine,PublicKeyCombine)",
        "(publicKeyConvert,PublicKeyConvert)",
        "(publicKeyNegate,PublicKeyNegate)",
        "(ecdsaVerify,ECDSAVerify)",
        "(privateKeyTweakMul,PrivateKeyTweakMul)"
      ],
      "Charon": [
        "(Secp256k1,Secp256k1Addon)"
      ]
    },
    "secp256k1-native": {
      "Gasket": [
        "(secp256k1_ec_privkey_tweak_add,sn_secp256k1_ec_privkey_tweak_add)",
        "(secp256k1_ecdsa_sign,sn_secp256k1_ecdsa_sign)",
        "(secp256k1_ec_privkey_tweak_mul,sn_secp256k1_ec_privkey_tweak_mul)",
        "(secp256k1_context_create,sn_secp256k1_context_create)",
        "(secp256k1_ecdsa_recoverable_signature_convert,sn_secp256k1_ecdsa_recoverable_signature_convert)",
        "(secp256k1_ec_pubkey_parse,sn_secp256k1_ec_pubkey_parse)",
        "(secp256k1_ec_privkey_negate,sn_secp256k1_ec_privkey_negate)",
        "(secp256k1_ecdsa_recover,sn_secp256k1_ecdsa_recover)",
        "(secp256k1_ecdsa_recoverable_signature_serialize_compact,sn_secp256k1_ecdsa_recoverable_signature_serialize_compact)",
        "(secp256k1_ec_pubkey_combine,sn_secp256k1_ec_pubkey_combine)",
        "(secp256k1_ecdsa_signature_serialize_compact,sn_secp256k1_ecdsa_signature_serialize_compact)",
        "(secp256k1_ecdh,sn_secp256k1_ecdh)",
        "(secp256k1_ec_pubkey_negate,sn_secp256k1_ec_pubkey_negate)",
        "(secp256k1_ecdsa_signature_parse_compact,sn_secp256k1_ecdsa_signature_parse_compact)",
        "(secp256k1_ec_pubkey_create,sn_secp256k1_ec_pubkey_create)",
        "(secp256k1_ecdsa_signature_normalize,sn_secp256k1_ecdsa_signature_normalize)",
        "(secp256k1_ec_pubkey_tweak_mul,sn_secp256k1_ec_pubkey_tweak_mul)",
        "(secp256k1_ecdsa_sign_recoverable,sn_secp256k1_ecdsa_sign_recoverable)",
        "(secp256k1_context_randomize,sn_secp256k1_context_randomize)",
        "(secp256k1_ecdsa_signature_serialize_der,sn_secp256k1_ecdsa_signature_serialize_der)",
        "(secp256k1_ecdsa_verify,sn_secp256k1_ecdsa_verify)",
        "(secp256k1_ecdsa_recoverable_signature_parse_compact,sn_secp256k1_ecdsa_recoverable_signature_parse_compact)",
        "(secp256k1_ec_seckey_verify,sn_secp256k1_ec_seckey_verify)",
        "(secp256k1_ec_pubkey_serialize,sn_secp256k1_ec_pubkey_serialize)",
        "(secp256k1_ec_pubkey_tweak_add,sn_secp256k1_ec_pubkey_tweak_add)",
        "(secp256k1_ecdsa_signature_parse_der,sn_secp256k1_ecdsa_signature_parse_der)"
      ],
      "Charon": []
    },
    "@sedracoin/process-list": {
      "Gasket": [
        "(snapshot,snapshot)"
      ],
      "Charon": [
        "(snapshot,snapshot)"
      ]
    },
    "segfault-handler": {
      "Gasket": [
        "(registerHandler,RegisterHandler)",
        "(causeSegfault,CauseSegfault)"
      ],
      "Charon": [
        "(registerHandler,RegisterHandler)",
        "(causeSegfault,CauseSegfault)"
      ]
    },
    "self-crypto": {
      "Gasket": [
        "(pickle_account,pickle_account)",
        "(unpickle_session,unpickle_session)",
        "(group_encrypt,group_encrypt)",
        "(create_inbound_session,create_inbound_session)",
        "(create_group_session,create_group_session)",
        "(ed25519_pk_to_curve25519,ed25519_pk_to_curve25519)",
        "(group_decrypt,group_decrypt)",
        "(one_time_keys,one_time_keys)",
        "(destroy_group_session,destroy_group_session)",
        "(add_group_participant,add_group_participant)",
        "(remove_one_time_keys,remove_one_time_keys)",
        "(create_olm_account_derrived_keys,create_olm_account_derrived_keys)",
        "(matches_inbound_session,matches_inbound_session)",
        "(pickle_session,pickle_session)",
        "(create_olm_account,create_olm_account)",
        "(identity_keys,identity_keys)",
        "(create_outbound_session,create_outbound_session)",
        "(create_account_one_time_keys,create_account_one_time_keys)",
        "(unpickle_account,unpickle_account)"
      ],
      "Charon": []
    },
    "@sematext/gc-stats": {
      "Gasket": [
        "(afterGC,AfterGC)"
      ],
      "Charon": [
        "(startTime,data)",
        "(endTime,data)",
        "(pause,data)",
        "(pauseMS,data)",
        "(gctype,data)",
        "(afterGC,AfterGC)"
      ]
    },
    "@sentry-internal/node-cpu-profiler": {
      "Gasket": [
        "(startProfiling,StartProfiling)",
        "(stopProfiling,StopProfiling)",
        "(getFrameModule,GetFrameModuleWrapped)"
      ],
      "Charon": []
    },
    "@sequencework/tfjs-node": {
      "Gasket": [
        "(createTensor,CreateTensor)",
        "(tensorDataSync,TensorDataSync)",
        "(deleteTensor,DeleteTensor)",
        "(executeOp,ExecuteOp)"
      ],
      "Charon": []
    },
    "serenade-driver": {
      "Gasket": [
        "(pressKey,PressKey)",
        "(focusApplication,FocusApplication)",
        "(getActiveApplication,GetActiveApplication)",
        "(click,Click)",
        "(getEditorStateFallback,GetEditorStateFallback)",
        "(getMouseLocation,GetMouseLocation)",
        "(setMouseLocation,SetMouseLocation)",
        "(setEditorState,SetEditorState)",
        "(typeText,TypeText)",
        "(getClickableButtons,GetClickableButtons)",
        "(getRunningApplications,GetRunningApplications)",
        "(getEditorState,GetEditorState)",
        "(mouseDown,MouseDown)",
        "(mouseUp,MouseUp)",
        "(getActiveApplicationWindowBounds,GetActiveApplicationWindowBounds)",
        "(clickButton,ClickButton)"
      ],
      "Charon": [
        "(click,Click)",
        "(clickButton,ClickButton)",
        "(focusApplication,FocusApplication)",
        "(getActiveApplication,GetActiveApplication)",
        "(getActiveApplicationWindowBounds,GetActiveApplicationWindowBounds)",
        "(getClickableButtons,GetClickableButtons)",
        "(getEditorState,GetEditorState)",
        "(getEditorStateFallback,GetEditorStateFallback)",
        "(getMouseLocation,GetMouseLocation)",
        "(getRunningApplications,GetRunningApplications)",
        "(pressKey,PressKey)",
        "(mouseDown,MouseDown)",
        "(mouseUp,MouseUp)",
        "(setEditorState,SetEditorState)",
        "(setMouseLocation,SetMouseLocation)",
        "(typeText,TypeText)"
      ]
    },
    "@sergiou87/fs-admin-temp": {
      "Gasket": [
        "(clearAuthorizationCache,ClearAuthorizationCache)",
        "(getAuthorizationForm,GetAuthorizationForm)",
        "(spawnAsAdmin,SpawnAsAdmin)"
      ],
      "Charon": [
        "(getAuthorizationForm,GetAuthorizationForm)",
        "(clearAuthorizationCache,ClearAuthorizationCache)",
        "(spawnAsAdmin,SpawnAsAdmin)"
      ]
    },
    "@serialport/bindings": {
      "Gasket": [
        "(get,Get)",
        "(flush,Flush)",
        "(open,Open)",
        "(stop,stop)",
        "(close,Close)",
        "(Poller,New)",
        "(set,Set)",
        "(poll,poll)",
        "(update,Update)",
        "(drain,Drain)",
        "(destroy,destroy)",
        "(getBaudRate,GetBaudRate)"
      ],
      "Charon": [
        "(cts,data)",
        "(dsr,data)",
        "(dcd,data)",
        "(lowLatency,data)",
        "(baudRate,data)",
        "(set,Set)",
        "(get,Get)",
        "(getBaudRate,GetBaudRate)",
        "(open,Open)",
        "(update,Update)",
        "(close,Close)",
        "(flush,Flush)",
        "(drain,Drain)",
        "(poll,poll)",
        "(stop,stop)",
        "(destroy,destroy)"
      ]
    },
    "sevruga": {
      "Gasket": [
        "(renderSVG,renderSVG)"
      ],
      "Charon": []
    },
    "shacrypt": {
      "Gasket": [
        "(sha256crypt,sha256crypt)",
        "(sha512crypt,sha512crypt)"
      ],
      "Charon": [
        "(sha256crypt,sha256crypt)",
        "(sha512crypt,sha512crypt)"
      ]
    },
    "shannon-bindings": {
      "Gasket": [
        "(shnNonce,shnNonce)",
        "(shnStream,shnStream)",
        "(shnFinish,shnFinish)",
        "(shnKey,shnKey)",
        "(shnDecrypt,shnDecrypt)",
        "(shnEncrypt,shnEncrypt)",
        "(shnMacOnly,shnMacOnly)"
      ],
      "Charon": []
    },
    "shared-node-buffer": {
      "Gasket": [
        "(mmap,__mmap)"
      ],
      "Charon": [
        "(mmap,__mmap)"
      ]
    },
    "sharp-lite": {
      "Gasket": [
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(counters,counters)",
        "(concurrency,concurrency)",
        "(_maxColourDistance,_maxColourDistance)",
        "(pipeline,pipeline)",
        "(cache,cache)",
        "(simd,simd)",
        "(libvipsVersion,libvipsVersion)",
        "(stats,stats)",
        "(metadata,metadata)",
        "(format,format)"
      ],
      "Charon": []
    },
    "shm-typed-array": {
      "Gasket": [
        "(getTotalAllocatedSize,getTotalAllocatedSize)",
        "(get,get)",
        "(detach,detach)",
        "(detachAll,detachAll)",
        "(getTotalUsedSize,getTotalUsedSize)",
        "(detachPosix,detachPosix)",
        "(getPosix,getPosix)"
      ],
      "Charon": [
        "(get,get)",
        "(getPosix,getPosix)",
        "(detach,detach)",
        "(detachPosix,detachPosix)",
        "(detachAll,detachAll)",
        "(getTotalAllocatedSize,getTotalAllocatedSize)",
        "(getTotalUsedSize,getTotalUsedSize)"
      ]
    },
    "shorter": {
      "Gasket": [
        "(decompress,decompress)",
        "(compressString,compressString)",
        "(compressBuffer,compressBuffer)"
      ],
      "Charon": [
        "(compressBuffer,compressBuffer)",
        "(compressString,compressString)",
        "(decompress,decompress)"
      ]
    },
    "@shroudedcode/hx711": {
      "Gasket": [
        "(tare,tare)",
        "(getUnits,getUnits)",
        "(read,read)",
        "(HX711,HX711Wrapper)",
        "(getScale,getScale)",
        "(getOffset,getOffset)",
        "(setOffset,setOffset)",
        "(setScale,setScale)"
      ],
      "Charon": []
    },
    "shuriken-fs": {
      "Gasket": [
        "(file_exists,FileExists)",
        "(delete_file,DeleteFile)",
        "(copy_file_from_storage,CopyFileFrom)",
        "(read_file,ReadFile)",
        "(link_file,LinkFile)",
        "(write_file,WriteFile)",
        "(copy_file_to_storage,CopyFileTo)"
      ],
      "Charon": [
        "(read_file,ReadFile)",
        "(write_file,WriteFile)",
        "(copy_file_to_storage,CopyFileTo)",
        "(copy_file_from_storage,CopyFileFrom)",
        "(delete_file,DeleteFile)",
        "(file_exists,FileExists)",
        "(link_file,LinkFile)"
      ]
    },
    "shxt.serialport.bindings": {
      "Gasket": [
        "(flush,Flush)",
        "(update,Update)",
        "(stop,stop)",
        "(destroy,destroy)",
        "(get,Get)",
        "(close,Close)",
        "(drain,Drain)",
        "(Poller,New)",
        "(set,Set)",
        "(open,Open)",
        "(poll,poll)",
        "(getBaudRate,GetBaudRate)"
      ],
      "Charon": [
        "(cts,data)",
        "(dsr,data)",
        "(dcd,data)",
        "(lowLatency,data)",
        "(baudRate,data)",
        "(set,Set)",
        "(get,Get)",
        "(getBaudRate,GetBaudRate)",
        "(open,Open)",
        "(update,Update)",
        "(close,Close)",
        "(flush,Flush)",
        "(drain,Drain)",
        "(poll,poll)",
        "(stop,stop)",
        "(destroy,destroy)"
      ]
    },
    "sigignore": {
      "Gasket": [
        "(ignoreSigterm,Method)"
      ],
      "Charon": []
    },
    "sign-pkcs7": {
      "Gasket": [
        "(verify,Verify)",
        "(sign,Sign)"
      ],
      "Charon": [
        "(sign,Sign)",
        "(verify,Verify)"
      ]
    },
    "silk-sdk": {
      "Gasket": [
        "(decode,Decode_Entry)",
        "(compare,Compare_Entry)",
        "(encode,Encode_Entry)"
      ],
      "Charon": []
    },
    "simdjson": {
      "Gasket": [
        "(lazyParse,LazyParseWrapped)",
        "(isValid,IsValidWrapped)",
        "(parse,ParseWrapped)"
      ],
      "Charon": []
    },
    "simple_c_parser": {
      "Gasket": [
        "(milk,parse)",
        "(parse,parse)"
      ],
      "Charon": []
    },
    "@sirherobrine23/cppzst": {
      "Gasket": [
        "(copy,Copy)",
        "(compress,Compress)",
        "(StreamCompressor,New)",
        "(getBlockSize,GetBlockSize)",
        "(decompress,Decompress)",
        "(StreamDecompressor,New)"
      ],
      "Charon": []
    },
    "skia-n-api": {
      "Gasket": [
        "(skWstreamWrite_8,skWstreamWrite_8)",
        "(skPathAddRoundedRect,skPathAddRoundedRect)",
        "(skCanvasDrawLine,skCanvasDrawLine)",
        "(skPaintIsFakeBoldText,skPaintIsFakeBoldText)",
        "(skPictureRecorderDelete,skPictureRecorderDelete)",
        "(skTypefaceOpenStream,skTypefaceOpenStream)",
        "(skCodecGetFrameInfo,skCodecGetFrameInfo)",
        "(skPathNew,skPathNew)",
        "(skFontstylesetMatchStyle,skFontstylesetMatchStyle)",
        "(grGlinterfaceAssembleInterface,grGlinterfaceAssembleInterface)",
        "(skStreamFork,skStreamFork)",
        "(skColorfilterNewHighContrast,skColorfilterNewHighContrast)",
        "(skCanvasDrawImageRect,skCanvasDrawImageRect)",
        "(skMatrix44Set,skMatrix44Set)",
        "(skSurfaceNewBackendTexture,skSurfaceNewBackendTexture)",
        "(skFontmgrCreateFromData,skFontmgrCreateFromData)",
        "(skXmlstreamwriterDelete,skXmlstreamwriterDelete)",
        "(skStreamRead,skStreamRead)",
        "(skMatrix44SetColMajor,skMatrix44SetColMajor)",
        "(skImageGetAlphaType,skImageGetAlphaType)",
        "(skPaintGetColor,skPaintGetColor)",
        "(skPathCubicTo,skPathCubicTo)",
        "(skSwizzleSwapRb,skSwizzleSwapRb)",
        "(skCodecGetScanlineOrder,skCodecGetScanlineOrder)",
        "(skRegionSetPath,skRegionSetPath)",
        "(skColorspaceNewRgbWithGammaNamedAndGamut,skColorspaceNewRgbWithGammaNamedAndGamut)",
        "(skDocumentAbort,skDocumentAbort)",
        "(skPathAddRectStart,skPathAddRectStart)",
        "(skSurfacepropsDelete,skSurfacepropsDelete)",
        "(skImagefilterNewCompose,skImagefilterNewCompose)",
        "(skWstreamWriteHexAsText,skWstreamWriteHexAsText)",
        "(skSurfaceNewRenderTarget,skSurfaceNewRenderTarget)",
        "(skFontstyleNew,skFontstyleNew)",
        "(skMaskfilterNewBlurWithFlags,skMaskfilterNewBlurWithFlags)",
        "(skMaskfilterNewClip,skMaskfilterNewClip)",
        "(skStringGetSize,skStringGetSize)",
        "(skImagefilterCroprectGetRect,skImagefilterCroprectGetRect)",
        "(skPaintCountText,skPaintCountText)",
        "(skPathConicTo,skPathConicTo)",
        "(skVerticesMakeCopy,skVerticesMakeCopy)",
        "(skPaintGetTextsize,skPaintGetTextsize)",
        "(skWstreamGetSizeOfPackedUint,skWstreamGetSizeOfPackedUint)",
        "(skMatrix44PostTranslate,skMatrix44PostTranslate)",
        "(skPathToSvgString,skPathToSvgString)",
        "(skSurfacePeekPixels,skSurfacePeekPixels)",
        "(skImageMakeShader,skImageMakeShader)",
        "(skTextblobBuilderAllocRunTextPosH,skTextblobBuilderAllocRunTextPosH)",
        "(skWstreamWritePackedUint,skWstreamWritePackedUint)",
        "(skRrectNew,skRrectNew)",
        "(skRegionSetRect,skRegionSetRect)",
        "(skPathmeasureNew,skPathmeasureNew)",
        "(skNvrefcntUnique,skNvrefcntUnique)",
        "(skPictureGetRecordingCanvas,skPictureGetRecordingCanvas)",
        "(skCanvasClipRectWithOperation,skCanvasClipRectWithOperation)",
        "(skBitmapExtractAlpha,skBitmapExtractAlpha)",
        "(skSurfacepropsGetFlags,skSurfacepropsGetFlags)",
        "(skStreamIsAtEnd,skStreamIsAtEnd)",
        "(skOpbuilderDestroy,skOpbuilderDestroy)",
        "(skMaskGetAddr_32,skMaskGetAddr_32)",
        "(skOverdrawCanvasNew,skOverdrawCanvasNew)",
        "(skCanvasScale,skCanvasScale)",
        "(skMaskfilterRef,skMaskfilterRef)",
        "(skStreamSeek,skStreamSeek)",
        "(skTypefaceCreateDefault,skTypefaceCreateDefault)",
        "(skStreamReadU32,skStreamReadU32)",
        "(skPixmapScalePixels,skPixmapScalePixels)",
        "(skColorfilterNewTable,skColorfilterNewTable)",
        "(skFontmgrMatchFamilyStyle,skFontmgrMatchFamilyStyle)",
        "(skImageScalePixels,skImageScalePixels)",
        "(skDrawableNotifyDrawingChanged,skDrawableNotifyDrawingChanged)",
        "(skPictureRecorderEndRecording,skPictureRecorderEndRecording)",
        "(skFilestreamNew,skFilestreamNew)",
        "(skWstreamWrite_16,skWstreamWrite_16)",
        "(skDrawableGetBounds,skDrawableGetBounds)",
        "(skWstreamWrite_32,skWstreamWrite_32)",
        "(grBackendrendertargetGetStencils,grBackendrendertargetGetStencils)",
        "(skPathMoveTo,skPathMoveTo)",
        "(skPaintSetTextsize,skPaintSetTextsize)",
        "(skBitmapIsNull,skBitmapIsNull)",
        "(skTextblobGetBounds,skTextblobGetBounds)",
        "(grContextUnref,grContextUnref)",
        "(skTextblobBuilderNew,skTextblobBuilderNew)",
        "(skBitmapSwap,skBitmapSwap)",
        "(skPixmapGetPixelColor,skPixmapGetPixelColor)",
        "(skImageGetWidth,skImageGetWidth)",
        "(skCanvasGetTotalMatrix,skCanvasGetTotalMatrix)",
        "(skCanvasDrawBitmapLattice,skCanvasDrawBitmapLattice)",
        "(skPathGetPoints,skPathGetPoints)",
        "(skColortableUnref,skColortableUnref)",
        "(skTypefaceGetFontSlant,skTypefaceGetFontSlant)",
        "(skPaintGetPosTextBlobIntercepts,skPaintGetPosTextBlobIntercepts)",
        "(skCanvasDrawDrrect,skCanvasDrawDrrect)",
        "(skFontstylesetCreateTypeface,skFontstylesetCreateTypeface)",
        "(skStreamGetPosition,skStreamGetPosition)",
        "(skMatrix44NewCopy,skMatrix44NewCopy)",
        "(skPathEffectCreateTrim,skPathEffectCreateTrim)",
        "(skImagefilterCroprectNewWithRect,skImagefilterCroprectNewWithRect)",
        "(skPictureRef,skPictureRef)",
        "(skCanvasFlush,skCanvasFlush)",
        "(skTypefaceGetUnitsPerEm,skTypefaceGetUnitsPerEm)",
        "(skPaintGetPosTextHIntercepts,skPaintGetPosTextHIntercepts)",
        "(skCanvasSetMatrix,skCanvasSetMatrix)",
        "(skImagefilterCroprectDestructor,skImagefilterCroprectDestructor)",
        "(skFontmgrCountFamilies,skFontmgrCountFamilies)",
        "(skCanvasDrawBitmap,skCanvasDrawBitmap)",
        "(skPathQuadTo,skPathQuadTo)",
        "(skPngencoderEncode,skPngencoderEncode)",
        "(skRrectSetRect,skRrectSetRect)",
        "(skStreamReadS8,skStreamReadS8)",
        "(skColorfilterNewMode,skColorfilterNewMode)",
        "(skMaskGetAddr,skMaskGetAddr)",
        "(skPathmeasureSetPath,skPathmeasureSetPath)",
        "(skTypefaceCharsToGlyphs,skTypefaceCharsToGlyphs)",
        "(skFilewstreamIsValid,skFilewstreamIsValid)",
        "(skImagefilterNewPointLitSpecular,skImagefilterNewPointLitSpecular)",
        "(skPathRcubicTo,skPathRcubicTo)",
        "(skPaintIsSubpixelText,skPaintIsSubpixelText)",
        "(skCanvasDrawTextOnPath,skCanvasDrawTextOnPath)",
        "(skColortypeGetDefault_8888,skColortypeGetDefault_8888)",
        "(skColorspaceTransferFnTransform,skColorspaceTransferFnTransform)",
        "(skPaintIsDither,skPaintIsDither)",
        "(skPathAddPathMatrix,skPathAddPathMatrix)",
        "(skPixmapGetRowBytes,skPixmapGetRowBytes)",
        "(skTypefaceCreateFromNameWithFontStyle,skTypefaceCreateFromNameWithFontStyle)",
        "(skBitmapNotifyPixelsChanged,skBitmapNotifyPixelsChanged)",
        "(skRrectTransform,skRrectTransform)",
        "(skTypefaceGetTableTags,skTypefaceGetTableTags)",
        "(skTypefaceRefDefault,skTypefaceRefDefault)",
        "(skMatrix44PreTranslate,skMatrix44PreTranslate)",
        "(grContextMakeGl,grContextMakeGl)",
        "(skPathIterIsCloseLine,skPathIterIsCloseLine)",
        "(skStreamAssetDestroy,skStreamAssetDestroy)",
        "(skImageEncode,skImageEncode)",
        "(skImageEncodeSpecific,skImageEncodeSpecific)",
        "(skTypefaceUnref,skTypefaceUnref)",
        "(skFontmgrGetFamilyName,skFontmgrGetFamilyName)",
        "(skPathGetConvexity,skPathGetConvexity)",
        "(skCanvasDrawUrlAnnotation,skCanvasDrawUrlAnnotation)",
        "(skColorfilterUnref,skColorfilterUnref)",
        "(skRrectDelete,skRrectDelete)",
        "(skBitmapErase,skBitmapErase)",
        "(skImagePeekPixels,skImagePeekPixels)",
        "(skPaintGetTextPath,skPaintGetTextPath)",
        "(skMaskfilterNewBlur,skMaskfilterNewBlur)",
        "(skPaintSetStrokeCap,skPaintSetStrokeCap)",
        "(skPaintIsAntialias,skPaintIsAntialias)",
        "(skCanvasDrawNamedDestinationAnnotation,skCanvasDrawNamedDestinationAnnotation)",
        "(skCanvasGetDeviceClipBounds,skCanvasGetDeviceClipBounds)",
        "(skPaintGetImagefilter,skPaintGetImagefilter)",
        "(skPixmapGetPixelsWithXy,skPixmapGetPixelsWithXy)",
        "(skRefcntGetRefCount,skRefcntGetRefCount)",
        "(skPathopSimplify,skPathopSimplify)",
        "(skSurfaceGetProps,skSurfaceGetProps)",
        "(skPathmeasureNextContour,skPathmeasureNextContour)",
        "(skShaderNewSweepGradient,skShaderNewSweepGradient)",
        "(skPaintSetAutohinted,skPaintSetAutohinted)",
        "(skShaderNewPerlinNoiseImprovedNoise,skShaderNewPerlinNoiseImprovedNoise)",
        "(skColorfilterNewLighting,skColorfilterNewLighting)",
        "(skImageGetHeight,skImageGetHeight)",
        "(skPaintSetStrokeMiter,skPaintSetStrokeMiter)",
        "(skPathRewind,skPathRewind)",
        "(skImagefilterNewDisplacementMapEffect,skImagefilterNewDisplacementMapEffect)",
        "(skCanvasGetLocalClipBounds,skCanvasGetLocalClipBounds)",
        "(skPathSetConvexity,skPathSetConvexity)",
        "(skFontstyleGetWeight,skFontstyleGetWeight)",
        "(skPathmeasureGetLength,skPathmeasureGetLength)",
        "(skPathIsRrect,skPathIsRrect)",
        "(skBitmapSetPixelColor,skBitmapSetPixelColor)",
        "(skMaskComputeImageSize,skMaskComputeImageSize)",
        "(skPaintGetMaskfilter,skPaintGetMaskfilter)",
        "(skFontmgrMatchFamily,skFontmgrMatchFamily)",
        "(skCanvasDrawLinkDestinationAnnotation,skCanvasDrawLinkDestinationAnnotation)",
        "(skCodecGetEncodedFormat,skCodecGetEncodedFormat)",
        "(skPathIterDestroy,skPathIterDestroy)",
        "(skPathmeasureDestroy,skPathmeasureDestroy)",
        "(skPaintGetTextEncoding,skPaintGetTextEncoding)",
        "(skCodecOutputScanline,skCodecOutputScanline)",
        "(skSurfaceUnref,skSurfaceUnref)",
        "(skColorUnpremultiply,skColorUnpremultiply)",
        "(skCodecMinBufferedBytesNeeded,skCodecMinBufferedBytesNeeded)",
        "(skMatrixTryInvert,skMatrixTryInvert)",
        "(skMatrixMapVectors,skMatrixMapVectors)",
        "(skPathReset,skPathReset)",
        "(skCanvasDrawTextBlob,skCanvasDrawTextBlob)",
        "(skMemorystreamNewWithSkdata,skMemorystreamNewWithSkdata)",
        "(skDynamicmemorywstreamNew,skDynamicmemorywstreamNew)",
        "(skMatrix44Destroy,skMatrix44Destroy)",
        "(skFontstylesetGetStyle,skFontstylesetGetStyle)",
        "(skRegionContains2,skRegionContains2)",
        "(skVerticesRef,skVerticesRef)",
        "(skPathCountVerbs,skPathCountVerbs)",
        "(skColorfilterNewCompose,skColorfilterNewCompose)",
        "(grGlinterfaceUnref,grGlinterfaceUnref)",
        "(skPaintGetStrokeCap,skPaintGetStrokeCap)",
        "(skFontstylesetGetCount,skFontstylesetGetCount)",
        "(skColorspaceprimariesToXyzd50,skColorspaceprimariesToXyzd50)",
        "(skImagefilterNewDistantLitSpecular,skImagefilterNewDistantLitSpecular)",
        "(skPathmeasureGetSegment,skPathmeasureGetSegment)",
        "(skPaintSetStrokeWidth,skPaintSetStrokeWidth)",
        "(skShaderNewColor,skShaderNewColor)",
        "(skTextblobBuilderDelete,skTextblobBuilderDelete)",
        "(skMatrix44Get,skMatrix44Get)",
        "(skRegionContains,skRegionContains)",
        "(skTypefaceCreateFromFile,skTypefaceCreateFromFile)",
        "(skImagefilterNewXfermode,skImagefilterNewXfermode)",
        "(skPathTransform,skPathTransform)",
        "(skBitmapExtractSubset,skBitmapExtractSubset)",
        "(skMatrix44NewConcat,skMatrix44NewConcat)",
        "(skCanvasSkew,skCanvasSkew)",
        "(skPaintSetTextScaleX,skPaintSetTextScaleX)",
        "(skPaintSetFilterQuality,skPaintSetFilterQuality)",
        "(grGlinterfaceValidate,grGlinterfaceValidate)",
        "(skCodecGetRepetitionCount,skCodecGetRepetitionCount)",
        "(skPixmapGetPixels,skPixmapGetPixels)",
        "(skXmlstreamwriterNew,skXmlstreamwriterNew)",
        "(skCodecDestroy,skCodecDestroy)",
        "(skBitmapGetAddr_8,skBitmapGetAddr_8)",
        "(skMatrix44SetTranslate,skMatrix44SetTranslate)",
        "(skBitmapGetAddr,skBitmapGetAddr)",
        "(skCanvasDiscard,skCanvasDiscard)",
        "(skImagefilterNewPointLitDiffuse,skImagefilterNewPointLitDiffuse)",
        "(skRrectNewCopy,skRrectNewCopy)",
        "(skCanvasClipRegion,skCanvasClipRegion)",
        "(skPathIterNext,skPathIterNext)",
        "(skImageRef,skImageRef)",
        "(skImagefilterNewErode,skImagefilterNewErode)",
        "(skImagefilterNewTile,skImagefilterNewTile)",
        "(skImagefilterNewSpotLitSpecular,skImagefilterNewSpotLitSpecular)",
        "(grContextGetResourceCacheUsage,grContextGetResourceCacheUsage)",
        "(skNwayCanvasNew,skNwayCanvasNew)",
        "(skMemorystreamDestroy,skMemorystreamDestroy)",
        "(skPaintGetTypeface,skPaintGetTypeface)",
        "(skPathGetPoint,skPathGetPoint)",
        "(skColorPremultiply,skColorPremultiply)",
        "(skRrectOffset,skRrectOffset)",
        "(skCanvasDrawRegion,skCanvasDrawRegion)",
        "(skMaskComputeTotalImageSize,skMaskComputeTotalImageSize)",
        "(grBackendrendertargetGetGlFramebufferinfo,grBackendrendertargetGetGlFramebufferinfo)",
        "(skShaderNewPerlinNoiseTurbulence,skShaderNewPerlinNoiseTurbulence)",
        "(skShaderRef,skShaderRef)",
        "(skRrectGetRadii,skRrectGetRadii)",
        "(sk_3dviewGetMatrix,sk_3dviewGetMatrix)",
        "(skPathmeasureIsClosed,skPathmeasureIsClosed)",
        "(skPaintSetTextEncoding,skPaintSetTextEncoding)",
        "(skPathAddPathReverse,skPathAddPathReverse)",
        "(skMatrixMapRect,skMatrixMapRect)",
        "(skPaintSetShader,skPaintSetShader)",
        "(skDataNewFromStream,skDataNewFromStream)",
        "(skColortableNew,skColortableNew)",
        "(skFilewstreamDestroy,skFilewstreamDestroy)",
        "(skImagefilterNewDistantLitDiffuse,skImagefilterNewDistantLitDiffuse)",
        "(skFontmgrCreateStyleset,skFontmgrCreateStyleset)",
        "(skBitmapGetAddr_16,skBitmapGetAddr_16)",
        "(skMaskFreeImage,skMaskFreeImage)",
        "(skBitmapInstallPixels,skBitmapInstallPixels)",
        "(skOverdrawCanvasDestroy,skOverdrawCanvasDestroy)",
        "(sk_3dviewRotateZDegrees,sk_3dviewRotateZDegrees)",
        "(skNvrefcntGetRefCount,skNvrefcntGetRefCount)",
        "(skWstreamWriteScalar,skWstreamWriteScalar)",
        "(skImagefilterNewBlur,skImagefilterNewBlur)",
        "(skImagefilterNewImageSource,skImagefilterNewImageSource)",
        "(grBackendtextureGetWidth,grBackendtextureGetWidth)",
        "(skCanvasDrawRoundRect,skCanvasDrawRoundRect)",
        "(skDrawableUnref,skDrawableUnref)",
        "(skPictureUnref,skPictureUnref)",
        "(grBackendtextureDelete,grBackendtextureDelete)",
        "(skImageReadPixelsIntoPixmap,skImageReadPixelsIntoPixmap)",
        "(skCanvasDrawPath,skCanvasDrawPath)",
        "(skTextblobUnref,skTextblobUnref)",
        "(skColorspaceGammaCloseToSrgb,skColorspaceGammaCloseToSrgb)",
        "(skColortableReadColors,skColortableReadColors)",
        "(skColorspaceGammaGetGammaNamed,skColorspaceGammaGetGammaNamed)",
        "(skCanvasDrawPoint,skCanvasDrawPoint)",
        "(skSurfacepropsNew,skSurfacepropsNew)",
        "(skCanvasDrawAnnotation,skCanvasDrawAnnotation)",
        "(skPaintGetFillPath,skPaintGetFillPath)",
        "(skWstreamFlush,skWstreamFlush)",
        "(skPictureGetUniqueId,skPictureGetUniqueId)",
        "(skCanvasDrawArc,skCanvasDrawArc)",
        "(skDrawableGetGenerationId,skDrawableGetGenerationId)",
        "(skImageNewFromTexture,skImageNewFromTexture)",
        "(skPaintSetAntialias,skPaintSetAntialias)",
        "(skMatrix44SetRowMajor,skMatrix44SetRowMajor)",
        "(skPaintContainsText,skPaintContainsText)",
        "(skImagefilterNewAlphaThreshold,skImagefilterNewAlphaThreshold)",
        "(skPathEffectCreate_2dPath,skPathEffectCreate_2dPath)",
        "(skStreamDuplicate,skStreamDuplicate)",
        "(skWstreamWriteDecAsText,skWstreamWriteDecAsText)",
        "(skPathEffectCreateDash,skPathEffectCreateDash)",
        "(skNwayCanvasRemoveCanvas,skNwayCanvasRemoveCanvas)",
        "(skPixmapExtractSubset,skPixmapExtractSubset)",
        "(skCodecGetFrameCount,skCodecGetFrameCount)",
        "(skDataGetSize,skDataGetSize)",
        "(sk_3dviewSave,sk_3dviewSave)",
        "(skWstreamWriteBool,skWstreamWriteBool)",
        "(skMatrix44MapScalars,skMatrix44MapScalars)",
        "(grBackendrendertargetNewGl,grBackendrendertargetNewGl)",
        "(skSurfaceNewImageSnapshot,skSurfaceNewImageSnapshot)",
        "(skPaintGetTextAlign,skPaintGetTextAlign)",
        "(skStringNewEmpty,skStringNewEmpty)",
        "(skDataNewWithProc,skDataNewWithProc)",
        "(sk_3dviewRotateYDegrees,sk_3dviewRotateYDegrees)",
        "(skCanvasDestroy,skCanvasDestroy)",
        "(skBitmapTryAllocPixelsWithFlags,skBitmapTryAllocPixelsWithFlags)",
        "(skRrectGetRect,skRrectGetRect)",
        "(skMatrix44SetRotateAboutRadians,skMatrix44SetRotateAboutRadians)",
        "(skImageUnref,skImageUnref)",
        "(skShaderUnref,skShaderUnref)",
        "(skCodecGetOrigin,skCodecGetOrigin)",
        "(grBackendrendertargetGetBackend,grBackendrendertargetGetBackend)",
        "(skTypefaceGetTableData,skTypefaceGetTableData)",
        "(skNwayCanvasAddCanvas,skNwayCanvasAddCanvas)",
        "(skPathEffectCreateSum,skPathEffectCreateSum)",
        "(skPaintSetDither,skPaintSetDither)",
        "(skImagefilterNewArithmetic,skImagefilterNewArithmetic)",
        "(skDrawableNewPictureSnapshot,skDrawableNewPictureSnapshot)",
        "(skMatrixConcat,skMatrixConcat)",
        "(skShaderNewPerlinNoiseFractalNoise,skShaderNewPerlinNoiseFractalNoise)",
        "(skSurfaceNewBackendRenderTarget,skSurfaceNewBackendRenderTarget)",
        "(skCanvasNewFromBitmap,skCanvasNewFromBitmap)",
        "(skDrawableDraw,skDrawableDraw)",
        "(skStreamSkip,skStreamSkip)",
        "(skDocumentBeginPage,skDocumentBeginPage)",
        "(skPathRawiterPeek,skPathRawiterPeek)",
        "(skPaintSetImagefilter,skPaintSetImagefilter)",
        "(skRrectGetWidth,skRrectGetWidth)",
        "(skDocumentClose,skDocumentClose)",
        "(skNwayCanvasDestroy,skNwayCanvasDestroy)",
        "(skRefcntSafeRef,skRefcntSafeRef)",
        "(skPathGetSegmentMasks,skPathGetSegmentMasks)",
        "(skImagefilterNewMatrixConvolution,skImagefilterNewMatrixConvolution)",
        "(skColorspaceGammaGetType,skColorspaceGammaGetType)",
        "(skCodecGetPixels,skCodecGetPixels)",
        "(sk_3dviewTranslate,sk_3dviewTranslate)",
        "(skCanvasRotateRadians,skCanvasRotateRadians)",
        "(skPixmapReadPixels,skPixmapReadPixels)",
        "(getMemory,getMemory)",
        "(skFontmgrCreateFromFile,skFontmgrCreateFromFile)",
        "(skPaintGetStrokeWidth,skPaintGetStrokeWidth)",
        "(sk_3dviewDotWithNormal,sk_3dviewDotWithNormal)",
        "(skRegionOp2,skRegionOp2)",
        "(grBackendtextureGetGlTextureinfo,grBackendtextureGetGlTextureinfo)",
        "(skCanvasTranslate,skCanvasTranslate)",
        "(skFontstylesetCreateEmpty,skFontstylesetCreateEmpty)",
        "(skPathAddPath,skPathAddPath)",
        "(skCodecNewFromData,skCodecNewFromData)",
        "(skPathRawiterConicWeight,skPathRawiterConicWeight)",
        "(skTextblobRef,skTextblobRef)",
        "(skCanvasDrawImageNine,skCanvasDrawImageNine)",
        "(skCanvasDrawColor,skCanvasDrawColor)",
        "(skOpbuilderResolve,skOpbuilderResolve)",
        "(skCanvasDrawRect,skCanvasDrawRect)",
        "(skCanvasRotateDegrees,skCanvasRotateDegrees)",
        "(skPaintSetEmbeddedBitmapText,skPaintSetEmbeddedBitmapText)",
        "(skPaintSetMaskfilter,skPaintSetMaskfilter)",
        "(skColorGetBitShift,skColorGetBitShift)",
        "(skPathopTightBounds,skPathopTightBounds)",
        "(skPictureRecorderBeginRecording,skPictureRecorderBeginRecording)",
        "(skCanvasIsClipRect,skCanvasIsClipRect)",
        "(skPaintSetColorfilter,skPaintSetColorfilter)",
        "(skPathCountPoints,skPathCountPoints)",
        "(sk_3dviewRotateZRadians,sk_3dviewRotateZRadians)",
        "(skBitmapGetAddr_32,skBitmapGetAddr_32)",
        "(skImageNewRaster,skImageNewRaster)",
        "(skPaintSetHinting,skPaintSetHinting)",
        "(grContextGetMaxSurfaceSampleCountForColorType,grContextGetMaxSurfaceSampleCountForColorType)",
        "(skCanvasClipPathWithOperation,skCanvasClipPathWithOperation)",
        "(skRegionIntersects,skRegionIntersects)",
        "(skRrectInset,skRrectInset)",
        "(skSurfacepropsGetPixelGeometry,skSurfacepropsGetPixelGeometry)",
        "(skColorspaceIsSrgb,skColorspaceIsSrgb)",
        "(skCanvasSave,skCanvasSave)",
        "(skCanvasDrawBitmapNine,skCanvasDrawBitmapNine)",
        "(skPixmapGetInfo,skPixmapGetInfo)",
        "(skCodecGetInfo,skCodecGetInfo)",
        "(skPathEffectCreateCompose,skPathEffectCreateCompose)",
        "(skBitmapReset,skBitmapReset)",
        "(skImagefilterNewPicture,skImagefilterNewPicture)",
        "(skColorfilterNewColorMatrix,skColorfilterNewColorMatrix)",
        "(skMatrix44NewIdentity,skMatrix44NewIdentity)",
        "(skPaintIsVerticaltext,skPaintIsVerticaltext)",
        "(skPaintSetDevKernText,skPaintSetDevKernText)",
        "(skPathArcTo,skPathArcTo)",
        "(skRegionIntersectsRect,skRegionIntersectsRect)",
        "(skMatrix44Determinant,skMatrix44Determinant)",
        "(skStreamReadU16,skStreamReadU16)",
        "(grContextFlush,grContextFlush)",
        "(skDocumentCreatePdfFromStream,skDocumentCreatePdfFromStream)",
        "(skMatrix44SetConcat,skMatrix44SetConcat)",
        "(skMaskfilterNewGamma,skMaskfilterNewGamma)",
        "(skRrectOutset,skRrectOutset)",
        "(skPaintGetTextIntercepts,skPaintGetTextIntercepts)",
        "(skPathClone,skPathClone)",
        "(grBackendtextureGetBackend,grBackendtextureGetBackend)",
        "(skMaskGetAddrLcd_16,skMaskGetAddrLcd_16)",
        "(grBackendrendertargetGetWidth,grBackendrendertargetGetWidth)",
        "(skMatrix44Map2,skMatrix44Map2)",
        "(skPaintSetLcdRenderText,skPaintSetLcdRenderText)",
        "(skBitmapGetPixelColor,skBitmapGetPixelColor)",
        "(skMatrix44NewMatrix,skMatrix44NewMatrix)",
        "(skStreamReadS32,skStreamReadS32)",
        "(skPathmeasureGetMatrix,skPathmeasureGetMatrix)",
        "(skStringGetCStr,skStringGetCStr)",
        "(skRegionNew,skRegionNew)",
        "(sk_3dviewRotateXDegrees,sk_3dviewRotateXDegrees)",
        "(skCanvasDrawPoints,skCanvasDrawPoints)",
        "(skImagefilterCroprectNew,skImagefilterCroprectNew)",
        "(skFilestreamIsValid,skFilestreamIsValid)",
        "(skPaintSetFakeBoldText,skPaintSetFakeBoldText)",
        "(skDataNewUninitialized,skDataNewUninitialized)",
        "(skColorspaceEquals,skColorspaceEquals)",
        "(skImagefilterNewOffset,skImagefilterNewOffset)",
        "(skRegionOp,skRegionOp)",
        "(skCodecGetValidSubset,skCodecGetValidSubset)",
        "(skPixmapEraseColor,skPixmapEraseColor)",
        "(skTypefaceCountTables,skTypefaceCountTables)",
        "(skRrectIsValid,skRrectIsValid)",
        "(skFontmgrMatchFamilyStyleCharacter,skFontmgrMatchFamilyStyleCharacter)",
        "(skCanvasClipRrectWithOperation,skCanvasClipRrectWithOperation)",
        "(skColorfilterNewTableArgb,skColorfilterNewTableArgb)",
        "(skPathRmoveTo,skPathRmoveTo)",
        "(skImageNewRasterData,skImageNewRasterData)",
        "(skPaintSetColor,skPaintSetColor)",
        "(skPathmeasureGetPosTan,skPathmeasureGetPosTan)",
        "(skRrectSetOval,skRrectSetOval)",
        "(skTextblobBuilderMake,skTextblobBuilderMake)",
        "(sk_3dviewRotateYRadians,sk_3dviewRotateYRadians)",
        "(grGlinterfaceHasExtension,grGlinterfaceHasExtension)",
        "(skDataNewWithCopy,skDataNewWithCopy)",
        "(skImageMakeWithFilter,skImageMakeWithFilter)",
        "(skImagefilterNewMerge,skImagefilterNewMerge)",
        "(skNodrawCanvasNew,skNodrawCanvasNew)",
        "(skShaderNewPicture,skShaderNewPicture)",
        "(skPixmapEncodeImage,skPixmapEncodeImage)",
        "(skShaderNewBitmap,skShaderNewBitmap)",
        "(skPaintGetShader,skPaintGetShader)",
        "(skSvgcanvasCreate,skSvgcanvasCreate)",
        "(skPathEffectCreateCorner,skPathEffectCreateCorner)",
        "(skRefcntUnique,skRefcntUnique)",
        "(skPaintGetStrokeJoin,skPaintGetStrokeJoin)",
        "(skPaintGetFilterQuality,skPaintGetFilterQuality)",
        "(skMatrixPreConcat,skMatrixPreConcat)",
        "(skMatrixMapRadius,skMatrixMapRadius)",
        "(skTextblobBuilderAllocRunTextPos,skTextblobBuilderAllocRunTextPos)",
        "(skBitmapTryAllocPixels,skBitmapTryAllocPixels)",
        "(skMatrix44New,skMatrix44New)",
        "(skTextblobGetUniqueId,skTextblobGetUniqueId)",
        "(skPaintGetPosTextIntercepts,skPaintGetPosTextIntercepts)",
        "(skTextblobBuilderAllocRunText,skTextblobBuilderAllocRunText)",
        "(skWstreamWrite,skWstreamWrite)",
        "(skPaintGetFontmetrics,skPaintGetFontmetrics)",
        "(skMemorystreamNewWithLength,skMemorystreamNewWithLength)",
        "(skPaintGetStyle,skPaintGetStyle)",
        "(skPaintSetBlendmode,skPaintSetBlendmode)",
        "(skCodecGetScaledDimensions,skCodecGetScaledDimensions)",
        "(skColorspaceNewRgbWithGammaAndGamut,skColorspaceNewRgbWithGammaAndGamut)",
        "(skPathClose,skPathClose)",
        "(skDynamicmemorywstreamDetachAsData,skDynamicmemorywstreamDetachAsData)",
        "(skDocumentCreateXpsFromStream,skDocumentCreateXpsFromStream)",
        "(grContextGetResourceCacheLimits,grContextGetResourceCacheLimits)",
        "(skPathIterIsClosedContour,skPathIterIsClosedContour)",
        "(skDataNewFromFile,skDataNewFromFile)",
        "(skPathRquadTo,skPathRquadTo)",
        "(skBitmapInstallMaskPixels,skBitmapInstallMaskPixels)",
        "(grContextSetResourceCacheLimits,grContextSetResourceCacheLimits)",
        "(skStreamPeek,skStreamPeek)",
        "(skPaintGetStrokeMiter,skPaintGetStrokeMiter)",
        "(skSurfaceNewRasterDirect,skSurfaceNewRasterDirect)",
        "(skPathEffectCreate_1dPath,skPathEffectCreate_1dPath)",
        "(skFilestreamDestroy,skFilestreamDestroy)",
        "(skWstreamNewline,skWstreamNewline)",
        "(skImageNewRasterCopyWithPixmap,skImageNewRasterCopyWithPixmap)",
        "(skMaskfilterUnref,skMaskfilterUnref)",
        "(skFontmgrMatchFaceStyle,skFontmgrMatchFaceStyle)",
        "(skRegionNew2,skRegionNew2)",
        "(skImagefilterNewMatrix,skImagefilterNewMatrix)",
        "(skMatrix44PostScale,skMatrix44PostScale)",
        "(skMatrixMapVector,skMatrixMapVector)",
        "(skPaintSetPathEffect,skPaintSetPathEffect)",
        "(skImagefilterNewPictureWithCroprect,skImagefilterNewPictureWithCroprect)",
        "(skMatrix44GetType,skMatrix44GetType)",
        "(skMatrix44AsColMajor,skMatrix44AsColMajor)",
        "(skPaintSetTextSkewX,skPaintSetTextSkewX)",
        "(skPathComputeTightBounds,skPathComputeTightBounds)",
        "(skPathRawiterDestroy,skPathRawiterDestroy)",
        "(skPaintIsAutohinted,skPaintIsAutohinted)",
        "(skImageIsTextureBacked,skImageIsTextureBacked)",
        "(skCodecSkipScanlines,skCodecSkipScanlines)",
        "(skMemorystreamSetMemory,skMemorystreamSetMemory)",
        "(skColorspaceNewSrgbLinear,skColorspaceNewSrgbLinear)",
        "(skPixmapDestructor,skPixmapDestructor)",
        "(skPathAddPathOffset,skPathAddPathOffset)",
        "(skColorspaceNewRgbWithGamma,skColorspaceNewRgbWithGamma)",
        "(skColorfilterNewLumaColor,skColorfilterNewLumaColor)",
        "(skMaskfilterNewTable,skMaskfilterNewTable)",
        "(skBitmapGetByteCount,skBitmapGetByteCount)",
        "(skStreamHasPosition,skStreamHasPosition)",
        "(skFontmgrCreateDefault,skFontmgrCreateDefault)",
        "(skColorspaceAsToXyzd50,skColorspaceAsToXyzd50)",
        "(skColorspaceNewRgbWithGammaNamed,skColorspaceNewRgbWithGammaNamed)",
        "(skColorspaceAsFromXyzd50,skColorspaceAsFromXyzd50)",
        "(skPathRconicTo,skPathRconicTo)",
        "(grContextReleaseResourcesAndAbandonContext,grContextReleaseResourcesAndAbandonContext)",
        "(skPaintIsLinearText,skPaintIsLinearText)",
        "(skPaintGetTextSkewX,skPaintGetTextSkewX)",
        "(skPathEffectCreateDiscrete,skPathEffectCreateDiscrete)",
        "(skImageNewFromEncoded,skImageNewFromEncoded)",
        "(skMatrix44Invert,skMatrix44Invert)",
        "(skImageGetColorspace,skImageGetColorspace)",
        "(skFontstyleGetSlant,skFontstyleGetSlant)",
        "(skPaintTextToGlyphs,skPaintTextToGlyphs)",
        "(skCanvasRestoreToCount,skCanvasRestoreToCount)",
        "(grGlinterfaceAssembleGlInterface,grGlinterfaceAssembleGlInterface)",
        "(skWebpencoderEncode,skWebpencoderEncode)",
        "(skFontstylesetUnref,skFontstylesetUnref)",
        "(skSurfaceNewBackendTextureAsRenderTarget,skSurfaceNewBackendTextureAsRenderTarget)",
        "(skCanvasDrawCircle,skCanvasDrawCircle)",
        "(skPathSetFilltype,skPathSetFilltype)",
        "(skMatrix44Transpose,skMatrix44Transpose)",
        "(skColorspaceTransferFnInvert,skColorspaceTransferFnInvert)",
        "(skImageRefEncoded,skImageRefEncoded)",
        "(skColorUnpremultiplyArray,skColorUnpremultiplyArray)",
        "(skImageMakeNonTextureImage,skImageMakeNonTextureImage)",
        "(skCodecIncrementalDecode,skCodecIncrementalDecode)",
        "(skTypefaceGetFontWeight,skTypefaceGetFontWeight)",
        "(skImageNewRasterCopy,skImageNewRasterCopy)",
        "(skBitmapDestructor,skBitmapDestructor)",
        "(skStreamDestroy,skStreamDestroy)",
        "(skPathAddRect,skPathAddRect)",
        "(skCanvasDrawPicture,skCanvasDrawPicture)",
        "(skPathParseSvgString,skPathParseSvgString)",
        "(skCanvasDrawOval,skCanvasDrawOval)",
        "(skShaderNewComposeWithMode,skShaderNewComposeWithMode)",
        "(skColorPremultiplyArray,skColorPremultiplyArray)",
        "(skImageGetColorType,skImageGetColorType)",
        "(skStreamGetMemoryBase,skStreamGetMemoryBase)",
        "(skFilewstreamNew,skFilewstreamNew)",
        "(skCanvasQuickReject,skCanvasQuickReject)",
        "(skCanvasDrawVertices,skCanvasDrawVertices)",
        "(skPathAddArc,skPathAddArc)",
        "(skCanvasGetSaveCount,skCanvasGetSaveCount)",
        "(skMatrix44PreConcat,skMatrix44PreConcat)",
        "(skShaderNewLocalMatrix,skShaderNewLocalMatrix)",
        "(skMemorystreamNewWithData,skMemorystreamNewWithData)",
        "(skPixmapReset,skPixmapReset)",
        "(skDataGetData,skDataGetData)",
        "(skImagefilterNewPaint,skImagefilterNewPaint)",
        "(skCanvasDrawDrawable,skCanvasDrawDrawable)",
        "(skDocumentUnref,skDocumentUnref)",
        "(skPathArcToWithPoints,skPathArcToWithPoints)",
        "(skPathGetBounds,skPathGetBounds)",
        "(skPathAddRrect,skPathAddRrect)",
        "(skStreamReadS16,skStreamReadS16)",
        "(skDataGetBytes,skDataGetBytes)",
        "(skPathAddRrectStart,skPathAddRrectStart)",
        "(skPaintGetPathEffect,skPaintGetPathEffect)",
        "(skBitmapIsVolatile,skBitmapIsVolatile)",
        "(sk_3dviewNew,sk_3dviewNew)",
        "(skBitmapSetPixelColors,skBitmapSetPixelColors)",
        "(skNwayCanvasRemoveAll,skNwayCanvasRemoveAll)",
        "(skPathGetFilltype,skPathGetFilltype)",
        "(skOpbuilderNew,skOpbuilderNew)",
        "(skWstreamWriteStream,skWstreamWriteStream)",
        "(skMemorystreamNew,skMemorystreamNew)",
        "(skWstreamWriteBigdecAsText,skWstreamWriteBigdecAsText)",
        "(skCanvasSaveLayer,skCanvasSaveLayer)",
        "(skColortableCount,skColortableCount)",
        "(skMatrix44AsRowMajor,skMatrix44AsRowMajor)",
        "(skDataUnref,skDataUnref)",
        "(skTypefaceGetTableSize,skTypefaceGetTableSize)",
        "(skCanvasDrawPatch,skCanvasDrawPatch)",
        "(skPixmapNewWithParams,skPixmapNewWithParams)",
        "(skMatrix44Preserves_2dAxisAlignment,skMatrix44Preserves_2dAxisAlignment)",
        "(skPaintReset,skPaintReset)",
        "(skPathAddCircle,skPathAddCircle)",
        "(skCodecStartIncrementalDecode,skCodecStartIncrementalDecode)",
        "(skPathRawiterNext,skPathRawiterNext)",
        "(skCodecGetScanlines,skCodecGetScanlines)",
        "(skPathCreateIter,skPathCreateIter)",
        "(skPathAddOval,skPathAddOval)",
        "(skRrectSetNinePatch,skRrectSetNinePatch)",
        "(skPictureRecorderEndRecordingAsDrawable,skPictureRecorderEndRecordingAsDrawable)",
        "(skBitmapReadyToDraw,skBitmapReadyToDraw)",
        "(skImageNewFromAdoptedTexture,skImageNewFromAdoptedTexture)",
        "(skMaskGetAddr_8,skMaskGetAddr_8)",
        "(skPaintBreakText,skPaintBreakText)",
        "(skPathContains,skPathContains)",
        "(skDocumentEndPage,skDocumentEndPage)",
        "(skCanvasDrawPosText,skCanvasDrawPosText)",
        "(skBitmapSetImmutable,skBitmapSetImmutable)",
        "(skPaintGetTextWidths,skPaintGetTextWidths)",
        "(skTypefaceIsFixedPitch,skTypefaceIsFixedPitch)",
        "(skWstreamBytesWritten,skWstreamBytesWritten)",
        "(skMatrix44SetRotateAboutDegrees,skMatrix44SetRotateAboutDegrees)",
        "(skImagefilterCroprectGetFlags,skImagefilterCroprectGetFlags)",
        "(skDocumentCreatePdfFromStreamWithMetadata,skDocumentCreatePdfFromStreamWithMetadata)",
        "(skBitmapPeekPixels,skBitmapPeekPixels)",
        "(grBackendtextureIsValid,grBackendtextureIsValid)",
        "(sk_3dviewDestroy,sk_3dviewDestroy)",
        "(skSurfaceNewRaster,skSurfaceNewRaster)",
        "(skMatrix44SetRotateAboutRadiansUnit,skMatrix44SetRotateAboutRadiansUnit)",
        "(skBitmapSetPixels,skBitmapSetPixels)",
        "(skRegionGetBounds,skRegionGetBounds)",
        "(skColorspaceNewIcc,skColorspaceNewIcc)",
        "(grContextGetBackend,grContextGetBackend)",
        "(skPaintSetStrokeJoin,skPaintSetStrokeJoin)",
        "(skPathmeasureNewWithPath,skPathmeasureNewWithPath)",
        "(skCanvasRestore,skCanvasRestore)",
        "(skMatrixMapXy,skMatrixMapXy)",
        "(skTypefaceGetFontstyle,skTypefaceGetFontstyle)",
        "(skColorspaceToXyzd50,skColorspaceToXyzd50)",
        "(skImageMakeSubset,skImageMakeSubset)",
        "(skStreamMove,skStreamMove)",
        "(skBitmapGetInfo,skBitmapGetInfo)",
        "(skPaintMeasureText,skPaintMeasureText)",
        "(skPaintGetHinting,skPaintGetHinting)",
        "(skCanvasDrawImage,skCanvasDrawImage)",
        "(skMaskGetAddr_1,skMaskGetAddr_1)",
        "(skPaintSetSubpixelText,skPaintSetSubpixelText)",
        "(skStreamReadU8,skStreamReadU8)",
        "(skDynamicmemorywstreamWriteToStream,skDynamicmemorywstreamWriteToStream)",
        "(skShaderNewCompose,skShaderNewCompose)",
        "(skRrectSetRectXy,skRrectSetRectXy)",
        "(skCanvasDrawBitmapRect,skCanvasDrawBitmapRect)",
        "(skCanvasDrawText,skCanvasDrawText)",
        "(skCanvasDrawRrect,skCanvasDrawRrect)",
        "(skVerticesUnref,skVerticesUnref)",
        "(skMaskAllocImage,skMaskAllocImage)",
        "(skSurfaceReadPixels,skSurfaceReadPixels)",
        "(skJpegencoderEncode,skJpegencoderEncode)",
        "(skRefcntSafeUnref,skRefcntSafeUnref)",
        "(skOpbuilderAdd,skOpbuilderAdd)",
        "(skBitmapNew,skBitmapNew)",
        "(skBitmapGetPixels,skBitmapGetPixels)",
        "(skPaintDelete,skPaintDelete)",
        "(skTypefaceCreateFromStream,skTypefaceCreateFromStream)",
        "(skPathopOp,skPathopOp)",
        "(skBitmapInstallPixelsWithPixmap,skBitmapInstallPixelsWithPixmap)",
        "(skImagefilterUnref,skImagefilterUnref)",
        "(skRrectSetRectRadii,skRrectSetRectRadii)",
        "(skCanvasIsClipEmpty,skCanvasIsClipEmpty)",
        "(skStringNewWithCopy,skStringNewWithCopy)",
        "(skImageReadPixels,skImageReadPixels)",
        "(skStreamHasLength,skStreamHasLength)",
        "(skCanvasDrawPaint,skCanvasDrawPaint)",
        "(grGlinterfaceCreateNativeInterface,grGlinterfaceCreateNativeInterface)",
        "(skRrectSetEmpty,skRrectSetEmpty)",
        "(skStreamGetLength,skStreamGetLength)",
        "(grBackendrendertargetGetHeight,grBackendrendertargetGetHeight)",
        "(skPaintGetTextScaleX,skPaintGetTextScaleX)",
        "(skPathLineTo,skPathLineTo)",
        "(skPaintSetStyle,skPaintSetStyle)",
        "(skCanvasClear,skCanvasClear)",
        "(skColorspaceGammaIsLinear,skColorspaceGammaIsLinear)",
        "(skPaintSetTextAlign,skPaintSetTextAlign)",
        "(skMaskIsEmpty,skMaskIsEmpty)",
        "(skMatrixMapPoints,skMatrixMapPoints)",
        "(skCodecNextScanline,skCodecNextScanline)",
        "(skColorspaceIsNumericalTransferFn,skColorspaceIsNumericalTransferFn)",
        "(skPathIsLine,skPathIsLine)",
        "(skShaderNewRadialGradient,skShaderNewRadialGradient)",
        "(skDataRef,skDataRef)",
        "(grBackendtextureGetHeight,grBackendtextureGetHeight)",
        "(skWstreamWriteText,skWstreamWriteText)",
        "(skPaintSetLinearText,skPaintSetLinearText)",
        "(skMatrixPostConcat,skMatrixPostConcat)",
        "(skMatrix44SetScale,skMatrix44SetScale)",
        "(skBitmapGetPixelColors,skBitmapGetPixelColors)",
        "(skPixmapNew,skPixmapNew)",
        "(skNvrefcntSafeRef,skNvrefcntSafeRef)",
        "(skStreamReadBool,skStreamReadBool)",
        "(skPathDelete,skPathDelete)",
        "(grBackendrendertargetDelete,grBackendrendertargetDelete)",
        "(skPaintGetColorfilter,skPaintGetColorfilter)",
        "(skPathIsOval,skPathIsOval)",
        "(skSurfaceNewNull,skSurfaceNewNull)",
        "(skPictureGetCullRect,skPictureGetCullRect)",
        "(skPathIterConicWeight,skPathIterConicWeight)",
        "(grBackendtextureNewGl,grBackendtextureNewGl)",
        "(skRegionSetRegion,skRegionSetRegion)",
        "(skShaderNewColorFilter,skShaderNewColorFilter)",
        "(skPathIsRect,skPathIsRect)",
        "(skPaintNew,skPaintNew)",
        "(skBitmapEraseRect,skBitmapEraseRect)",
        "(skMatrix44PreScale,skMatrix44PreScale)",
        "(skRrectContains,skRrectContains)",
        "(skShaderNewEmpty,skShaderNewEmpty)",
        "(skPathArcToWithOval,skPathArcToWithOval)",
        "(grBackendtextureHasMipmaps,grBackendtextureHasMipmaps)",
        "(skMatrix44SetIdentity,skMatrix44SetIdentity)",
        "(skFontmgrRefDefault,skFontmgrRefDefault)",
        "(skFontstyleDelete,skFontstyleDelete)",
        "(skPaintIsLcdRenderText,skPaintIsLcdRenderText)",
        "(skImageGetUniqueId,skImageGetUniqueId)",
        "(skBitmapSetVolatile,skBitmapSetVolatile)",
        "(skColorspaceNewRgbWithCoeffsAndGamut,skColorspaceNewRgbWithCoeffsAndGamut)",
        "(skBitmapIsImmutable,skBitmapIsImmutable)",
        "(skMatrix44Equals,skMatrix44Equals)",
        "(skNvrefcntSafeUnref,skNvrefcntSafeUnref)",
        "(sk_3dviewRotateXRadians,sk_3dviewRotateXRadians)",
        "(skPaintIsEmbeddedBitmapText,skPaintIsEmbeddedBitmapText)",
        "(skImagefilterNewDilate,skImagefilterNewDilate)",
        "(skMatrix44ToMatrix,skMatrix44ToMatrix)",
        "(skFontmgrCreateFromStream,skFontmgrCreateFromStream)",
        "(skShaderNewLinearGradient,skShaderNewLinearGradient)",
        "(skCanvasResetMatrix,skCanvasResetMatrix)",
        "(grContextResetContext,grContextResetContext)",
        "(skWstreamWriteScalarAsText,skWstreamWriteScalarAsText)",
        "(skDataNewEmpty,skDataNewEmpty)",
        "(skCodecNewFromStream,skCodecNewFromStream)",
        "(skImageIsLazyGenerated,skImageIsLazyGenerated)",
        "(skDynamicmemorywstreamCopyTo,skDynamicmemorywstreamCopyTo)",
        "(grGlinterfaceAssembleGlesInterface,grGlinterfaceAssembleGlesInterface)",
        "(skPathEffectCreate_2dLine,skPathEffectCreate_2dLine)",
        "(skRegionDelete,skRegionDelete)",
        "(grContextAbandonContext,grContextAbandonContext)",
        "(grBackendrendertargetIsValid,grBackendrendertargetIsValid)",
        "(skPaintSetTypeface,skPaintSetTypeface)",
        "(skDynamicmemorywstreamDetachAsStream,skDynamicmemorywstreamDetachAsStream)",
        "(skPathAddPoly,skPathAddPoly)",
        "(skImageNewFromBitmap,skImageNewFromBitmap)",
        "(skCodecStartScanlineDecode,skCodecStartScanlineDecode)",
        "(skImageIsAlphaOnly,skImageIsAlphaOnly)",
        "(skCanvasDrawAtlas,skCanvasDrawAtlas)",
        "(sk_3dviewApplyToCanvas,sk_3dviewApplyToCanvas)",
        "(skCodecGetFrameInfoForIndex,skCodecGetFrameInfoForIndex)",
        "(grBackendrendertargetGetSamples,grBackendrendertargetGetSamples)",
        "(skCanvasConcat,skCanvasConcat)",
        "(skNodrawCanvasDestroy,skNodrawCanvasDestroy)",
        "(skImageNewFromPicture,skImageNewFromPicture)",
        "(skPaintGetPosTextPath,skPaintGetPosTextPath)",
        "(skPaintIsDevKernText,skPaintIsDevKernText)",
        "(skSurfaceDraw,skSurfaceDraw)",
        "(skPathRlineTo,skPathRlineTo)",
        "(skPaintClone,skPaintClone)",
        "(skDataNewSubset,skDataNewSubset)",
        "(skStringDestructor,skStringDestructor)",
        "(skRrectGetType,skRrectGetType)",
        "(skShaderNewTwoPointConicalGradient,skShaderNewTwoPointConicalGradient)",
        "(skBitmapGetRowBytes,skBitmapGetRowBytes)",
        "(skPathRarcTo,skPathRarcTo)",
        "(skImagefilterNewSpotLitDiffuse,skImagefilterNewSpotLitDiffuse)",
        "(skPathConvertConicToQuads,skPathConvertConicToQuads)",
        "(skCanvasDrawImageLattice,skCanvasDrawImageLattice)",
        "(skSurfaceGetCanvas,skSurfaceGetCanvas)",
        "(skPathGetLastPoint,skPathGetLastPoint)",
        "(skPathCreateRawiter,skPathCreateRawiter)",
        "(skImagefilterNewDropShadow,skImagefilterNewDropShadow)",
        "(skTypefaceGetFamilyName,skTypefaceGetFamilyName)",
        "(skColorspaceUnref,skColorspaceUnref)",
        "(sk_3dviewRestore,sk_3dviewRestore)",
        "(skPictureRecorderNew,skPictureRecorderNew)",
        "(skImagefilterNewImageSourceDefault,skImagefilterNewImageSourceDefault)",
        "(skDynamicmemorywstreamDestroy,skDynamicmemorywstreamDestroy)",
        "(skColorspaceNewRgbWithCoeffs,skColorspaceNewRgbWithCoeffs)",
        "(skPaintSetVerticaltext,skPaintSetVerticaltext)",
        "(skColorspaceNewSrgb,skColorspaceNewSrgb)",
        "(skPathEffectUnref,skPathEffectUnref)",
        "(skTypefaceGetFontWidth,skTypefaceGetFontWidth)",
        "(skFontstyleGetWidth,skFontstyleGetWidth)",
        "(skFontmgrUnref,skFontmgrUnref)",
        "(skPaintGetBlendmode,skPaintGetBlendmode)",
        "(skStreamRewind,skStreamRewind)",
        "(skImagefilterNewMagnifier,skImagefilterNewMagnifier)",
        "(skImagefilterNewColorFilter,skImagefilterNewColorFilter)",
        "(skPixmapResetWithParams,skPixmapResetWithParams)",
        "(skRrectGetHeight,skRrectGetHeight)",
        "(skMatrix44PostConcat,skMatrix44PostConcat)"
      ],
      "Charon": []
    },
    "sleep": {
      "Gasket": [
        "(usleep,MUSleep)"
      ],
      "Charon": [
        "(usleep,MUSleep)"
      ]
    },
    "@sleipnirgroup/trajoptlib": {
      "Gasket": [
        "(wptZeroAngularVelocity,WptZeroAngularVelocity)",
        "(poseWpt,PoseWpt)",
        "(wptZeroVelocity,WptZeroVelocity)",
        "(generate,Generate)",
        "(setDrivetrain,SetDrivetrain)",
        "(SwervePathBuilder,SwervePathBuilderWrap)"
      ],
      "Charon": [
        "(SwervePathBuilder,SwervePathBuilderWrap)",
        "(setDrivetrain,SwervePathBuilderWrap)"
      ]
    },
    "@slimio/micro": {
      "Gasket": [
        "(now,now)",
        "(gettime,gettime)",
        "(gettimeofday,_gettimeofday)",
        "(now,gettime_ms)"
      ],
      "Charon": [
        "(sec,Number)",
        "(usec,Number)",
        "(nsec,Number)",
        "(gettimeofday,_gettimeofday)",
        "(now,now)",
        "(gettime,gettime)",
        "(now,gettime_ms)"
      ]
    },
    "smash-synthserial": {
      "Gasket": [
        "(Test,Test)",
        "(Send,Send)",
        "(Receive,Receive)",
        "(Dispose,Dispose)",
        "(CanRead,CanRead)",
        "(Peek,Peek)",
        "(Unc,Unc)",
        "(AddTest,AddTestWrapped)"
      ],
      "Charon": []
    },
    "@snek/private": {
      "Gasket": [
        "(private,PrivateSymbol)"
      ],
      "Charon": []
    },
    "socketcan": {
      "Gasket": [
        "(sendFD,SendFD)",
        "(stop,Stop)",
        "(start,Start)",
        "(addListener,AddListener)",
        "(encodeSignal,EncodeSignal)",
        "(send,Send)",
        "(RawChannel,New)",
        "(decodeSignal,DecodeSignal)",
        "(disableLoopback,DisableLoopback)",
        "(setRxFilters,SetRxFilters)",
        "(setErrorFilters,SetErrorFilters)"
      ],
      "Charon": [
        "(addListener,AddListener)",
        "(start,Start)",
        "(stop,Stop)",
        "(send,Send)",
        "(sendFD,SendFD)",
        "(setRxFilters,SetRxFilters)",
        "(setErrorFilters,SetErrorFilters)",
        "(disableLoopback,DisableLoopback)",
        "(decodeSignal,DecodeSignal)",
        "(encodeSignal,EncodeSignal)"
      ]
    },
    "socketwatcher": {
      "Gasket": [
        "(stop,Stop)",
        "(set,Set)",
        "(start,Start)",
        "(SocketWatcher,New)"
      ],
      "Charon": [
        "(set,SocketWatcher)",
        "(start,SocketWatcher)",
        "(stop,SocketWatcher)"
      ]
    },
    "sockopt": {
      "Gasket": [
        "(getsockopt,Getsockopt)",
        "(setsockopt,Setsockopt)"
      ],
      "Charon": [
        "(getsockopt,Getsockopt)",
        "(setsockopt,Setsockopt)"
      ]
    },
    "sodium": {
      "Gasket": [
        "(randombytes_close,bind_randombytes_close_)",
        "(crypto_aead_aes256gcm_is_available,bind_crypto_aead_aes256gcm_is_available_)",
        "(crypto_generichash_blake2b_bytes,bind_crypto_generichash_blake2b_bytes_)",
        "(crypto_core_salsa208,bind_crypto_core_salsa208_)",
        "(crypto_aead_chacha20poly1305_encrypt_detached,bind_crypto_aead_chacha20poly1305_encrypt_detached_)",
        "(crypto_stream_chacha20_ietf_noncebytes,bind_crypto_stream_chacha20_ietf_noncebytes_)",
        "(crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive,bind_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive_)",
        "(crypto_verify_32,bind_crypto_verify_32_)",
        "(crypto_pwhash_argon2id_bytes_min,bind_crypto_pwhash_argon2id_bytes_min_)",
        "(crypto_verify_16,bind_crypto_verify_16_)",
        "(crypto_pwhash_argon2i_bytes_max,bind_crypto_pwhash_argon2i_bytes_max_)",
        "(crypto_pwhash_argon2id_bytes_max,bind_crypto_pwhash_argon2id_bytes_max_)",
        "(crypto_hash_sha256_init,bind_crypto_hash_sha256_init_)",
        "(crypto_onetimeauth,bind_crypto_onetimeauth_poly1305_)",
        "(crypto_secretbox_xsalsa20poly1305_open,bind_crypto_secretbox_xsalsa20poly1305_open_)",
        "(crypto_stream_chacha20_ietf_keybytes,bind_crypto_stream_chacha20_ietf_keybytes_)",
        "(crypto_pwhash_argon2id_memlimit_min,bind_crypto_pwhash_argon2id_memlimit_min_)",
        "(crypto_auth_keygen,bind_crypto_auth_hmacsha512256_keygen_)",
        "(crypto_auth_hmacsha512_keygen,bind_crypto_auth_hmacsha512_keygen_)",
        "(crypto_pwhash_bytes_max,bind_crypto_pwhash_bytes_max_)",
        "(crypto_sign_seed_keypair,bind_crypto_sign_ed25519_seed_keypair_)",
        "(compare,bind_compare_)",
        "(crypto_pwhash_strbytes,bind_crypto_pwhash_strbytes_)",
        "(crypto_pwhash_argon2i_bytes_min,bind_crypto_pwhash_argon2i_bytes_min_)",
        "(crypto_pwhash_argon2i_memlimit_interactive,bind_crypto_pwhash_argon2i_memlimit_interactive_)",
        "(crypto_sign_ed25519_keypair,bind_crypto_sign_ed25519_keypair_)",
        "(crypto_aead_aes256gcm_abytes,bind_crypto_aead_aes256gcm_abytes_)",
        "(crypto_pwhash_argon2i_passwd_min,bind_crypto_pwhash_argon2i_passwd_min_)",
        "(crypto_auth_hmacsha512256_keybytes,bind_crypto_auth_hmacsha512256_keybytes_)",
        "(crypto_sign_ed25519_sk_to_pk,bind_crypto_sign_ed25519_sk_to_pk_)",
        "(crypto_box_sealbytes,bind_crypto_box_sealbytes_)",
        "(crypto_pwhash_opslimit_max,bind_crypto_pwhash_opslimit_max_)",
        "(crypto_sign_ed25519_sk_to_curve25519,bind_crypto_sign_ed25519_sk_to_curve25519_)",
        "(sodium_runtime_has_neon,bind_sodium_runtime_has_neon_)",
        "(crypto_aead_aes256gcm_decrypt_afternm,bind_crypto_aead_aes256gcm_decrypt_afternm_)",
        "(crypto_generichash_primitive,bind_crypto_generichash_primitive_)",
        "(crypto_pwhash_argon2i_memlimit_sensitive,bind_crypto_pwhash_argon2i_memlimit_sensitive_)",
        "(crypto_stream_salsa208_noncebytes,bind_crypto_stream_salsa208_noncebytes_)",
        "(crypto_pwhash_argon2i_opslimit_sensitive,bind_crypto_pwhash_argon2i_opslimit_sensitive_)",
        "(crypto_aead_chacha20poly1305_ietf_messagebytes_max,bind_crypto_aead_chacha20poly1305_ietf_messagebytes_max_)",
        "(increment,bind_increment_)",
        "(crypto_pwhash_passwd_max,bind_crypto_pwhash_passwd_max_)",
        "(crypto_box,bind_crypto_box_)",
        "(crypto_aead_chacha20poly1305_ietf_decrypt,bind_crypto_aead_chacha20poly1305_ietf_decrypt_)",
        "(crypto_pwhash_scryptsalsa208sha256_bytes_max,bind_crypto_pwhash_scryptsalsa208sha256_bytes_max_)",
        "(sodium_runtime_has_sse3,bind_sodium_runtime_has_sse3_)",
        "(crypto_box_open,bind_crypto_box_open_)",
        "(crypto_pwhash_argon2i_strbytes,bind_crypto_pwhash_argon2i_strbytes_)",
        "(crypto_aead_aes256gcm_encrypt,bind_crypto_aead_aes256gcm_encrypt_)",
        "(crypto_generichash,bind_crypto_generichash_)",
        "(crypto_generichash_blake2b_saltbytes,bind_crypto_generichash_blake2b_saltbytes_)",
        "(crypto_scalarmult_curve25519_base,bind_crypto_scalarmult_curve25519_base_)",
        "(crypto_box_curve25519xsalsa20poly1305_keypair,bind_crypto_box_curve25519xsalsa20poly1305_keypair_)",
        "(crypto_scalarmult_base,bind_crypto_scalarmult_curve25519_base_)",
        "(crypto_pwhash_argon2i,bind_crypto_pwhash_argon2i_)",
        "(crypto_stream_salsa20_noncebytes,bind_crypto_stream_salsa20_noncebytes_)",
        "(crypto_box_curve25519xsalsa20poly1305_zerobytes,bind_crypto_box_curve25519xsalsa20poly1305_zerobytes_)",
        "(crypto_aead_chacha20poly1305_encrypt,bind_crypto_aead_chacha20poly1305_encrypt_)",
        "(crypto_sign_ed25519_open,bind_crypto_sign_ed25519_open_)",
        "(sodium_library_version_minor,bind_sodium_library_version_minor_)",
        "(crypto_onetimeauth_update,bind_crypto_onetimeauth_poly1305_update_)",
        "(crypto_box_open_afternm,bind_crypto_box_open_afternm_)",
        "(crypto_stream_salsa208,bind_crypto_stream_salsa208_)",
        "(crypto_scalarmult,bind_crypto_scalarmult_curve25519_)",
        "(crypto_aead_xchacha20poly1305_ietf_decrypt,bind_crypto_aead_xchacha20poly1305_ietf_decrypt_)",
        "(crypto_pwhash_scryptsalsa208sha256_memlimit_interactive,bind_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive_)",
        "(bin2hex,bind_bin2hex_)",
        "(crypto_generichash_blake2b_keybytes,bind_crypto_generichash_blake2b_keybytes_)",
        "(crypto_box_curve25519xsalsa20poly1305_messagebytes_max,bind_crypto_box_curve25519xsalsa20poly1305_messagebytes_max_)",
        "(crypto_auth_hmacsha256_update,bind_crypto_auth_hmacsha256_update_)",
        "(crypto_box_keypair,bind_crypto_box_keypair_)",
        "(crypto_secretbox,bind_crypto_secretbox_)",
        "(crypto_aead_xchacha20poly1305_ietf_decrypt_detached,bind_crypto_aead_xchacha20poly1305_ietf_decrypt_detached_)",
        "(crypto_box_curve25519xsalsa20poly1305_publickeybytes,bind_crypto_box_curve25519xsalsa20poly1305_publickeybytes_)",
        "(crypto_auth_hmacsha512256_statebytes,bind_crypto_auth_hmacsha512256_statebytes_)",
        "(crypto_auth_hmacsha512_init,bind_crypto_auth_hmacsha512_init_)",
        "(crypto_box_noncebytes,bind_crypto_box_noncebytes_)",
        "(crypto_box_curve25519xsalsa20poly1305_open_afternm,bind_crypto_box_curve25519xsalsa20poly1305_open_afternm_)",
        "(crypto_pwhash_opslimit_sensitive,bind_crypto_pwhash_opslimit_sensitive_)",
        "(crypto_generichash_init,bind_crypto_generichash_init_)",
        "(crypto_stream_xsalsa20_noncebytes,bind_crypto_stream_xsalsa20_noncebytes_)",
        "(crypto_pwhash_argon2i_str_needs_rehash,bind_crypto_pwhash_argon2i_str_needs_rehash_)",
        "(crypto_auth_hmacsha512256_verify,bind_crypto_auth_hmacsha512256_verify_)",
        "(crypto_aead_chacha20poly1305_keybytes,bind_crypto_aead_chacha20poly1305_keybytes_)",
        "(crypto_aead_chacha20poly1305_keygen,bind_crypto_aead_chacha20poly1305_keygen_)",
        "(crypto_core_hchacha20_keybytes,bind_crypto_core_hchacha20_keybytes_)",
        "(crypto_aead_aes256gcm_messagebytes_max,bind_crypto_aead_aes256gcm_messagebytes_max_)",
        "(crypto_aead_aes256gcm_decrypt_detached,bind_crypto_aead_aes256gcm_decrypt_detached_)",
        "(crypto_stream_xsalsa20_xor,bind_crypto_stream_xsalsa20_xor_)",
        "(crypto_aead_chacha20poly1305_ietf_nsecbytes,bind_crypto_aead_chacha20poly1305_ietf_nsecbytes_)",
        "(sodium_runtime_has_avx2,bind_sodium_runtime_has_avx2_)",
        "(crypto_hash_sha256_final,bind_crypto_hash_sha256_final_)",
        "(crypto_core_salsa2012,bind_crypto_core_salsa2012_)",
        "(crypto_generichash_keybytes_min,bind_crypto_generichash_keybytes_min_)",
        "(crypto_stream,bind_crypto_stream_xsalsa20_)",
        "(crypto_aead_aes256gcm_keybytes,bind_crypto_aead_aes256gcm_keybytes_)",
        "(crypto_aead_aes256gcm_encrypt_detached_afternm,bind_crypto_aead_aes256gcm_encrypt_detached_afternm_)",
        "(crypto_box_curve25519xsalsa20poly1305_macbytes,bind_crypto_box_curve25519xsalsa20poly1305_macbytes_)",
        "(crypto_generichash_blake2b_keybytes_max,bind_crypto_generichash_blake2b_keybytes_max_)",
        "(crypto_aead_chacha20poly1305_ietf_decrypt_detached,bind_crypto_aead_chacha20poly1305_ietf_decrypt_detached_)",
        "(crypto_aead_chacha20poly1305_ietf_keybytes,bind_crypto_aead_chacha20poly1305_ietf_keybytes_)",
        "(crypto_pwhash_argon2id_passwd_max,bind_crypto_pwhash_argon2id_passwd_max_)",
        "(crypto_auth_hmacsha512_final,bind_crypto_auth_hmacsha512_final_)",
        "(crypto_pwhash_strprefix,bind_crypto_pwhash_strprefix_)",
        "(crypto_aead_chacha20poly1305_decrypt_detached,bind_crypto_aead_chacha20poly1305_decrypt_detached_)",
        "(crypto_auth_bytes,bind_crypto_auth_bytes_)",
        "(randombytes_random,bind_randombytes_random_)",
        "(crypto_sign_open,bind_crypto_sign_ed25519_open_)",
        "(randombytes_buf,bind_randombytes_buf_)",
        "(crypto_generichash_blake2b_keybytes_min,bind_crypto_generichash_blake2b_keybytes_min_)",
        "(crypto_pwhash_argon2id_memlimit_moderate,bind_crypto_pwhash_argon2id_memlimit_moderate_)",
        "(crypto_core_salsa2012_keybytes,bind_crypto_core_salsa2012_keybytes_)",
        "(crypto_onetimeauth_poly1305_verify,bind_crypto_onetimeauth_poly1305_verify_)",
        "(crypto_aead_aes256gcm_decrypt,bind_crypto_aead_aes256gcm_decrypt_)",
        "(crypto_generichash_keygen,bind_crypto_generichash_keygen_)",
        "(crypto_generichash_statebytes,bind_crypto_generichash_statebytes_)",
        "(crypto_stream_chacha20_ietf,bind_crypto_stream_chacha20_ietf_)",
        "(crypto_pwhash_scryptsalsa208sha256_str,bind_crypto_pwhash_scryptsalsa208sha256_str_)",
        "(crypto_generichash_keybytes_max,bind_crypto_generichash_keybytes_max_)",
        "(crypto_box_seal_open,bind_crypto_box_seal_open_)",
        "(crypto_box_afternm,bind_crypto_box_afternm_)",
        "(sodium_runtime_has_pclmul,bind_sodium_runtime_has_pclmul_)",
        "(crypto_box_seedbytes,bind_crypto_box_seedbytes_)",
        "(crypto_sign_ed25519_pk_to_curve25519,bind_crypto_sign_ed25519_pk_to_curve25519_)",
        "(crypto_core_hsalsa20,bind_crypto_core_hsalsa20_)",
        "(crypto_onetimeauth_poly1305_final,bind_crypto_onetimeauth_poly1305_final_)",
        "(crypto_generichash_blake2b_bytes_min,bind_crypto_generichash_blake2b_bytes_min_)",
        "(crypto_box_curve25519xsalsa20poly1305_beforenmbytes,bind_crypto_box_curve25519xsalsa20poly1305_beforenmbytes_)",
        "(crypto_aead_chacha20poly1305_npubbytes,bind_crypto_aead_chacha20poly1305_npubbytes_)",
        "(crypto_core_hsalsa20_keybytes,bind_crypto_core_hsalsa20_keybytes_)",
        "(crypto_aead_aes256gcm_encrypt_detached,bind_crypto_aead_aes256gcm_encrypt_detached_)",
        "(crypto_box_open_easy,bind_crypto_box_open_easy_)",
        "(crypto_pwhash_str,bind_crypto_pwhash_str_)",
        "(crypto_hash_sha256,bind_crypto_hash_sha256_)",
        "(crypto_generichash_final,bind_crypto_generichash_final_)",
        "(crypto_pwhash_scryptsalsa208sha256_memlimit_min,bind_crypto_pwhash_scryptsalsa208sha256_memlimit_min_)",
        "(hex2bin,bind_hex2bin_)",
        "(crypto_hash_sha256_statebytes,bind_crypto_hash_sha256_statebytes_)",
        "(crypto_generichash_blake2b_salt_personal,bind_crypto_generichash_blake2b_salt_personal_)",
        "(crypto_stream_noncebytes,bind_crypto_stream_noncebytes_)",
        "(crypto_pwhash_primitive,bind_crypto_pwhash_primitive_)",
        "(crypto_stream_chacha20_ietf_xor_ic,bind_crypto_stream_chacha20_ietf_xor_ic_)",
        "(crypto_auth_hmacsha512_update,bind_crypto_auth_hmacsha512_update_)",
        "(crypto_core_hsalsa20_outputbytes,bind_crypto_core_hsalsa20_outputbytes_)",
        "(crypto_auth_hmacsha256_bytes,bind_crypto_auth_hmacsha256_bytes_)",
        "(crypto_core_salsa20_constbytes,bind_crypto_core_salsa20_constbytes_)",
        "(crypto_auth_hmacsha512256_init,bind_crypto_auth_hmacsha512256_init_)",
        "(crypto_pwhash_argon2i_opslimit_interactive,bind_crypto_pwhash_argon2i_opslimit_interactive_)",
        "(crypto_auth_hmacsha512256,bind_crypto_auth_hmacsha512256_)",
        "(crypto_core_salsa20,bind_crypto_core_salsa20_)",
        "(crypto_pwhash_saltbytes,bind_crypto_pwhash_saltbytes_)",
        "(crypto_aead_chacha20poly1305_nsecbytes,bind_crypto_aead_chacha20poly1305_nsecbytes_)",
        "(crypto_stream_salsa2012_xor,bind_crypto_stream_salsa2012_xor_)",
        "(crypto_aead_chacha20poly1305_messagebytes_max,bind_crypto_aead_chacha20poly1305_messagebytes_max_)",
        "(crypto_hash_sha512_init,bind_crypto_hash_sha512_init_)",
        "(crypto_onetimeauth_final,bind_crypto_onetimeauth_poly1305_final_)",
        "(crypto_box_detached,bind_crypto_box_detached_)",
        "(crypto_aead_aes256gcm_npubbytes,bind_crypto_aead_aes256gcm_npubbytes_)",
        "(crypto_pwhash_argon2i_memlimit_min,bind_crypto_pwhash_argon2i_memlimit_min_)",
        "(crypto_core_hchacha20,bind_crypto_core_hchacha20_)",
        "(memcmp,bind_memcmp_)",
        "(crypto_pwhash_scryptsalsa208sha256_saltbytes,bind_crypto_pwhash_scryptsalsa208sha256_saltbytes_)",
        "(crypto_pwhash_argon2i_opslimit_max,bind_crypto_pwhash_argon2i_opslimit_max_)",
        "(crypto_stream_chacha20_keybytes,bind_crypto_stream_chacha20_keybytes_)",
        "(crypto_stream_salsa208_keybytes,bind_crypto_stream_salsa208_keybytes_)",
        "(crypto_generichash_bytes_min,bind_crypto_generichash_bytes_min_)",
        "(crypto_stream_xsalsa20_xor_ic,bind_crypto_stream_xsalsa20_xor_ic_)",
        "(crypto_box_easy_afternm,bind_crypto_box_easy_afternm_)",
        "(crypto_onetimeauth_poly1305_keybytes,bind_crypto_onetimeauth_poly1305_keybytes_)",
        "(crypto_pwhash_argon2id_str_needs_rehash,bind_crypto_pwhash_argon2id_str_needs_rehash_)",
        "(crypto_pwhash_argon2id_strprefix,bind_crypto_pwhash_argon2id_strprefix_)",
        "(crypto_pwhash_argon2id_saltbytes,bind_crypto_pwhash_argon2id_saltbytes_)",
        "(crypto_box_detached_afternm,bind_crypto_box_detached_afternm_)",
        "(crypto_box_secretkeybytes,bind_crypto_box_secretkeybytes_)",
        "(crypto_hash_sha256_bytes,bind_crypto_hash_sha256_bytes_)",
        "(crypto_box_curve25519xsalsa20poly1305_beforenm,bind_crypto_box_curve25519xsalsa20poly1305_beforenm_)",
        "(crypto_aead_xchacha20poly1305_ietf_npubbytes,bind_crypto_aead_xchacha20poly1305_ietf_npubbytes_)",
        "(crypto_auth_hmacsha256_keybytes,bind_crypto_auth_hmacsha256_keybytes_)",
        "(crypto_auth_primitive,bind_crypto_auth_primitive_)",
        "(crypto_box_macbytes,bind_crypto_box_macbytes_)",
        "(crypto_sign_ed25519_sk_to_seed,bind_crypto_sign_ed25519_sk_to_seed_)",
        "(crypto_generichash_update,bind_crypto_generichash_update_)",
        "(crypto_pwhash_str_alg,bind_crypto_pwhash_str_alg_)",
        "(crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive,bind_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive_)",
        "(crypto_box_curve25519xsalsa20poly1305_boxzerobytes,bind_crypto_box_curve25519xsalsa20poly1305_boxzerobytes_)",
        "(crypto_stream_chacha20_noncebytes,bind_crypto_stream_chacha20_noncebytes_)",
        "(crypto_auth_hmacsha512_verify,bind_crypto_auth_hmacsha512_verify_)",
        "(crypto_onetimeauth_poly1305_init,bind_crypto_onetimeauth_poly1305_init_)",
        "(crypto_box_open_detached_afternm,bind_crypto_box_open_detached_afternm_)",
        "(crypto_aead_chacha20poly1305_ietf_npubbytes,bind_crypto_aead_chacha20poly1305_ietf_npubbytes_)",
        "(sodium_runtime_has_ssse3,bind_sodium_runtime_has_ssse3_)",
        "(crypto_stream_keybytes,bind_crypto_stream_keybytes_)",
        "(crypto_pwhash_alg_argon2i13,bind_crypto_pwhash_alg_argon2i13_)",
        "(crypto_generichash_bytes,bind_crypto_generichash_bytes_)",
        "(crypto_hash_sha512_statebytes,bind_crypto_hash_sha512_statebytes_)",
        "(crypto_pwhash_scryptsalsa208sha256_opslimit_max,bind_crypto_pwhash_scryptsalsa208sha256_opslimit_max_)",
        "(crypto_pwhash_argon2i_str,bind_crypto_pwhash_argon2i_str_)",
        "(crypto_sign,bind_crypto_sign_ed25519_)",
        "(crypto_auth_hmacsha512256_keygen,bind_crypto_auth_hmacsha512256_keygen_)",
        "(crypto_hash_sha512_update,bind_crypto_hash_sha512_update_)",
        "(crypto_stream_salsa2012_keybytes,bind_crypto_stream_salsa2012_keybytes_)",
        "(crypto_generichash_blake2b_final,bind_crypto_generichash_blake2b_final_)",
        "(crypto_onetimeauth_keygen,bind_crypto_onetimeauth_poly1305_keygen_)",
        "(crypto_pwhash_argon2id_str_verify,bind_crypto_pwhash_argon2id_str_verify_)",
        "(crypto_aead_chacha20poly1305_ietf_encrypt_detached,bind_crypto_aead_chacha20poly1305_ietf_encrypt_detached_)",
        "(crypto_generichash_keybytes,bind_crypto_generichash_keybytes_)",
        "(crypto_aead_xchacha20poly1305_ietf_nsecbytes,bind_crypto_aead_xchacha20poly1305_ietf_nsecbytes_)",
        "(crypto_aead_aes256gcm_keygen,bind_crypto_aead_aes256gcm_keygen_)",
        "(crypto_auth_hmacsha256,bind_crypto_auth_hmacsha256_)",
        "(crypto_box_primitive,bind_crypto_box_primitive_)",
        "(crypto_hash,bind_crypto_hash_)",
        "(crypto_box_curve25519xsalsa20poly1305,bind_crypto_box_curve25519xsalsa20poly1305_)",
        "(crypto_pwhash_memlimit_interactive,bind_crypto_pwhash_memlimit_interactive_)",
        "(crypto_pwhash_argon2i_memlimit_moderate,bind_crypto_pwhash_argon2i_memlimit_moderate_)",
        "(crypto_aead_chacha20poly1305_ietf_abytes,bind_crypto_aead_chacha20poly1305_ietf_abytes_)",
        "(crypto_hash_sha512_bytes,bind_crypto_hash_sha512_bytes_)",
        "(crypto_pwhash_scryptsalsa208sha256_str_needs_rehash,bind_crypto_pwhash_scryptsalsa208sha256_str_needs_rehash_)",
        "(crypto_stream_salsa20_keybytes,bind_crypto_stream_salsa20_keybytes_)",
        "(crypto_stream_chacha20_xor,bind_crypto_stream_chacha20_xor_)",
        "(crypto_core_salsa20_keybytes,bind_crypto_core_salsa20_keybytes_)",
        "(crypto_auth_hmacsha512256_update,bind_crypto_auth_hmacsha512256_update_)",
        "(crypto_auth_hmacsha256_verify,bind_crypto_auth_hmacsha256_verify_)",
        "(crypto_core_salsa208_inputbytes,bind_crypto_core_salsa208_inputbytes_)",
        "(crypto_hash_bytes,bind_crypto_hash_bytes_)",
        "(crypto_generichash_blake2b_keygen,bind_crypto_generichash_blake2b_keygen_)",
        "(crypto_secretbox_easy,bind_crypto_secretbox_easy_)",
        "(crypto_hash_sha512_final,bind_crypto_hash_sha512_final_)",
        "(crypto_secretbox_open_easy,bind_crypto_secretbox_open_easy_)",
        "(sodium_library_version_major,bind_sodium_library_version_major_)",
        "(crypto_verify_64,bind_crypto_verify_64_)",
        "(crypto_generichash_bytes_max,bind_crypto_generichash_bytes_max_)",
        "(crypto_core_salsa208_keybytes,bind_crypto_core_salsa208_keybytes_)",
        "(crypto_auth_hmacsha512256_final,bind_crypto_auth_hmacsha512256_final_)",
        "(crypto_auth,bind_crypto_auth_hmacsha512256_)",
        "(crypto_pwhash_opslimit_interactive,bind_crypto_pwhash_opslimit_interactive_)",
        "(crypto_auth_verify,bind_crypto_auth_hmacsha512256_verify_)",
        "(crypto_aead_xchacha20poly1305_ietf_abytes,bind_crypto_aead_xchacha20poly1305_ietf_abytes_)",
        "(crypto_onetimeauth_poly1305_bytes,bind_crypto_onetimeauth_poly1305_bytes_)",
        "(crypto_hash_sha256_update,bind_crypto_hash_sha256_update_)",
        "(crypto_core_hchacha20_outputbytes,bind_crypto_core_hchacha20_outputbytes_)",
        "(crypto_pwhash_argon2id_memlimit_sensitive,bind_crypto_pwhash_argon2id_memlimit_sensitive_)",
        "(crypto_generichash_blake2b_bytes_max,bind_crypto_generichash_blake2b_bytes_max_)",
        "(crypto_onetimeauth_poly1305_keygen,bind_crypto_onetimeauth_poly1305_keygen_)",
        "(randombytes,bind_randombytes_buf_)",
        "(crypto_aead_aes256gcm_beforenm,bind_crypto_aead_aes256gcm_beforenm_)",
        "(crypto_pwhash_str_verify,bind_crypto_pwhash_str_verify_)",
        "(crypto_generichash_blake2b_init,bind_crypto_generichash_blake2b_init_)",
        "(crypto_core_salsa2012_constbytes,bind_crypto_core_salsa2012_constbytes_)",
        "(crypto_pwhash_argon2id_memlimit_max,bind_crypto_pwhash_argon2id_memlimit_max_)",
        "(crypto_pwhash_scryptsalsa208sha256_strprefix,bind_crypto_pwhash_scryptsalsa208sha256_strprefix_)",
        "(crypto_aead_chacha20poly1305_decrypt,bind_crypto_aead_chacha20poly1305_decrypt_)",
        "(crypto_box_curve25519xsalsa20poly1305_afternm,bind_crypto_box_curve25519xsalsa20poly1305_afternm_)",
        "(crypto_aead_xchacha20poly1305_ietf_keybytes,bind_crypto_aead_xchacha20poly1305_ietf_keybytes_)",
        "(crypto_auth_hmacsha256_statebytes,bind_crypto_auth_hmacsha256_statebytes_)",
        "(crypto_stream_chacha20_xor_ic,bind_crypto_stream_chacha20_xor_ic_)",
        "(crypto_pwhash_argon2id_opslimit_sensitive,bind_crypto_pwhash_argon2id_opslimit_sensitive_)",
        "(crypto_core_salsa2012_outputbytes,bind_crypto_core_salsa2012_outputbytes_)",
        "(crypto_pwhash_argon2i_saltbytes,bind_crypto_pwhash_argon2i_saltbytes_)",
        "(crypto_box_open_easy_afternm,bind_crypto_box_open_easy_afternm_)",
        "(crypto_pwhash_scryptsalsa208sha256_strbytes,bind_crypto_pwhash_scryptsalsa208sha256_strbytes_)",
        "(crypto_pwhash_memlimit_sensitive,bind_crypto_pwhash_memlimit_sensitive_)",
        "(crypto_core_hchacha20_constbytes,bind_crypto_core_hchacha20_constbytes_)",
        "(crypto_aead_chacha20poly1305_abytes,bind_crypto_aead_chacha20poly1305_abytes_)",
        "(sodium_version_string,bind_sodium_version_string_)",
        "(crypto_generichash_blake2b_personalbytes,bind_crypto_generichash_blake2b_personalbytes_)",
        "(crypto_auth_hmacsha256_final,bind_crypto_auth_hmacsha256_final_)",
        "(crypto_box_messagebytes_max,bind_crypto_box_messagebytes_max_)",
        "(crypto_aead_xchacha20poly1305_ietf_keygen,bind_crypto_aead_xchacha20poly1305_ietf_keygen_)",
        "(crypto_pwhash_argon2id_memlimit_interactive,bind_crypto_pwhash_argon2id_memlimit_interactive_)",
        "(crypto_pwhash_argon2i_str_verify,bind_crypto_pwhash_argon2i_str_verify_)",
        "(crypto_hash_sha512,bind_crypto_hash_sha512_)",
        "(crypto_box_beforenm,bind_crypto_box_beforenm_)",
        "(crypto_stream_salsa20,bind_crypto_stream_salsa20_)",
        "(crypto_stream_salsa20_xor_ic,bind_crypto_stream_salsa20_xor_ic_)",
        "(randombytes_buf_deterministic,bind_randombytes_buf_deterministic_)",
        "(crypto_box_curve25519xsalsa20poly1305_seedbytes,bind_crypto_box_curve25519xsalsa20poly1305_seedbytes_)",
        "(crypto_pwhash_argon2id_alg_argon2id13,bind_crypto_pwhash_argon2id_alg_argon2id13_)",
        "(crypto_core_salsa208_outputbytes,bind_crypto_core_salsa208_outputbytes_)",
        "(crypto_pwhash_argon2id_opslimit_interactive,bind_crypto_pwhash_argon2id_opslimit_interactive_)",
        "(crypto_box_zerobytes,bind_crypto_box_zerobytes_)",
        "(crypto_pwhash_scryptsalsa208sha256,bind_crypto_pwhash_scryptsalsa208sha256_)",
        "(crypto_box_seal,bind_crypto_box_seal_)",
        "(sodium_runtime_has_sse41,bind_sodium_runtime_has_sse41_)",
        "(crypto_pwhash_argon2id_strbytes,bind_crypto_pwhash_argon2id_strbytes_)",
        "(crypto_onetimeauth_verify,bind_crypto_onetimeauth_poly1305_verify_)",
        "(crypto_aead_chacha20poly1305_ietf_encrypt,bind_crypto_aead_chacha20poly1305_ietf_encrypt_)",
        "(crypto_sign_keypair,bind_crypto_sign_ed25519_keypair_)",
        "(crypto_core_salsa20_inputbytes,bind_crypto_core_salsa20_inputbytes_)",
        "(crypto_pwhash_argon2id_str,bind_crypto_pwhash_argon2id_str_)",
        "(randombytes_uniform,bind_randombytes_uniform_)",
        "(crypto_auth_keybytes,bind_crypto_auth_keybytes_)",
        "(crypto_box_curve25519xsalsa20poly1305_noncebytes,bind_crypto_box_curve25519xsalsa20poly1305_noncebytes_)",
        "(add,bind_add_)",
        "(crypto_stream_primitive,bind_crypto_stream_primitive_)",
        "(crypto_stream_xsalsa20_keybytes,bind_crypto_stream_xsalsa20_keybytes_)",
        "(crypto_pwhash_scryptsalsa208sha256_passwd_min,bind_crypto_pwhash_scryptsalsa208sha256_passwd_min_)",
        "(crypto_stream_salsa2012_noncebytes,bind_crypto_stream_salsa2012_noncebytes_)",
        "(crypto_aead_xchacha20poly1305_ietf_encrypt,bind_crypto_aead_xchacha20poly1305_ietf_encrypt_)",
        "(crypto_pwhash_argon2id,bind_crypto_pwhash_argon2id_)",
        "(crypto_auth_hmacsha512_statebytes,bind_crypto_auth_hmacsha512_statebytes_)",
        "(crypto_onetimeauth_poly1305_update,bind_crypto_onetimeauth_poly1305_update_)",
        "(crypto_pwhash_memlimit_min,bind_crypto_pwhash_memlimit_min_)",
        "(crypto_core_salsa20_outputbytes,bind_crypto_core_salsa20_outputbytes_)",
        "(crypto_aead_aes256gcm_nsecbytes,bind_crypto_aead_aes256gcm_nsecbytes_)",
        "(crypto_aead_xchacha20poly1305_ietf_encrypt_detached,bind_crypto_aead_xchacha20poly1305_ietf_encrypt_detached_)",
        "(crypto_stream_xsalsa20,bind_crypto_stream_xsalsa20_)",
        "(crypto_pwhash_argon2id_opslimit_moderate,bind_crypto_pwhash_argon2id_opslimit_moderate_)",
        "(crypto_box_seed_keypair,bind_crypto_box_seed_keypair_)",
        "(crypto_pwhash_argon2i_strprefix,bind_crypto_pwhash_argon2i_strprefix_)",
        "(crypto_aead_chacha20poly1305_ietf_keygen,bind_crypto_aead_chacha20poly1305_ietf_keygen_)",
        "(crypto_pwhash,bind_crypto_pwhash_)",
        "(crypto_pwhash_bytes_min,bind_crypto_pwhash_bytes_min_)",
        "(crypto_stream_chacha20,bind_crypto_stream_chacha20_)",
        "(crypto_sign_ed25519,bind_crypto_sign_ed25519_)",
        "(crypto_pwhash_alg_default,bind_crypto_pwhash_alg_default_)",
        "(crypto_pwhash_argon2id_passwd_min,bind_crypto_pwhash_argon2id_passwd_min_)",
        "(crypto_box_boxzerobytes,bind_crypto_box_boxzerobytes_)",
        "(crypto_core_hchacha20_inputbytes,bind_crypto_core_hchacha20_inputbytes_)",
        "(crypto_generichash_blake2b_statebytes,bind_crypto_generichash_blake2b_statebytes_)",
        "(is_zero,bind_is_zero_)",
        "(crypto_secretbox_open,bind_crypto_secretbox_open_)",
        "(crypto_stream_salsa208_xor,bind_crypto_stream_salsa208_xor_)",
        "(crypto_box_open_detached,bind_crypto_box_open_detached_)",
        "(crypto_pwhash_argon2id_opslimit_max,bind_crypto_pwhash_argon2id_opslimit_max_)",
        "(crypto_pwhash_argon2i_memlimit_max,bind_crypto_pwhash_argon2i_memlimit_max_)",
        "(crypto_pwhash_alg_argon2id13,bind_crypto_pwhash_alg_argon2id13_)",
        "(crypto_generichash_blake2b_update,bind_crypto_generichash_blake2b_update_)",
        "(crypto_pwhash_str_needs_rehash,bind_crypto_pwhash_str_needs_rehash_)",
        "(crypto_shorthash_siphash24,bind_crypto_shorthash_siphash24_)",
        "(crypto_core_hsalsa20_constbytes,bind_crypto_core_hsalsa20_constbytes_)",
        "(memzero,bind_memzero_)",
        "(sodium_runtime_has_sse2,bind_sodium_runtime_has_sse2_)",
        "(crypto_secretbox_open_detached,bind_crypto_secretbox_open_detached_)",
        "(crypto_auth_hmacsha512_keybytes,bind_crypto_auth_hmacsha512_keybytes_)",
        "(crypto_stream_salsa2012,bind_crypto_stream_salsa2012_)",
        "(crypto_core_salsa2012_inputbytes,bind_crypto_core_salsa2012_inputbytes_)",
        "(crypto_pwhash_opslimit_min,bind_crypto_pwhash_opslimit_min_)",
        "(crypto_stream_xor,bind_crypto_stream_xsalsa20_xor_)",
        "(crypto_aead_aes256gcm_encrypt_afternm,bind_crypto_aead_aes256gcm_encrypt_afternm_)",
        "(crypto_sign_ed25519_seed_keypair,bind_crypto_sign_ed25519_seed_keypair_)",
        "(crypto_pwhash_scryptsalsa208sha256_memlimit_max,bind_crypto_pwhash_scryptsalsa208sha256_memlimit_max_)",
        "(sodium_runtime_has_avx,bind_sodium_runtime_has_avx_)",
        "(crypto_hash_primitive,bind_crypto_hash_primitive_)",
        "(crypto_secretbox_detached,bind_crypto_secretbox_detached_)",
        "(crypto_sign_detached,bind_crypto_sign_ed25519_detached_)",
        "(crypto_core_salsa208_constbytes,bind_crypto_core_salsa208_constbytes_)",
        "(crypto_box_curve25519xsalsa20poly1305_secretkeybytes,bind_crypto_box_curve25519xsalsa20poly1305_secretkeybytes_)",
        "(crypto_box_publickeybytes,bind_crypto_box_publickeybytes_)",
        "(sodium_runtime_has_aesni,bind_sodium_runtime_has_aesni_)",
        "(crypto_pwhash_scryptsalsa208sha256_str_verify,bind_crypto_pwhash_scryptsalsa208sha256_str_verify_)",
        "(crypto_pwhash_scryptsalsa208sha256_passwd_max,bind_crypto_pwhash_scryptsalsa208sha256_passwd_max_)",
        "(crypto_pwhash_scryptsalsa208sha256_opslimit_interactive,bind_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive_)",
        "(crypto_pwhash_argon2i_opslimit_moderate,bind_crypto_pwhash_argon2i_opslimit_moderate_)",
        "(crypto_pwhash_argon2id_opslimit_min,bind_crypto_pwhash_argon2id_opslimit_min_)",
        "(crypto_box_beforenmbytes,bind_crypto_box_beforenmbytes_)",
        "(crypto_onetimeauth_poly1305,bind_crypto_onetimeauth_poly1305_)",
        "(crypto_stream_salsa20_xor,bind_crypto_stream_salsa20_xor_)",
        "(crypto_box_easy,bind_crypto_box_easy_)",
        "(crypto_pwhash_argon2i_alg_argon2i13,bind_crypto_pwhash_argon2i_alg_argon2i13_)",
        "(crypto_pwhash_memlimit_max,bind_crypto_pwhash_memlimit_max_)",
        "(crypto_pwhash_scryptsalsa208sha256_ll,bind_crypto_pwhash_scryptsalsa208sha256_ll_)",
        "(crypto_pwhash_argon2i_passwd_max,bind_crypto_pwhash_argon2i_passwd_max_)",
        "(crypto_auth_hmacsha512,bind_crypto_auth_hmacsha512_)",
        "(crypto_pwhash_passwd_min,bind_crypto_pwhash_passwd_min_)",
        "(crypto_auth_hmacsha512_bytes,bind_crypto_auth_hmacsha512_bytes_)",
        "(crypto_scalarmult_curve25519,bind_crypto_scalarmult_curve25519_)",
        "(crypto_pwhash_scryptsalsa208sha256_opslimit_min,bind_crypto_pwhash_scryptsalsa208sha256_opslimit_min_)",
        "(crypto_box_curve25519xsalsa20poly1305_open,bind_crypto_box_curve25519xsalsa20poly1305_open_)",
        "(crypto_auth_hmacsha512256_bytes,bind_crypto_auth_hmacsha512256_bytes_)",
        "(crypto_sign_verify_detached,bind_crypto_sign_ed25519_verify_detached_)",
        "(crypto_pwhash_scryptsalsa208sha256_bytes_min,bind_crypto_pwhash_scryptsalsa208sha256_bytes_min_)",
        "(crypto_onetimeauth_init,bind_crypto_onetimeauth_poly1305_init_)",
        "(crypto_generichash_blake2b,bind_crypto_generichash_blake2b_)",
        "(crypto_pwhash_argon2i_opslimit_min,bind_crypto_pwhash_argon2i_opslimit_min_)",
        "(crypto_sign_ed25519_verify_detached,bind_crypto_sign_ed25519_verify_detached_)",
        "(crypto_shorthash,bind_crypto_shorthash_)",
        "(crypto_stream_chacha20_ietf_xor,bind_crypto_stream_chacha20_ietf_xor_)",
        "(crypto_sign_ed25519_detached,bind_crypto_sign_ed25519_detached_)",
        "(crypto_onetimeauth_poly1305_statebytes,bind_crypto_onetimeauth_poly1305_statebytes_)",
        "(crypto_aead_aes256gcm_decrypt_detached_afternm,bind_crypto_aead_aes256gcm_decrypt_detached_afternm_)",
        "(crypto_auth_hmacsha256_init,bind_crypto_auth_hmacsha256_init_)",
        "(crypto_secretbox_xsalsa20poly1305,bind_crypto_secretbox_xsalsa20poly1305_)",
        "(crypto_aead_xchacha20poly1305_ietf_messagebytes_max,bind_crypto_aead_xchacha20poly1305_ietf_messagebytes_max_)",
        "(crypto_auth_hmacsha256_keygen,bind_crypto_auth_hmacsha256_keygen_)",
        "(crypto_core_hsalsa20_inputbytes,bind_crypto_core_hsalsa20_inputbytes_)",
        "(randombytes_stir,bind_randombytes_stir_)"
      ],
      "Charon": []
    },
    "sodium-native": {
      "Gasket": [
        "(crypto_stream_chacha20_ietf_xor_update,sn_crypto_stream_chacha20_ietf_xor_wrap_update)",
        "(crypto_stream_chacha20_xor,sn_crypto_stream_chacha20_xor)",
        "(sodium_malloc,sn_sodium_malloc)",
        "(crypto_pwhash_scryptsalsa208sha256_str_async,sn_crypto_pwhash_scryptsalsa208sha256_str_async)",
        "(crypto_hash_sha256_final,sn_crypto_hash_sha256_final)",
        "(sodium_mprotect_readwrite,sn_sodium_mprotect_readwrite)",
        "(crypto_scalarmult,sn_crypto_scalarmult)",
        "(sodium_pad,sn_sodium_pad)",
        "(sodium_free,sn_sodium_free)",
        "(crypto_scalarmult_ed25519_noclamp,sn_crypto_scalarmult_ed25519_noclamp)",
        "(randombytes_random,sn_randombytes_random)",
        "(crypto_box_keypair,sn_crypto_box_keypair)",
        "(crypto_pwhash_str_verify,sn_crypto_pwhash_str_verify)",
        "(crypto_kdf_derive_from_key,sn_crypto_kdf_derive_from_key)",
        "(extension_tweak_ed25519_scalar,sn_extension_tweak_ed25519_scalar)",
        "(crypto_stream_chacha20_ietf_xor,sn_crypto_stream_chacha20_ietf_xor)",
        "(crypto_onetimeauth,sn_crypto_onetimeauth)",
        "(extension_tweak_ed25519_sk_to_scalar,sn_extension_tweak_ed25519_sk_to_scalar)",
        "(crypto_shorthash,sn_crypto_shorthash)",
        "(crypto_stream_chacha20_ietf_xor_init,sn_crypto_stream_chacha20_ietf_xor_wrap_init)",
        "(crypto_sign_ed25519_sk_to_curve25519,sn_crypto_sign_ed25519_sk_to_curve25519)",
        "(crypto_stream_chacha20_xor_init,sn_crypto_stream_chacha20_xor_wrap_init)",
        "(crypto_scalarmult_ed25519_base_noclamp,sn_crypto_scalarmult_ed25519_base_noclamp)",
        "(crypto_aead_chacha20poly1305_ietf_decrypt_detached,sn_crypto_aead_chacha20poly1305_ietf_decrypt_detached)",
        "(crypto_generichash_final,sn_crypto_generichash_final)",
        "(crypto_pwhash_scryptsalsa208sha256,sn_crypto_pwhash_scryptsalsa208sha256)",
        "(crypto_aead_xchacha20poly1305_ietf_encrypt_detached,sn_crypto_aead_xchacha20poly1305_ietf_encrypt_detached)",
        "(crypto_box_seal,sn_crypto_box_seal)",
        "(crypto_hash_sha256_update,sn_crypto_hash_sha256_update)",
        "(crypto_aead_chacha20poly1305_ietf_encrypt,sn_crypto_aead_chacha20poly1305_ietf_encrypt)",
        "(crypto_scalarmult_base,sn_crypto_scalarmult_base)",
        "(sodium_mprotect_noaccess,sn_sodium_mprotect_noaccess)",
        "(randombytes_uniform,sn_randombytes_uniform)",
        "(crypto_aead_xchacha20poly1305_ietf_encrypt,sn_crypto_aead_xchacha20poly1305_ietf_encrypt)",
        "(crypto_hash_sha256,sn_crypto_hash_sha256)",
        "(crypto_secretbox_easy,sn_crypto_secretbox_easy)",
        "(crypto_stream_salsa20_xor_final,sn_crypto_stream_salsa20_xor_wrap_final)",
        "(crypto_hash_sha512_init,sn_crypto_hash_sha512_init)",
        "(crypto_sign_detached,sn_crypto_sign_detached)",
        "(randombytes_buf,sn_randombytes_buf)",
        "(crypto_core_ed25519_scalar_sub,sn_crypto_core_ed25519_scalar_sub)",
        "(crypto_sign_seed_keypair,sn_crypto_sign_seed_keypair)",
        "(crypto_box_open_detached,sn_crypto_box_open_detached)",
        "(crypto_box_seal_open,sn_crypto_box_seal_open)",
        "(crypto_core_ed25519_add,sn_crypto_core_ed25519_add)",
        "(crypto_aead_chacha20poly1305_ietf_keygen,sn_crypto_aead_chacha20poly1305_ietf_keygen)",
        "(crypto_aead_chacha20poly1305_ietf_encrypt_detached,sn_crypto_aead_chacha20poly1305_ietf_encrypt_detached)",
        "(crypto_onetimeauth_update,sn_crypto_onetimeauth_update)",
        "(crypto_stream_chacha20_xor_final,sn_crypto_stream_chacha20_xor_wrap_final)",
        "(crypto_core_ed25519_scalar_random,sn_crypto_core_ed25519_scalar_random)",
        "(crypto_onetimeauth_verify,sn_crypto_onetimeauth_verify)",
        "(extension_tweak_ed25519_pk_add,sn_extension_tweak_ed25519_pk_add)",
        "(crypto_box_detached,sn_crypto_box_detached)",
        "(crypto_kdf_keygen,sn_crypto_kdf_keygen)",
        "(crypto_core_ed25519_is_valid_point,sn_crypto_core_ed25519_is_valid_point)",
        "(crypto_box_easy,sn_crypto_box_easy)",
        "(crypto_kx_client_session_keys,sn_crypto_kx_client_session_keys)",
        "(crypto_stream_xchacha20_xor_update,sn_crypto_stream_xchacha20_xor_wrap_update)",
        "(crypto_auth_verify,sn_crypto_auth_verify)",
        "(crypto_pwhash_scryptsalsa208sha256_str_needs_rehash,sn_crypto_pwhash_scryptsalsa208sha256_str_needs_rehash)",
        "(crypto_hash_sha256_init,sn_crypto_hash_sha256_init)",
        "(sodium_sub,sn_sodium_sub)",
        "(sodium_is_zero,sn_sodium_is_zero)",
        "(crypto_stream_xchacha20_xor,sn_crypto_stream_xchacha20_xor)",
        "(crypto_pwhash,sn_crypto_pwhash)",
        "(crypto_aead_chacha20poly1305_ietf_decrypt,sn_crypto_aead_chacha20poly1305_ietf_decrypt)",
        "(crypto_box_open_easy,sn_crypto_box_open_easy)",
        "(crypto_sign_open,sn_crypto_sign_open)",
        "(crypto_core_ed25519_scalar_reduce,sn_crypto_core_ed25519_scalar_reduce)",
        "(crypto_scalarmult_ed25519,sn_crypto_scalarmult_ed25519)",
        "(crypto_core_ed25519_scalar_add,sn_crypto_core_ed25519_scalar_add)",
        "(crypto_pwhash_async,sn_crypto_pwhash_async)",
        "(crypto_kx_seed_keypair,sn_crypto_kx_seed_keypair)",
        "(crypto_stream_salsa20_xor_update,sn_crypto_stream_salsa20_xor_wrap_update)",
        "(crypto_secretbox_detached,sn_crypto_secretbox_detached)",
        "(crypto_stream_xor_final,sn_crypto_stream_xor_wrap_final)",
        "(crypto_secretbox_open_easy,sn_crypto_secretbox_open_easy)",
        "(crypto_stream_chacha20_xor_ic,sn_crypto_stream_chacha20_xor_ic)",
        "(crypto_pwhash_scryptsalsa208sha256_str,sn_crypto_pwhash_scryptsalsa208sha256_str)",
        "(sodium_mprotect_readonly,sn_sodium_mprotect_readonly)",
        "(crypto_core_ed25519_sub,sn_crypto_core_ed25519_sub)",
        "(crypto_sign,sn_crypto_sign)",
        "(crypto_generichash_batch,sn_crypto_generichash_batch)",
        "(crypto_hash_sha512,sn_crypto_hash_sha512)",
        "(crypto_secretstream_xchacha20poly1305_pull,sn_crypto_secretstream_xchacha20poly1305_pull)",
        "(crypto_stream_chacha20,sn_crypto_stream_chacha20)",
        "(crypto_stream_salsa20,sn_crypto_stream_salsa20)",
        "(extension_pbkdf2_sha512_async,sn_extension_pbkdf2_sha512_async)",
        "(sodium_mlock,sn_sodium_mlock)",
        "(crypto_generichash_keygen,sn_crypto_generichash_keygen)",
        "(crypto_hash_sha512_update,sn_crypto_hash_sha512_update)",
        "(crypto_hash,sn_crypto_hash)",
        "(crypto_stream_chacha20_xor_update,sn_crypto_stream_chacha20_xor_wrap_update)",
        "(extension_tweak_ed25519_base,sn_extension_tweak_ed25519_base)",
        "(crypto_sign_ed25519_pk_to_curve25519,sn_crypto_sign_ed25519_pk_to_curve25519)",
        "(crypto_stream_xor,sn_crypto_stream_xor)",
        "(sodium_compare,sn_sodium_compare)",
        "(sodium_unpad,sn_sodium_unpad)",
        "(crypto_core_ed25519_from_uniform,sn_crypto_core_ed25519_from_uniform)",
        "(crypto_stream_xor_init,sn_crypto_stream_xor_wrap_init)",
        "(crypto_secretstream_xchacha20poly1305_init_push,sn_crypto_secretstream_xchacha20poly1305_init_push)",
        "(crypto_kx_keypair,sn_crypto_kx_keypair)",
        "(sodium_increment,sn_sodium_increment)",
        "(crypto_stream_xchacha20_xor_init,sn_crypto_stream_xchacha20_xor_wrap_init)",
        "(crypto_stream_salsa20_xor_init,sn_crypto_stream_salsa20_xor_wrap_init)",
        "(crypto_pwhash_scryptsalsa208sha256_str_verify,sn_crypto_pwhash_scryptsalsa208sha256_str_verify)",
        "(crypto_sign_verify_detached,sn_crypto_sign_verify_detached)",
        "(crypto_generichash_init,sn_crypto_generichash_init)",
        "(crypto_stream_xor_update,sn_crypto_stream_xor_wrap_update)",
        "(crypto_aead_xchacha20poly1305_ietf_keygen,sn_crypto_aead_xchacha20poly1305_ietf_keygen)",
        "(crypto_stream_chacha20_ietf_xor_ic,sn_crypto_stream_chacha20_ietf_xor_ic)",
        "(extension_tweak_ed25519_pk,sn_extension_tweak_ed25519_pk)",
        "(crypto_secretstream_xchacha20poly1305_keygen,sn_crypto_secretstream_xchacha20poly1305_keygen)",
        "(sodium_add,sn_sodium_add)",
        "(crypto_pwhash_str,sn_crypto_pwhash_str)",
        "(crypto_pwhash_str_verify_async,sn_crypto_pwhash_str_verify_async)",
        "(crypto_pwhash_scryptsalsa208sha256_async,sn_crypto_pwhash_scryptsalsa208sha256_async)",
        "(crypto_sign_ed25519_sk_to_pk,sn_crypto_sign_ed25519_sk_to_pk)",
        "(crypto_onetimeauth_final,sn_crypto_onetimeauth_final)",
        "(crypto_secretstream_xchacha20poly1305_rekey,sn_crypto_secretstream_xchacha20poly1305_rekey)",
        "(sodium_munlock,sn_sodium_munlock)",
        "(extension_tweak_ed25519_keypair,sn_extension_tweak_ed25519_keypair)",
        "(crypto_aead_xchacha20poly1305_ietf_decrypt,sn_crypto_aead_xchacha20poly1305_ietf_decrypt)",
        "(extension_pbkdf2_sha512,sn_extension_pbkdf2_sha512)",
        "(extension_tweak_ed25519_sign_detached,sn_extension_tweak_ed25519_sign_detached)",
        "(crypto_stream_salsa20_xor,sn_crypto_stream_salsa20_xor)",
        "(crypto_generichash_update,sn_crypto_generichash_update)",
        "(crypto_stream_xchacha20_xor_final,sn_crypto_stream_xchacha20_xor_wrap_final)",
        "(crypto_onetimeauth_init,sn_crypto_onetimeauth_init)",
        "(sodium_memzero,sn_sodium_memzero)",
        "(crypto_stream_chacha20_ietf,sn_crypto_stream_chacha20_ietf)",
        "(crypto_core_ed25519_scalar_negate,sn_crypto_core_ed25519_scalar_negate)",
        "(crypto_generichash,sn_crypto_generichash)",
        "(crypto_secretstream_xchacha20poly1305_init_pull,sn_crypto_secretstream_xchacha20poly1305_init_pull)",
        "(crypto_scalarmult_ed25519_base,sn_crypto_scalarmult_ed25519_base)",
        "(crypto_auth,sn_crypto_auth)",
        "(crypto_core_ed25519_scalar_invert,sn_crypto_core_ed25519_scalar_invert)",
        "(crypto_box_seed_keypair,sn_crypto_box_seed_keypair)",
        "(randombytes_buf_deterministic,sn_randombytes_buf_deterministic)",
        "(crypto_kx_server_session_keys,sn_crypto_kx_server_session_keys)",
        "(crypto_hash_sha512_final,sn_crypto_hash_sha512_final)",
        "(crypto_stream_xchacha20,sn_crypto_stream_xchacha20)",
        "(crypto_sign_keypair,sn_crypto_sign_keypair)",
        "(crypto_stream,sn_crypto_stream)",
        "(crypto_stream_xchacha20_xor_ic,sn_crypto_stream_xchacha20_xor_ic)",
        "(crypto_secretbox_open_detached,sn_crypto_secretbox_open_detached)",
        "(crypto_aead_xchacha20poly1305_ietf_decrypt_detached,sn_crypto_aead_xchacha20poly1305_ietf_decrypt_detached)",
        "(crypto_stream_chacha20_ietf_xor_final,sn_crypto_stream_chacha20_ietf_xor_wrap_final)",
        "(crypto_stream_salsa20_xor_ic,sn_crypto_stream_salsa20_xor_ic)",
        "(extension_tweak_ed25519_keypair_add,sn_extension_tweak_ed25519_keypair_add)",
        "(extension_tweak_ed25519_scalar_add,sn_extension_tweak_ed25519_scalar_add)",
        "(crypto_pwhash_str_needs_rehash,sn_crypto_pwhash_str_needs_rehash)",
        "(crypto_pwhash_scryptsalsa208sha256_str_verify_async,sn_crypto_pwhash_scryptsalsa208sha256_str_verify_async)",
        "(crypto_secretstream_xchacha20poly1305_push,sn_crypto_secretstream_xchacha20poly1305_push)",
        "(crypto_core_ed25519_scalar_complement,sn_crypto_core_ed25519_scalar_complement)",
        "(crypto_pwhash_str_async,sn_crypto_pwhash_str_async)",
        "(sodium_memcmp,sn_sodium_memcmp)"
      ],
      "Charon": []
    },
    "@soruly/opencv4nodejs-prebuilt": {
      "Gasket": [
        "(goodFeaturesToTrack,GoodFeaturesToTrack)",
        "(countNonZero,CountNonZero)",
        "(reduceAsync,ReduceAsync)",
        "(houghLinesAsync,HoughLinesAsync)",
        "(eye,Eye)",
        "(exp,Exp)",
        "(bitwiseXor,BitwiseXor)",
        "(thresholdAsync,ThresholdAsync)",
        "(imdecodeAsync,ImdecodeAsync)",
        "(matchTemplate,MatchTemplate)",
        "(at,At)",
        "(getTextSize,GetTextSize)",
        "(splitChannelsAsync,Split)",
        "(matMul,MatMul)",
        "(popBackAsync,PopBackAsync)",
        "(pop_back,PopBack)",
        "(equalizeHist,EqualizeHist)",
        "(warpAffine,WarpAffine)",
        "(watershedAsync,WatershedAsync)",
        "(copyTo,CopyTo)",
        "(TermCriteria,New)",
        "(sqrBoxFilterAsync,SqrBoxFilterAsync)",
        "(threshold,Threshold)",
        "(scharrAsync,ScharrAsync)",
        "(drawRectangle,DrawRectangle)",
        "(push_backAsync,PushBackAsync)",
        "(padAsync,PadAsync)",
        "(pop_backAsync,PopBackAsync)",
        "(reduce,Reduce)",
        "(drawEllipse,DrawEllipse)",
        "(drawFillPoly,DrawFillPoly)",
        "(connectedComponentsAsync,ConnectedComponentsAsync)",
        "(convexityDefects,ConvexityDefects)",
        "(copy,Copy)",
        "(mul,Mul)",
        "(cornerEigenValsAndVecs,CornerEigenValsAndVecs)",
        "(isCustomMatAllocatorEnabled,IsCustomMatAllocatorEnabled)",
        "(kmeans,Kmeans)",
        "(polarToCartAsync,PolarToCartAsync)",
        "(mean,Mean)",
        "(erode,Erode)",
        "(solve,Solve)",
        "(meanStdDevAsync,MeanStdDevAsync)",
        "(flattenFloat,FlattenFloat)",
        "(flipAsync,FlipAsync)",
        "(cvtColor,CvtColor)",
        "(grabCutAsync,GrabCutAsync)",
        "(sepFilter2D,SepFilter2D)",
        "(release,Release)",
        "(drawContoursAsync,DrawContoursAsync)",
        "(getPoints,GetPoints)",
        "(dft,Dft)",
        "(pointPolygonTest,PointPolygonTest)",
        "(setTo,SetTo)",
        "(fitEllipse,FitEllipse)",
        "(pad,Pad)",
        "(write,Write)",
        "(resizeToMax,ResizeToMax)",
        "(copyMakeBorderAsync,CopyMakeBorderAsync)",
        "(imreadAsync,ImreadAsync)",
        "(rotate,Rotate)",
        "(getData,GetData)",
        "(imshow,Imshow)",
        "(transpose,Transpose)",
        "(bilateralFilter,BilateralFilter)",
        "(addWeighted,AddWeighted)",
        "(toSquareAsync,ToSquareAsync)",
        "(copyMakeBorder,CopyMakeBorder)",
        "(drawArrowedLine,DrawArrowedLine)",
        "(normalizeAsync,NormalizeAsync)",
        "(fourcc,Fourcc)",
        "(eigen,Eigen)",
        "(add,Add)",
        "(push_back,PushBack)",
        "(transformAsync,TransformAsync)",
        "(solveAsync,SolveAsync)",
        "(cvtColorAsync,CvtColorAsync)",
        "(morphologyExAsync,MorphologyExAsync)",
        "(minEnclosingTriangle,MinEnclosingTriangle)",
        "(sum,Sum)",
        "(drawContours,DrawContours)",
        "(distanceTransform,DistanceTransform)",
        "(meanStdDev,MeanStdDev)",
        "(blurAsync,BlurAsync)",
        "(floodFill,FloodFill)",
        "(gaussianBlur,GaussianBlur)",
        "(warpPerspectiveAsync,WarpPerspectiveAsync)",
        "(approxPolyDPContour,ApproxPolyDPContour)",
        "(bitwiseAnd,BitwiseAnd)",
        "(houghLinesP,HoughLinesP)",
        "(minMaxLoc,MinMaxLoc)",
        "(goodFeaturesToTrackAsync,GoodFeaturesToTrackAsync)",
        "(erodeAsync,ErodeAsync)",
        "(matchTemplateAsync,MatchTemplateAsync)",
        "(distanceTransformWithLabels,DistanceTransformWithLabels)",
        "(inRangeAsync,InRangeAsync)",
        "(sqrBoxFilter,SqrBoxFilter)",
        "(filter2D,Filter2D)",
        "(medianBlurAsync,MedianBlurAsync)",
        "(resizeToMaxAsync,ResizeToMaxAsync)",
        "(momentsAsync,_MomentsAsync)",
        "(huMoments,HuMoments)",
        "(houghCirclesAsync,HoughCirclesAsync)",
        "(bgrToGray,BgrToGray)",
        "(drawPolylines,DrawPolylines)",
        "(normalize,Normalize)",
        "(findNonZeroAsync,FindNonZeroAsync)",
        "(blur,Blur)",
        "(mulSpectrums,MulSpectrums)",
        "(dctAsync,DctAsync)",
        "(laplacian,Laplacian)",
        "(norm,Norm)",
        "(div,Div)",
        "(pushBack,PushBack)",
        "(Vec,New)",
        "(resize,Resize)",
        "(sub,Sub)",
        "(determinant,Determinant)",
        "(approxPolyDP,ApproxPolyDP)",
        "(addWeightedAsync,AddWeightedAsync)",
        "(waitKey,WaitKey)",
        "(inRange,InRange)",
        "(getStructuringElement,GetStructuringElement)",
        "(grabCut,GrabCut)",
        "(copyToAsync,CopyToAsync)",
        "(cornerMinEigenVal,CornerMinEigenVal)",
        "(splitAsync,SplitAsync)",
        "(idftAsync,IdftAsync)",
        "(fitLine,FitLine)",
        "(sqrt,Sqrt)",
        "(minEnclosingCircle,MinEnclosingCircle)",
        "(imdecode,Imdecode)",
        "(matchShapes,MatchShapes)",
        "(split,Split)",
        "(drawCircle,DrawCircle)",
        "(read,Read)",
        "(setAsync,SetAsync)",
        "(idctAsync,IdctAsync)",
        "(set,Set)",
        "(cartToPolarAsync,CartToPolarAsync)",
        "(perspectiveTransformAsync,PerspectiveTransformAsync)",
        "(rescale,Rescale)",
        "(laplacianAsync,LaplacianAsync)",
        "(adaptiveThresholdAsync,AdaptiveThresholdAsync)",
        "(getDataAsync,GetDataAsync)",
        "(distanceTransformWithLabelsAsync,DistanceTransformWithLabelsAsync)",
        "(pyrUpAsync,PyrUpAsync)",
        "(floodFillAsync,FloodFillAsync)",
        "(applyColorMapAsync,ApplyColorMapAsync)",
        "(bitwiseNot,BitwiseNot)",
        "(imshowWait,ImshowWait)",
        "(destroyWindow,DestroyWindow)",
        "(absdiff,Absdiff)",
        "(convertScaleAbsAsync,ConvertScaleAbsAsync)",
        "(reset,Reset)",
        "(houghCircles,HoughCircles)",
        "(readAsync,ReadAsync)",
        "(Contour,New)",
        "(cartToPolar,CartToPolar)",
        "(morphologyEx,MorphologyEx)",
        "(mulSpectrumsAsync,MulSpectrumsAsync)",
        "(sobel,Sobel)",
        "(houghLinesPAsync,HoughLinesPAsync)",
        "(convertToAsync,ConvertToAsync)",
        "(bilateralFilterAsync,BilateralFilterAsync)",
        "(setToAsync,SetToAsync)",
        "(convertTo,ConvertTo)",
        "(connectedComponents,ConnectedComponents)",
        "(compareHistAsync,CompareHistAsync)",
        "(cornerHarrisAsync,CornerHarrisAsync)",
        "(Rect,New)",
        "(getNumThreads,GetNumThreads)",
        "(Size,New)",
        "(pushBackAsync,PushBackAsync)",
        "(Point,New)",
        "(imencodeAsync,ImencodeAsync)",
        "(connectedComponentsWithStats,ConnectedComponentsWithStats)",
        "(convexHullIndices,ConvexHullIndices)",
        "(eigenAsync,EigenAsync)",
        "(getBuildInformation,GetBuildInformation)",
        "(dct,Dct)",
        "(arcLength,ArcLength)",
        "(Mat,New)",
        "(sepFilter2DAsync,SepFilter2DAsync)",
        "(popBack,PopBack)",
        "(findContoursAsync,FindContoursAsync)",
        "(cornerEigenValsAndVecsAsync,CornerEigenValsAndVecsAsync)",
        "(transform,Transform)",
        "(drawFillConvexPoly,DrawFillConvexPoly)",
        "(pyrDownAsync,PyrDownAsync)",
        "(imwrite,Imwrite)",
        "(VideoCapture,New)",
        "(sumAsync,SumAsync)",
        "(log,Log)",
        "(boxFilter,BoxFilter)",
        "(dilate,Dilate)",
        "(idct,Idct)",
        "(minMaxLocAsync,MinMaxLocAsync)",
        "(adaptiveThreshold,AdaptiveThreshold)",
        "(convertScaleAbs,ConvertScaleAbs)",
        "(padToSquareAsync,PadToSquareAsync)",
        "(calcHist,CalcHist)",
        "(idft,Idft)",
        "(polarToCart,PolarToCart)",
        "(copyAsync,CopyAsync)",
        "(bgrToGrayAsync,BgrToGrayAsync)",
        "(dangerousEnableCustomMatAllocator,DangerousEnableCustomMatAllocator)",
        "(findNonZero,FindNonZero)",
        "(pyrDown,PyrDown)",
        "(compareHist,CompareHist)",
        "(boundingRect,BoundingRect)",
        "(padToSquare,PadToSquare)",
        "(cannyAsync,CannyAsync)",
        "(cornerMinEigenValAsync,CornerMinEigenValAsync)",
        "(gaussianBlurAsync,GaussianBlurAsync)",
        "(getPerspectiveTransform,GetPerspectiveTransform)",
        "(moveWindow,MoveWindow)",
        "(VideoWriter,New)",
        "(putText,PutText)",
        "(meanAsync,MeanAsync)",
        "(plot1DHist,Plot1DHist)",
        "(Moments,New)",
        "(getThreadNum,GetThreadNum)",
        "(warpAffineAsync,WarpAffineAsync)",
        "(getDataAsArray,GetDataAsArray)",
        "(flip,Flip)",
        "(hDiv,HDiv)",
        "(resizeAsync,ResizeAsync)",
        "(warpPerspective,WarpPerspective)",
        "(getTextSizeAsync,GetTextSizeAsync)",
        "(integral,Integral)",
        "(approxPolyDPAsync,ApproxPolyDPAsync)",
        "(convexHull,ConvexHull)",
        "(dftAsync,DftAsync)",
        "(distanceTransformAsync,DistanceTransformAsync)",
        "(equalizeHistAsync,EqualizeHistAsync)",
        "(connectedComponentsWithStatsAsync,ConnectedComponentsWithStatsAsync)",
        "(toSquare,ToSquare)",
        "(watershed,Watershed)",
        "(filter2DAsync,Filter2DAsync)",
        "(applyColorMap,ApplyColorMap)",
        "(findContours,FindContours)",
        "(cornerHarris,CornerHarris)",
        "(integralAsync,IntegralAsync)",
        "(writeAsync,WriteAsync)",
        "(medianBlur,MedianBlur)",
        "(imwriteAsync,ImwriteAsync)",
        "(dilateAsync,DilateAsync)",
        "(sobelAsync,SobelAsync)",
        "(partition,Partition)",
        "(perspectiveTransform,PerspectiveTransform)",
        "(bitwiseOr,BitwiseOr)",
        "(getRegion,GetRegion)",
        "(pyrUp,PyrUp)",
        "(getRotationMatrix2D,GetRotationMatrix2D)",
        "(canny,Canny)",
        "(abs,Abs)",
        "(get,Get)",
        "(hMul,HMul)",
        "(moments,_Moments)",
        "(imread,Imread)",
        "(drawLine,DrawLine)",
        "(houghLines,HoughLines)",
        "(imencode,Imencode)",
        "(getAsync,GetAsync)",
        "(countNonZeroAsync,CountNonZeroAsync)",
        "(getAffineTransform,GetAffineTransform)",
        "(rotateAsync,RotateAsync)",
        "(cornerSubPixAsync,CornerSubPixAsync)",
        "(buildPyramidAsync,BuildPyramidAsync)",
        "(minAreaRect,MinAreaRect)",
        "(boxFilterAsync,BoxFilterAsync)",
        "(RotatedRect,New)",
        "(and,And)",
        "(scharr,Scharr)",
        "(row,Row)",
        "(rescaleAsync,RescaleAsync)",
        "(buildPyramid,BuildPyramid)",
        "(destroyAllWindows,DestroyAllWindows)",
        "(dangerousDisableCustomMatAllocator,DangerousDisableCustomMatAllocator)",
        "(splitChannels,Split)",
        "(cornerSubPix,CornerSubPix)",
        "(getMemMetrics,GetMemMetrics)",
        "(dot,Dot)",
        "(setNumThreads,SetNumThreads)",
        "(or,Or)",
        "(atRaw,AtRaw)"
      ],
      "Charon": []
    },
    "@sosuisen/nodegit": {
      "Gasket": [
        "(getInt64,GetInt64)",
        "(getPath,GetPath)",
        "(mode,Mode)",
        "(writeTree,WriteTree)",
        "(messageRemove,MessageRemove)",
        "(entryById,EntryByid)",
        "(commitWalk,CommitWalk)",
        "(authorWithMailmap,AuthorWithMailmap)",
        "(IndexNameEntry,JSNewFunction)",
        "(MergeOptions,JSNewFunction)",
        "(reload,Reload)",
        "(rename,Rename)",
        "(Remote,JSNewFunction)",
        "(ensureLog,EnsureLog)",
        "(parse,Parse)",
        "(sorting,Sorting)",
        "(hashSha1,HashSha1)",
        "(DiffPatchidOptions,JSNewFunction)",
        "(nanoseconds,Nanoseconds)",
        "(StatusEntry,JSNewFunction)",
        "(apply,Apply)",
        "(setOom,SetOom)",
        "(fromRef,FromRef)",
        "(cmp,Cmp)",
        "(insertTree,InsertTree)",
        "(Refspec,JSNewFunction)",
        "(load,Load)",
        "(Signature,JSNewFunction)",
        "(removeAll,RemoveAll)",
        "(toBuffer,ToBuffer)",
        "(idOld,IdOld)",
        "(defaultRef,DefaultRef)",
        "(inflatedlen,Inflatedlen)",
        "(content,Content)",
        "(deletions,Deletions)",
        "(branch,Branch)",
        "(byIndex,Byindex)",
        "(Clone,Clone)",
        "(indexedObjects,IndexedObjects)",
        "(oldLineno,OldLineno)",
        "(Reset,Reset)",
        "(abort,Abort)",
        "(local,Local)",
        "(containsNul,ContainsNul)",
        "(list,List)",
        "(Time,JSNewFunction)",
        "(pathIsIgnored,PathIsIgnored)",
        "(written,Written)",
        "(discover,Discover)",
        "(wdId,WdId)",
        "(fromRepository,FromRepository)",
        "(receivedObjects,ReceivedObjects)",
        "(openExt,OpenExt)",
        "(get,Get)",
        "(filesChanged,FilesChanged)",
        "(totalObjects,TotalObjects)",
        "(addAll,AddAll)",
        "(upstreamRemote,UpstreamRemote)",
        "(target,Target)",
        "(features,Features)",
        "(diffEntry,DiffEntry)",
        "(updateStrategy,UpdateStrategy)",
        "(ref,Ref)",
        "(idAbbrev,IdAbbrev)",
        "(unlock,Unlock)",
        "(Mailmap,JSNewFunction)",
        "(stop,Stop)",
        "(pop,Pop)",
        "(convenientFromDiff,ConvenientFromDiff)",
        "(headDetached,HeadDetached)",
        "(Filter,JSNewFunction)",
        "(toObject,ToObject)",
        "(FilterList,JSNewFunction)",
        "(matchWorkdir,MatchWorkdir)",
        "(flags,Flags)",
        "(Cherrypick,Cherrypick)",
        "(Tree,JSNewFunction)",
        "(resolveUrl,ResolveUrl)",
        "(addSetup,AddSetup)",
        "(stateCleanup,StateCleanup)",
        "(usernameNew,UsernameNew)",
        "(detachHead,DetachHead)",
        "(lineStats,LineStats)",
        "(workdir,Workdir)",
        "(createMatching,CreateMatching)",
        "(Packbuilder,JSNewFunction)",
        "(IndexConflictIterator,JSNewFunction)",
        "(idNew,IdNew)",
        "(connected,Connected)",
        "(getByIndex,GetByindex)",
        "(IndexEntry,JSNewFunction)",
        "(getMany,GetMany)",
        "(Pathspec,JSNewFunction)",
        "(origStartLineNumber,OrigStartLineNumber)",
        "(createV,CreateV)",
        "(CloneOptions,JSNewFunction)",
        "(dispose,Dispose)",
        "(foreachExt,ForeachExt)",
        "(setFetchRecurseSubmodules,SetFetchRecurseSubmodules)",
        "(findProgramdata,FindProgramdata)",
        "(ConvenientHunk,JSNewFunction)",
        "(addEntry,AddEntry)",
        "(pushurl,Pushurl)",
        "(setPushurl,SetPushurl)",
        "(add,Add)",
        "(createBuffer,CreateBuffer)",
        "(Reflog,JSNewFunction)",
        "(messageRaw,MessageRaw)",
        "(setBranch,SetBranch)",
        "(move,Move)",
        "(register,GitFilterRegister)",
        "(CheckoutPerfdata,JSNewFunction)",
        "(existsPrefix,ExistsPrefix)",
        "(email,Email)",
        "(createFromWorkdir,CreateFromWorkdir)",
        "(id,Id)",
        "(analysisForRef,AnalysisForRef)",
        "(pushRange,PushRange)",
        "(conflictGet,ConflictGet)",
        "(value,Value)",
        "(patchid,Patchid)",
        "(Repository,JSNewFunction)",
        "(parentcount,Parentcount)",
        "(targetPeel,TargetPeel)",
        "(updateTips,UpdateTips)",
        "(index,Index)",
        "(Writestream,JSNewFunction)",
        "(clear,Clear)",
        "(autotag,Autotag)",
        "(origHeadName,OrigHeadName)",
        "(isTag,IsTag)",
        "(ignore,Ignore)",
        "(treeToIndex,TreeToIndex)",
        "(dwim,Dwim)",
        "(body,Body)",
        "(compare,Compare)",
        "(merge,Merge)",
        "(DescribeFormatOptions,JSNewFunction)",
        "(toBuf,ToBuf)",
        "(statCalls,StatCalls)",
        "(RebaseOperation,JSNewFunction)",
        "(entrycount,Entrycount)",
        "(isUnreadable,IsUnreadable)",
        "(isUnmodified,IsUnmodified)",
        "(finalCommitId,FinalCommitId)",
        "(push,Push)",
        "(entryCount,Entrycount)",
        "(Odb,JSNewFunction)",
        "(DiffFile,JSNewFunction)",
        "(hide,Hide)",
        "(listMatch,ListMatch)",
        "(summary,Summary)",
        "(findXdg,FindXdg)",
        "(Treebuilder,JSNewFunction)",
        "(lookupPrefix,LookupPrefix)",
        "(isBinary,IsBinary)",
        "(getEntry,GetEntry)",
        "(targetId,TargetId)",
        "(Submodule,JSNewFunction)",
        "(tostrS,TostrS)",
        "(writeTreeTo,WriteTreeTo)",
        "(committer,Committer)",
        "(sign,Sign)",
        "(isAdded,IsAdded)",
        "(isModified,IsModified)",
        "(symbolicCreateMatching,SymbolicCreateMatching)",
        "(RevertOptions,JSNewFunction)",
        "(setInt32,SetInt32)",
        "(StashApplyOptions,JSNewFunction)",
        "(setIgnore,SetIgnore)",
        "(shutdown,Shutdown)",
        "(failedEntry,FailedEntry)",
        "(headDetachedForWorktree,HeadDetachedForWorktree)",
        "(strings,Strings)",
        "(count,Count)",
        "(hasConflicts,HasConflicts)",
        "(ConvenientPatch,JSNewFunction)",
        "(extractSignature,ExtractSignature)",
        "(remove,Remove)",
        "(mapValue,MapValue)",
        "(addFinalize,AddFinalize)",
        "(config,Config)",
        "(certType,CertType)",
        "(IndexReucEntry,JSNewFunction)",
        "(Commit,JSNewFunction)",
        "(treeToWorkdirWithIndex,TreeToWorkdirWithIndex)",
        "(getStats,GetStats)",
        "(symbolicTarget,SymbolicTarget)",
        "(AnnotatedCommit,JSNewFunction)",
        "(commitRead,CommitRead)",
        "(CertX509,JSNewFunction)",
        "(setThreads,SetThreads)",
        "(openFromWorktree,OpenFromWorktree)",
        "(receivedBytes,ReceivedBytes)",
        "(fromAnnotated,FromAnnotated)",
        "(entryStage,EntryStage)",
        "(chmodCalls,ChmodCalls)",
        "(hasUsername,HasUsername)",
        "(setAutotag,SetAutotag)",
        "(Error,JSNewFunction)",
        "(findSimilar,FindSimilar)",
        "(createWithSignature,CreateWithSignature)",
        "(sshKeyFromAgent,SshKeyFromAgent)",
        "(messageEncoding,MessageEncoding)",
        "(aheadBehind,AheadBehind)",
        "(ptr,Ptr)",
        "(TreeEntry,JSNewFunction)",
        "(FilterSource,JSNewFunction)",
        "(hashMd5,HashMd5)",
        "(Blob,JSNewFunction)",
        "(indexedDeltas,IndexedDeltas)",
        "(annotationCreate,AnnotationCreate)",
        "(getSubmodules,GetSubmodules)",
        "(setIndex,SetIndex)",
        "(getBool,GetBool)",
        "(treeToWorkdir,TreeToWorkdir)",
        "(open,Open)",
        "(Transport,JSNewFunction)",
        "(commits,Commits)",
        "(applyToFile,ApplyToFile)",
        "(clone,Clone)",
        "(BlameHunk,JSNewFunction)",
        "(stats,Stats)",
        "(StatusOptions,JSNewFunction)",
        "(Configmap,JSNewFunction)",
        "(getFetchRefspecs,GetFetchRefspecs)",
        "(isConflicted,IsConflicted)",
        "(grow,Grow)",
        "(shouldIgnore,ShouldIgnore)",
        "(Revwalk,JSNewFunction)",
        "(rawsize,Rawsize)",
        "(setCaps,SetCaps)",
        "(wrapOdb,WrapOdb)",
        "(isIgnored,IsIgnored)",
        "(findSystem,FindSystem)",
        "(Tag,JSNewFunction)",
        "(direction,Direction)",
        "(isTypeChange,IsTypeChange)",
        "(addByPath,AddBypath)",
        "(Apply,Apply)",
        "(level,Level)",
        "(name,Name)",
        "(readTree,ReadTree)",
        "(ProxyOptions,JSNewFunction)",
        "(Worktree,JSNewFunction)",
        "(addMacro,AddMacro)",
        "(oldLines,OldLines)",
        "(newStart,NewStart)",
        "(WorktreePruneOptions,JSNewFunction)",
        "(mergeheadForeach,MergeheadForeach)",
        "(lookupByPath,LookupBypath)",
        "(getThreadSafetyStatus,LockMasterGetStatus)",
        "(createLightweight,CreateLightweight)",
        "(enableThreadSafety,LockMasterEnable)",
        "(SubmoduleUpdateOptions,JSNewFunction)",
        "(fromString,Fromstrp)",
        "(isNote,IsNote)",
        "(setUrl,SetUrl)",
        "(insertRecur,InsertRecur)",
        "(update,Update)",
        "(fetchRecurseSubmodules,FetchRecurseSubmodules)",
        "(fileHistoryWalk,FileHistoryWalk)",
        "(caps,Caps)",
        "(base,Base)",
        "(Object,JSNewFunction)",
        "(deleteMultivar,DeleteMultivar)",
        "(odb,Odb)",
        "(createFromFile,CreateFromfile)",
        "(setIdent,SetIdent)",
        "(getReferences,GetReferences)",
        "(openBare,OpenBare)",
        "(upstream,Upstream)",
        "(pushHead,PushHead)",
        "(ConfigEntry,JSNewFunction)",
        "(numLinesInHunk,NumLinesInHunk)",
        "(symbolicCreate,SymbolicCreate)",
        "(insertCommit,InsertCommit)",
        "(connect,Connect)",
        "(hash,Hash)",
        "(sync,Sync)",
        "(type,Type)",
        "(len,Len)",
        "(setInt64,SetInt64)",
        "(WorktreeAddOptions,JSNewFunction)",
        "(srcMatches,SrcMatches)",
        "(updateAll,UpdateAll)",
        "(isCopied,IsCopied)",
        "(datalen,Datalen)",
        "(RemoteHead,JSNewFunction)",
        "(lookup,Lookup)",
        "(lockRef,LockRef)",
        "(origPath,OrigPath)",
        "(isHead,IsHead)",
        "(klass,Klass)",
        "(getHunkCount,GetHunkCount)",
        "(descendantOf,DescendantOf)",
        "(Blame,JSNewFunction)",
        "(contentLen,ContentLen)",
        "(ours,Ours)",
        "(DiffFindOptions,JSNewFunction)",
        "(next,GitConfigNext)",
        "(getUsername,GetUsername)",
        "(isRenamed,IsRenamed)",
        "(theirs,Theirs)",
        "(PushUpdate,JSNewFunction)",
        "(totalDeltas,TotalDeltas)",
        "(newLineno,NewLineno)",
        "(submoduleCacheAll,SubmoduleCacheAll)",
        "(oidCalculations,OidCalculations)",
        "(defaultBranch,DefaultBranch)",
        "(head,Head)",
        "(defaultNew,DefaultNew)",
        "(DiffDelta,JSNewFunction)",
        "(BlameOptions,JSNewFunction)",
        "(status,Status)",
        "(delete,Delete)",
        "(commit,Commit)",
        "(PathspecMatchList,JSNewFunction)",
        "(Index,JSNewFunction)",
        "(conflictCleanup,ConflictCleanup)",
        "(insertions,Insertions)",
        "(createWithOpts,CreateWithOpts)",
        "(getDelta,GetDelta)",
        "(createFromAnnotated,CreateFromAnnotated)",
        "(string,String)",
        "(commondir,Commondir)",
        "(Transaction,JSNewFunction)",
        "(getStringBuf,GetStringBuf)",
        "(commitIteratorNew,CommitIteratorNew)",
        "(streq,Streq)",
        "(addFetch,AddFetch)",
        "(isLocked,IsLocked)",
        "(treeToTree,TreeToTree)",
        "(isSortedIcase,IsSortedIcase)",
        "(parent,Parent)",
        "(oid,Oid)",
        "(setVersion,SetVersion)",
        "(MergeFileOptions,JSNewFunction)",
        "(OdbObject,JSNewFunction)",
        "(dup,Dup)",
        "(peel,Peel)",
        "(createGlob,GlobNew)",
        "(data,Data)",
        "(toBuf,DiffStatsToBuf)",
        "(CertHostkey,JSNewFunction)",
        "(ReflogEntry,JSNewFunction)",
        "(Buf,JSNewFunction)",
        "(Note,JSNewFunction)",
        "(newFile,NewFile)",
        "(getByIndex,GetByIndex)",
        "(commitCreate,CommitCreate)",
        "(asize,Asize)",
        "(addRule,AddRule)",
        "(Oid,JSNewFunction)",
        "(analysis,Analysis)",
        "(isWorktree,IsWorktree)",
        "(shorthand,Shorthand)",
        "(simplifyFirstParent,SimplifyFirstParent)",
        "(create,Create)",
        "(CherrypickOptions,JSNewFunction)",
        "(origin,Origin)",
        "(now,Now)",
        "(getInt32,GetInt32)",
        "(origHeadId,OrigHeadId)",
        "(DiffLine,JSNewFunction)",
        "(reset,Reset)",
        "(fromBlobs,FromBlobs)",
        "(pruneRefs,PruneRefs)",
        "(dst,Dst)",
        "(IndexTime,JSNewFunction)",
        "(iszero,Iszero)",
        "(setUpstream,SetUpstream)",
        "(ids,Ids)",
        "(PushOptions,JSNewFunction)",
        "(validate,Validate)",
        "(setThreadSafetyStatus,LockMasterSetStatus)",
        "(setString,SetStr)",
        "(loid,Loid)",
        "(hideGlob,HideGlob)",
        "(repoInit,RepoInit)",
        "(Cert,JSNewFunction)",
        "(bases,Bases)",
        "(referenceList,ReferenceList)",
        "(location,Location)",
        "(lines,Lines)",
        "(NoteIterator,JSNewFunction)",
        "(RemoteCallbacks,JSNewFunction)",
        "(toTree,ToTree)",
        "(RebaseOptions,JSNewFunction)",
        "(Patch,JSNewFunction)",
        "(getRemotes,GetRemotes)",
        "(isEmpty,IsEmpty)",
        "(Config,JSNewFunction)",
        "(removeDirectory,RemoveDirectory)",
        "(conflictRemove,ConflictRemove)",
        "(revert,Revert)",
        "(commitRemove,CommitRemove)",
        "(tree,Tree)",
        "(init,Init)",
        "(find,Find)",
        "(numHunks,NumHunks)",
        "(conflictAdd,ConflictAdd)",
        "(submoduleCacheClear,SubmoduleCacheClear)",
        "(entryByPath,EntryBypath)",
        "(headerField,HeaderField)",
        "(getHunkByLine,GetHunkByline)",
        "(setSymbolicTarget,SetSymbolicTarget)",
        "(drop,Drop)",
        "(isBranch,IsBranch)",
        "(parentId,ParentId)",
        "(IndexIterator,JSNewFunction)",
        "(BlobFilterOptions,JSNewFunction)",
        "(numLines,NumLines)",
        "(srcRefname,SrcRefname)",
        "(isCheckedOut,IsCheckedOut)",
        "(hashSha256,HashSha256)",
        "(getThreadSafetyDiagnostics,LockMasterGetDiagnostics)",
        "(refdb,Refdb)",
        "(hideHead,HideHead)",
        "(rawHeader,RawHeader)",
        "(normalizeName,NormalizeName)",
        "(strMatch,StrMatch)",
        "(repository,Repository)",
        "(ident,Ident)",
        "(clearInternalRules,ClearInternalRules)",
        "(when,When)",
        "(findPrefix,FindPrefix)",
        "(mkdirCalls,MkdirCalls)",
        "(headerLen,HeaderLen)",
        "(dstRefname,DstRefname)",
        "(Cred,JSNewFunction)",
        "(fromDiff,FromDiff)",
        "(OidShorten,JSNewFunction)",
        "(finish,Finish)",
        "(newLines,NewLines)",
        "(sshKeyMemoryNew,SshKeyMemoryNew)",
        "(getHunkByIndex,GetHunkByindex)",
        "(filemode,Filemode)",
        "(isShallow,IsShallow)",
        "(url,Url)",
        "(containsData,ContainsData)",
        "(MergeFileInput,JSNewFunction)",
        "(save,Save)",
        "(pushRef,PushRef)",
        "(filemodeRaw,FilemodeRaw)",
        "(DiffStats,JSNewFunction)",
        "(Reference,JSNewFunction)",
        "(single,Single)",
        "(applyToData,ApplyToData)",
        "(isBare,IsBare)",
        "(RepositoryInitOptions,JSNewFunction)",
        "(createFromBuffer,CreateFromBuffer)",
        "(ncmp,Ncmp)",
        "(isGitfile,IsGitfile)",
        "(resolveSignature,ResolveSignature)",
        "(cherrypick,Cherrypick)",
        "(size,Size)",
        "(rawcontent,Rawcontent)",
        "(fromFetchhead,FromFetchhead)",
        "(operationByIndex,OperationByindex)",
        "(copy,Copy)",
        "(DescribeResult,JSNewFunction)",
        "(finalSignature,FinalSignature)",
        "(entryCmp,EntryCmp)",
        "(foreach,Foreach)",
        "(IndexerProgress,JSNewFunction)",
        "(cpy,Cpy)",
        "(_entryByIndex,EntryByindex)",
        "(src,Src)",
        "(Strarray,JSNewFunction)",
        "(exec,Exec)",
        "(localObjects,LocalObjects)",
        "(setHeadDetached,SetHeadDetached)",
        "(snapshot,Snapshot)",
        "(setWorkdir,SetWorkdir)",
        "(addPush,AddPush)",
        "(last,Last)",
        "(refspecCount,RefspecCount)",
        "(disconnect,Disconnect)",
        "(headUnborn,HeadUnborn)",
        "(fromRevspec,FromRevspec)",
        "(getNamespace,GetNamespace)",
        "(fetchheadForeach,FetchheadForeach)",
        "(setTarget,SetTarget)",
        "(RemoteCreateOptions,JSNewFunction)",
        "(resolve,Resolve)",
        "(nfiles,Nfiles)",
        "(origSignature,OrigSignature)",
        "(default,Default)",
        "(TreeUpdate,JSNewFunction)",
        "(offset,Offset)",
        "(findGlobal,FindGlobal)",
        "(pushGlob,PushGlob)",
        "(Oidarray,JSNewFunction)",
        "(repo,Repo)",
        "(file,File)",
        "(string2Type,String2type)",
        "(getPerfdata,GetPerfdata)",
        "(deleteEntry,DeleteEntry)",
        "(author,Author)",
        "(lock,Lock)",
        "(hideRef,HideRef)",
        "(shortId,ShortId)",
        "(headToIndex,HeadToIndex)",
        "(path,Path)",
        "(prune,Prune)",
        "(isPrunable,IsPrunable)",
        "(matchDiff,MatchDiff)",
        "(setUpdate,SetUpdate)",
        "(finalStartLineNumber,FinalStartLineNumber)",
        "(headId,HeadId)",
        "(CheckoutOptions,JSNewFunction)",
        "(numDeltas,NumDeltas)",
        "(seconds,Seconds)",
        "(insertWalk,InsertWalk)",
        "(getHunk,GetHunk)",
        "(oldFile,OldFile)",
        "(DiffHunk,JSNewFunction)",
        "(setReflog,SetReflog)",
        "(write,Write)",
        "(addDiskAlternate,AddDiskAlternate)",
        "(fetch,Fetch)",
        "(strcmp,Strcmp)",
        "(removeByPath,RemoveBypath)",
        "(tagger,Tagger)",
        "(DiffBinary,JSNewFunction)",
        "(entryIsConflict,EntryIsConflict)",
        "(addToIndex,AddToIndex)",
        "(unregister,GitFilterUnregister)",
        "(DiffBinaryFile,JSNewFunction)",
        "(FetchOptions,JSNewFunction)",
        "(getSelfFreeingInstanceCount,GetSelfFreeingInstanceCount)",
        "(remoteName,RemoteName)",
        "(setBool,SetBool)",
        "(operationCurrent,OperationCurrent)",
        "(DescribeOptions,JSNewFunction)",
        "(matchTree,MatchTree)",
        "(download,Download)",
        "(applyToBlob,ApplyToBlob)",
        "(state,State)",
        "(set,Set)",
        "(oldStart,OldStart)",
        "(setHeadDetachedFromAnnotated,SetHeadDetachedFromAnnotated)",
        "(inmemoryIndex,InmemoryIndex)",
        "(ontoName,OntoName)",
        "(isRemote,IsRemote)",
        "(_entryByName,EntryByname)",
        "(blobToBuffer,BlobToBuffer)",
        "(readPrefix,ReadPrefix)",
        "(upstreamName,UpstreamName)",
        "(createUpdated,CreateUpdated)",
        "(hunks,Hunks)",
        "(Revert,Revert)",
        "(symrefTarget,SymrefTarget)",
        "(createFromDisk,CreateFromDisk)",
        "(targetType,TargetType)",
        "(indexToWorkdir,IndexToWorkdir)",
        "(treeId,TreeId)",
        "(cleanup,Cleanup)",
        "(Merge,Merge)",
        "(header,Header)",
        "(cacheFlush,CacheFlush)",
        "(matchesPath,MatchesPath)",
        "(Refdb,JSNewFunction)",
        "(message,Message)",
        "(getByPath,GetByPath)",
        "(dstMatches,DstMatches)",
        "(Diff,JSNewFunction)",
        "(type2String,Type2string)",
        "(nameToId,NameToId)",
        "(initExt,InitExt)",
        "(fastWalk,FastWalk)",
        "(isZero,IsZero)",
        "(equal,Equal)",
        "(trees,Trees)",
        "(StatusList,JSNewFunction)",
        "(isValidName,IsValidName)",
        "(nthGenAncestor,NthGenAncestor)",
        "(hasLog,HasLog)",
        "(setMultivar,SetMultivar)",
        "(origCommitId,OrigCommitId)",
        "(operationEntrycount,OperationEntrycount)",
        "(checksum,Checksum)",
        "(sshKeyNew,SshKeyNew)",
        "(openDefault,OpenDefault)",
        "(buffer,Buffer)",
        "(BranchIterator,JSNewFunction)",
        "(next,Next)",
        "(indexToIndex,IndexToIndex)",
        "(ancestor,Ancestor)",
        "(version,Version)",
        "(ApplyOptions,JSNewFunction)",
        "(read,Read)",
        "(ConfigIterator,JSNewFunction)",
        "(similarity,Similarity)",
        "(createMultivar,GitConfigMultivarIteratorNew)",
        "(headForWorktree,HeadForWorktree)",
        "(getByPath,GetBypath)",
        "(symbolicSetTarget,SymbolicSetTarget)",
        "(setHead,SetHead)",
        "(time,Time)",
        "(openOndisk,OpenOndisk)",
        "(openFromRepository,OpenFromRepository)",
        "(indexId,IndexId)",
        "(opts,Opts)",
        "(read,OdbRead)",
        "(ext,Ext)",
        "(objectCount,ObjectCount)",
        "(ontoId,OntoId)",
        "(Wrapper,JSNewFunction)",
        "(setNamespace,SetNamespace)",
        "(getPushRefspecs,GetPushRefspecs)",
        "(committerWithMailmap,CommitterWithMailmap)",
        "(owner,Owner)",
        "(Rebase,JSNewFunction)",
        "(getNonSelfFreeingConstructedCount,GetNonSelfFreeingConstructedCount)",
        "(upload,Upload)",
        "(append,Append)",
        "(DiffPerfdata,JSNewFunction)",
        "(entryByIndex,EntryByindex)",
        "(timeOffset,TimeOffset)",
        "(matchIndex,MatchIndex)",
        "(createDetached,CreateDetached)",
        "(filter,Filter)",
        "(amend,Amend)",
        "(linesInHunk,LinesInHunk)",
        "(insert,Insert)",
        "(DiffOptions,JSNewFunction)",
        "(refreshReferences,RefreshReferences)",
        "(entry,Entry)",
        "(setString,SetString)",
        "(contentOffset,ContentOffset)",
        "(itemPath,ItemPath)",
        "(fromBuffer,FromBuffer)",
        "(createAnonymous,CreateAnonymous)",
        "(hashfile,Hashfile)",
        "(userpassPlaintextNew,UserpassPlaintextNew)",
        "(filteredContent,FilteredContent)",
        "(getRefspec,GetRefspec)",
        "(isDeleted,IsDeleted)",
        "(isUntracked,IsUntracked)",
        "(typeisloose,Typeisloose)",
        "(getLineInHunk,GetLineInHunk)",
        "(compress,Compress)",
        "(force,Force)",
        "(Hashsig,JSNewFunction)",
        "(failedEntrycount,FailedEntrycount)",
        "(createWithFetchspec,CreateWithFetchspec)"
      ],
      "Charon": [
        "(enableThreadSafety,LockMasterEnable)",
        "(setThreadSafetyStatus,LockMasterSetStatus)",
        "(getThreadSafetyStatus,LockMasterGetStatus)",
        "(getThreadSafetyDiagnostics,LockMasterGetDiagnostics)",
        "(getSelfFreeingInstanceCount,GetSelfFreeingInstanceCount)",
        "(getNonSelfFreeingConstructedCount,GetNonSelfFreeingConstructedCount)",
        "(data,Data)",
        "(id,Id)",
        "(size,Size)",
        "(type,Type)",
        "(hash,Hash)",
        "(insert,Insert)",
        "(insertCommit,InsertCommit)",
        "(insertRecur,InsertRecur)",
        "(insertTree,InsertTree)",
        "(insertWalk,InsertWalk)",
        "(create,Create)",
        "(objectCount,ObjectCount)",
        "(setThreads,SetThreads)",
        "(written,Written)",
        "(errno,baton)",
        "(totalObjects,TotalObjects)",
        "(indexedObjects,IndexedObjects)",
        "(receivedObjects,ReceivedObjects)",
        "(localObjects,LocalObjects)",
        "(totalDeltas,TotalDeltas)",
        "(indexedDeltas,IndexedDeltas)",
        "(receivedBytes,ReceivedBytes)",
        "(register,GitFilterRegister)",
        "(unregister,GitFilterUnregister)",
        "(committer,Committer)",
        "(idNew,IdNew)",
        "(idOld,IdOld)",
        "(message,Message)",
        "(commit,Commit)",
        "(lockRef,LockRef)",
        "(remove,Remove)",
        "(setReflog,SetReflog)",
        "(setSymbolicTarget,SetSymbolicTarget)",
        "(setTarget,SetTarget)",
        "(compare,Compare)",
        "(createFromFile,CreateFromfile)",
        "(head,Head)",
        "(index,Index)",
        "(tree,Tree)",
        "(ids,Ids)",
        "(count,Count)",
        "(blobToBuffer,BlobToBuffer)",
        "(findSimilar,FindSimilar)",
        "(fromBuffer,FromBuffer)",
        "(getDelta,GetDelta)",
        "(getStats,GetStats)",
        "(indexToIndex,IndexToIndex)",
        "(indexToWorkdir,IndexToWorkdir)",
        "(isSortedIcase,IsSortedIcase)",
        "(merge,Merge)",
        "(numDeltas,NumDeltas)",
        "(patchid,Patchid)",
        "(toBuf,ToBuf)",
        "(treeToIndex,TreeToIndex)",
        "(treeToTree,TreeToTree)",
        "(treeToWorkdir,TreeToWorkdir)",
        "(treeToWorkdirWithIndex,TreeToWorkdirWithIndex)",
        "(getPerfdata,GetPerfdata)",
        "(direction,Direction)",
        "(dst,Dst)",
        "(dstMatches,DstMatches)",
        "(force,Force)",
        "(parse,Parse)",
        "(src,Src)",
        "(srcMatches,SrcMatches)",
        "(string,String)",
        "(annotationCreate,AnnotationCreate)",
        "(createFromBuffer,CreateFromBuffer)",
        "(createLightweight,CreateLightweight)",
        "(delete,Delete)",
        "(dup,Dup)",
        "(list,List)",
        "(listMatch,ListMatch)",
        "(lookup,Lookup)",
        "(lookupPrefix,LookupPrefix)",
        "(name,Name)",
        "(owner,Owner)",
        "(peel,Peel)",
        "(tagger,Tagger)",
        "(target,Target)",
        "(targetId,TargetId)",
        "(targetType,TargetType)",
        "(default,Default)",
        "(now,Now)",
        "(email,Email)",
        "(when,When)",
        "(mkdirCalls,MkdirCalls)",
        "(statCalls,StatCalls)",
        "(chmodCalls,ChmodCalls)",
        "(createGlob,GlobNew)",
        "(createMultivar,GitConfigMultivarIteratorNew)",
        "(next,GitConfigNext)",
        "(defaultNew,DefaultNew)",
        "(getUsername,GetUsername)",
        "(hasUsername,HasUsername)",
        "(sshKeyFromAgent,SshKeyFromAgent)",
        "(sshKeyMemoryNew,SshKeyMemoryNew)",
        "(sshKeyNew,SshKeyNew)",
        "(usernameNew,UsernameNew)",
        "(userpassPlaintextNew,UserpassPlaintextNew)",
        "(applyToBlob,ApplyToBlob)",
        "(applyToData,ApplyToData)",
        "(applyToFile,ApplyToFile)",
        "(load,Load)",
        "(filemode,Filemode)",
        "(filemodeRaw,FilemodeRaw)",
        "(toObject,ToObject)",
        "(diffEntry,DiffEntry)",
        "(entry,Entry)",
        "(entrycount,Entrycount)",
        "(failedEntry,FailedEntry)",
        "(failedEntrycount,FailedEntrycount)",
        "(version,Version)",
        "(flags,Flags)",
        "(createFromAnnotated,CreateFromAnnotated)",
        "(isCheckedOut,IsCheckedOut)",
        "(isHead,IsHead)",
        "(move,Move)",
        "(remoteName,RemoteName)",
        "(setUpstream,SetUpstream)",
        "(upstream,Upstream)",
        "(upstreamName,UpstreamName)",
        "(upstreamRemote,UpstreamRemote)",
        "(abort,Abort)",
        "(finish,Finish)",
        "(init,Init)",
        "(inmemoryIndex,InmemoryIndex)",
        "(next,Next)",
        "(ontoId,OntoId)",
        "(ontoName,OntoName)",
        "(open,Open)",
        "(operationByIndex,OperationByindex)",
        "(operationCurrent,OperationCurrent)",
        "(operationEntrycount,OperationEntrycount)",
        "(origHeadId,OrigHeadId)",
        "(origHeadName,OrigHeadName)",
        "(createFromDisk,CreateFromDisk)",
        "(createFromWorkdir,CreateFromWorkdir)",
        "(filter,Filter)",
        "(filteredContent,FilteredContent)",
        "(isBinary,IsBinary)",
        "(rawcontent,Rawcontent)",
        "(rawsize,Rawsize)",
        "(path,Path)",
        "(mode,Mode)",
        "(idAbbrev,IdAbbrev)",
        "(filesChanged,FilesChanged)",
        "(insertions,Insertions)",
        "(deletions,Deletions)",
        "(toBuf,DiffStatsToBuf)",
        "(addMacro,AddMacro)",
        "(cacheFlush,CacheFlush)",
        "(get,Get)",
        "(getMany,GetMany)",
        "(value,Value)",
        "(oldStart,OldStart)",
        "(oldLines,OldLines)",
        "(newStart,NewStart)",
        "(newLines,NewLines)",
        "(headerLen,HeaderLen)",
        "(header,Header)",
        "(hunks,Hunks)",
        "(lineStats,LineStats)",
        "(oldFile,OldFile)",
        "(newFile,NewFile)",
        "(status,Status)",
        "(isUnmodified,IsUnmodified)",
        "(isAdded,IsAdded)",
        "(isDeleted,IsDeleted)",
        "(isModified,IsModified)",
        "(isRenamed,IsRenamed)",
        "(isCopied,IsCopied)",
        "(isIgnored,IsIgnored)",
        "(isUntracked,IsUntracked)",
        "(isTypeChange,IsTypeChange)",
        "(isUnreadable,IsUnreadable)",
        "(isConflicted,IsConflicted)",
        "(cmp,Cmp)",
        "(createMatching,CreateMatching)",
        "(dwim,Dwim)",
        "(ensureLog,EnsureLog)",
        "(hasLog,HasLog)",
        "(isBranch,IsBranch)",
        "(isNote,IsNote)",
        "(isRemote,IsRemote)",
        "(isTag,IsTag)",
        "(isValidName,IsValidName)",
        "(nameToId,NameToId)",
        "(normalizeName,NormalizeName)",
        "(rename,Rename)",
        "(resolve,Resolve)",
        "(shorthand,Shorthand)",
        "(symbolicCreate,SymbolicCreate)",
        "(symbolicCreateMatching,SymbolicCreateMatching)",
        "(symbolicSetTarget,SymbolicSetTarget)",
        "(symbolicTarget,SymbolicTarget)",
        "(targetPeel,TargetPeel)",
        "(commondir,Commondir)",
        "(config,Config)",
        "(detachHead,DetachHead)",
        "(discover,Discover)",
        "(fetchheadForeach,FetchheadForeach)",
        "(getNamespace,GetNamespace)",
        "(headDetached,HeadDetached)",
        "(headDetachedForWorktree,HeadDetachedForWorktree)",
        "(headForWorktree,HeadForWorktree)",
        "(headUnborn,HeadUnborn)",
        "(ident,Ident)",
        "(initExt,InitExt)",
        "(isBare,IsBare)",
        "(isEmpty,IsEmpty)",
        "(isShallow,IsShallow)",
        "(isWorktree,IsWorktree)",
        "(itemPath,ItemPath)",
        "(mergeheadForeach,MergeheadForeach)",
        "(messageRemove,MessageRemove)",
        "(odb,Odb)",
        "(openBare,OpenBare)",
        "(openExt,OpenExt)",
        "(openFromWorktree,OpenFromWorktree)",
        "(refdb,Refdb)",
        "(setHead,SetHead)",
        "(setHeadDetached,SetHeadDetached)",
        "(setHeadDetachedFromAnnotated,SetHeadDetachedFromAnnotated)",
        "(setIdent,SetIdent)",
        "(setNamespace,SetNamespace)",
        "(setWorkdir,SetWorkdir)",
        "(state,State)",
        "(stateCleanup,StateCleanup)",
        "(workdir,Workdir)",
        "(wrapOdb,WrapOdb)",
        "(cleanup,Cleanup)",
        "(getReferences,GetReferences)",
        "(getSubmodules,GetSubmodules)",
        "(getRemotes,GetRemotes)",
        "(refreshReferences,RefreshReferences)",
        "(setIndex,SetIndex)",
        "(submoduleCacheAll,SubmoduleCacheAll)",
        "(submoduleCacheClear,SubmoduleCacheClear)",
        "(aheadBehind,AheadBehind)",
        "(descendantOf,DescendantOf)",
        "(origin,Origin)",
        "(oldLineno,OldLineno)",
        "(newLineno,NewLineno)",
        "(numLines,NumLines)",
        "(contentLen,ContentLen)",
        "(contentOffset,ContentOffset)",
        "(content,Content)",
        "(cherrypick,Cherrypick)",
        "(addEntry,AddEntry)",
        "(fromRepository,FromRepository)",
        "(resolveSignature,ResolveSignature)",
        "(addRule,AddRule)",
        "(clearInternalRules,ClearInternalRules)",
        "(pathIsIgnored,PathIsIgnored)",
        "(clone,Clone)",
        "(headToIndex,HeadToIndex)",
        "(parent,Parent)",
        "(len,Len)",
        "(apply,Apply)",
        "(drop,Drop)",
        "(foreach,Foreach)",
        "(pop,Pop)",
        "(save,Save)",
        "(features,Features)",
        "(opts,Opts)",
        "(shutdown,Shutdown)",
        "(fromBlobs,FromBlobs)",
        "(fromDiff,FromDiff)",
        "(getHunk,GetHunk)",
        "(getLineInHunk,GetLineInHunk)",
        "(numHunks,NumHunks)",
        "(numLinesInHunk,NumLinesInHunk)",
        "(convenientFromDiff,ConvenientFromDiff)",
        "(hide,Hide)",
        "(hideGlob,HideGlob)",
        "(hideHead,HideHead)",
        "(hideRef,HideRef)",
        "(push,Push)",
        "(pushGlob,PushGlob)",
        "(pushHead,PushHead)",
        "(pushRange,PushRange)",
        "(pushRef,PushRef)",
        "(repository,Repository)",
        "(reset,Reset)",
        "(simplifyFirstParent,SimplifyFirstParent)",
        "(sorting,Sorting)",
        "(commitWalk,CommitWalk)",
        "(fastWalk,FastWalk)",
        "(fileHistoryWalk,FileHistoryWalk)",
        "(name,signature)",
        "(email,signature)",
        "(date,signature)",
        "(signature,signature)",
        "(commit,GitCommit)",
        "(reachedEndOfHistory,baton)",
        "(add,Add)",
        "(clear,Clear)",
        "(entryCount,Entrycount)",
        "(getByIndex,GetByIndex)",
        "(ancestor,Ancestor)",
        "(ours,Ours)",
        "(theirs,Theirs)",
        "(containsData,ContainsData)",
        "(isGitfile,IsGitfile)",
        "(matchDiff,MatchDiff)",
        "(matchIndex,MatchIndex)",
        "(matchTree,MatchTree)",
        "(matchWorkdir,MatchWorkdir)",
        "(matchesPath,MatchesPath)",
        "(addFinalize,AddFinalize)",
        "(addSetup,AddSetup)",
        "(addToIndex,AddToIndex)",
        "(branch,Branch)",
        "(fetchRecurseSubmodules,FetchRecurseSubmodules)",
        "(headId,HeadId)",
        "(ignore,Ignore)",
        "(indexId,IndexId)",
        "(location,Location)",
        "(reload,Reload)",
        "(repoInit,RepoInit)",
        "(resolveUrl,ResolveUrl)",
        "(setBranch,SetBranch)",
        "(setFetchRecurseSubmodules,SetFetchRecurseSubmodules)",
        "(setIgnore,SetIgnore)",
        "(setUpdate,SetUpdate)",
        "(setUrl,SetUrl)",
        "(sync,Sync)",
        "(update,Update)",
        "(updateStrategy,UpdateStrategy)",
        "(url,Url)",
        "(wdId,WdId)",
        "(lines,Lines)",
        "(amend,Amend)",
        "(author,Author)",
        "(authorWithMailmap,AuthorWithMailmap)",
        "(body,Body)",
        "(committerWithMailmap,CommitterWithMailmap)",
        "(createBuffer,CreateBuffer)",
        "(createV,CreateV)",
        "(createWithSignature,CreateWithSignature)",
        "(extractSignature,ExtractSignature)",
        "(headerField,HeaderField)",
        "(messageEncoding,MessageEncoding)",
        "(messageRaw,MessageRaw)",
        "(nthGenAncestor,NthGenAncestor)",
        "(parentId,ParentId)",
        "(parentcount,Parentcount)",
        "(rawHeader,RawHeader)",
        "(summary,Summary)",
        "(time,Time)",
        "(timeOffset,TimeOffset)",
        "(treeId,TreeId)",
        "(signature,baton)",
        "(signedData,baton)",
        "(lookupByPath,LookupBypath)",
        "(shortId,ShortId)",
        "(string2Type,String2type)",
        "(type2String,Type2string)",
        "(typeisloose,Typeisloose)",
        "(write,Write)",
        "(addAll,AddAll)",
        "(addByPath,AddBypath)",
        "(caps,Caps)",
        "(checksum,Checksum)",
        "(conflictAdd,ConflictAdd)",
        "(conflictCleanup,ConflictCleanup)",
        "(conflictGet,ConflictGet)",
        "(conflictRemove,ConflictRemove)",
        "(entryIsConflict,EntryIsConflict)",
        "(entryStage,EntryStage)",
        "(find,Find)",
        "(findPrefix,FindPrefix)",
        "(getByIndex,GetByindex)",
        "(getByPath,GetBypath)",
        "(hasConflicts,HasConflicts)",
        "(read,Read)",
        "(readTree,ReadTree)",
        "(removeAll,RemoveAll)",
        "(removeByPath,RemoveBypath)",
        "(removeDirectory,RemoveDirectory)",
        "(setCaps,SetCaps)",
        "(setVersion,SetVersion)",
        "(updateAll,UpdateAll)",
        "(writeTree,WriteTree)",
        "(writeTreeTo,WriteTreeTo)",
        "(oidCalculations,OidCalculations)",
        "(compress,Compress)",
        "(fromAnnotated,FromAnnotated)",
        "(toTree,ToTree)",
        "(byIndex,Byindex)",
        "(file,File)",
        "(foreachExt,ForeachExt)",
        "(shouldIgnore,ShouldIgnore)",
        "(addDiskAlternate,AddDiskAlternate)",
        "(existsPrefix,ExistsPrefix)",
        "(hashfile,Hashfile)",
        "(read,OdbRead)",
        "(readPrefix,ReadPrefix)",
        "(local,Local)",
        "(oid,Oid)",
        "(loid,Loid)",
        "(symrefTarget,SymrefTarget)",
        "(commitCreate,CommitCreate)",
        "(commitIteratorNew,CommitIteratorNew)",
        "(commitRead,CommitRead)",
        "(commitRemove,CommitRemove)",
        "(defaultRef,DefaultRef)",
        "(createUpdated,CreateUpdated)",
        "(entryById,EntryByid)",
        "(_entryByIndex,EntryByindex)",
        "(_entryByName,EntryByname)",
        "(entryByPath,EntryBypath)",
        "(entryCmp,EntryCmp)",
        "(level,Level)",
        "(revert,Revert)",
        "(buffer,Buffer)",
        "(getHunkByIndex,GetHunkByindex)",
        "(getHunkByLine,GetHunkByline)",
        "(getHunkCount,GetHunkCount)",
        "(fromFetchhead,FromFetchhead)",
        "(fromRef,FromRef)",
        "(fromRevspec,FromRevspec)",
        "(ref,Ref)",
        "(copy,Copy)",
        "(strings,Strings)",
        "(isLocked,IsLocked)",
        "(isPrunable,IsPrunable)",
        "(lock,Lock)",
        "(openFromRepository,OpenFromRepository)",
        "(prune,Prune)",
        "(unlock,Unlock)",
        "(validate,Validate)",
        "(datalen,Datalen)",
        "(inflatedlen,Inflatedlen)",
        "(containsNul,ContainsNul)",
        "(dispose,Dispose)",
        "(grow,Grow)",
        "(set,Set)",
        "(ptr,Ptr)",
        "(asize,Asize)",
        "(similarity,Similarity)",
        "(nfiles,Nfiles)",
        "(ext,Ext)",
        "(single,Single)",
        "(append,Append)",
        "(entryByIndex,EntryByindex)",
        "(hashMd5,HashMd5)",
        "(hashSha1,HashSha1)",
        "(hashSha256,HashSha256)",
        "(exec,Exec)",
        "(srcRefname,SrcRefname)",
        "(dstRefname,DstRefname)",
        "(offset,Offset)",
        "(sign,Sign)",
        "(seconds,Seconds)",
        "(nanoseconds,Nanoseconds)",
        "(cpy,Cpy)",
        "(equal,Equal)",
        "(fromString,Fromstrp)",
        "(isZero,IsZero)",
        "(iszero,Iszero)",
        "(ncmp,Ncmp)",
        "(strcmp,Strcmp)",
        "(streq,Streq)",
        "(tostrS,TostrS)",
        "(storedMutexesCount,diagnostics)",
        "(setThreadSafetyStatus,LockMasterSetStatus)",
        "(DISABLED,LockMaster)",
        "(ENABLED_FOR_ASYNC_ONLY,LockMaster)",
        "(ENABLED,LockMaster)",
        "(getByPath,GetByPath)",
        "(repo,Repo)",
        "(linesInHunk,LinesInHunk)",
        "(finalCommitId,FinalCommitId)",
        "(finalStartLineNumber,FinalStartLineNumber)",
        "(finalSignature,FinalSignature)",
        "(origCommitId,OrigCommitId)",
        "(origPath,OrigPath)",
        "(origStartLineNumber,OrigStartLineNumber)",
        "(origSignature,OrigSignature)",
        "(toBuffer,ToBuffer)",
        "(last,Last)",
        "(setOom,SetOom)",
        "(setString,SetStr)",
        "(klass,Klass)",
        "(analysis,Analysis)",
        "(analysisForRef,AnalysisForRef)",
        "(base,Base)",
        "(bases,Bases)",
        "(commits,Commits)",
        "(trees,Trees)",
        "(deleteEntry,DeleteEntry)",
        "(deleteMultivar,DeleteMultivar)",
        "(findGlobal,FindGlobal)",
        "(findProgramdata,FindProgramdata)",
        "(findSystem,FindSystem)",
        "(findXdg,FindXdg)",
        "(getBool,GetBool)",
        "(getEntry,GetEntry)",
        "(getInt32,GetInt32)",
        "(getInt64,GetInt64)",
        "(getPath,GetPath)",
        "(getStringBuf,GetStringBuf)",
        "(openDefault,OpenDefault)",
        "(openOndisk,OpenOndisk)",
        "(setBool,SetBool)",
        "(setInt32,SetInt32)",
        "(setInt64,SetInt64)",
        "(setMultivar,SetMultivar)",
        "(setString,SetString)",
        "(snapshot,Snapshot)",
        "(strMatch,StrMatch)",
        "(mapValue,MapValue)",
        "(addFetch,AddFetch)",
        "(addPush,AddPush)",
        "(autotag,Autotag)",
        "(connect,Connect)",
        "(connected,Connected)",
        "(createAnonymous,CreateAnonymous)",
        "(createDetached,CreateDetached)",
        "(createWithFetchspec,CreateWithFetchspec)",
        "(createWithOpts,CreateWithOpts)",
        "(defaultBranch,DefaultBranch)",
        "(disconnect,Disconnect)",
        "(download,Download)",
        "(fetch,Fetch)",
        "(getFetchRefspecs,GetFetchRefspecs)",
        "(getPushRefspecs,GetPushRefspecs)",
        "(getRefspec,GetRefspec)",
        "(pruneRefs,PruneRefs)",
        "(pushurl,Pushurl)",
        "(refspecCount,RefspecCount)",
        "(setAutotag,SetAutotag)",
        "(setPushurl,SetPushurl)",
        "(stats,Stats)",
        "(stop,Stop)",
        "(updateTips,UpdateTips)",
        "(upload,Upload)",
        "(referenceList,ReferenceList)",
        "(certType,CertType)"
      ]
    },
    "source-maps": {
      "Gasket": [
        "(findClosestMapping,findClosestMapping)",
        "(stringify,stringify)",
        "(getSourceIndex,getSourceIndex)",
        "(addSources,addSources)",
        "(toBuffer,toBuffer)",
        "(addRawMappings,addRawMappings)",
        "(addEmptyMap,addEmptyMap)",
        "(SourceMap,SourceMapBinding)",
        "(addIndexedMappings,addIndexedMappings)",
        "(getNameIndex,getNameIndex)",
        "(addBufferMappings,addBufferMappings)",
        "(extends,extends)",
        "(addNames,addNames)",
        "(getMap,getMap)"
      ],
      "Charon": []
    },
    "spdlog": {
      "Gasket": [
        "(error,Error)",
        "(warn,Warn)",
        "(flush,Flush)",
        "(setLevel,SetLevel)",
        "(setLevel,setLevel)",
        "(Logger,New)",
        "(debug,Debug)",
        "(trace,Trace)",
        "(getLevel,GetLevel)",
        "(clearFormatters,ClearFormatters)",
        "(info,Info)",
        "(setFlushOn,setFlushOn)",
        "(drop,Drop)",
        "(setPattern,SetPattern)",
        "(critical,Critical)"
      ],
      "Charon": [
        "(setLevel,setLevel)",
        "(setFlushOn,setFlushOn)",
        "(critical,Logger)",
        "(error,Logger)",
        "(warn,Logger)",
        "(info,Logger)",
        "(debug,Logger)",
        "(trace,Logger)",
        "(getLevel,Logger)",
        "(setLevel,Logger)",
        "(flush,Logger)",
        "(drop,Logger)",
        "(setPattern,Logger)",
        "(clearFormatters,Logger)"
      ]
    },
    "spellchecker": {
      "Gasket": [
        "(getCorrectionsForMisspelling,GetCorrectionsForMisspelling)",
        "(remove,Remove)",
        "(checkSpellingAsync,CheckSpellingAsync)",
        "(checkSpelling,CheckSpelling)",
        "(isMisspelled,IsMisspelled)",
        "(Spellchecker,New)",
        "(add,Add)",
        "(setDictionary,SetDictionary)",
        "(setSpellcheckerType,SetSpellcheckerType)",
        "(getAvailableDictionaries,GetAvailableDictionaries)"
      ],
      "Charon": [
        "(end,end)",
        "(setSpellcheckerType,Spellchecker)",
        "(setDictionary,Spellchecker)",
        "(getAvailableDictionaries,Spellchecker)",
        "(getCorrectionsForMisspelling,Spellchecker)",
        "(isMisspelled,Spellchecker)",
        "(checkSpelling,Spellchecker)",
        "(checkSpellingAsync,Spellchecker)",
        "(add,Spellchecker)",
        "(remove,Spellchecker)"
      ]
    },
    "spi-device": {
      "Gasket": [
        "(open,Open)",
        "(openSync,OpenSync)"
      ],
      "Charon": [
        "(close,Close)",
        "(closeSync,CloseSync)",
        "(transfer,Transfer)",
        "(transferSync,TransferSync)",
        "(getOptions,GetOptions)",
        "(getOptionsSync,GetOptionsSync)",
        "(setOptions,SetOptions)",
        "(setOptionsSync,SetOptionsSync)",
        "(open,Open)",
        "(openSync,OpenSync)"
      ]
    },
    "spi-node": {
      "Gasket": [
        "(readSpiSettings,ReadSpiSettings)",
        "(transfer,Transfer)"
      ],
      "Charon": [
        "(spiSupported,Boolean)",
        "(transfer,Transfer)",
        "(readSpiSettings,ReadSpiSettings)"
      ]
    },
    "sqlite3": {
      "Gasket": [
        "(wait,Wait)",
        "(Backup,Backup)",
        "(all,All)",
        "(finish,Finish)",
        "(finalize,Finalize_)",
        "(get,Get)",
        "(parallelize,Parallelize)",
        "(Statement,Statement)",
        "(serialize,Serialize)",
        "(loadExtension,LoadExtension)",
        "(Database,Database)",
        "(reset,Reset)",
        "(close,Close)",
        "(each,Each)",
        "(configure,Configure)",
        "(run,Run)",
        "(step,Step)",
        "(exec,Exec)",
        "(bind,Bind)",
        "(interrupt,Interrupt)"
      ],
      "Charon": [
        "(lastID,Number)",
        "(changes,Number)"
      ]
    },
    "sqlite3-electron": {
      "Gasket": [
        "(step,Step)",
        "(get,Get)",
        "(reset,Reset)",
        "(loadExtension,LoadExtension)",
        "(interrupt,Interrupt)",
        "(serialize,Serialize)",
        "(close,Close)",
        "(Backup,New)",
        "(all,All)",
        "(bind,Bind)",
        "(each,Each)",
        "(finish,Finish)",
        "(exec,Exec)",
        "(configure,Configure)",
        "(Database,New)",
        "(parallelize,Parallelize)",
        "(finalize,Finalize)",
        "(Statement,New)",
        "(run,Run)",
        "(wait,Wait)"
      ],
      "Charon": [
        "(step,Step)",
        "(finish,Finish)",
        "(idle,IdleGetter)",
        "(completed,CompletedGetter)",
        "(failed,FailedGetter)",
        "(remaining,RemainingGetter)",
        "(pageCount,PageCountGetter)",
        "(close,Close)",
        "(exec,Exec)",
        "(wait,Wait)",
        "(loadExtension,LoadExtension)",
        "(serialize,Serialize)",
        "(parallelize,Parallelize)",
        "(configure,Configure)",
        "(interrupt,Interrupt)",
        "(open,OpenGetter)",
        "(bind,Bind)",
        "(get,Get)",
        "(run,Run)",
        "(all,All)",
        "(each,Each)",
        "(reset,Reset)",
        "(finalize,Finalize)"
      ]
    },
    "sqlite3-rebuilt": {
      "Gasket": [
        "(step,Step)",
        "(get,Get)",
        "(reset,Reset)",
        "(loadExtension,LoadExtension)",
        "(interrupt,Interrupt)",
        "(serialize,Serialize)",
        "(close,Close)",
        "(Backup,New)",
        "(all,All)",
        "(bind,Bind)",
        "(each,Each)",
        "(finish,Finish)",
        "(exec,Exec)",
        "(configure,Configure)",
        "(Database,New)",
        "(parallelize,Parallelize)",
        "(finalize,Finalize)",
        "(Statement,New)",
        "(run,Run)",
        "(wait,Wait)"
      ],
      "Charon": [
        "(step,Step)",
        "(finish,Finish)",
        "(idle,IdleGetter)",
        "(completed,CompletedGetter)",
        "(failed,FailedGetter)",
        "(remaining,RemainingGetter)",
        "(pageCount,PageCountGetter)",
        "(close,Close)",
        "(exec,Exec)",
        "(wait,Wait)",
        "(loadExtension,LoadExtension)",
        "(serialize,Serialize)",
        "(parallelize,Parallelize)",
        "(configure,Configure)",
        "(interrupt,Interrupt)",
        "(open,OpenGetter)",
        "(bind,Bind)",
        "(get,Get)",
        "(run,Run)",
        "(all,All)",
        "(each,Each)",
        "(reset,Reset)",
        "(finalize,Finalize)"
      ]
    },
    "sqlite3-sync": {
      "Gasket": [
        "(Database,New)",
        "(error,__error)",
        "(Statement,New)",
        "(step,__step)",
        "(reset,__reset)",
        "(bind,__bind)",
        "(prepare,__prepare)",
        "(finalize,__finalize)",
        "(close,__close)"
      ],
      "Charon": []
    },
    "sq-native": {
      "Gasket": [
        "(start_additive,call_powerwaf_initializePowerWAFAdditive)",
        "(clear_additive,call_pw_clearAdditive)",
        "(run_additive,call_powerwaf_runAdditive)",
        "(get_version,call_powerwaf_get_version)",
        "(initialize,call_powerwaf_initializePowerWAF)",
        "(clear_all,call_powerwaf_clearAll)",
        "(run,call_powerwaf_run)"
      ],
      "Charon": []
    },
    "sse4_crc32": {
      "Gasket": [
        "(table_crc,table_crc)",
        "(sse42_crc,sse42_crc)"
      ],
      "Charon": []
    },
    "stagekit": {
      "Gasket": [
        "(AllOff,stagekit_alloff)",
        "(SetStrobe,stagekit_setstrobe)",
        "(Open,stagekit_init)",
        "(Close,stagekit_close)",
        "(SetYellow,stagekit_setyellow)",
        "(SetBlue,stagekit_setblue)",
        "(SetRed,stagekit_setred)",
        "(SetGreen,stagekit_setgreen)",
        "(SetFog,stagekit_setfog)"
      ],
      "Charon": [
        "(Open,stagekit_init)",
        "(Close,stagekit_close)",
        "(AllOff,stagekit_alloff)",
        "(SetStrobe,stagekit_setstrobe)",
        "(SetFog,stagekit_setfog)",
        "(SetRed,stagekit_setred)",
        "(SetYellow,stagekit_setyellow)",
        "(SetGreen,stagekit_setgreen)",
        "(SetBlue,stagekit_setblue)"
      ]
    },
    "stompica": {
      "Gasket": [
        "(runDefault,runDefault)",
        "(run,run)"
      ],
      "Charon": [
        "(runDefault,runDefault)",
        "(run,run)"
      ]
    },
    "@stoneydsp/cmodule": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": [
        "(hello,Method)"
      ]
    },
    "strong-ursa": {
      "Gasket": [
        "(getPublicKeyPem,GetPublicKeyPem)",
        "(verifyPSSPadding,VerifyPSSPadding)",
        "(getPrivateKeyPem,GetPrivateKeyPem)",
        "(addPSSPadding,AddPSSPadding)",
        "(privateEncrypt,PrivateEncrypt)",
        "(sign,Sign)",
        "(privateDecrypt,PrivateDecrypt)",
        "(createPublicKeyFromComponents,CreatePublicKeyFromComponents)",
        "(setPublicKeyPem,SetPublicKeyPem)",
        "(openPublicSshKey,OpenPublicSshKey)",
        "(createPrivateKeyFromComponents,CreatePrivateKeyFromComponents)",
        "(publicEncrypt,PublicEncrypt)",
        "(generatePrivateKey,GeneratePrivateKey)",
        "(getModulus,GetModulus)",
        "(setPrivateKeyPem,SetPrivateKeyPem)",
        "(publicDecrypt,PublicDecrypt)",
        "(RsaWrap,New)",
        "(textToNid,TextToNid)",
        "(getPrivateExponent,GetPrivateExponent)",
        "(getExponent,GetExponent)",
        "(verify,Verify)"
      ],
      "Charon": [
        "(generatePrivateKey,GeneratePrivateKey)",
        "(getExponent,GetExponent)",
        "(getPrivateExponent,GetPrivateExponent)",
        "(getModulus,GetModulus)",
        "(getPrivateKeyPem,GetPrivateKeyPem)",
        "(getPublicKeyPem,GetPublicKeyPem)",
        "(privateDecrypt,PrivateDecrypt)",
        "(privateEncrypt,PrivateEncrypt)",
        "(publicDecrypt,PublicDecrypt)",
        "(publicEncrypt,PublicEncrypt)",
        "(setPrivateKeyPem,SetPrivateKeyPem)",
        "(setPublicKeyPem,SetPublicKeyPem)",
        "(sign,Sign)",
        "(verify,Verify)",
        "(createPrivateKeyFromComponents,CreatePrivateKeyFromComponents)",
        "(createPublicKeyFromComponents,CreatePublicKeyFromComponents)",
        "(openPublicSshKey,OpenPublicSshKey)",
        "(addPSSPadding,AddPSSPadding)",
        "(verifyPSSPadding,VerifyPSSPadding)",
        "(textToNid,TextToNid)"
      ]
    },
    "@suger-tdy/usb-detection": {
      "Gasket": [
        "(startMonitoring,StartMonitoring)",
        "(stopMonitoring,StopMonitoring)",
        "(registerRemoved,RegisterRemoved)",
        "(registerAdded,RegisterAdded)",
        "(find,Find)"
      ],
      "Charon": [
        "(find,Find)",
        "(registerAdded,RegisterAdded)",
        "(registerRemoved,RegisterRemoved)",
        "(startMonitoring,StartMonitoring)",
        "(stopMonitoring,StopMonitoring)"
      ]
    },
    "@suldashi/lame": {
      "Gasket": [
        "(lame_set_compression_ratio,node_lame_set_compression_ratio)",
        "(lame_get_copyright,node_lame_get_copyright)",
        "(lame_set_scale_left,node_lame_set_scale_left)",
        "(get_lame_os_bitness,node_get_lame_os_bitness)",
        "(lame_get_brate,node_lame_get_brate)",
        "(lame_set_original,node_lame_set_original)",
        "(lame_get_disable_reservoir,node_lame_get_disable_reservoir)",
        "(lame_get_VBR_quality,node_lame_get_VBR_quality)",
        "(mpg123_framepos,node_mpg123_framepos)",
        "(mpg123_supported_decoders,node_mpg123_supported_decoders)",
        "(lame_get_num_channels,node_lame_get_num_channels)",
        "(lame_init_params,node_lame_init_params)",
        "(lame_get_VBR_q,node_lame_get_VBR_q)",
        "(lame_samplerates,node_lame_samplerates)",
        "(lame_print_config,node_lame_print_config)",
        "(lame_set_VBR_min_bitrate_kbps,node_lame_set_VBR_min_bitrate_kbps)",
        "(lame_set_num_samples,node_lame_set_num_samples)",
        "(mpg123_outblock,node_mpg123_outblock)",
        "(lame_get_exp_nspsytune,node_lame_get_exp_nspsytune)",
        "(mpg123_current_decoder,node_mpg123_current_decoder)",
        "(lame_get_in_samplerate,node_lame_get_in_samplerate)",
        "(mpg123_open_feed,node_mpg123_open_feed)",
        "(lame_get_lowpasswidth,node_lame_get_lowpasswidth)",
        "(lame_set_VBR_mean_bitrate_kbps,node_lame_set_VBR_mean_bitrate_kbps)",
        "(lame_get_out_samplerate,node_lame_get_out_samplerate)",
        "(get_lame_version,node_get_lame_version)",
        "(lame_set_exp_nspsytune,node_lame_set_exp_nspsytune)",
        "(lame_set_disable_reservoir,node_lame_set_disable_reservoir)",
        "(lame_set_highpasswidth,node_lame_set_highpasswidth)",
        "(mpg123_read,node_mpg123_read)",
        "(lame_get_quant_comp,node_lame_get_quant_comp)",
        "(lame_get_id3v1_tag,node_lame_get_id3v1_tag)",
        "(lame_set_out_samplerate,node_lame_set_out_samplerate)",
        "(lame_init,node_lame_init)",
        "(lame_set_bWriteVbrTag,node_lame_set_bWriteVbrTag)",
        "(lame_set_extension,node_lame_set_extension)",
        "(lame_get_scale_left,node_lame_get_scale_left)",
        "(mpg123_init,node_mpg123_init)",
        "(lame_set_highpassfreq,node_lame_set_highpassfreq)",
        "(lame_get_quant_comp_short,node_lame_get_quant_comp_short)",
        "(mpg123_id3,node_mpg123_id3)",
        "(lame_print_internals,node_lame_print_internals)",
        "(lame_get_VBR,node_lame_get_VBR)",
        "(mpg123_feed,node_mpg123_feed)",
        "(lame_set_quant_comp,node_lame_set_quant_comp)",
        "(lame_close,node_lame_close)",
        "(lame_set_in_samplerate,node_lame_set_in_samplerate)",
        "(lame_get_highpassfreq,node_lame_get_highpassfreq)",
        "(lame_get_id3v2_tag,node_lame_get_id3v2_tag)",
        "(lame_get_extension,node_lame_get_extension)",
        "(lame_set_lowpasswidth,node_lame_set_lowpasswidth)",
        "(lame_get_scale_right,node_lame_get_scale_right)",
        "(lame_get_scale,node_lame_get_scale)",
        "(lame_get_VBR_mean_bitrate_kbps,node_lame_get_VBR_mean_bitrate_kbps)",
        "(lame_set_analysis,node_lame_set_analysis)",
        "(lame_set_mode,node_lame_set_mode)",
        "(lame_get_VBR_hard_min,node_lame_get_VBR_hard_min)",
        "(lame_get_VBR_max_bitrate_kbps,node_lame_get_VBR_max_bitrate_kbps)",
        "(mpg123_decoders,node_mpg123_decoders)",
        "(mpg123_tell_stream,node_mpg123_tell_stream)",
        "(lame_set_VBR_max_bitrate_kbps,node_lame_set_VBR_max_bitrate_kbps)",
        "(mpg123_exit,node_mpg123_exit)",
        "(lame_set_strict_ISO,node_lame_set_strict_ISO)",
        "(lame_get_mode,node_lame_get_mode)",
        "(lame_set_quant_comp_short,node_lame_set_quant_comp_short)",
        "(lame_set_num_channels,node_lame_set_num_channels)",
        "(lame_set_brate,node_lame_set_brate)",
        "(lame_get_lowpassfreq,node_lame_get_lowpassfreq)",
        "(lame_set_quality,node_lame_set_quality)",
        "(lame_set_error_protection,node_lame_set_error_protection)",
        "(lame_set_scale,node_lame_set_scale)",
        "(lame_set_scale_right,node_lame_set_scale_right)",
        "(lame_get_original,node_lame_get_original)",
        "(lame_get_num_samples,node_lame_get_num_samples)",
        "(lame_get_quality,node_lame_get_quality)",
        "(lame_set_VBR_q,node_lame_set_VBR_q)",
        "(lame_set_VBR_hard_min,node_lame_set_VBR_hard_min)",
        "(lame_set_VBR_quality,node_lame_set_VBR_quality)",
        "(lame_get_compression_ratio,node_lame_get_compression_ratio)",
        "(mpg123_safe_buffer,node_mpg123_safe_buffer)",
        "(lame_bitrates,node_lame_bitrates)",
        "(lame_get_highpasswidth,node_lame_get_highpasswidth)",
        "(lame_get_analysis,node_lame_get_analysis)",
        "(mpg123_new,node_mpg123_new)",
        "(lame_set_VBR,node_lame_set_VBR)",
        "(lame_get_strict_ISO,node_lame_get_strict_ISO)",
        "(lame_get_VBR_min_bitrate_kbps,node_lame_get_VBR_min_bitrate_kbps)",
        "(lame_encode_buffer,node_lame_encode_buffer)",
        "(mpg123_getformat,node_mpg123_getformat)",
        "(lame_encode_flush_nogap,node_lame_encode_flush_nogap)",
        "(lame_get_error_protection,node_lame_get_error_protection)",
        "(lame_set_copyright,node_lame_set_copyright)",
        "(lame_set_lowpassfreq,node_lame_set_lowpassfreq)",
        "(mpg123_tellframe,node_mpg123_tellframe)",
        "(lame_get_bWriteVbrTag,node_lame_get_bWriteVbrTag)",
        "(mpg123_tell,node_mpg123_tell)"
      ],
      "Charon": []
    },
    "@suldashi/node-opus": {
      "Gasket": [
        "(OpusEncoder,New)",
        "(decode,Decode)",
        "(getBitrate,GetBitrate)",
        "(encode,Encode)",
        "(setBitrate,SetBitrate)",
        "(applyEncoderCTL,ApplyEncoderCTL)",
        "(applyDecoderCTL,ApplyDecoderCTL)"
      ],
      "Charon": [
        "(encode,Encode)",
        "(decode,Decode)",
        "(applyEncoderCTL,ApplyEncoderCTL)",
        "(applyDecoderCTL,ApplyDecoderCTL)",
        "(setBitrate,SetBitrate)",
        "(getBitrate,GetBitrate)"
      ]
    },
    "@suldashi/ogg": {
      "Gasket": [
        "(ogg_sync_write,node_ogg_sync_write)",
        "(ogg_packet_b_o_s,node_ogg_packet_b_o_s)",
        "(ogg_packet_replace_buffer,node_ogg_packet_replace_buffer)",
        "(ogg_packet_granulepos,node_ogg_packet_granulepos)",
        "(ogg_stream_pagein,node_ogg_stream_pagein)",
        "(ogg_packet_set_packet,node_ogg_packet_set_packet)",
        "(ogg_stream_init,node_ogg_stream_init)",
        "(ogg_stream_packetout,node_ogg_stream_packetout)",
        "(ogg_stream_flush,node_ogg_stream_flush)",
        "(ogg_packet_get_packet,node_ogg_packet_get_packet)",
        "(ogg_sync_init,node_ogg_sync_init)",
        "(ogg_packet_e_o_s,node_ogg_packet_e_o_s)",
        "(ogg_stream_packetin,node_ogg_stream_packetin)",
        "(ogg_packet_bytes,node_ogg_packet_bytes)",
        "(ogg_stream_pageout,node_ogg_stream_pageout)",
        "(ogg_packet_packetno,node_ogg_packet_packetno)",
        "(ogg_sync_pageout,node_ogg_sync_pageout)",
        "(ogg_page_to_buffer,node_ogg_page_to_buffer)"
      ],
      "Charon": [
        "(ogg_sync_init,node_ogg_sync_init)",
        "(ogg_sync_write,node_ogg_sync_write)",
        "(ogg_sync_pageout,node_ogg_sync_pageout)",
        "(ogg_stream_init,node_ogg_stream_init)",
        "(ogg_stream_pagein,node_ogg_stream_pagein)",
        "(ogg_stream_packetout,node_ogg_stream_packetout)",
        "(ogg_stream_packetin,node_ogg_stream_packetin)",
        "(ogg_stream_pageout,node_ogg_stream_pageout)",
        "(ogg_stream_flush,node_ogg_stream_flush)",
        "(ogg_page_to_buffer,node_ogg_page_to_buffer)",
        "(ogg_packet_set_packet,node_ogg_packet_set_packet)",
        "(ogg_packet_get_packet,node_ogg_packet_get_packet)",
        "(ogg_packet_bytes,node_ogg_packet_bytes)",
        "(ogg_packet_b_o_s,node_ogg_packet_b_o_s)",
        "(ogg_packet_e_o_s,node_ogg_packet_e_o_s)",
        "(ogg_packet_granulepos,node_ogg_packet_granulepos)",
        "(ogg_packet_packetno,node_ogg_packet_packetno)",
        "(ogg_packet_replace_buffer,node_ogg_packet_replace_buffer)"
      ]
    },
    "@suldashi/weak": {
      "Gasket": [
        "(get,Get)",
        "(_setCallback,SetCallback)",
        "(isDead,IsDead)",
        "(_getEmitter,GetEmitter)",
        "(_create,Create)",
        "(isWeakRef,IsWeakRef)"
      ],
      "Charon": [
        "(get,Get)",
        "(isWeakRef,IsWeakRef)",
        "(isDead,IsDead)",
        "(_create,Create)",
        "(_getEmitter,GetEmitter)",
        "(_setCallback,SetCallback)"
      ]
    },
    "sumaddon-publish": {
      "Gasket": [
        "(sum,sum)"
      ],
      "Charon": [
        "(sum,sum)"
      ]
    },
    "svmq": {
      "Gasket": [
        "(get,GetMessageQueue)",
        "(close,CloseMessageQueue)",
        "(rcv,ReceiveMessage)",
        "(snd,SendMessage)",
        "(ctl,ControlMessageQueue)"
      ],
      "Charon": [
        "(get,GetMessageQueue)",
        "(snd,SendMessage)",
        "(rcv,ReceiveMessage)",
        "(ctl,ControlMessageQueue)",
        "(close,CloseMessageQueue)"
      ]
    },
    "@swimm/tree-sitter-ruby": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "swisseph": {
      "Gasket": [
        "(swe_utc_to_jd,node_swe_utc_to_jd)",
        "(swe_houses_armc,node_swe_houses_armc)",
        "(swe_cs2timestr,node_swe_cs2timestr)",
        "(swe_difdeg2n,node_swe_difdeg2n)",
        "(swe_jdut1_to_utc,node_swe_jdut1_to_utc)",
        "(swe_fixstar,node_swe_fixstar)",
        "(swe_sol_eclipse_how,node_swe_sol_eclipse_how)",
        "(swe_heliacal_pheno_ut,node_swe_heliacal_pheno_ut)",
        "(swe_pheno,node_swe_pheno)",
        "(swe_sidtime0,node_swe_sidtime0)",
        "(swe_jdet_to_utc,node_swe_jdet_to_utc)",
        "(swe_cs2lonlatstr,node_swe_cs2lonlatstr)",
        "(swe_calc_ut,node_swe_calc_ut)",
        "(swe_revjul,node_swe_revjul)",
        "(swe_csroundsec,node_swe_csroundsec)",
        "(swe_fixstar_ut,node_swe_fixstar_ut)",
        "(swe_d2l,node_swe_d2l)",
        "(swe_split_deg,node_swe_split_deg)",
        "(swe_difrad2n,node_swe_difrad2n)",
        "(swe_sidtime,node_swe_sidtime)",
        "(swe_get_ayanamsa_ut,node_swe_get_ayanamsa_ut)",
        "(swe_julday,node_swe_julday)",
        "(swe_cotrans_sp,node_swe_cotrans_sp)",
        "(swe_set_jpl_file,node_swe_set_jpl_file)",
        "(swe_utc_time_zone,node_swe_utc_time_zone)",
        "(swe_day_of_week,node_swe_day_of_week)",
        "(swe_nod_aps,node_swe_nod_aps)",
        "(swe_set_ephe_path,node_swe_set_ephe_path)",
        "(swe_difcsn,node_swe_difcsn)",
        "(swe_deg_midp,node_swe_deg_midp)",
        "(swe_deltat,node_swe_deltat)",
        "(swe_houses_armc_ex2,node_swe_houses_armc_ex2)",
        "(swe_houses_pos,node_swe_houses_pos)",
        "(swe_nod_aps_ut,node_swe_nod_aps_ut)",
        "(swe_sol_eclipse_when_loc,node_swe_sol_eclipse_when_loc)",
        "(swe_rad_midp,node_swe_rad_midp)",
        "(swe_rise_trans,node_swe_rise_trans)",
        "(swe_lun_occult_when_loc,node_swe_lun_occult_when_loc)",
        "(swe_sol_eclipse_where,node_swe_sol_eclipse_where)",
        "(swe_sol_eclipse_when_glob,node_swe_sol_eclipse_when_glob)",
        "(swe_vis_limit_mag,node_swe_vis_limit_mag)",
        "(swe_set_topo,node_swe_set_topo)",
        "(swe_set_sid_mode,node_swe_set_sid_mode)",
        "(swe_heliacal_ut,node_swe_heliacal_ut)",
        "(swe_fixstar2_mag,node_swe_fixstar2_mag)",
        "(swe_cs2degstr,node_swe_cs2degstr)",
        "(swe_houses_ex,node_swe_houses_ex)",
        "(swe_pheno_ut,node_swe_pheno_ut)",
        "(swe_set_tid_acc,node_swe_set_tid_acc)",
        "(swe_lun_eclipse_when,node_swe_lun_eclipse_when)",
        "(swe_get_ayanamsa_name,node_swe_get_ayanamsa_name)",
        "(swe_refrac,node_swe_refrac)",
        "(swe_rise_trans_true_hor,node_swe_rise_trans_true_hor)",
        "(swe_close,node_swe_close)",
        "(swe_set_lapse_rate,node_swe_set_lapse_rate)",
        "(swe_houses_ex2,node_swe_houses_ex2)",
        "(swe_refrac_extended,node_swe_refrac_extended)",
        "(swe_get_planet_name,node_swe_get_planet_name)",
        "(swe_gauquelin_sector,node_swe_gauquelin_sector)",
        "(swe_degnorm,node_swe_degnorm)",
        "(swe_get_ayanamsa_ex,node_swe_get_ayanamsa_ex)",
        "(swe_lun_occult_when_glob,node_swe_lun_occult_when_glob)",
        "(swe_difcs2n,node_swe_difcs2n)",
        "(swe_get_ayanamsa_ex_ut,node_swe_get_ayanamsa_ex_ut)",
        "(swe_date_conversion,node_swe_date_conversion)",
        "(swe_azalt_rev,node_swe_azalt_rev)",
        "(swe_fixstar_mag,node_swe_fixstar_mag)",
        "(swe_fixstar2,node_swe_fixstar2)",
        "(swe_get_tid_acc,node_swe_get_tid_acc)",
        "(swe_lun_eclipse_how,node_swe_lun_eclipse_how)",
        "(swe_calc,node_swe_calc)",
        "(swe_radnorm,node_swe_radnorm)",
        "(swe_difdegn,node_swe_difdegn)",
        "(swe_houses,node_swe_houses)",
        "(swe_azalt,node_swe_azalt)",
        "(swe_time_equ,node_swe_time_equ)",
        "(swe_version,node_swe_version)",
        "(swe_lun_occult_where,node_swe_lun_occult_where)",
        "(swe_cotrans,node_swe_cotrans)",
        "(swe_fixstar2_ut,node_swe_fixstar2_ut)",
        "(swe_csnorm,node_swe_csnorm)",
        "(swe_get_orbital_elements,node_swe_get_orbital_elements)",
        "(swe_orbit_max_min_true_distance,node_swe_orbit_max_min_true_distance)",
        "(swe_lun_eclipse_when_loc,node_swe_lun_eclipse_when_loc)",
        "(swe_get_ayanamsa,node_swe_get_ayanamsa)"
      ],
      "Charon": [
        "(name,name)",
        "(swe_deltat,node_swe_deltat)",
        "(swe_time_equ,node_swe_time_equ)",
        "(swe_sidtime0,node_swe_sidtime0)",
        "(swe_sidtime,node_swe_sidtime)",
        "(swe_cotrans,node_swe_cotrans)",
        "(swe_cotrans_sp,node_swe_cotrans_sp)",
        "(swe_get_tid_acc,node_swe_get_tid_acc)",
        "(swe_set_tid_acc,node_swe_set_tid_acc)",
        "(swe_degnorm,node_swe_degnorm)",
        "(swe_radnorm,node_swe_radnorm)",
        "(swe_rad_midp,node_swe_rad_midp)",
        "(swe_deg_midp,node_swe_deg_midp)",
        "(swe_split_deg,node_swe_split_deg)",
        "(swe_csnorm,node_swe_csnorm)",
        "(swe_difcsn,node_swe_difcsn)",
        "(swe_difdegn,node_swe_difdegn)",
        "(swe_difcs2n,node_swe_difcs2n)",
        "(swe_difdeg2n,node_swe_difdeg2n)",
        "(swe_difrad2n,node_swe_difrad2n)",
        "(swe_csroundsec,node_swe_csroundsec)",
        "(swe_d2l,node_swe_d2l)",
        "(swe_day_of_week,node_swe_day_of_week)",
        "(swe_cs2timestr,node_swe_cs2timestr)",
        "(swe_cs2lonlatstr,node_swe_cs2lonlatstr)",
        "(swe_cs2degstr,node_swe_cs2degstr)",
        "(swe_date_conversion,node_swe_date_conversion)",
        "(swe_julday,node_swe_julday)",
        "(swe_revjul,node_swe_revjul)",
        "(swe_utc_to_jd,node_swe_utc_to_jd)",
        "(swe_jdet_to_utc,node_swe_jdet_to_utc)",
        "(swe_jdut1_to_utc,node_swe_jdut1_to_utc)",
        "(swe_utc_time_zone,node_swe_utc_time_zone)",
        "(swe_version,node_swe_version)",
        "(swe_calc_ut,node_swe_calc_ut)",
        "(swe_calc,node_swe_calc)",
        "(swe_fixstar,node_swe_fixstar)",
        "(swe_fixstar_ut,node_swe_fixstar_ut)",
        "(swe_fixstar_mag,node_swe_fixstar_mag)",
        "(swe_fixstar2,node_swe_fixstar2)",
        "(swe_fixstar2_ut,node_swe_fixstar2_ut)",
        "(swe_fixstar2_mag,node_swe_fixstar2_mag)",
        "(swe_close,node_swe_close)",
        "(swe_set_ephe_path,node_swe_set_ephe_path)",
        "(swe_set_jpl_file,node_swe_set_jpl_file)",
        "(swe_get_planet_name,node_swe_get_planet_name)",
        "(swe_set_topo,node_swe_set_topo)",
        "(swe_set_sid_mode,node_swe_set_sid_mode)",
        "(swe_get_ayanamsa,node_swe_get_ayanamsa)",
        "(swe_get_ayanamsa_ut,node_swe_get_ayanamsa_ut)",
        "(swe_get_ayanamsa_ex,node_swe_get_ayanamsa_ex)",
        "(swe_get_ayanamsa_ex_ut,node_swe_get_ayanamsa_ex_ut)",
        "(swe_get_ayanamsa_name,node_swe_get_ayanamsa_name)",
        "(swe_nod_aps,node_swe_nod_aps)",
        "(swe_nod_aps_ut,node_swe_nod_aps_ut)",
        "(swe_get_orbital_elements,node_swe_get_orbital_elements)",
        "(swe_orbit_max_min_true_distance,node_swe_orbit_max_min_true_distance)",
        "(swe_heliacal_ut,node_swe_heliacal_ut)",
        "(swe_heliacal_pheno_ut,node_swe_heliacal_pheno_ut)",
        "(swe_vis_limit_mag,node_swe_vis_limit_mag)",
        "(swe_houses,node_swe_houses)",
        "(swe_houses_ex,node_swe_houses_ex)",
        "(swe_houses_ex2,node_swe_houses_ex2)",
        "(swe_houses_armc,node_swe_houses_armc)",
        "(swe_houses_armc_ex2,node_swe_houses_armc_ex2)",
        "(swe_houses_pos,node_swe_houses_pos)",
        "(swe_gauquelin_sector,node_swe_gauquelin_sector)",
        "(swe_sol_eclipse_where,node_swe_sol_eclipse_where)",
        "(swe_lun_occult_where,node_swe_lun_occult_where)",
        "(swe_sol_eclipse_how,node_swe_sol_eclipse_how)",
        "(swe_sol_eclipse_when_loc,node_swe_sol_eclipse_when_loc)",
        "(swe_lun_occult_when_loc,node_swe_lun_occult_when_loc)",
        "(swe_sol_eclipse_when_glob,node_swe_sol_eclipse_when_glob)",
        "(swe_lun_occult_when_glob,node_swe_lun_occult_when_glob)",
        "(swe_lun_eclipse_how,node_swe_lun_eclipse_how)",
        "(swe_lun_eclipse_when,node_swe_lun_eclipse_when)",
        "(swe_lun_eclipse_when_loc,node_swe_lun_eclipse_when_loc)",
        "(swe_pheno,node_swe_pheno)",
        "(swe_pheno_ut,node_swe_pheno_ut)",
        "(swe_refrac,node_swe_refrac)",
        "(swe_refrac_extended,node_swe_refrac_extended)",
        "(swe_set_lapse_rate,node_swe_set_lapse_rate)",
        "(swe_azalt,node_swe_azalt)",
        "(swe_azalt_rev,node_swe_azalt_rev)",
        "(swe_rise_trans,node_swe_rise_trans)",
        "(swe_rise_trans_true_hor,node_swe_rise_trans_true_hor)"
      ]
    },
    "swisseph-v2": {
      "Gasket": [
        "(swe_sidtime0,node_swe_sidtime0)",
        "(swe_lun_occult_where,node_swe_lun_occult_where)",
        "(swe_split_deg,node_swe_split_deg)",
        "(swe_houses_pos,node_swe_houses_pos)",
        "(swe_gauquelin_sector,node_swe_gauquelin_sector)",
        "(swe_close,node_swe_close)",
        "(swe_heliacal_pheno_ut,node_swe_heliacal_pheno_ut)",
        "(swe_get_orbital_elements,node_swe_get_orbital_elements)",
        "(swe_houses,node_swe_houses)",
        "(swe_get_planet_name,node_swe_get_planet_name)",
        "(swe_sol_eclipse_how,node_swe_sol_eclipse_how)",
        "(swe_fixstar_mag,node_swe_fixstar_mag)",
        "(swe_fixstar_ut,node_swe_fixstar_ut)",
        "(swe_deltat,node_swe_deltat)",
        "(swe_rise_trans_true_hor,node_swe_rise_trans_true_hor)",
        "(swe_set_lapse_rate,node_swe_set_lapse_rate)",
        "(swe_deg_midp,node_swe_deg_midp)",
        "(swe_refrac_extended,node_swe_refrac_extended)",
        "(swe_sol_eclipse_where,node_swe_sol_eclipse_where)",
        "(swe_revjul,node_swe_revjul)",
        "(swe_cotrans_sp,node_swe_cotrans_sp)",
        "(swe_set_topo,node_swe_set_topo)",
        "(swe_cotrans,node_swe_cotrans)",
        "(swe_houses_ex2,node_swe_houses_ex2)",
        "(swe_azalt_rev,node_swe_azalt_rev)",
        "(swe_nod_aps,node_swe_nod_aps)",
        "(swe_get_ayanamsa_ut,node_swe_get_ayanamsa_ut)",
        "(swe_pheno,node_swe_pheno)",
        "(swe_lun_eclipse_how,node_swe_lun_eclipse_how)",
        "(swe_version,node_swe_version)",
        "(swe_jdut1_to_utc,node_swe_jdut1_to_utc)",
        "(swe_degnorm,node_swe_degnorm)",
        "(swe_get_ayanamsa_ex,node_swe_get_ayanamsa_ex)",
        "(swe_lun_eclipse_when,node_swe_lun_eclipse_when)",
        "(swe_set_jpl_file,node_swe_set_jpl_file)",
        "(swe_calc_ut,node_swe_calc_ut)",
        "(swe_houses_ex,node_swe_houses_ex)",
        "(swe_fixstar2_mag,node_swe_fixstar2_mag)",
        "(swe_d2l,node_swe_d2l)",
        "(swe_nod_aps_ut,node_swe_nod_aps_ut)",
        "(swe_lun_eclipse_when_loc,node_swe_lun_eclipse_when_loc)",
        "(swe_julday,node_swe_julday)",
        "(swe_sol_eclipse_when_loc,node_swe_sol_eclipse_when_loc)",
        "(swe_orbit_max_min_true_distance,node_swe_orbit_max_min_true_distance)",
        "(swe_day_of_week,node_swe_day_of_week)",
        "(swe_get_ayanamsa_name,node_swe_get_ayanamsa_name)",
        "(swe_csnorm,node_swe_csnorm)",
        "(swe_utc_time_zone,node_swe_utc_time_zone)",
        "(swe_csroundsec,node_swe_csroundsec)",
        "(swe_azalt,node_swe_azalt)",
        "(swe_difdegn,node_swe_difdegn)",
        "(swe_difdeg2n,node_swe_difdeg2n)",
        "(swe_fixstar2_ut,node_swe_fixstar2_ut)",
        "(swe_sol_eclipse_when_glob,node_swe_sol_eclipse_when_glob)",
        "(swe_calc,node_swe_calc)",
        "(swe_radnorm,node_swe_radnorm)",
        "(swe_set_ephe_path,node_swe_set_ephe_path)",
        "(swe_jdet_to_utc,node_swe_jdet_to_utc)",
        "(swe_rise_trans,node_swe_rise_trans)",
        "(swe_get_ayanamsa,node_swe_get_ayanamsa)",
        "(swe_cs2timestr,node_swe_cs2timestr)",
        "(swe_cs2degstr,node_swe_cs2degstr)",
        "(swe_lun_occult_when_loc,node_swe_lun_occult_when_loc)",
        "(swe_fixstar2,node_swe_fixstar2)",
        "(swe_vis_limit_mag,node_swe_vis_limit_mag)",
        "(swe_difrad2n,node_swe_difrad2n)",
        "(swe_lun_occult_when_glob,node_swe_lun_occult_when_glob)",
        "(swe_get_tid_acc,node_swe_get_tid_acc)",
        "(swe_rad_midp,node_swe_rad_midp)",
        "(swe_cs2lonlatstr,node_swe_cs2lonlatstr)",
        "(swe_heliacal_ut,node_swe_heliacal_ut)",
        "(swe_set_sid_mode,node_swe_set_sid_mode)",
        "(swe_difcsn,node_swe_difcsn)",
        "(swe_sidtime,node_swe_sidtime)",
        "(swe_houses_armc_ex2,node_swe_houses_armc_ex2)",
        "(swe_get_ayanamsa_ex_ut,node_swe_get_ayanamsa_ex_ut)",
        "(swe_utc_to_jd,node_swe_utc_to_jd)",
        "(swe_fixstar,node_swe_fixstar)",
        "(swe_date_conversion,node_swe_date_conversion)",
        "(swe_refrac,node_swe_refrac)",
        "(swe_time_equ,node_swe_time_equ)",
        "(swe_houses_armc,node_swe_houses_armc)",
        "(swe_pheno_ut,node_swe_pheno_ut)",
        "(swe_set_tid_acc,node_swe_set_tid_acc)",
        "(swe_difcs2n,node_swe_difcs2n)"
      ],
      "Charon": [
        "(swe_deltat,node_swe_deltat)",
        "(swe_time_equ,node_swe_time_equ)",
        "(swe_sidtime0,node_swe_sidtime0)",
        "(swe_sidtime,node_swe_sidtime)",
        "(swe_cotrans,node_swe_cotrans)",
        "(swe_cotrans_sp,node_swe_cotrans_sp)",
        "(swe_get_tid_acc,node_swe_get_tid_acc)",
        "(swe_set_tid_acc,node_swe_set_tid_acc)",
        "(swe_degnorm,node_swe_degnorm)",
        "(swe_radnorm,node_swe_radnorm)",
        "(swe_rad_midp,node_swe_rad_midp)",
        "(swe_deg_midp,node_swe_deg_midp)",
        "(swe_split_deg,node_swe_split_deg)",
        "(swe_csnorm,node_swe_csnorm)",
        "(swe_difcsn,node_swe_difcsn)",
        "(swe_difdegn,node_swe_difdegn)",
        "(swe_difcs2n,node_swe_difcs2n)",
        "(swe_difdeg2n,node_swe_difdeg2n)",
        "(swe_difrad2n,node_swe_difrad2n)",
        "(swe_csroundsec,node_swe_csroundsec)",
        "(swe_d2l,node_swe_d2l)",
        "(swe_day_of_week,node_swe_day_of_week)",
        "(swe_cs2timestr,node_swe_cs2timestr)",
        "(swe_cs2lonlatstr,node_swe_cs2lonlatstr)",
        "(swe_cs2degstr,node_swe_cs2degstr)",
        "(swe_date_conversion,node_swe_date_conversion)",
        "(swe_julday,node_swe_julday)",
        "(swe_revjul,node_swe_revjul)",
        "(swe_utc_to_jd,node_swe_utc_to_jd)",
        "(swe_jdet_to_utc,node_swe_jdet_to_utc)",
        "(swe_jdut1_to_utc,node_swe_jdut1_to_utc)",
        "(swe_utc_time_zone,node_swe_utc_time_zone)",
        "(swe_version,node_swe_version)",
        "(swe_calc_ut,node_swe_calc_ut)",
        "(swe_calc,node_swe_calc)",
        "(swe_fixstar,node_swe_fixstar)",
        "(swe_fixstar_ut,node_swe_fixstar_ut)",
        "(swe_fixstar_mag,node_swe_fixstar_mag)",
        "(swe_fixstar2,node_swe_fixstar2)",
        "(swe_fixstar2_ut,node_swe_fixstar2_ut)",
        "(swe_fixstar2_mag,node_swe_fixstar2_mag)",
        "(swe_close,node_swe_close)",
        "(swe_set_ephe_path,node_swe_set_ephe_path)",
        "(swe_set_jpl_file,node_swe_set_jpl_file)",
        "(swe_get_planet_name,node_swe_get_planet_name)",
        "(swe_set_topo,node_swe_set_topo)",
        "(swe_set_sid_mode,node_swe_set_sid_mode)",
        "(swe_get_ayanamsa,node_swe_get_ayanamsa)",
        "(swe_get_ayanamsa_ut,node_swe_get_ayanamsa_ut)",
        "(swe_get_ayanamsa_ex,node_swe_get_ayanamsa_ex)",
        "(swe_get_ayanamsa_ex_ut,node_swe_get_ayanamsa_ex_ut)",
        "(swe_get_ayanamsa_name,node_swe_get_ayanamsa_name)",
        "(swe_nod_aps,node_swe_nod_aps)",
        "(swe_nod_aps_ut,node_swe_nod_aps_ut)",
        "(swe_get_orbital_elements,node_swe_get_orbital_elements)",
        "(swe_orbit_max_min_true_distance,node_swe_orbit_max_min_true_distance)",
        "(swe_heliacal_ut,node_swe_heliacal_ut)",
        "(swe_heliacal_pheno_ut,node_swe_heliacal_pheno_ut)",
        "(swe_vis_limit_mag,node_swe_vis_limit_mag)",
        "(swe_houses,node_swe_houses)",
        "(swe_houses_ex,node_swe_houses_ex)",
        "(swe_houses_ex2,node_swe_houses_ex2)",
        "(swe_houses_armc,node_swe_houses_armc)",
        "(swe_houses_armc_ex2,node_swe_houses_armc_ex2)",
        "(swe_houses_pos,node_swe_houses_pos)",
        "(swe_gauquelin_sector,node_swe_gauquelin_sector)",
        "(swe_sol_eclipse_where,node_swe_sol_eclipse_where)",
        "(swe_lun_occult_where,node_swe_lun_occult_where)",
        "(swe_sol_eclipse_how,node_swe_sol_eclipse_how)",
        "(swe_sol_eclipse_when_loc,node_swe_sol_eclipse_when_loc)",
        "(swe_lun_occult_when_loc,node_swe_lun_occult_when_loc)",
        "(swe_sol_eclipse_when_glob,node_swe_sol_eclipse_when_glob)",
        "(swe_lun_occult_when_glob,node_swe_lun_occult_when_glob)",
        "(swe_lun_eclipse_how,node_swe_lun_eclipse_how)",
        "(swe_lun_eclipse_when,node_swe_lun_eclipse_when)",
        "(swe_lun_eclipse_when_loc,node_swe_lun_eclipse_when_loc)",
        "(swe_pheno,node_swe_pheno)",
        "(swe_pheno_ut,node_swe_pheno_ut)",
        "(swe_refrac,node_swe_refrac)",
        "(swe_refrac_extended,node_swe_refrac_extended)",
        "(swe_set_lapse_rate,node_swe_set_lapse_rate)",
        "(swe_azalt,node_swe_azalt)",
        "(swe_azalt_rev,node_swe_azalt_rev)",
        "(swe_rise_trans,node_swe_rise_trans)",
        "(swe_rise_trans_true_hor,node_swe_rise_trans_true_hor)",
        "(name,name)"
      ]
    },
    "symbology": {
      "Gasket": [
        "(createStream,createStream)"
      ],
      "Charon": []
    },
    "synchronous-worker": {
      "Gasket": [
        "(runLoop,RunLoop)",
        "(start,Start)",
        "(stop,Stop)",
        "(SynchronousWorkerImpl,New)",
        "(signalStop,SignalStop)",
        "(load,Load)",
        "(isLoopAlive,IsLoopAlive)",
        "(runInCallbackScope,RunInCallbackScope)"
      ],
      "Charon": [
        "(start,isolate)",
        "(load,isolate)",
        "(stop,isolate)",
        "(signalStop,isolate)",
        "(runLoop,isolate)",
        "(isLoopAlive,isolate)",
        "(runInCallbackScope,isolate)"
      ]
    },
    "syncprompt": {
      "Gasket": [
        "(set_echo,setEcho)",
        "(sync_prompt,syncPrompt)"
      ],
      "Charon": [
        "(sync_prompt,syncPrompt)",
        "(set_echo,setEcho)"
      ]
    },
    "sync-runner": {
      "Gasket": [
        "(exec,Exec)"
      ],
      "Charon": [
        "(exec,Exec)"
      ]
    },
    "@syndicats/drivelist": {
      "Gasket": [
        "(list,list)"
      ],
      "Charon": [
        "(list,list)"
      ]
    },
    "system-time": {
      "Gasket": [
        "(setTime,setTime)"
      ],
      "Charon": []
    },
    "@szeah27/audify": {
      "Gasket": [
        "(write,write)",
        "(OpusEncoder,OpusEncoderWrap)",
        "(isStreamRunning,isStreamRunning)",
        "(RtAudio,RtAudioWrap)",
        "(getStreamLatency,getStreamLatency)",
        "(setInputCallback,setInputCallback)",
        "(setFrameOutputCallback,setFrameOutputCallback)",
        "(clearOutputQueue,clearOutputQueue)",
        "(getDefaultInputDevice,getDefaultInputDevice)",
        "(decodeFloat,decodeFloat)",
        "(OpusDecoder,OpusDecoderWrap)",
        "(stop,stop)",
        "(decode,decode)",
        "(closeStream,closeStream)",
        "(getDefaultOutputDevice,getDefaultOutputDevice)",
        "(getDevices,getDevices)",
        "(encode,encode)",
        "(openStream,openStream)",
        "(getApi,getApi)",
        "(isStreamOpen,isStreamOpen)",
        "(encodeFloat,encodeFloat)",
        "(getStreamSampleRate,getStreamSampleRate)",
        "(start,start)"
      ],
      "Charon": []
    },
    "t12-parser": {
      "Gasket": [
        "(__parse_internal,parse_internal)",
        "(__format_error_internal,format_error_internal)"
      ],
      "Charon": []
    },
    "talib": {
      "Gasket": [
        "(execute,Execute)",
        "(setUnstablePeriod,SetUnstablePeriod)",
        "(explain,Explain)"
      ],
      "Charon": [
        "(functions,Functions)",
        "(functionUnstIds,FunctionUnstIds)",
        "(explain,Explain)",
        "(execute,Execute)",
        "(setUnstablePeriod,SetUnstablePeriod)"
      ]
    },
    "talkspirit-spellchecker": {
      "Gasket": [
        "(setDictionary,SetDictionary)",
        "(isMisspelled,IsMisspelled)",
        "(remove,Remove)",
        "(setSpellcheckerType,SetSpellcheckerType)",
        "(add,Add)",
        "(checkSpelling,CheckSpelling)",
        "(checkSpellingAsync,CheckSpellingAsync)",
        "(getCorrectionsForMisspelling,GetCorrectionsForMisspelling)",
        "(getAvailableDictionaries,GetAvailableDictionaries)",
        "(Spellchecker,New)"
      ],
      "Charon": [
        "(end,end)",
        "(setSpellcheckerType,Spellchecker)",
        "(setDictionary,Spellchecker)",
        "(getAvailableDictionaries,Spellchecker)",
        "(getCorrectionsForMisspelling,Spellchecker)",
        "(isMisspelled,Spellchecker)",
        "(checkSpelling,Spellchecker)",
        "(checkSpellingAsync,Spellchecker)",
        "(add,Spellchecker)",
        "(remove,Spellchecker)"
      ]
    },
    "tcp-netx": {
      "Gasket": [
        "(server,New)",
        "(settrace,settrace)",
        "(readbin,readbinary)",
        "(readbinary,readbinary)",
        "(write,write)",
        "(connect,connect)",
        "(http,http)",
        "(disconnect,disconnect)",
        "(read,read)",
        "(writebinary,writebinary)",
        "(version,version)",
        "(writebin,writebinary)",
        "(timeout,timeout)"
      ],
      "Charon": [
        "(version,version)",
        "(timeout,timeout)",
        "(settrace,settrace)",
        "(connect,connect)",
        "(read,read)",
        "(readbin,readbinary)",
        "(readbinary,readbinary)",
        "(write,write)",
        "(writebin,writebinary)",
        "(writebinary,writebinary)",
        "(http,http)",
        "(disconnect,disconnect)"
      ]
    },
    "tdlib-native": {
      "Gasket": [
        "(td_json_client_send,ClientSend)",
        "(td_receive,Receive)",
        "(tdn_init,Init)",
        "(tdn_unref,Unref)",
        "(td_execute,Execute)",
        "(td_json_client_create,ClientCreate)",
        "(load_tdjson,LoadTdjson)",
        "(td_create_client_id,CreateClientId)",
        "(td_send,Send)",
        "(td_set_log_message_callback,SetLogMessageCallback)",
        "(td_json_client_receive,ClientReceive)",
        "(td_json_client_destroy,ClientDestroy)",
        "(tdn_ref,Ref)",
        "(td_json_client_execute,ClientExecute)"
      ],
      "Charon": []
    },
    "tdl-tdlib-addon": {
      "Gasket": [
        "(td_client_send,td_client_send)",
        "(td_client_execute,td_client_execute)",
        "(td_set_fatal_error_callback,td_set_fatal_error_callback)",
        "(load_tdjson,load_tdjson)",
        "(td_client_destroy,td_client_destroy)",
        "(td_client_receive,td_client_receive)",
        "(td_client_create,td_client_create)"
      ],
      "Charon": [
        "(td_client_create,td_client_create)",
        "(td_client_send,td_client_send)",
        "(td_client_receive,td_client_receive)",
        "(td_client_execute,td_client_execute)",
        "(td_client_destroy,td_client_destroy)",
        "(td_set_fatal_error_callback,td_set_fatal_error_callback)",
        "(load_tdjson,load_tdjson)"
      ]
    },
    "tdy-drivelist": {
      "Gasket": [
        "(list,list)"
      ],
      "Charon": [
        "(list,list)"
      ]
    },
    "tea-napi": {
      "Gasket": [
        "(teaEncrypt,TeaEncrypt)",
        "(teaDecrypt,TeaDecrypt)"
      ],
      "Charon": []
    },
    "@tech9app/whisper.js": {
      "Gasket": [
        "(whisper,whisper)"
      ],
      "Charon": [
        "(whisper,whisper)"
      ]
    },
    "@techainer1t/torch-js": {
      "Gasket": [
        "(Tensor,Tensor)",
        "(forward,forward)",
        "(initenv,initenv)",
        "(free,free)",
        "(toString,toString)",
        "(cuda,cuda)",
        "(rand,rand)",
        "(clone,clone)",
        "(fromObject,fromObject)",
        "(toObject,toObject)",
        "(ScriptModule,ScriptModule)",
        "(call_scripted_function,call_scripted_function)",
        "(cpu,cpu)",
        "(isCudaAvailable,isCudaAvailable)"
      ],
      "Charon": [
        "(rand,rand)",
        "(initenv,initenv)"
      ]
    },
    "@tensorflow/tfjs-node": {
      "Gasket": [
        "(loadSavedModel,LoadSavedModel)",
        "(tensorDataSync,TensorDataSync)",
        "(deleteTensor,DeleteTensor)",
        "(executeOp,ExecuteOp)",
        "(getNumOfTensors,GetNumOfTensors)",
        "(getNumOfSavedModels,GetNumOfSavedModels)",
        "(runSavedModel,RunSavedModel)",
        "(isUsingGpuDevice,IsUsingGPUDevice)",
        "(createTensor,CreateTensor)",
        "(deleteSavedModel,DeleteSavedModel)"
      ],
      "Charon": []
    },
    "@tensorflow/tfjs-node-gpu": {
      "Gasket": [
        "(loadSavedModel,LoadSavedModel)",
        "(tensorDataSync,TensorDataSync)",
        "(deleteTensor,DeleteTensor)",
        "(executeOp,ExecuteOp)",
        "(getNumOfTensors,GetNumOfTensors)",
        "(getNumOfSavedModels,GetNumOfSavedModels)",
        "(runSavedModel,RunSavedModel)",
        "(isUsingGpuDevice,IsUsingGPUDevice)",
        "(createTensor,CreateTensor)",
        "(deleteSavedModel,DeleteSavedModel)"
      ],
      "Charon": []
    },
    "@terminus-term/node-pty": {
      "Gasket": [
        "(open,PtyOpen)",
        "(resize,PtyResize)",
        "(fork,PtyFork)",
        "(process,PtyGetProc)"
      ],
      "Charon": []
    },
    "termios-fixedv12": {
      "Gasket": [
        "(getattr,Getattr)",
        "(setattr,Setattr)"
      ],
      "Charon": [
        "(setattr,Setattr)",
        "(getattr,Getattr)"
      ]
    },
    "test-1638-world": {
      "Gasket": [
        "(greeting,CreateGreeting)"
      ],
      "Charon": [
        "(greeting,CreateGreeting)"
      ]
    },
    "test-addons": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": []
    },
    "test_addon_simple_hello": {
      "Gasket": [
        "(hello,Hello)"
      ],
      "Charon": []
    },
    "@theia/node-pty": {
      "Gasket": [
        "(open,PtyOpen)",
        "(resize,PtyResize)",
        "(fork,PtyFork)",
        "(process,PtyGetProc)"
      ],
      "Charon": []
    },
    "@thlorenz/function-origin": {
      "Gasket": [
        "(setOrigin,SetOrigin)"
      ],
      "Charon": [
        "(setOrigin,SetOrigin)"
      ]
    },
    "thmclrx": {
      "Gasket": [
        "(getByMinDiff,GetByMinDiff)",
        "(getByOctree,GetByOctree)",
        "(getByMixed,GetByMixed)"
      ],
      "Charon": [
        "(getByOctree,GetByOctree)",
        "(getByMinDiff,GetByMinDiff)",
        "(getByMixed,GetByMixed)"
      ]
    },
    "@three-em/node": {
      "Gasket": [
        "(simulateContract,he6f7d4b538ecd83c)",
        "(executeContract,h8c4f0e38b54e745c)"
      ],
      "Charon": []
    },
    "tiff-multipage": {
      "Gasket": [
        "(JoinSync,JoinSync)",
        "(JoinAsync,JoinAsync)"
      ],
      "Charon": [
        "(JoinAsync,JoinAsync)",
        "(JoinSync,JoinSync)"
      ]
    },
    "@tludlow-instana-fork/autoprofile": {
      "Gasket": [
        "(startAllocationSampler,StartAllocationSampler)",
        "(stopAllocationSampler,StopAllocationSampler)",
        "(stopCpuSampler,StopCPUSampler)",
        "(startCpuSampler,StartCPUSampler)",
        "(checkAllocationSampler,CheckAllocationSampler)",
        "(readAllocationProfile,ReadAllocationProfile)"
      ],
      "Charon": []
    },
    "@todesktop/robotjs-prebuild": {
      "Gasket": [
        "(setMouseDelay,setMouseDelay)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(typeString,typeString)",
        "(scrollMouse,scrollMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(keyTap,keyTap)",
        "(getColor,getColor)",
        "(getPixelColor,getPixelColor)",
        "(mouseToggle,mouseToggle)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)",
        "(moveMouse,moveMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(getScreenSize,getScreenSize)",
        "(keyToggle,keyToggle)",
        "(dragMouse,dragMouse)",
        "(unicodeTap,unicodeTap)",
        "(captureScreen,captureScreen)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(unicodeTap,unicodeTap)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getColor,getColor)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "@tonclient/lib-node": {
      "Gasket": [
        "(sendRequest,sendRequest)",
        "(createContext,createContext)",
        "(setResponseHandler,setResponseHandler)",
        "(destroyContext,destroyContext)"
      ],
      "Charon": []
    },
    "traaittplatform-crypto": {
      "Gasket": [
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(derivePublicKey,derivePublicKey)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(cnFastHash,cn_fast_hash)",
        "(checkKey,checkKey)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(generateRingSignatures,generateRingSignatures)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(generateKeys,generateKeys)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(scReduce32,scReduce32)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(generateKeyImage,generateKeyImage)",
        "(deriveSecretKey,deriveSecretKey)",
        "(scalarmultKey,scalarmultKey)",
        "(checkSignature,checkSignature)",
        "(generateSignature,generateSignature)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(tree_hash,tree_hash)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(tree_branch,tree_branch)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(checkRingSignature,checkRingSignature)",
        "(chukwa_slow_hash,chukwa_slow_hash)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(underivePublicKey,underivePublicKey)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(hashToScalar,hashToScalar)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(tree_depth,tree_depth)"
      ],
      "Charon": [
        "(checkKey,checkKey)",
        "(checkRingSignature,checkRingSignature)",
        "(checkSignature,checkSignature)",
        "(derivePublicKey,derivePublicKey)",
        "(deriveSecretKey,deriveSecretKey)",
        "(generateKeys,generateKeys)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(generateKeyImage,generateKeyImage)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(generateRingSignatures,generateRingSignatures)",
        "(generateSignature,generateSignature)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(hashToScalar,hashToScalar)",
        "(scalarmultKey,scalarmultKey)",
        "(scReduce32,scReduce32)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(tree_depth,tree_depth)",
        "(tree_hash,tree_hash)",
        "(tree_branch,tree_branch)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(underivePublicKey,underivePublicKey)",
        "(cnFastHash,cn_fast_hash)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(chukwa_slow_hash,chukwa_slow_hash)"
      ]
    },
    "@traaittplatform/traaittplatform-crypto": {
      "Gasket": [
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(derivePublicKey,derivePublicKey)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(cnFastHash,cn_fast_hash)",
        "(checkKey,checkKey)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(generateRingSignatures,generateRingSignatures)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(generateKeys,generateKeys)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(scReduce32,scReduce32)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(generateKeyImage,generateKeyImage)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)",
        "(deriveSecretKey,deriveSecretKey)",
        "(scalarmultKey,scalarmultKey)",
        "(checkSignature,checkSignature)",
        "(generateSignature,generateSignature)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(tree_hash,tree_hash)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(tree_branch,tree_branch)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(checkRingSignature,checkRingSignature)",
        "(chukwa_slow_hash,chukwa_slow_hash)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(underivePublicKey,underivePublicKey)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(hashToScalar,hashToScalar)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(tree_depth,tree_depth)"
      ],
      "Charon": [
        "(checkKey,checkKey)",
        "(checkRingSignature,checkRingSignature)",
        "(checkSignature,checkSignature)",
        "(derivePublicKey,derivePublicKey)",
        "(deriveSecretKey,deriveSecretKey)",
        "(generateKeys,generateKeys)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(generateKeyImage,generateKeyImage)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(generateRingSignatures,generateRingSignatures)",
        "(generateSignature,generateSignature)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(hashToScalar,hashToScalar)",
        "(scalarmultKey,scalarmultKey)",
        "(scReduce32,scReduce32)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(tree_depth,tree_depth)",
        "(tree_hash,tree_hash)",
        "(tree_branch,tree_branch)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(underivePublicKey,underivePublicKey)",
        "(cnFastHash,cn_fast_hash)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(chukwa_slow_hash,chukwa_slow_hash)"
      ]
    },
    "transparent-titlebar": {
      "Gasket": [
        "(setTitleColor,setTitleColor)",
        "(setup,setup)"
      ],
      "Charon": []
    },
    "@trbll/nodeimu": {
      "Gasket": [
        "(getValueSync,GetValueSync)",
        "(IMU,New)",
        "(getValue,GetValue)"
      ],
      "Charon": []
    },
    "tree-sitter": {
      "Gasket": [
        "(nextSibling,NextSibling)",
        "(namedChild,NamedChild)",
        "(gotoFirstChildForPosition,GotoFirstChildForPosition)",
        "(childNodesForFieldId,ChildNodesForFieldId)",
        "(gotoDescendant,GotoDescendant)",
        "(grammarType,GrammarType)",
        "(previousSibling,PreviousSibling)",
        "(endIndex,EndIndex)",
        "(parse,Parse)",
        "(lastChild,LastChild)",
        "(startPosition,StartPosition)",
        "(startIndex,StartIndex)",
        "(parent,Parent)",
        "(endPosition,EndPosition)",
        "(_matches,Matches)",
        "(resetState,ResetState)",
        "(children,Children)",
        "(getEditedRange,GetEditedRange)",
        "(getLogger,GetLogger)",
        "(TreeCursor,TreeCursor)",
        "(grammarId,GrammarId)",
        "(isMissing,IsMissing)",
        "(_cacheNodes,CacheNodes)",
        "(isPatternGuaranteedAtStep,IsPatternGuaranteedAtStep)",
        "(descendantForPosition,DescendantForPosition)",
        "(_next,Next)",
        "(namedDescendantForPosition,NamedDescendantForPosition)",
        "(namedChildren,NamedChildren)",
        "(edit,Edit)",
        "(parseState,ParseState)",
        "(rootNode,RootNode)",
        "(gotoPreviousSibling,GotoPreviousSibling)",
        "(Parser,Parser)",
        "(closest,Closest)",
        "(getNodeTypeNamesById,GetNodeTypeNamesById)",
        "(endIndexForPattern,EndIndexForPattern)",
        "(gotoLastChild,GotoLastChild)",
        "(namedChildCount,NamedChildCount)",
        "(setLanguage,SetLanguage)",
        "(childForFieldId,ChildForFieldId)",
        "(gotoFirstChildForIndex,GotoFirstChildForIndex)",
        "(previousNamedSibling,PreviousNamedSibling)",
        "(isExtra,IsExtra)",
        "(reset,Reset)",
        "(gotoFirstChild,GotoFirstChild)",
        "(rootNodeWithOffset,RootNodeWithOffset)",
        "(child,Child)",
        "(getChangedRanges,GetChangedRanges)",
        "(gotoNextSibling,GotoNextSibling)",
        "(getIncludedRanges,GetIncludedRanges)",
        "(descendantsOfType,DescendantsOfType)",
        "(isError,IsError)",
        "(getTimeoutMicros,TimeoutMicros)",
        "(_captures,Captures)",
        "(childrenForFieldId,ChildrenForFieldId)",
        "(fieldNameForNamedChild,FieldNameForNamedChild)",
        "(setLogger,SetLogger)",
        "(nextNamedSibling,NextNamedSibling)",
        "(descendantForIndex,DescendantForIndex)",
        "(childrenForFieldName,ChildrenForFieldName)",
        "(isNamed,IsNamed)",
        "(_getPredicates,GetPredicates)",
        "(isPatternNonLocal,IsPatternNonLocal)",
        "(childCount,ChildCount)",
        "(resetTo,ResetTo)",
        "(hasChanges,HasChanges)",
        "(childWithDescendant,ChildWithDescendant)",
        "(printDotGraphs,PrintDotGraphs)",
        "(LookaheadIterator,LookaheadIterator)",
        "(id,Id)",
        "(hasError,HasError)",
        "(currentNode,CurrentNode)",
        "(type,Type)",
        "(firstChild,FirstChild)",
        "(descendantCount,DescendantCount)",
        "(gotoParent,GotoParent)",
        "(disableCapture,DisableCapture)",
        "(firstNamedChild,FirstNamedChild)",
        "(startIndexForPattern,StartIndexForPattern)",
        "(nextParseState,NextParseState)",
        "(childForFieldName,ChildForFieldName)",
        "(setTimeoutMicros,SetTimeoutMicros)",
        "(namedDescendantForIndex,NamedDescendantForIndex)",
        "(_cacheNode,CacheNode)",
        "(walk,Walk)",
        "(Query,Query)",
        "(isPatternRooted,IsPatternRooted)",
        "(lastNamedChild,LastNamedChild)",
        "(printDotGraph,PrintDotGraph)",
        "(typeId,TypeId)",
        "(didExceedMatchLimit,DidExceedMatchLimit)",
        "(firstNamedChildForIndex,FirstNamedChildForIndex)",
        "(fieldNameForChild,FieldNameForChild)",
        "(getIncludedRanges,IncludedRanges)",
        "(Tree,Tree)",
        "(getNodeFieldNamesById,GetNodeFieldNamesById)",
        "(childNodeForFieldId,ChildNodeForFieldId)",
        "(toString,ToString)",
        "(firstChildForIndex,FirstChildForIndex)",
        "(disablePattern,DisablePattern)"
      ],
      "Charon": []
    },
    "tree-sitter-4dm": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-4dxml": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-a": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-agda": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-ags-script": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-alanguage": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-amcl": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-biber": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-bliss": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-bogl": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-brainfuck": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-carp": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-chialisp": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-cm": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-cmm": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-coccinelle": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-codelink": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-compat": {
      "Gasket": [
        "(convertLanguage,convertLanguage)"
      ],
      "Charon": [
        "(convertLanguage,convertLanguage)"
      ]
    },
    "tree-sitter-cycle": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-decisiongraph": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-deltinscript": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-delve-language": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-dot": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-dune": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-edl": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-ekon": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-elm": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-eu4mod": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-firrtl": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-foobar": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-fquest": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-frisc": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-fuior": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-func": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-gcl": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-gleam": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-hacklang": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-haiku": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-hclrs": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-hit": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-hla-assembly": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-howl": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-i": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-igor": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-janet": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-java-dev": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-jinja2": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-kos": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-kpl": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-kv1": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-langx": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-lcs": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-legesher-python": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-libretto": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-lisp": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-lll": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-lox": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-lua": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-lux": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-mela": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-menhir": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-mgd": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-minecraft": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-mlir": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-moje": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-mse": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-naz": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-notlang": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-nova": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-nwscript": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-o": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-parageo": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-parageotest": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-pascalabcnet": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-pokus": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-policyspace": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-poweron": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-prisma": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-prolog": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-proverif": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-prowseassembly": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-pts": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-ql": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-quik": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-random": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-regent": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-regex-js": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-regex-unicode-js": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-reqspec": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-ride": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-scl": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-skusamsi": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-skuskam": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-souffle": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-sourcepawn": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-sparql": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-spiral": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-st": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-start": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-storylang": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-structured-text": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-svelte": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-syncat-stylesheet": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-systemrdl": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-tablatal": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-tanuki": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-term": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-todo-full": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-toml": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-tony": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-tspec": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-turbowave": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-turtle": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-v": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-valueinference": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-vcd": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-verilog": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-vue": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-w": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-wake": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-waveasm": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-wdl": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-yaml": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-yul": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "tree-sitter-zig": {
      "Gasket": [
        "(constructor,New)"
      ],
      "Charon": []
    },
    "trend_app_protect": {
      "Gasket": [
        "(createMap,CreateMap)",
        "(Agent,New)",
        "(createArray,CreateArray)",
        "(start,Start)",
        "(hasHook,HasHook)",
        "(reportPlugin,ReportPlugin)",
        "(toString,ToString)",
        "(stop,Stop)",
        "(startTimer,StartTimer)",
        "(isLogEnabled,IsLogEnabled)",
        "(report,Report)",
        "(isPluginEnabled,IsPluginEnabled)",
        "(log,Log)",
        "(startTransaction,StartTransaction)",
        "(hookRan,HookRan)",
        "(runHook,RunHook)",
        "(finish,Finish)"
      ],
      "Charon": [
        "(startTransaction,StartTransaction)",
        "(enabled,Enabled)",
        "(log,Log)",
        "(isLogEnabled,IsLogEnabled)",
        "(isPluginEnabled,IsPluginEnabled)",
        "(report,Report)",
        "(reportPlugin,ReportPlugin)",
        "(start,Start)",
        "(stop,Stop)",
        "(finish,Finish)",
        "(createArray,CreateArray)",
        "(createMap,CreateMap)",
        "(runHook,RunHook)",
        "(hasHook,HasHook)",
        "(hookRan,HookRan)",
        "(startTimer,StartTimer)",
        "(uuid,Uuid)",
        "(toString,ToString)",
        "(length,Length)"
      ]
    },
    "ttf2woff2": {
      "Gasket": [
        "(convert,convert)"
      ],
      "Charon": [
        "(convert,convert)"
      ]
    },
    "@tuananh/sax-parser": {
      "Gasket": [
        "(parse,Parse)",
        "(SaxParser,SaxParser)"
      ],
      "Charon": []
    },
    "tulind": {
      "Gasket": [
        "(startbyindex,startbyindex)",
        "(callbyindex,callbyindex)"
      ],
      "Charon": []
    },
    "turbo-net": {
      "Gasket": [
        "(turbo_net_tcp_init,turbo_net_tcp_init)",
        "(turbo_net_tcp_destroy,turbo_net_tcp_destroy)",
        "(turbo_net_tcp_read,turbo_net_tcp_read)",
        "(turbo_net_tcp_close,turbo_net_tcp_close)",
        "(turbo_net_tcp_connect,turbo_net_tcp_connect)",
        "(turbo_net_tcp_write,turbo_net_tcp_write)",
        "(turbo_net_tcp_write_two,turbo_net_tcp_write_two)",
        "(turbo_net_tcp_port,turbo_net_tcp_port)",
        "(turbo_net_tcp_listen,turbo_net_tcp_listen)",
        "(turbo_net_tcp_shutdown,turbo_net_tcp_shutdown)",
        "(turbo_net_tcp_writev,turbo_net_tcp_writev)",
        "(turbo_net_on_fatal_exception,turbo_net_on_fatal_exception)"
      ],
      "Charon": []
    },
    "turbo-net-clusterable": {
      "Gasket": [
        "(turbo_net_tcp_destroy,turbo_net_tcp_destroy)",
        "(turbo_net_tcp_write,turbo_net_tcp_write)",
        "(turbo_net_tcp_write_two,turbo_net_tcp_write_two)",
        "(turbo_net_tcp_read,turbo_net_tcp_read)",
        "(turbo_net_tcp_listen,turbo_net_tcp_listen)",
        "(turbo_net_tcp_shutdown,turbo_net_tcp_shutdown)",
        "(turbo_net_tcp_init,turbo_net_tcp_init)",
        "(turbo_net_tcp_close,turbo_net_tcp_close)",
        "(turbo_net_on_fatal_exception,turbo_net_on_fatal_exception)",
        "(turbo_net_tcp_port,turbo_net_tcp_port)",
        "(turbo_net_tcp_connect,turbo_net_tcp_connect)",
        "(turbo_net_tcp_writev,turbo_net_tcp_writev)"
      ],
      "Charon": []
    },
    "@turtlecoin/crypto": {
      "Gasket": [
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(derivePublicKey,derivePublicKey)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(cnFastHash,cn_fast_hash)",
        "(scalarDerivePublicKey,scalarDerivePublicKey)",
        "(checkKey,checkKey)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(generatePartialSigningKey,generatePartialSigningKey)",
        "(calculateSharedPublicKey,calculateSharedPublicKey)",
        "(generateRingSignatures,generateRingSignatures)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(restoreKeyImage,restoreKeyImage)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(completeRingSignatures,completeRingSignatures)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(restoreRingSignatures,restoreRingSignatures)",
        "(derivationToScalar,derivationToScalar)",
        "(generateKeys,generateKeys)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(chukwa_slow_hash_v1,chukwa_slow_hash_v1)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(chukwa_slow_hash_base,chukwa_slow_hash_base)",
        "(scReduce32,scReduce32)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(generateKeyImage,generateKeyImage)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)",
        "(deriveSecretKey,deriveSecretKey)",
        "(scalarmultKey,scalarmultKey)",
        "(checkSignature,checkSignature)",
        "(prepareRingSignatures,prepareRingSignatures)",
        "(generateSignature,generateSignature)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(tree_hash,tree_hash)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(scalarDeriveSecretKey,scalarDeriveSecretKey)",
        "(calculateSharedPrivateKey,calculateSharedPrivateKey)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(calculateMultisigPrivateKeys,calculateMultisigPrivateKeys)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(chukwa_slow_hash_v2,chukwa_slow_hash_v2)",
        "(tree_branch,tree_branch)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(checkRingSignature,checkRingSignature)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(tree_depth,tree_depth)",
        "(underivePublicKey,underivePublicKey)",
        "(generateKeyDerivationScalar,generateKeyDerivationScalar)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(hashToScalar,hashToScalar)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)"
      ],
      "Charon": []
    },
    "turtlecoin-crypto": {
      "Gasket": [
        "(generateKeys,generateKeys)",
        "(chukwa_slow_hash_base,chukwa_slow_hash_base)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(derivePublicKey,derivePublicKey)",
        "(tree_hash,tree_hash)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)",
        "(hashToScalar,hashToScalar)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(calculateSharedPublicKey,calculateSharedPublicKey)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(calculateMultisigPrivateKeys,calculateMultisigPrivateKeys)",
        "(completeRingSignatures,completeRingSignatures)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(generateKeyDerivationScalar,generateKeyDerivationScalar)",
        "(scalarDeriveSecretKey,scalarDeriveSecretKey)",
        "(prepareRingSignatures,prepareRingSignatures)",
        "(deriveSecretKey,deriveSecretKey)",
        "(scReduce32,scReduce32)",
        "(generateRingSignatures,generateRingSignatures)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(generatePartialSigningKey,generatePartialSigningKey)",
        "(scalarmultKey,scalarmultKey)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(checkRingSignature,checkRingSignature)",
        "(checkKey,checkKey)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(restoreKeyImage,restoreKeyImage)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(chukwa_slow_hash_v2,chukwa_slow_hash_v2)",
        "(derivationToScalar,derivationToScalar)",
        "(chukwa_slow_hash_v1,chukwa_slow_hash_v1)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(calculateSharedPrivateKey,calculateSharedPrivateKey)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(generateKeyImage,generateKeyImage)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(restoreRingSignatures,restoreRingSignatures)",
        "(checkSignature,checkSignature)",
        "(scalarDerivePublicKey,scalarDerivePublicKey)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(tree_depth,tree_depth)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(underivePublicKey,underivePublicKey)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(generateSignature,generateSignature)",
        "(cnFastHash,cn_fast_hash)",
        "(tree_branch,tree_branch)"
      ],
      "Charon": [
        "(calculateMultisigPrivateKeys,calculateMultisigPrivateKeys)",
        "(calculateSharedPrivateKey,calculateSharedPrivateKey)",
        "(calculateSharedPublicKey,calculateSharedPublicKey)",
        "(generatePartialSigningKey,generatePartialSigningKey)",
        "(prepareRingSignatures,prepareRingSignatures)",
        "(completeRingSignatures,completeRingSignatures)",
        "(restoreRingSignatures,restoreRingSignatures)",
        "(restoreKeyImage,restoreKeyImage)",
        "(checkKey,checkKey)",
        "(checkRingSignature,checkRingSignature)",
        "(checkSignature,checkSignature)",
        "(derivationToScalar,derivationToScalar)",
        "(derivePublicKey,derivePublicKey)",
        "(deriveSecretKey,deriveSecretKey)",
        "(generateKeys,generateKeys)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(generateKeyDerivationScalar,generateKeyDerivationScalar)",
        "(generateKeyImage,generateKeyImage)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(generateRingSignatures,generateRingSignatures)",
        "(generateSignature,generateSignature)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(hashToScalar,hashToScalar)",
        "(scalarDerivePublicKey,scalarDerivePublicKey)",
        "(scalarDeriveSecretKey,scalarDeriveSecretKey)",
        "(scalarmultKey,scalarmultKey)",
        "(scReduce32,scReduce32)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(tree_depth,tree_depth)",
        "(tree_hash,tree_hash)",
        "(tree_branch,tree_branch)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(underivePublicKey,underivePublicKey)",
        "(cnFastHash,cn_fast_hash)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(chukwa_slow_hash_base,chukwa_slow_hash_base)",
        "(chukwa_slow_hash_v1,chukwa_slow_hash_v1)",
        "(chukwa_slow_hash_v2,chukwa_slow_hash_v2)"
      ]
    },
    "@tzmedical/trident-sdk": {
      "Gasket": [
        "(tzsToJson,NapiSettingsToJson)",
        "(tzsMetaJson,NapiSettingsMetaJson)",
        "(scpToText,NapiScpToText)",
        "(tzgFromJson,NapiAccelFromJson)",
        "(tzsToText,NapiSettingsToText)",
        "(tzeToText,NapiEventToText)",
        "(tzrFinder,NapiIntervalFinder)",
        "(tzrFromJson,NapiIntervalFromJson)",
        "(batteryInfoFromText,NapiBatteryInfoFromText)",
        "(scpFromJson,NapiScpFromJson)",
        "(tzaFromText,NapiActionsFromText)",
        "(tzrToText,NapiIntervalToText)",
        "(tzsFromText,NapiSettingsFromText)",
        "(batteryInfoToText,NapiBatteryInfoToText)",
        "(backupFromText,NapiBackupFromText)",
        "(tzeFinder,NapiEventFinder)",
        "(tzgToJson,NapiAccelToJson)",
        "(tzaToJson,NapiActionsToJson)",
        "(scpToJson,NapiScpToJson)",
        "(tzeToJson,NapiEventToJson)",
        "(tzsFromJson,NapiSettingsFromJson)",
        "(tzaFromJson,NapiActionsFromJson)",
        "(parseQueue,NapiParseQueue)",
        "(tzaToText,NapiActionsToText)",
        "(tzrToJson,NapiIntervalToJson)",
        "(backupToText,NapiBackupToText)",
        "(tzsDefaultJson,NapiSettingsDefaultJson)",
        "(tzeFromJson,NapiEventFromJson)",
        "(ejectDrive,NapiEjectDrive)"
      ],
      "Charon": [
        "(status,Number)",
        "(error,String)",
        "(log,String)",
        "(tzaToText,NapiActionsToText)",
        "(tzaFromText,NapiActionsFromText)",
        "(tzaToJson,NapiActionsToJson)",
        "(tzaFromJson,NapiActionsFromJson)",
        "(backupToText,NapiBackupToText)",
        "(backupFromText,NapiBackupFromText)",
        "(batteryInfoToText,NapiBatteryInfoToText)",
        "(batteryInfoFromText,NapiBatteryInfoFromText)",
        "(tzsToText,NapiSettingsToText)",
        "(tzsFromText,NapiSettingsFromText)",
        "(tzsToJson,NapiSettingsToJson)",
        "(tzsFromJson,NapiSettingsFromJson)",
        "(tzsMetaJson,NapiSettingsMetaJson)",
        "(tzsDefaultJson,NapiSettingsDefaultJson)",
        "(tzeToText,NapiEventToText)",
        "(tzeFromJson,NapiEventFromJson)",
        "(tzeToJson,NapiEventToJson)",
        "(tzeFinder,NapiEventFinder)",
        "(tzrToText,NapiIntervalToText)",
        "(tzrFromJson,NapiIntervalFromJson)",
        "(tzrToJson,NapiIntervalToJson)",
        "(tzrFinder,NapiIntervalFinder)",
        "(tzgToJson,NapiAccelToJson)",
        "(tzgFromJson,NapiAccelFromJson)",
        "(scpToText,NapiScpToText)",
        "(scpFromJson,NapiScpFromJson)",
        "(scpToJson,NapiScpToJson)",
        "(ejectDrive,NapiEjectDrive)",
        "(parseQueue,NapiParseQueue)"
      ]
    },
    "ucp": {
      "Gasket": [
        "(ucp_init,ucp_init)"
      ],
      "Charon": []
    },
    "udev": {
      "Gasket": [
        "(close,Close)",
        "(getSysattrBySyspath,GetSysattrBySyspath)",
        "(list,List)",
        "(Monitor,Monitor)",
        "(getNodeParentBySyspath,GetNodeParentBySyspath)"
      ],
      "Charon": [
        "(syspath,String)"
      ]
    },
    "udx-native-nodejs-mobile": {
      "Gasket": [
        "(udx_napi_interface_event_start,udx_napi_interface_event_start)",
        "(udx_napi_lookup,udx_napi_lookup)",
        "(udx_napi_interface_event_init,udx_napi_interface_event_init)",
        "(udx_napi_interface_event_close,udx_napi_interface_event_close)",
        "(udx_napi_stream_write,udx_napi_stream_write)",
        "(udx_napi_stream_set_seq,udx_napi_stream_set_seq)",
        "(udx_napi_socket_set_recv_buffer_size,udx_napi_socket_set_recv_buffer_size)",
        "(udx_napi_interface_event_stop,udx_napi_interface_event_stop)",
        "(udx_napi_socket_bind,udx_napi_socket_bind)",
        "(udx_napi_interface_event_get_addrs,udx_napi_interface_event_get_addrs)",
        "(udx_napi_stream_init,udx_napi_stream_init)",
        "(udx_napi_stream_recv_start,udx_napi_stream_recv_start)",
        "(udx_napi_socket_set_send_buffer_size,udx_napi_socket_set_send_buffer_size)",
        "(udx_napi_init,udx_napi_init)",
        "(udx_napi_socket_send_ttl,udx_napi_socket_send_ttl)",
        "(udx_napi_socket_get_send_buffer_size,udx_napi_socket_get_send_buffer_size)",
        "(udx_napi_stream_set_mtu,udx_napi_stream_set_mtu)",
        "(udx_napi_socket_set_ttl,udx_napi_socket_set_ttl)",
        "(udx_napi_stream_destroy,udx_napi_stream_destroy)",
        "(udx_napi_stream_relay_to,udx_napi_stream_relay_to)",
        "(udx_napi_stream_send,udx_napi_stream_send)",
        "(udx_napi_socket_get_recv_buffer_size,udx_napi_socket_get_recv_buffer_size)",
        "(udx_napi_stream_set_mode,udx_napi_stream_set_mode)",
        "(udx_napi_stream_connect,udx_napi_stream_connect)",
        "(udx_napi_socket_close,udx_napi_socket_close)",
        "(udx_napi_stream_write_end,udx_napi_stream_write_end)",
        "(udx_napi_socket_init,udx_napi_socket_init)",
        "(udx_napi_stream_set_ack,udx_napi_stream_set_ack)"
      ],
      "Charon": []
    },
    "u-framework": {
      "Gasket": [
        "(run,Run)"
      ],
      "Charon": []
    },
    "ultradb": {
      "Gasket": [
        "(ultradb,CreateObject)"
      ],
      "Charon": []
    },
    "@ulycess/c_parser": {
      "Gasket": [
        "(parse,parse)"
      ],
      "Charon": []
    },
    "unix-dgram": {
      "Gasket": [
        "(close,Close)",
        "(socket,Socket)",
        "(bind,Bind)",
        "(send,Send)",
        "(sendto,SendTo)",
        "(connect,Connect)"
      ],
      "Charon": [
        "(socket,Socket)",
        "(bind,Bind)",
        "(sendto,SendTo)",
        "(send,Send)",
        "(connect,Connect)",
        "(close,Close)"
      ]
    },
    "unix-dgram-socket": {
      "Gasket": [
        "(connect,Connect)",
        "(sendto,SendTo)",
        "(bind,Bind)",
        "(close,Close)",
        "(send,Send)",
        "(socket,Socket)"
      ],
      "Charon": [
        "(socket,Socket)",
        "(bind,Bind)",
        "(sendto,SendTo)",
        "(send,Send)",
        "(connect,Connect)",
        "(close,Close)"
      ]
    },
    "unix-socketpair": {
      "Gasket": [
        "(unix-socketpair,socketpair)"
      ],
      "Charon": []
    },
    "@unrest/form": {
      "Gasket": [
        "(run,Run)"
      ],
      "Charon": []
    },
    "ursa-optional": {
      "Gasket": [
        "(privateDecrypt,PrivateDecrypt)",
        "(openPublicSshKey,OpenPublicSshKey)",
        "(generatePrivateKey,GeneratePrivateKey)",
        "(textToNid,TextToNid)",
        "(publicEncrypt,PublicEncrypt)",
        "(setPublicKeyPem,SetPublicKeyPem)",
        "(getExponent,GetExponent)",
        "(getPrivateKeyPem,GetPrivateKeyPem)",
        "(getPrivateExponent,GetPrivateExponent)",
        "(verify,Verify)",
        "(publicDecrypt,PublicDecrypt)",
        "(createPublicKeyFromComponents,CreatePublicKeyFromComponents)",
        "(RsaWrap,New)",
        "(createPrivateKeyFromComponents,CreatePrivateKeyFromComponents)",
        "(getPublicKeyPem,GetPublicKeyPem)",
        "(getModulus,GetModulus)",
        "(setPrivateKeyPem,SetPrivateKeyPem)",
        "(sign,Sign)",
        "(addPSSPadding,AddPSSPadding)",
        "(privateEncrypt,PrivateEncrypt)",
        "(verifyPSSPadding,VerifyPSSPadding)"
      ],
      "Charon": [
        "(generatePrivateKey,GeneratePrivateKey)",
        "(getExponent,GetExponent)",
        "(getPrivateExponent,GetPrivateExponent)",
        "(getModulus,GetModulus)",
        "(getPrivateKeyPem,GetPrivateKeyPem)",
        "(getPublicKeyPem,GetPublicKeyPem)",
        "(privateDecrypt,PrivateDecrypt)",
        "(privateEncrypt,PrivateEncrypt)",
        "(publicDecrypt,PublicDecrypt)",
        "(publicEncrypt,PublicEncrypt)",
        "(setPrivateKeyPem,SetPrivateKeyPem)",
        "(setPublicKeyPem,SetPublicKeyPem)",
        "(sign,Sign)",
        "(verify,Verify)",
        "(createPrivateKeyFromComponents,CreatePrivateKeyFromComponents)",
        "(createPublicKeyFromComponents,CreatePublicKeyFromComponents)",
        "(openPublicSshKey,OpenPublicSshKey)",
        "(addPSSPadding,AddPSSPadding)",
        "(verifyPSSPadding,VerifyPSSPadding)",
        "(textToNid,TextToNid)"
      ]
    },
    "usb": {
      "Gasket": [
        "(_disableHotplugEvents,DisableHotplugEvents)",
        "(submit,Submit)",
        "(__setInterface,SetInterface)",
        "(Device,Device)",
        "(_getLibusbCapability,GetLibusbCapability)",
        "(refHotplugEvents,RefHotplugEvents)",
        "(useUsbDkBackend,UseUsbDkBackend)",
        "(__getConfigDescriptor,GetConfigDescriptor)",
        "(unrefHotplugEvents,UnrefHotplugEvents)",
        "(getDeviceList,GetDeviceList)",
        "(cancel,Cancel)",
        "(_enableHotplugEvents,EnableHotplugEvents)",
        "(__setAutoDetachKernelDriver,SetAutoDetachKernelDriver)",
        "(reset,Reset)",
        "(__releaseInterface,ReleaseInterface)",
        "(__attachKernelDriver,AttachKernelDriver)",
        "(__isKernelDriverActive,IsKernelDriverActive)",
        "(__setConfiguration,SetConfiguration)",
        "(__getAllConfigDescriptors,GetAllConfigDescriptors)",
        "(__claimInterface,ClaimInterface)",
        "(__close,Close)",
        "(setDebugLevel,SetDebugLevel)",
        "(__open,Open)",
        "(Transfer,Transfer)",
        "(__clearHalt,ClearHalt)",
        "(__getParent,GetParent)",
        "(__detachKernelDriver,DetachKernelDriver)",
        "(_supportedHotplugEvents,SupportedHotplugEvents)"
      ],
      "Charon": [
        "(INIT_ERROR,Number)",
        "(setDebugLevel,SetDebugLevel)",
        "(useUsbDkBackend,UseUsbDkBackend)",
        "(getDeviceList,GetDeviceList)",
        "(_getLibusbCapability,GetLibusbCapability)",
        "(_supportedHotplugEvents,SupportedHotplugEvents)",
        "(_enableHotplugEvents,EnableHotplugEvents)",
        "(_disableHotplugEvents,DisableHotplugEvents)",
        "(refHotplugEvents,RefHotplugEvents)",
        "(unrefHotplugEvents,UnrefHotplugEvents)",
        "(Transfer,Transfer)",
        "(idVendor,Number)",
        "(idProduct,Number)",
        "(__setInterface,Device)",
        "(__setConfiguration,Device)",
        "(__setAutoDetachKernelDriver,Device)",
        "(Device,func)"
      ]
    },
    "usb-detection": {
      "Gasket": [
        "(startMonitoring,StartMonitoring)",
        "(registerRemoved,RegisterRemoved)",
        "(registerAdded,RegisterAdded)",
        "(find,Find)",
        "(stopMonitoring,StopMonitoring)"
      ],
      "Charon": [
        "(find,Find)",
        "(registerAdded,RegisterAdded)",
        "(registerRemoved,RegisterRemoved)",
        "(startMonitoring,StartMonitoring)",
        "(stopMonitoring,StopMonitoring)"
      ]
    },
    "userid": {
      "Gasket": [
        "(gid,Gid)",
        "(gids,Gids)",
        "(ids,Ids)",
        "(username,UserName)",
        "(groupname,GroupName)"
      ],
      "Charon": []
    },
    "usm-decrypter": {
      "Gasket": [
        "(USMDecrypter,USMDecrypter)",
        "(setEncoding,_setEncoding)",
        "(getEncoding,_getEncoding)",
        "(demuxSync,_demuxSync)",
        "(demux,_demux)"
      ],
      "Charon": []
    },
    "usocket": {
      "Gasket": [
        "(USocketWrap,New)",
        "(write,write)",
        "(UServerWrap,New)",
        "(close,close)",
        "(pause,pause)",
        "(listen,listen)",
        "(connect,connect)",
        "(adopt,adopt)",
        "(shutdown,shutdown)",
        "(resume,resume)"
      ],
      "Charon": [
        "(pause,pause)",
        "(resume,resume)",
        "(close,close)",
        "(listen,listen)",
        "(connect,connect)",
        "(adopt,adopt)",
        "(write,write)",
        "(shutdown,shutdown)"
      ]
    },
    "utf-8-validate": {
      "Gasket": [
        "(utf-8-validate/prebuilds/linux-x64/utf-8-validate,IsValidUTF8)"
      ],
      "Charon": []
    },
    "utimes": {
      "Gasket": [
        "(utimesSync,utimesSync)",
        "(utimes,utimes)"
      ],
      "Charon": [
        "(utimes,utimes)",
        "(utimesSync,utimesSync)"
      ]
    },
    "utp-native": {
      "Gasket": [
        "(utp_napi_recv_buffer,utp_napi_recv_buffer)",
        "(utp_napi_local_port,utp_napi_local_port)",
        "(utp_napi_send_request_init,utp_napi_send_request_init)",
        "(utp_napi_close,utp_napi_close)",
        "(utp_napi_connection_shutdown,utp_napi_connection_shutdown)",
        "(utp_napi_destroy,utp_napi_destroy)",
        "(utp_napi_connection_close,utp_napi_connection_close)",
        "(utp_napi_send,utp_napi_send)",
        "(utp_napi_connection_writev,utp_napi_connection_writev)",
        "(utp_napi_connection_on_close,utp_napi_connection_on_close)",
        "(utp_napi_send_buffer,utp_napi_send_buffer)",
        "(utp_napi_ref,utp_napi_ref)",
        "(utp_napi_init,utp_napi_init)",
        "(utp_napi_connection_write,utp_napi_connection_write)",
        "(utp_napi_bind,utp_napi_bind)",
        "(utp_napi_connection_init,utp_napi_connection_init)",
        "(utp_napi_set_ttl,utp_napi_set_ttl)",
        "(utp_napi_unref,utp_napi_unref)",
        "(utp_napi_connect,utp_napi_connect)"
      ],
      "Charon": []
    },
    "utp-native-no-prebuild": {
      "Gasket": [
        "(utp_napi_connection_write,utp_napi_connection_write)",
        "(utp_napi_unref,utp_napi_unref)",
        "(utp_napi_ref,utp_napi_ref)",
        "(utp_napi_init,utp_napi_init)",
        "(utp_napi_connection_writev,utp_napi_connection_writev)",
        "(utp_napi_send,utp_napi_send)",
        "(utp_napi_send_request_init,utp_napi_send_request_init)",
        "(utp_napi_close,utp_napi_close)",
        "(utp_napi_destroy,utp_napi_destroy)",
        "(utp_napi_local_port,utp_napi_local_port)",
        "(utp_napi_connection_shutdown,utp_napi_connection_shutdown)",
        "(utp_napi_bind,utp_napi_bind)",
        "(utp_napi_connection_close,utp_napi_connection_close)",
        "(utp_napi_connection_on_close,utp_napi_connection_on_close)",
        "(utp_napi_connect,utp_napi_connect)",
        "(utp_napi_connection_init,utp_napi_connection_init)"
      ],
      "Charon": []
    },
    "utp-solyd": {
      "Gasket": [
        "(utp_napi_connection_write,utp_napi_connection_write)",
        "(utp_napi_unref,utp_napi_unref)",
        "(utp_napi_ref,utp_napi_ref)",
        "(utp_napi_init,utp_napi_init)",
        "(utp_napi_connection_writev,utp_napi_connection_writev)",
        "(utp_napi_send,utp_napi_send)",
        "(utp_napi_send_request_init,utp_napi_send_request_init)",
        "(utp_napi_close,utp_napi_close)",
        "(utp_napi_destroy,utp_napi_destroy)",
        "(utp_napi_local_port,utp_napi_local_port)",
        "(utp_napi_connection_shutdown,utp_napi_connection_shutdown)",
        "(utp_napi_bind,utp_napi_bind)",
        "(utp_napi_connection_close,utp_napi_connection_close)",
        "(utp_napi_connection_on_close,utp_napi_connection_on_close)",
        "(utp_napi_connect,utp_napi_connect)",
        "(utp_napi_connection_init,utp_napi_connection_init)"
      ],
      "Charon": []
    },
    "utun": {
      "Gasket": [
        "(close,utun_close_begin)",
        "(open,utun_open)",
        "(info,utun_info)",
        "(write,utun_write)"
      ],
      "Charon": []
    },
    "uv-poll": {
      "Gasket": [
        "(stop,stop)",
        "(poll,poll)",
        "(Poller,New)"
      ],
      "Charon": [
        "(poll,poll)",
        "(stop,stop)"
      ]
    },
    "uv-run": {
      "Gasket": [
        "(runNoWait,RunNoWait)",
        "(yield,yield)",
        "(runOnce,RunOnce)",
        "(sleep,DoSleep)",
        "(run,Run)"
      ],
      "Charon": [
        "(run,Run)",
        "(runOnce,RunOnce)",
        "(runNoWait,RunNoWait)",
        "(sleep,DoSleep)",
        "(yield,yield)"
      ]
    },
    "uvrun-12": {
      "Gasket": [
        "(runOnce,RunOnce)",
        "(run,Run)"
      ],
      "Charon": [
        "(run,Run)",
        "(runOnce,RunOnce)"
      ]
    },
    "v8-profiler-next": {
      "Gasket": [
        "(stopProfiling,StopProfiling)",
        "(startSamplingHeapProfiling,StartSamplingHeapProfiling)",
        "(stopSamplingHeapProfiling,StopSamplingHeapProfiling)",
        "(getHeapStats,GetHeapStats)",
        "(startProfiling,StartProfiling)",
        "(takeSnapshot,TakeSnapshot)",
        "(setup,JsSetupEnvironmentData)",
        "(setProfilesCleanupLimit,SetProfilesCleanupLimit)",
        "(startTrackingHeapObjects,StartTrackingHeapObjects)",
        "(setSamplingInterval,SetSamplingInterval)",
        "(stopTrackingHeapObjects,StopTrackingHeapObjects)",
        "(getObjectByHeapObjectId,GetObjectByHeapObjectId)",
        "(setGenerateType,SetGenerateType)",
        "(getHeapObjectId,GetHeapObjectId)",
        "(collectSample,CollectSample)"
      ],
      "Charon": [
        "(startSamplingHeapProfiling,SamplingHeapProfiler)",
        "(stopSamplingHeapProfiling,SamplingHeapProfiler)",
        "(1,data)",
        "(2,data)",
        "(startProfiling,CpuProfiler)",
        "(stopProfiling,CpuProfiler)",
        "(setSamplingInterval,CpuProfiler)",
        "(collectSample,CpuProfiler)",
        "(setGenerateType,CpuProfiler)",
        "(setProfilesCleanupLimit,CpuProfiler)",
        "(name,name)",
        "(takeSnapshot,HeapProfiler)",
        "(startTrackingHeapObjects,HeapProfiler)",
        "(stopTrackingHeapObjects,HeapProfiler)",
        "(getHeapStats,HeapProfiler)",
        "(getObjectByHeapObjectId,HeapProfiler)",
        "(getHeapObjectId,HeapProfiler)"
      ]
    },
    "v8-sandbox": {
      "Gasket": [
        "(cancel,Cancel)",
        "(initialize,Initialize)",
        "(connect,Connect)",
        "(Sandbox,New)",
        "(callback,Callback)",
        "(execute,Execute)",
        "(disconnect,Disconnect)",
        "(finish,Finish)"
      ],
      "Charon": [
        "(initialize,Initialize)",
        "(connect,Connect)",
        "(disconnect,Disconnect)",
        "(execute,Execute)",
        "(callback,Callback)",
        "(cancel,Cancel)",
        "(finish,Finish)",
        "(_dispatch,Dispatch)",
        "(args,arguments)",
        "(message,message)",
        "(sourceLine,sourceLine)"
      ]
    },
    "valgrind-client-request": {
      "Gasket": [
        "(callgrindStopInstrumentation,callgrindStopInstrumentation)",
        "(callgrindStartInstrumentation,callgrindStartInstrumentation)"
      ],
      "Charon": [
        "(callgrindStartInstrumentation,callgrindStartInstrumentation)",
        "(callgrindStopInstrumentation,callgrindStopInstrumentation)"
      ]
    },
    "vcd-stream": {
      "Gasket": [
        "(execute,execute)",
        "(init,init)",
        "(setTrigger,setTrigger)",
        "(getTime,getTime)",
        "(done,done)"
      ],
      "Charon": []
    },
    "@vgrid/x509": {
      "Gasket": [
        "(parseCert,parse_cert)",
        "(getAltNames,get_altnames)",
        "(getSubject,get_subject)",
        "(verify,verify)",
        "(getIssuer,get_issuer)"
      ],
      "Charon": [
        "(verify,verify)",
        "(getAltNames,get_altnames)",
        "(getSubject,get_subject)",
        "(getIssuer,get_issuer)",
        "(parseCert,parse_cert)",
        "(altNames,altNames)",
        "(extensions,extensions)"
      ]
    },
    "@vhs/node-nfc-nci": {
      "Gasket": [
        "(listen,listen)"
      ],
      "Charon": [
        "(listen,listen)"
      ]
    },
    "@vit1251/napi_sdl2": {
      "Gasket": [
        "(SDL_CreateRenderer,SDL_CreateRenderer_Callback)",
        "(SDL_GetWindowSize,SDL_GetWindowSize_Callback)",
        "(SDL_GetNumVideoDisplays,SDL_GetNumVideoDisplays_Callback)",
        "(SDL_GL_SwapWindow,SDL_GL_SwapWindow_Callback)",
        "(TTF_OpenFont,TTF_OpenFont_Callback)",
        "(TTF_CloseFont,TTF_CloseFont_Callback)",
        "(SDL_GetCursor,SDL_GetCursor_Callback)",
        "(SDL_Quit,SDL_Quit_Callback)",
        "(SDL_SetRenderDrawColor,SDL_SetRenderDrawColor_Callback)",
        "(TTF_Init,TTF_Init_Callback)",
        "(SDL_CreateTexture,SDL_CreateTexture_Callback)",
        "(SDL_GL_CreateContext,SDL_GL_CreateContext_Callback)",
        "(TTF_RenderUTF8_Solid,TTF_RenderUTF8_Solid_Callback)",
        "(SDL_QueryTexture,SDL_QueryTexture_Callback)",
        "(SDL_Delay,SDL_Delay_Callback)",
        "(SDL_GetWindowSurface,SDL_GetWindowSurface_Callback)",
        "(SDL_WaitEvent,SDL_WaitEvent_Callback)",
        "(SDL_GetTicks,SDL_GetTicks_Callback)",
        "(SDL_RenderPresent,SDL_RenderPresent_Callback)",
        "(SDL_DisableScreenSaver,SDL_DisableScreenSaver_Callback)",
        "(SDL_StopTextInput,SDL_StopTextInput_Callback)",
        "(SDL_RegisterEvents,SDL_RegisterEvents_Callback)",
        "(SDL_RenderClear,SDL_RenderClear_Callback)",
        "(SDL_CreateCursor,SDL_CreateCursor_Callback)",
        "(SDL_SetCursor,SDL_SetCursor_Callback)",
        "(SDL_DestroyRenderer,SDL_DestroyRenderer_Callback)",
        "(SDL_PollEvent,SDL_PollEvent_Callback)",
        "(SDL_CreateTextureFromSurface,SDL_CreateTextureFromSurface_Callback)",
        "(SDL_PumpEvents,SDL_PumpEvents_Callback)",
        "(SDL_SetTextInputRect,SDL_SetTextInputRect_Callback)",
        "(SDL_UpdateTexture,SDL_UpdateTexture_Callback)",
        "(TTF_RenderText_Solid,TTF_RenderText_Solid_Callback)",
        "(SDL_StartTextInput,SDL_StartTextInput_Callback)",
        "(SDL_Init,SDL_Init_Callback)",
        "(SDL_ShowCursor,SDL_ShowCursor_Callback)",
        "(SDL_DestroyWindow,SDL_DestroyWindow_Callback)",
        "(SDL_GL_SetSwapInterval,SDL_GL_SetSwapInterval_Callback)",
        "(SDL_RenderFillRect,SDL_RenderFillRect_Callback)",
        "(SDL_GetDesktopDisplayMode,SDL_GetDesktopDisplayMode_Callback)",
        "(SDL_FreeSurface,SDL_FreeSurface_Callback)",
        "(SDL_CreateSystemCursor,SDL_CreateSystemCursor_Callback)",
        "(SDL_DestroyTexture,SDL_DestroyTexture_Callback)",
        "(SDL_GL_SetAttribute,SDL_GL_SetAttribute_Callback)",
        "(SDL_PushEvent,SDL_PushEvent_Callback)",
        "(SDL_SetWindowSize,SDL_SetWindowSize_Callback)",
        "(SDL_RenderCopy,SDL_RenderCopy_Callback)",
        "(SDL_CreateWindow,SDL_CreateWindow_Callback)",
        "(SDL_PeepEvents,SDL_PeepEvents_Callback)"
      ],
      "Charon": []
    },
    "@vlasky/shacrypt": {
      "Gasket": [
        "(sha512crypt,sha512crypt)",
        "(sha256cryptasync,sha256cryptasync)",
        "(sha256crypt,sha256crypt)",
        "(sha512cryptasync,sha512cryptasync)"
      ],
      "Charon": [
        "(sha256crypt,sha256crypt)",
        "(sha512crypt,sha512crypt)",
        "(sha256cryptasync,sha256cryptasync)",
        "(sha512cryptasync,sha512cryptasync)"
      ]
    },
    "vmdetect": {
      "Gasket": [
        "(hyperVenderId,hyperVenderId)",
        "(isHyper,isHyper)"
      ],
      "Charon": []
    },
    "@votingworks/qrdetect": {
      "Gasket": [
        "(detect,DetectQRCode)"
      ],
      "Charon": [
        "(type,Number)",
        "(orientation,Number)",
        "(x,Number)",
        "(y,Number)",
        "(quality,Number)",
        "(version,String)",
        "(detect,DetectQRCode)"
      ]
    },
    "vscode-nsfw": {
      "Gasket": [
        "(resume,Resume)",
        "(pause,Pause)",
        "(stop,Stop)",
        "(start,Start)",
        "(target/nsfw,NSFW)",
        "(vscode-nsfw/build/Debug/nsfw,NSFW)"
      ],
      "Charon": []
    },
    "vscode-sqlite3": {
      "Gasket": [
        "(wait,Wait)",
        "(all,All)",
        "(finish,Finish)",
        "(Database,New)",
        "(finalize,Finalize)",
        "(get,Get)",
        "(parallelize,Parallelize)",
        "(serialize,Serialize)",
        "(Backup,New)",
        "(loadExtension,LoadExtension)",
        "(reset,Reset)",
        "(close,Close)",
        "(each,Each)",
        "(configure,Configure)",
        "(run,Run)",
        "(Statement,New)",
        "(step,Step)",
        "(exec,Exec)",
        "(bind,Bind)",
        "(interrupt,Interrupt)"
      ],
      "Charon": [
        "(step,Step)",
        "(finish,Finish)",
        "(idle,IdleGetter)",
        "(completed,CompletedGetter)",
        "(failed,FailedGetter)",
        "(remaining,RemainingGetter)",
        "(pageCount,PageCountGetter)",
        "(close,Close)",
        "(exec,Exec)",
        "(wait,Wait)",
        "(loadExtension,LoadExtension)",
        "(serialize,Serialize)",
        "(parallelize,Parallelize)",
        "(configure,Configure)",
        "(interrupt,Interrupt)",
        "(open,OpenGetter)",
        "(bind,Bind)",
        "(get,Get)",
        "(run,Run)",
        "(all,All)",
        "(each,Each)",
        "(reset,Reset)",
        "(finalize,Finalize)"
      ]
    },
    "w2encdec": {
      "Gasket": [
        "(decode,Decode)",
        "(encode,Encode)"
      ],
      "Charon": [
        "(encode,Encode)",
        "(decode,Decode)"
      ]
    },
    "wakanda-storage": {
      "Gasket": [
        "(get,open)",
        "(destroy,destroy)",
        "(create,create)"
      ],
      "Charon": []
    },
    "walkdir-fast": {
      "Gasket": [
        "(WalkDir,WalkDir)",
        "(AddLoadDirs,AddLoadDirs)",
        "(GetNextFileEntries,GetNextFileEntries)",
        "(CheckForFinished,CheckForFinished)"
      ],
      "Charon": []
    },
    "@wangjuncode/binary-test": {
      "Gasket": [
        "(hello,hello)",
        "(add,add)",
        "(asyncAdd,asyncAdd)"
      ],
      "Charon": [
        "(hello,hello)",
        "(add,add)",
        "(asyncAdd,asyncAdd)"
      ]
    },
    "wasi": {
      "Gasket": [
        "(seek,Seek)",
        "(realtime,Realtime)",
        "(schedYield,SchedYield)"
      ],
      "Charon": []
    },
    "wdeasync": {
      "Gasket": [
        "(run,Run)"
      ],
      "Charon": []
    },
    "weak-napi": {
      "Gasket": [
        "(ObjectInfo,ObjectInfo)",
        "(WeakTag,WeakTag)"
      ],
      "Charon": []
    },
    "weak-value-map": {
      "Gasket": [
        "(set,Set)",
        "(WeakValueMap,WeakValueMap)",
        "(delete,Delete)",
        "(get,Get)"
      ],
      "Charon": [
        "(set,WeakValueMap)",
        "(symbol,Symbol)"
      ]
    },
    "webbluetooth": {
      "Gasket": [
        "(setCallbackOnScanStart,SetCallbackOnScanStart)",
        "(indicate,Indicate)",
        "(scanStart,ScanStart)",
        "(readDescriptor,ReadDescriptor)",
        "(setCallbackOnDisconnected,SetCallbackOnDisconnected)",
        "(scanStop,ScanStop)",
        "(writeDescriptor,WriteDescriptor)",
        "(writeCommand,WriteCommand)",
        "(unpair,Unpair)",
        "(Adapter,Adapter)",
        "(scanFor,ScanFor)",
        "(setCallbackOnConnected,SetCallbackOnConnected)",
        "(writeRequest,WriteRequest)",
        "(read,Read)",
        "(notify,Notify)",
        "(getAdapters,GetAdapters)",
        "(release,Release)",
        "(setCallbackOnScanUpdated,SetCallbackOnScanUpdated)",
        "(unsubscribe,Unsubscribe)",
        "(Peripheral,Peripheral)",
        "(disconnect,Disconnect)",
        "(connect,Connect)",
        "(isEnabled,IsEnabled)",
        "(setCallbackOnScanFound,SetCallbackOnScanFound)",
        "(setCallbackOnScanStop,SetCallbackOnScanStop)"
      ],
      "Charon": [
        "(setCallbackOnScanStart,Adapter)",
        "(setCallbackOnScanStop,Adapter)",
        "(setCallbackOnScanUpdated,Adapter)",
        "(setCallbackOnScanFound,Adapter)",
        "(setCallbackOnConnected,Peripheral)",
        "(setCallbackOnDisconnected,Peripheral)",
        "(uuid,characteristic)",
        "(canRead,characteristic)",
        "(canWriteRequest,characteristic)",
        "(canWriteCommand,characteristic)",
        "(canNotify,characteristic)",
        "(canIndicate,characteristic)",
        "(descriptors,descriptors)",
        "(uuid,uuid)",
        "(data,data)",
        "(characteristics,characteristics)",
        "(getAdapters,GetAdapters)",
        "(isEnabled,IsEnabled)"
      ]
    },
    "webrtcvad": {
      "Gasket": [
        "(process,Process)",
        "(VAD,VAD)"
      ],
      "Charon": []
    },
    "westfield-native": {
      "Gasket": [
        "(setupXWayland,setupXWayland)",
        "(getShmBuffer,getShmBuffer)",
        "(addSocketAuto,addSocketAuto)",
        "(equalValueExternal,equalValueExternal)",
        "(teardownXWayland,teardownXWayland)",
        "(initWlInterface,initWlInterface)",
        "(destroyWlResourceSilently,destroyWlResourceSilently)",
        "(createWlInterface,createWlInterface)",
        "(destroyDisplay,destroyDisplay)",
        "(createWlResource,createWlResource)",
        "(emitGlobals,emitGlobals)",
        "(sendEvents,sendEvents)",
        "(flush,flush)",
        "(setWireMessageEndCallback,setWireMessageEndCallback)",
        "(setBufferCreatedCallback,setBufferCreatedCallback)",
        "(createWlMessage,createWlMessage)",
        "(createMemoryMappedFile,createMemoryMappedFile)",
        "(initShm,initShm)",
        "(dispatchRequests,dispatchRequests)",
        "(setClientDestroyedCallback,setClientDestroyedCallback)",
        "(getServerObjectIdsBatch,getServerObjectIdsBatch)",
        "(getXWaylandDisplay,getXWaylandDisplay)",
        "(setWireMessageCallback,setWireMessageCallback)",
        "(destroyClient,destroyClient)",
        "(createDisplay,createDisplay)",
        "(getFd,getFd)",
        "(setRegistryCreatedCallback,setRegistryCreatedCallback)",
        "(makePipe,makePipe)"
      ],
      "Charon": []
    },
    "wework-chat-node": {
      "Gasket": [
        "(getChatData,GetChat)",
        "(stopFetch,EndFetchData)",
        "(getMediaData,GetMediaData)",
        "(WeWorkChat,WeWorkChat)",
        "(fetchData,StartFetchData)"
      ],
      "Charon": [
        "(last_seq,Number)",
        "(is_finished,Boolean)",
        "(buf_index,String)"
      ]
    },
    "wifi-network": {
      "Gasket": [
        "(scan,scan)"
      ],
      "Charon": [
        "(scan,scan)"
      ]
    },
    "wise-inspection": {
      "Gasket": [
        "(inspect,Inspect)"
      ],
      "Charon": [
        "(inspect,Inspect)"
      ]
    },
    "@wmakeev/borders-detection": {
      "Gasket": [
        "(pixelsGroups,detect_groups_async)"
      ],
      "Charon": [
        "(imgWidth,Number)",
        "(imgHeight,Number)",
        "(minX,Number)",
        "(minY,Number)",
        "(maxX,Number)",
        "(maxY,Number)",
        "(pixelsCount,Number)",
        "(pixelsGroups,detect_groups_async)"
      ]
    },
    "word2vec4node": {
      "Gasket": [
        "(default,Default)"
      ],
      "Charon": []
    },
    "wordexp": {
      "Gasket": [
        "(wordexp,parse)"
      ],
      "Charon": []
    },
    "ws2812draw": {
      "Gasket": [
        "(test,testCallback)",
        "(drawStill,drawStillCallback)",
        "(initMatrix,initMatrixCallback)",
        "(cleanUp,cleanUpCallback)",
        "(drawFrame,drawFrameCallback)"
      ],
      "Charon": []
    },
    "wson-addon": {
      "Gasket": [
        "(parse,Parse)",
        "(Stringifier,New)",
        "(stringify,Stringify)",
        "(connectorOfCname,ConnectorOfCname)",
        "(parsePartial,ParsePartial)",
        "(getTypeid,GetTypeid)",
        "(Parser,New)",
        "(connectorOfValue,ConnectorOfValue)",
        "(unescape,Unescape)",
        "(escape,Escape)"
      ],
      "Charon": [
        "(escape,Escape)",
        "(getTypeid,GetTypeid)",
        "(stringify,Stringify)",
        "(connectorOfValue,ConnectorOfValue)",
        "(unescape,Unescape)",
        "(parse,Parse)",
        "(parsePartial,ParsePartial)",
        "(connectorOfCname,ConnectorOfCname)"
      ]
    },
    "@wwa/statvfs": {
      "Gasket": [
        "(statvfs,statVFS)",
        "(statvfsSync,statVFSSync)"
      ],
      "Charon": [
        "(errno,Value)",
        "(path,Value)",
        "(type,Value)",
        "(bsize,Value)",
        "(blocks,Value)",
        "(bfree,Value)",
        "(bavail,Value)",
        "(files,Value)",
        "(ffree,Value)",
        "(statvfs,statVFS)",
        "(statvfsSync,statVFSSync)"
      ]
    },
    "wxaes-node": {
      "Gasket": [
        "(decryptURLMsg,DecryptURLMsg)",
        "(WXBizMsgCrypt,WXBizMsgCrypt)",
        "(encryptMsg,EncryptMsg)",
        "(decryptMsg,DecryptMsg)"
      ],
      "Charon": []
    },
    "xattr-async": {
      "Gasket": [
        "(llist,LList)",
        "(set,Set)",
        "(lremove,LRemove)",
        "(remove,Remove)",
        "(list,List)",
        "(lget,LGet)",
        "(lset,LSet)",
        "(get,Get)"
      ],
      "Charon": [
        "(list,List)",
        "(get,Get)",
        "(set,Set)",
        "(remove,Remove)",
        "(llist,LList)",
        "(lget,LGet)",
        "(lset,LSet)",
        "(lremove,LRemove)"
      ]
    },
    "xdelta-async-nodejs-addon": {
      "Gasket": [
        "(EncodeBuffer,EncodeBuffer)",
        "(DecodeBuffer,DecodeBuffer)",
        "(CancelEncode,CancelEncode)"
      ],
      "Charon": [
        "(code,res)",
        "(EncodeBuffer,EncodeBuffer)",
        "(DecodeBuffer,DecodeBuffer)",
        "(CancelEncode,CancelEncode)"
      ]
    },
    "xd-synchttp": {
      "Gasket": [
        "(sync_http,sync_http)",
        "(http_post,http_post)",
        "(get_image_size,image_size)",
        "(http_get,http_get)"
      ],
      "Charon": []
    },
    "@xiaobaidadada/node-pty-prebuilt": {
      "Gasket": [
        "(open,PtyOpen)",
        "(fork,PtyFork)",
        "(process,PtyGetProc)",
        "(resize,PtyResize)"
      ],
      "Charon": []
    },
    "@xiaobaidadada/node-tuntap2-wintun": {
      "Gasket": [
        "(tuntapGetMtu,tuntapGetMtu)",
        "(tuntapSetDown,tuntapSetDown)",
        "(tuntapSetMtu,tuntapSetMtu)",
        "(tuntapGetIfIndex,tuntapGetIfIndex)",
        "(tuntapInit,tuntapInit)",
        "(tuntapSetUp,tuntapSetUp)",
        "(tuntapSetMac,tuntapSetMac)",
        "(tuntapSetIpv6,tuntapSetIpv6)",
        "(tuntapGetFlags,tuntapGetFlags)",
        "(tuntapSetIpv4,tuntapSetIpv4)"
      ],
      "Charon": []
    },
    "@xiaobaidadada/ssh2-prebuilt": {
      "Gasket": [
        "(AESGCMDecipher,New)",
        "(GenericDecipher,New)",
        "(free,Free)",
        "(decryptBlock,DecryptBlock)",
        "(decrypt,Decrypt)",
        "(decryptLen,DecryptLen)",
        "(ChaChaPolyCipher,New)",
        "(encrypt,Encrypt)",
        "(GenericCipher,New)",
        "(ChaChaPolyDecipher,New)",
        "(AESGCMCipher,New)"
      ],
      "Charon": [
        "(encrypt,Encrypt)",
        "(free,Free)",
        "(decrypt,Decrypt)",
        "(decryptLen,DecryptLen)",
        "(decryptBlock,DecryptBlock)"
      ]
    },
    "xiaomi-wristband-decoder": {
      "Gasket": [
        "(decode,decode)",
        "(XiaomiWristbandDecoder,XiaomiWristbandDecoder)"
      ],
      "Charon": [
        "(name,String)",
        "(rssi,Number)",
        "(mac,String)",
        "(data,data)"
      ]
    },
    "xlsxio-node": {
      "Gasket": [
        "(addCellInt,addCellInt)",
        "(addCellFloat,addCellFloat)",
        "(addCellDatetime,addCellDatetime)",
        "(close,close)",
        "(addCellString,addCellString)",
        "(nextRow,nextRow)",
        "(Sheet,Sheet)",
        "(addColumn,addColumn)"
      ],
      "Charon": []
    },
    "xlsx-util": {
      "Gasket": [
        "(replaceAll,replaceAllNapi)",
        "(readXlsxAsync,readXlsxAsync)",
        "(toLower,toLowerNapi)"
      ],
      "Charon": []
    },
    "xlsys-node-study-greeting": {
      "Gasket": [
        "(callback,callback)",
        "(hello,hello)",
        "(callEmit,callEmit)"
      ],
      "Charon": [
        "(hello,hello)",
        "(callback,callback)",
        "(callEmit,callEmit)"
      ]
    },
    "xlsys-node-study-hello": {
      "Gasket": [
        "(hello,hello)"
      ],
      "Charon": [
        "(hello,hello)"
      ]
    },
    "xoshiro": {
      "Gasket": [
        "(create,create_state)"
      ],
      "Charon": []
    },
    "xprofiler": {
      "Gasket": [
        "(addHttpStatusCode,AddHttpStatusCode)",
        "(addHttpProfilingDetail,AddHttpProfilingDetail)",
        "(setHooks,SetHooks)",
        "(setHttpConfig,SetHttpConfig)",
        "(initMallopt,InitMallopt)",
        "(info,JsInfo)",
        "(error,JsError)",
        "(addSentRequest,AddSentRequest)",
        "(setup,JsSetupEnvironmentData)",
        "(getConfig,GetConfig)",
        "(addLiveRequest,AddLiveRequest)",
        "(configure,Configure)",
        "(addCloseRequest,AddCloseRequest)",
        "(runLogBypass,RunLogBypass)",
        "(addRequestTimeout,AddRequestTimeout)",
        "(runCommandsListener,RunCommandsListener)",
        "(debug,JsDebug)",
        "(checkSocketPath,CheckSocketPath)"
      ],
      "Charon": []
    },
    "xrtlibrary-ip-utilities": {
      "Gasket": [
        "(parseIPv6,parse_ipv6)",
        "(parseIPv4,parse_ipv4)",
        "(stringifyIPv6,stringify_ipv6)",
        "(stringifyIPv4,stringify_ipv4)"
      ],
      "Charon": []
    },
    "x-semaphore": {
      "Gasket": [
        "(semget,_method_semget)",
        "(semop,_method_semop)"
      ],
      "Charon": []
    },
    "xtcpforwarder": {
      "Gasket": [
        "(getOriginalDestinationV6,get_original_destination_v6)",
        "(getOriginalDestination,get_original_destination)"
      ],
      "Charon": []
    },
    "xxhash-addon": {
      "Gasket": [
        "(XXHash128,create_instance)",
        "(update,update)",
        "(XXHash64,create_instance)",
        "(XXHash3,create_instance)",
        "(reset,reset)",
        "(XXHash32,create_instance)",
        "(hash,hash)",
        "(digest,digest)"
      ],
      "Charon": []
    },
    "xz": {
      "Gasket": [
        "(Engine,Engine)",
        "(close,Close)",
        "(process,Process)"
      ],
      "Charon": [
        "(MODE_ENCODE,Number)",
        "(MODE_DECODE,Number)",
        "(ENCODE_FINISH,Number)"
      ]
    },
    "@y2zz/sharp": {
      "Gasket": [
        "(counters,counters)",
        "(format,format)",
        "(pipeline,pipeline)",
        "(_maxColourDistance,_maxColourDistance)",
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(libvipsVersion,libvipsVersion)",
        "(cache,cache)",
        "(stats,stats)",
        "(concurrency,concurrency)",
        "(simd,simd)",
        "(metadata,metadata)"
      ],
      "Charon": [
        "(background,background)",
        "(metadata,metadata)",
        "(pipeline,pipeline)",
        "(cache,cache)",
        "(concurrency,concurrency)",
        "(counters,counters)",
        "(simd,simd)",
        "(libvipsVersion,libvipsVersion)",
        "(format,format)",
        "(_maxColourDistance,_maxColourDistance)",
        "(_isUsingJemalloc,_isUsingJemalloc)",
        "(stats,stats)"
      ]
    },
    "@yaguara/dd-trace": {
      "Gasket": [
        "(stop,stop)",
        "(stats,stats)",
        "(finish,finish)",
        "(start,start)",
        "(track,track)"
      ],
      "Charon": []
    },
    "@yaming116/node-memwatch": {
      "Gasket": [
        "(HeapDiff,New)",
        "(end,End)",
        "(gc,trigger_gc)",
        "(upon_gc,upon_gc)"
      ],
      "Charon": [
        "(end,End)"
      ]
    },
    "@yang8guang/npm-test100": {
      "Gasket": [
        "(hello,Method)"
      ],
      "Charon": []
    },
    "@ycanince/bluetooth-hci-socket": {
      "Gasket": [
        "(BluetoothHciSocket,New)",
        "(bindRaw,BindRaw)",
        "(start,Start)",
        "(getDeviceList,GetDeviceList)",
        "(stop,Stop)",
        "(setFilter,SetFilter)",
        "(write,Write)",
        "(isDevUp,IsDevUp)",
        "(bindUser,BindUser)",
        "(bindControl,BindControl)"
      ],
      "Charon": [
        "(start,Start)",
        "(bindRaw,BindRaw)",
        "(bindUser,BindUser)",
        "(bindControl,BindControl)",
        "(isDevUp,IsDevUp)",
        "(getDeviceList,GetDeviceList)",
        "(setFilter,SetFilter)",
        "(stop,Stop)",
        "(write,Write)"
      ]
    },
    "@ycanince/sqlite3": {
      "Gasket": [
        "(wait,Wait)",
        "(all,All)",
        "(finish,Finish)",
        "(Database,New)",
        "(finalize,Finalize)",
        "(get,Get)",
        "(parallelize,Parallelize)",
        "(serialize,Serialize)",
        "(Backup,New)",
        "(loadExtension,LoadExtension)",
        "(reset,Reset)",
        "(close,Close)",
        "(each,Each)",
        "(configure,Configure)",
        "(run,Run)",
        "(Statement,New)",
        "(step,Step)",
        "(exec,Exec)",
        "(bind,Bind)",
        "(interrupt,Interrupt)"
      ],
      "Charon": [
        "(step,Step)",
        "(finish,Finish)",
        "(idle,IdleGetter)",
        "(completed,CompletedGetter)",
        "(failed,FailedGetter)",
        "(remaining,RemainingGetter)",
        "(pageCount,PageCountGetter)",
        "(close,Close)",
        "(exec,Exec)",
        "(wait,Wait)",
        "(loadExtension,LoadExtension)",
        "(serialize,Serialize)",
        "(parallelize,Parallelize)",
        "(configure,Configure)",
        "(interrupt,Interrupt)",
        "(open,OpenGetter)",
        "(bind,Bind)",
        "(get,Get)",
        "(run,Run)",
        "(all,All)",
        "(each,Each)",
        "(reset,Reset)",
        "(finalize,Finalize)"
      ]
    },
    "yencode": {
      "Gasket": [
        "(decode,Decode)",
        "(encode,Encode)",
        "(encodeIncr,EncodeIncr)",
        "(encodeTo,EncodeTo)",
        "(crc32_multiply,CRC32Multiply)",
        "(crc32_combine,CRC32Combine)",
        "(crc32,CRC32)",
        "(crc32_shift,CRC32Shift)",
        "(decodeIncr,DecodeIncr)",
        "(decodeTo,DecodeTo)",
        "(crc32_zeroes,CRC32Zeroes)"
      ],
      "Charon": [
        "(encode,Encode)",
        "(encodeTo,EncodeTo)",
        "(encodeIncr,EncodeIncr)",
        "(decode,Decode)",
        "(decodeTo,DecodeTo)",
        "(decodeIncr,DecodeIncr)",
        "(crc32,CRC32)",
        "(crc32_combine,CRC32Combine)",
        "(crc32_zeroes,CRC32Zeroes)",
        "(crc32_multiply,CRC32Multiply)",
        "(crc32_shift,CRC32Shift)"
      ]
    },
    "@yosiat/stack-frames": {
      "Gasket": [
        "(getAt,stackFrames_GetAt)"
      ],
      "Charon": [
        "(file_name,scriptName)",
        "(getAt,stackFrames_GetAt)"
      ]
    },
    "yrp": {
      "Gasket": [
        "(getHeaderInformation,getHeaderInformation)",
        "(getDecks,getDecks)",
        "(getParameters,getParameters)",
        "(getPlayerNames,getPlayerNames)",
        "(getScriptName,getScriptName)",
        "(Replay,Replay)"
      ],
      "Charon": [
        "(id,Number)",
        "(version,Number)",
        "(flag,Number)",
        "(seed,Number)",
        "(dataSize,Number)",
        "(hash,Number)",
        "(startLP,Number)",
        "(startHand,Number)",
        "(drawCount,Number)",
        "(duelFlags,Number)"
      ]
    },
    "@ytsteven2/robotjs": {
      "Gasket": [
        "(getMousePos,getMousePos)",
        "(mouseToggle,mouseToggle)",
        "(setMouseDelay,setMouseDelay)",
        "(dragMouse,dragMouse)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(typeStringDelayed,typeStringDelayed)",
        "(captureScreen,captureScreen)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(mouseClick,mouseClick)",
        "(setXDisplayName,setXDisplayName)",
        "(keyTap,keyTap)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(moveMouse,moveMouse)",
        "(scrollMouse,scrollMouse)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(typeString,typeString)",
        "(keyToggle,keyToggle)",
        "(getXDisplayName,getXDisplayName)",
        "(getColor,getColor)",
        "(unicodeTap,unicodeTap)"
      ],
      "Charon": [
        "(dragMouse,dragMouse)",
        "(updateScreenMetrics,updateScreenMetrics)",
        "(moveMouse,moveMouse)",
        "(moveMouseSmooth,moveMouseSmooth)",
        "(getMousePos,getMousePos)",
        "(mouseClick,mouseClick)",
        "(mouseToggle,mouseToggle)",
        "(scrollMouse,scrollMouse)",
        "(setMouseDelay,setMouseDelay)",
        "(keyTap,keyTap)",
        "(keyToggle,keyToggle)",
        "(unicodeTap,unicodeTap)",
        "(typeString,typeString)",
        "(typeStringDelayed,typeStringDelayed)",
        "(setKeyboardDelay,setKeyboardDelay)",
        "(getPixelColor,getPixelColor)",
        "(getScreenSize,getScreenSize)",
        "(captureScreen,captureScreen)",
        "(getColor,getColor)",
        "(getXDisplayName,getXDisplayName)",
        "(setXDisplayName,setXDisplayName)"
      ]
    },
    "zadeh": {
      "Gasket": [
        "(filter,filter)",
        "(setArrayFiltererCandidates,setArrayFiltererCandidates)",
        "(filterIndices,filterIndices)",
        "(match,match)",
        "(score,score)",
        "(wrap,wrap)",
        "(Zadeh,ZadehNode)",
        "(setTreeFiltererCandidates,setTreeFiltererCandidates)",
        "(filterIndicesTree,filterIndicesTree)",
        "(filterTree,filterTree)"
      ],
      "Charon": []
    },
    "zentcash-crypto": {
      "Gasket": [
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(derivePublicKey,derivePublicKey)",
        "(completeRingSignatures,completeRingSignatures)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(generatePartialSigningKey,generatePartialSigningKey)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(checkKey,checkKey)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(generateKeys,generateKeys)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(checkSignature,checkSignature)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(prepareRingSignatures,prepareRingSignatures)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(calculateSharedPublicKey,calculateSharedPublicKey)",
        "(scReduce32,scReduce32)",
        "(cnFastHash,cn_fast_hash)",
        "(calculateSharedPrivateKey,calculateSharedPrivateKey)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(tree_branch,tree_branch)",
        "(underivePublicKey,underivePublicKey)",
        "(generateSignature,generateSignature)",
        "(hashToScalar,hashToScalar)",
        "(tree_hash,tree_hash)",
        "(generateKeyImage,generateKeyImage)",
        "(deriveSecretKey,deriveSecretKey)",
        "(restoreRingSignatures,restoreRingSignatures)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(tree_depth,tree_depth)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(restoreKeyImage,restoreKeyImage)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(generateRingSignatures,generateRingSignatures)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(cn_fast_hash,cn_fast_hash)",
        "(chukwa_slow_hash,chukwa_slow_hash)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(calculateMultisigPrivateKeys,calculateMultisigPrivateKeys)",
        "(scalarmultKey,scalarmultKey)",
        "(checkRingSignature,checkRingSignature)",
        "(generateKeyDerivation,generateKeyDerivation)"
      ],
      "Charon": [
        "(calculateMultisigPrivateKeys,calculateMultisigPrivateKeys)",
        "(calculateSharedPrivateKey,calculateSharedPrivateKey)",
        "(calculateSharedPublicKey,calculateSharedPublicKey)",
        "(generatePartialSigningKey,generatePartialSigningKey)",
        "(prepareRingSignatures,prepareRingSignatures)",
        "(completeRingSignatures,completeRingSignatures)",
        "(restoreRingSignatures,restoreRingSignatures)",
        "(restoreKeyImage,restoreKeyImage)",
        "(checkKey,checkKey)",
        "(checkRingSignature,checkRingSignature)",
        "(checkSignature,checkSignature)",
        "(derivePublicKey,derivePublicKey)",
        "(deriveSecretKey,deriveSecretKey)",
        "(generateKeys,generateKeys)",
        "(generateKeyDerivation,generateKeyDerivation)",
        "(generateKeyImage,generateKeyImage)",
        "(generatePrivateViewKeyFromPrivateSpendKey,generatePrivateViewKeyFromPrivateSpendKey)",
        "(generateDeterministicSubwalletKeys,generateDeterministicSubwalletKeys)",
        "(generateViewKeysFromPrivateSpendKey,generateViewKeysFromPrivateSpendKey)",
        "(generateRingSignatures,generateRingSignatures)",
        "(generateSignature,generateSignature)",
        "(hashToEllipticCurve,hashToEllipticCurve)",
        "(hashToScalar,hashToScalar)",
        "(scalarmultKey,scalarmultKey)",
        "(scReduce32,scReduce32)",
        "(secretKeyToPublicKey,secretKeyToPublicKey)",
        "(tree_depth,tree_depth)",
        "(tree_hash,tree_hash)",
        "(tree_branch,tree_branch)",
        "(tree_hash_from_branch,tree_hash_from_branch)",
        "(underivePublicKey,underivePublicKey)",
        "(cnFastHash,cn_fast_hash)",
        "(cn_fast_hash,cn_fast_hash)",
        "(cn_slow_hash_v0,cn_slow_hash_v0)",
        "(cn_slow_hash_v1,cn_slow_hash_v1)",
        "(cn_slow_hash_v2,cn_slow_hash_v2)",
        "(cn_lite_slow_hash_v0,cn_lite_slow_hash_v0)",
        "(cn_lite_slow_hash_v1,cn_lite_slow_hash_v1)",
        "(cn_lite_slow_hash_v2,cn_lite_slow_hash_v2)",
        "(cn_dark_slow_hash_v0,cn_dark_slow_hash_v0)",
        "(cn_dark_slow_hash_v1,cn_dark_slow_hash_v1)",
        "(cn_dark_slow_hash_v2,cn_dark_slow_hash_v2)",
        "(cn_dark_lite_slow_hash_v0,cn_dark_lite_slow_hash_v0)",
        "(cn_dark_lite_slow_hash_v1,cn_dark_lite_slow_hash_v1)",
        "(cn_dark_lite_slow_hash_v2,cn_dark_lite_slow_hash_v2)",
        "(cn_turtle_slow_hash_v0,cn_turtle_slow_hash_v0)",
        "(cn_turtle_slow_hash_v1,cn_turtle_slow_hash_v1)",
        "(cn_turtle_slow_hash_v2,cn_turtle_slow_hash_v2)",
        "(cn_turtle_lite_slow_hash_v0,cn_turtle_lite_slow_hash_v0)",
        "(cn_turtle_lite_slow_hash_v1,cn_turtle_lite_slow_hash_v1)",
        "(cn_turtle_lite_slow_hash_v2,cn_turtle_lite_slow_hash_v2)",
        "(chukwa_slow_hash,chukwa_slow_hash)"
      ]
    },
    "zlib-organic": {
      "Gasket": [
        "(reset,Reset)",
        "(process,Process)",
        "(close,Close)",
        "(Engine,Engine)"
      ],
      "Charon": [
        "(ZLIB_VERSION,String)",
        "(ZLIB_VERNUM,Number)",
        "(ZLIB_VER_MAJOR,Number)",
        "(ZLIB_VER_MINOR,Number)",
        "(ZLIB_VER_REVISION,Number)",
        "(ZLIB_VER_SUBREVISION,Number)",
        "(Z_NO_FLUSH,Number)",
        "(Z_PARTIAL_FLUSH,Number)",
        "(Z_SYNC_FLUSH,Number)",
        "(Z_FULL_FLUSH,Number)",
        "(Z_FINISH,Number)",
        "(Z_BLOCK,Number)",
        "(Z_TREES,Number)",
        "(MODE_ENCODE,Number)",
        "(MODE_DECODE,Number)"
      ]
    },
    "zlib-sync": {
      "Gasket": [
        "(Inflate,New)",
        "(push,Push)"
      ],
      "Charon": [
        "(push,Push)",
        "(chunkSize,GetChunkSize)",
        "(err,GetErr)",
        "(msg,GetMsg)",
        "(result,GetResult)",
        "(windowBits,GetWindowBits)"
      ]
    },
    "zookeeper": {
      "Gasket": [
        "(a_exists,AExists)",
        "(aw_get_children2,AWGetChildren2)",
        "(a_get,AGet)",
        "(a_getconfig,AGetConfig)",
        "(ZooKeeper,New)",
        "(a_get_children,AGetChildren)",
        "(set_servers,SetServers)",
        "(init,Init)",
        "(a_delete_,ADelete)",
        "(a_set,ASet)",
        "(aw_exists,AWExists)",
        "(a_get_children2,AGetChildren2)",
        "(close,Close)",
        "(aw_get,AWGet)",
        "(a_get_acl,AGetAcl)",
        "(a_set_acl,ASetAcl)",
        "(add_auth,AddAuth)",
        "(a_reconfig,AReconfig)",
        "(a_sync,ASync)",
        "(a_create,ACreate)",
        "(aw_getconfig,AWGetConfig)",
        "(aw_get_children,AWGetChildren)",
        "(a_create_ttl,ACreateTtl)"
      ],
      "Charon": [
        "(init,Init)",
        "(close,Close)",
        "(a_create,ACreate)",
        "(a_create_ttl,ACreateTtl)",
        "(a_exists,AExists)",
        "(aw_exists,AWExists)",
        "(a_get,AGet)",
        "(aw_get,AWGet)",
        "(a_get_children,AGetChildren)",
        "(aw_get_children,AWGetChildren)",
        "(a_get_children2,AGetChildren2)",
        "(aw_get_children2,AWGetChildren2)",
        "(a_set,ASet)",
        "(a_delete_,ADelete)",
        "(a_get_acl,AGetAcl)",
        "(a_set_acl,ASetAcl)",
        "(add_auth,AddAuth)",
        "(a_sync,ASync)",
        "(a_getconfig,AGetConfig)",
        "(aw_getconfig,AWGetConfig)",
        "(set_servers,SetServers)",
        "(a_reconfig,AReconfig)",
        "(toStrTest,toStrTest)",
        "(convertUnixTimeToDateTest,convertUnixTimeToDateTest)",
        "(toBoolTest,toBoolTest)",
        "(toIntTest,toIntTest)",
        "(toUintTest,toUintTest)"
      ]
    },
    "zucc": {
      "Gasket": [
        "(DecompressStream,DecompressStream)",
        "(decompress,Decompress)"
      ],
      "Charon": []
    }
  }
}